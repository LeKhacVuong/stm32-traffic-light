
traffic_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009be4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08009cf0  08009cf0  00019cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fa0  08009fa0  00020390  2**0
                  CONTENTS
  4 .ARM          00000000  08009fa0  08009fa0  00020390  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009fa0  08009fa0  00020390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fa0  08009fa0  00019fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fa4  08009fa4  00019fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000390  20000000  08009fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001384  20000390  0800a338  00020390  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001714  0800a338  00021714  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203b9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a5ae  00000000  00000000  000203fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000539f  00000000  00000000  0004a9aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c58  00000000  00000000  0004fd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001858  00000000  00000000  000519a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cfc3  00000000  00000000  00053200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c93b  00000000  00000000  000701c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ab3c  00000000  00000000  0009cafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005674  00000000  00000000  0013763c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000137fc  00000000  00000000  0013ccb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001504ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000390 	.word	0x20000390
 8000128:	00000000 	.word	0x00000000
 800012c:	08009cd8 	.word	0x08009cd8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000394 	.word	0x20000394
 8000148:	08009cd8 	.word	0x08009cd8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__aeabi_d2iz>:
 80008f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000900:	d215      	bcs.n	800092e <__aeabi_d2iz+0x36>
 8000902:	d511      	bpl.n	8000928 <__aeabi_d2iz+0x30>
 8000904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800090c:	d912      	bls.n	8000934 <__aeabi_d2iz+0x3c>
 800090e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	bf18      	it	ne
 8000924:	4240      	negne	r0, r0
 8000926:	4770      	bx	lr
 8000928:	f04f 0000 	mov.w	r0, #0
 800092c:	4770      	bx	lr
 800092e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000932:	d105      	bne.n	8000940 <__aeabi_d2iz+0x48>
 8000934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000938:	bf08      	it	eq
 800093a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800093e:	4770      	bx	lr
 8000940:	f04f 0000 	mov.w	r0, #0
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800094c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	2400      	movs	r4, #0
 8000950:	9404      	str	r4, [sp, #16]
 8000952:	9405      	str	r4, [sp, #20]
 8000954:	9406      	str	r4, [sp, #24]
 8000956:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000958:	4b20      	ldr	r3, [pc, #128]	; (80009dc <MX_GPIO_Init+0x94>)
 800095a:	699a      	ldr	r2, [r3, #24]
 800095c:	f042 0220 	orr.w	r2, r2, #32
 8000960:	619a      	str	r2, [r3, #24]
 8000962:	699a      	ldr	r2, [r3, #24]
 8000964:	f002 0220 	and.w	r2, r2, #32
 8000968:	9201      	str	r2, [sp, #4]
 800096a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	699a      	ldr	r2, [r3, #24]
 800096e:	f042 0204 	orr.w	r2, r2, #4
 8000972:	619a      	str	r2, [r3, #24]
 8000974:	699a      	ldr	r2, [r3, #24]
 8000976:	f002 0204 	and.w	r2, r2, #4
 800097a:	9202      	str	r2, [sp, #8]
 800097c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	699a      	ldr	r2, [r3, #24]
 8000980:	f042 0208 	orr.w	r2, r2, #8
 8000984:	619a      	str	r2, [r3, #24]
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0308 	and.w	r3, r3, #8
 800098c:	9303      	str	r3, [sp, #12]
 800098e:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPS_RST_Pin|SPI1_SS_Pin, GPIO_PIN_RESET);
 8000990:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80009e0 <MX_GPIO_Init+0x98>
 8000994:	4622      	mov	r2, r4
 8000996:	2112      	movs	r1, #18
 8000998:	4640      	mov	r0, r8
 800099a:	f000 ff57 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CTRL_LED_WRN_Pin|EPS_RST_Pin|ESP_BOOT_Pin|LORA_RST_Pin
 800099e:	4d11      	ldr	r5, [pc, #68]	; (80009e4 <MX_GPIO_Init+0x9c>)
 80009a0:	4622      	mov	r2, r4
 80009a2:	f24f 213a 	movw	r1, #62010	; 0xf23a
 80009a6:	4628      	mov	r0, r5
 80009a8:	f000 ff50 	bl	800184c <HAL_GPIO_WritePin>
                          |LORA_BOOT_Pin|CTRL_LED_RED_Pin|CTRL_LED_YELLOW_Pin|CTRL_LED_GREEN_Pin
                          |LTE_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : GPS_RST_Pin SPI1_SS_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin|SPI1_SS_Pin;
 80009ac:	2312      	movs	r3, #18
 80009ae:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2701      	movs	r7, #1
 80009b2:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2602      	movs	r6, #2
 80009b8:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	a904      	add	r1, sp, #16
 80009bc:	4640      	mov	r0, r8
 80009be:	f000 fe33 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : CTRL_LED_WRN_Pin EPS_RST_Pin ESP_BOOT_Pin LORA_RST_Pin
                           LORA_BOOT_Pin CTRL_LED_RED_Pin CTRL_LED_YELLOW_Pin CTRL_LED_GREEN_Pin
                           LTE_RST_Pin */
  GPIO_InitStruct.Pin = CTRL_LED_WRN_Pin|EPS_RST_Pin|ESP_BOOT_Pin|LORA_RST_Pin
 80009c2:	f24f 233a 	movw	r3, #62010	; 0xf23a
 80009c6:	9304      	str	r3, [sp, #16]
                          |LORA_BOOT_Pin|CTRL_LED_RED_Pin|CTRL_LED_YELLOW_Pin|CTRL_LED_GREEN_Pin
                          |LTE_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	a904      	add	r1, sp, #16
 80009d0:	4628      	mov	r0, r5
 80009d2:	f000 fe29 	bl	8001628 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d6:	b008      	add	sp, #32
 80009d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40010800 	.word	0x40010800
 80009e4:	40010c00 	.word	0x40010c00

080009e8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ea:	e7fe      	b.n	80009ea <Error_Handler+0x2>

080009ec <MX_ADC1_Init>:
{
 80009ec:	b500      	push	{lr}
 80009ee:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80009f0:	2300      	movs	r3, #0
 80009f2:	9301      	str	r3, [sp, #4]
 80009f4:	9302      	str	r3, [sp, #8]
 80009f6:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 80009f8:	4810      	ldr	r0, [pc, #64]	; (8000a3c <MX_ADC1_Init+0x50>)
 80009fa:	4a11      	ldr	r2, [pc, #68]	; (8000a40 <MX_ADC1_Init+0x54>)
 80009fc:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009fe:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a00:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a02:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a04:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a08:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a0a:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a10:	f000 fca6 	bl	8001360 <HAL_ADC_Init>
 8000a14:	b968      	cbnz	r0, 8000a32 <MX_ADC1_Init+0x46>
  sConfig.Channel = ADC_CHANNEL_8;
 8000a16:	2308      	movs	r3, #8
 8000a18:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000a1e:	2307      	movs	r3, #7
 8000a20:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a22:	a901      	add	r1, sp, #4
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_ADC1_Init+0x50>)
 8000a26:	f000 fbcf 	bl	80011c8 <HAL_ADC_ConfigChannel>
 8000a2a:	b920      	cbnz	r0, 8000a36 <MX_ADC1_Init+0x4a>
}
 8000a2c:	b005      	add	sp, #20
 8000a2e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000a32:	f7ff ffd9 	bl	80009e8 <Error_Handler>
    Error_Handler();
 8000a36:	f7ff ffd7 	bl	80009e8 <Error_Handler>
 8000a3a:	bf00      	nop
 8000a3c:	200003ac 	.word	0x200003ac
 8000a40:	40012400 	.word	0x40012400

08000a44 <MX_I2C1_Init>:
{
 8000a44:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8000a46:	480a      	ldr	r0, [pc, #40]	; (8000a70 <MX_I2C1_Init+0x2c>)
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <MX_I2C1_Init+0x30>)
 8000a4a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <MX_I2C1_Init+0x34>)
 8000a4e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a50:	2300      	movs	r3, #0
 8000a52:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a54:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a5a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a5c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a5e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a60:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a62:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a64:	f001 f8e2 	bl	8001c2c <HAL_I2C_Init>
 8000a68:	b900      	cbnz	r0, 8000a6c <MX_I2C1_Init+0x28>
}
 8000a6a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a6c:	f7ff ffbc 	bl	80009e8 <Error_Handler>
 8000a70:	200003dc 	.word	0x200003dc
 8000a74:	40005400 	.word	0x40005400
 8000a78:	000186a0 	.word	0x000186a0

08000a7c <MX_SPI1_Init>:
{
 8000a7c:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8000a7e:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_SPI1_Init+0x38>)
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <MX_SPI1_Init+0x3c>)
 8000a82:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a84:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000a88:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a8e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a90:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a92:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a98:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a9a:	2210      	movs	r2, #16
 8000a9c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a9e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aa0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000aa4:	230a      	movs	r3, #10
 8000aa6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aa8:	f003 fc66 	bl	8004378 <HAL_SPI_Init>
 8000aac:	b900      	cbnz	r0, 8000ab0 <MX_SPI1_Init+0x34>
}
 8000aae:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ab0:	f7ff ff9a 	bl	80009e8 <Error_Handler>
 8000ab4:	20000430 	.word	0x20000430
 8000ab8:	40013000 	.word	0x40013000

08000abc <MX_TIM2_Init>:
{
 8000abc:	b500      	push	{lr}
 8000abe:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	9302      	str	r3, [sp, #8]
 8000ac4:	9303      	str	r3, [sp, #12]
 8000ac6:	9304      	str	r3, [sp, #16]
 8000ac8:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	9301      	str	r3, [sp, #4]
  htim2.Instance = TIM2;
 8000ace:	4814      	ldr	r0, [pc, #80]	; (8000b20 <MX_TIM2_Init+0x64>)
 8000ad0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad4:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 71;
 8000ad6:	2247      	movs	r2, #71	; 0x47
 8000ad8:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ada:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 999;
 8000adc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ae0:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ae8:	f004 f920 	bl	8004d2c <HAL_TIM_Base_Init>
 8000aec:	b990      	cbnz	r0, 8000b14 <MX_TIM2_Init+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af2:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000af4:	a902      	add	r1, sp, #8
 8000af6:	480a      	ldr	r0, [pc, #40]	; (8000b20 <MX_TIM2_Init+0x64>)
 8000af8:	f004 f950 	bl	8004d9c <HAL_TIM_ConfigClockSource>
 8000afc:	b960      	cbnz	r0, 8000b18 <MX_TIM2_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afe:	2300      	movs	r3, #0
 8000b00:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b02:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b04:	4669      	mov	r1, sp
 8000b06:	4806      	ldr	r0, [pc, #24]	; (8000b20 <MX_TIM2_Init+0x64>)
 8000b08:	f004 f9c8 	bl	8004e9c <HAL_TIMEx_MasterConfigSynchronization>
 8000b0c:	b930      	cbnz	r0, 8000b1c <MX_TIM2_Init+0x60>
}
 8000b0e:	b007      	add	sp, #28
 8000b10:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000b14:	f7ff ff68 	bl	80009e8 <Error_Handler>
    Error_Handler();
 8000b18:	f7ff ff66 	bl	80009e8 <Error_Handler>
    Error_Handler();
 8000b1c:	f7ff ff64 	bl	80009e8 <Error_Handler>
 8000b20:	20000488 	.word	0x20000488

08000b24 <MX_USART1_UART_Init>:
{
 8000b24:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000b26:	480a      	ldr	r0, [pc, #40]	; (8000b50 <MX_USART1_UART_Init+0x2c>)
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_USART1_UART_Init+0x30>)
 8000b2a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000b2c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b30:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	2300      	movs	r3, #0
 8000b34:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b36:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b38:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b42:	f004 fa8b 	bl	800505c <HAL_UART_Init>
 8000b46:	b900      	cbnz	r0, 8000b4a <MX_USART1_UART_Init+0x26>
}
 8000b48:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b4a:	f7ff ff4d 	bl	80009e8 <Error_Handler>
 8000b4e:	bf00      	nop
 8000b50:	200004d0 	.word	0x200004d0
 8000b54:	40013800 	.word	0x40013800

08000b58 <MX_USART2_UART_Init>:
{
 8000b58:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <MX_USART2_UART_Init+0x2c>)
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_USART2_UART_Init+0x30>)
 8000b5e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000b60:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b64:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	2300      	movs	r3, #0
 8000b68:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b6a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b6c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b6e:	220c      	movs	r2, #12
 8000b70:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b76:	f004 fa71 	bl	800505c <HAL_UART_Init>
 8000b7a:	b900      	cbnz	r0, 8000b7e <MX_USART2_UART_Init+0x26>
}
 8000b7c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b7e:	f7ff ff33 	bl	80009e8 <Error_Handler>
 8000b82:	bf00      	nop
 8000b84:	20000518 	.word	0x20000518
 8000b88:	40004400 	.word	0x40004400

08000b8c <MX_USART3_UART_Init>:
{
 8000b8c:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8000b8e:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <MX_USART3_UART_Init+0x2c>)
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <MX_USART3_UART_Init+0x30>)
 8000b92:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000b94:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b98:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b9e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ba0:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000baa:	f004 fa57 	bl	800505c <HAL_UART_Init>
 8000bae:	b900      	cbnz	r0, 8000bb2 <MX_USART3_UART_Init+0x26>
}
 8000bb0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000bb2:	f7ff ff19 	bl	80009e8 <Error_Handler>
 8000bb6:	bf00      	nop
 8000bb8:	20000560 	.word	0x20000560
 8000bbc:	40004800 	.word	0x40004800

08000bc0 <SystemClock_Config>:
{
 8000bc0:	b500      	push	{lr}
 8000bc2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc4:	2228      	movs	r2, #40	; 0x28
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	eb0d 0002 	add.w	r0, sp, r2
 8000bcc:	f008 fc9e 	bl	800950c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	9305      	str	r3, [sp, #20]
 8000bd4:	9306      	str	r3, [sp, #24]
 8000bd6:	9307      	str	r3, [sp, #28]
 8000bd8:	9308      	str	r3, [sp, #32]
 8000bda:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bdc:	9301      	str	r3, [sp, #4]
 8000bde:	9302      	str	r3, [sp, #8]
 8000be0:	9303      	str	r3, [sp, #12]
 8000be2:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be4:	2201      	movs	r2, #1
 8000be6:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bec:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bee:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bf6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bfa:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfc:	a80a      	add	r0, sp, #40	; 0x28
 8000bfe:	f002 ff5d 	bl	8003abc <HAL_RCC_OscConfig>
 8000c02:	b9d8      	cbnz	r0, 8000c3c <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c04:	230f      	movs	r3, #15
 8000c06:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c08:	2102      	movs	r1, #2
 8000c0a:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c14:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c16:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c18:	a805      	add	r0, sp, #20
 8000c1a:	f003 f981 	bl	8003f20 <HAL_RCC_ClockConfig>
 8000c1e:	b978      	cbnz	r0, 8000c40 <SystemClock_Config+0x80>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000c20:	2312      	movs	r3, #18
 8000c22:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c28:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2e:	a801      	add	r0, sp, #4
 8000c30:	f003 fa52 	bl	80040d8 <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	b930      	cbnz	r0, 8000c44 <SystemClock_Config+0x84>
}
 8000c36:	b015      	add	sp, #84	; 0x54
 8000c38:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000c3c:	f7ff fed4 	bl	80009e8 <Error_Handler>
    Error_Handler();
 8000c40:	f7ff fed2 	bl	80009e8 <Error_Handler>
    Error_Handler();
 8000c44:	f7ff fed0 	bl	80009e8 <Error_Handler>

08000c48 <main>:
{
 8000c48:	b508      	push	{r3, lr}
  HAL_Init();
 8000c4a:	f000 fa85 	bl	8001158 <HAL_Init>
  SystemClock_Config();
 8000c4e:	f7ff ffb7 	bl	8000bc0 <SystemClock_Config>
  MX_GPIO_Init();
 8000c52:	f7ff fe79 	bl	8000948 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c56:	f7ff fec9 	bl	80009ec <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c5a:	f7ff fef3 	bl	8000a44 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c5e:	f7ff ff0d 	bl	8000a7c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000c62:	f7ff ff2b 	bl	8000abc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000c66:	f7ff ff5d 	bl	8000b24 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c6a:	f7ff ff75 	bl	8000b58 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000c6e:	f7ff ff8d 	bl	8000b8c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000c72:	f006 f9ef 	bl	8007054 <MX_USB_DEVICE_Init>
  main_app();
 8000c76:	f008 f951 	bl	8008f1c <main_app>
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <main+0x32>

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_MspInit+0x3c>)
 8000c80:	699a      	ldr	r2, [r3, #24]
 8000c82:	f042 0201 	orr.w	r2, r2, #1
 8000c86:	619a      	str	r2, [r3, #24]
 8000c88:	699a      	ldr	r2, [r3, #24]
 8000c8a:	f002 0201 	and.w	r2, r2, #1
 8000c8e:	9200      	str	r2, [sp, #0]
 8000c90:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	69da      	ldr	r2, [r3, #28]
 8000c94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c98:	61da      	str	r2, [r3, #28]
 8000c9a:	69db      	ldr	r3, [r3, #28]
 8000c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ca4:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <HAL_MspInit+0x40>)
 8000ca6:	6853      	ldr	r3, [r2, #4]
 8000ca8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	b002      	add	sp, #8
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010000 	.word	0x40010000

08000cc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc0:	b500      	push	{lr}
 8000cc2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	9302      	str	r3, [sp, #8]
 8000cc8:	9303      	str	r3, [sp, #12]
 8000cca:	9304      	str	r3, [sp, #16]
 8000ccc:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8000cce:	6802      	ldr	r2, [r0, #0]
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_ADC_MspInit+0x58>)
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d002      	beq.n	8000cdc <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cd6:	b007      	add	sp, #28
 8000cd8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cdc:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8000ce0:	699a      	ldr	r2, [r3, #24]
 8000ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ce6:	619a      	str	r2, [r3, #24]
 8000ce8:	699a      	ldr	r2, [r3, #24]
 8000cea:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000cee:	9200      	str	r2, [sp, #0]
 8000cf0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	699a      	ldr	r2, [r3, #24]
 8000cf4:	f042 0208 	orr.w	r2, r2, #8
 8000cf8:	619a      	str	r2, [r3, #24]
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0308 	and.w	r3, r3, #8
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ADC1_IN8_PIN_Pin;
 8000d04:	2301      	movs	r3, #1
 8000d06:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(ADC1_IN8_PIN_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	a902      	add	r1, sp, #8
 8000d0e:	4803      	ldr	r0, [pc, #12]	; (8000d1c <HAL_ADC_MspInit+0x5c>)
 8000d10:	f000 fc8a 	bl	8001628 <HAL_GPIO_Init>
}
 8000d14:	e7df      	b.n	8000cd6 <HAL_ADC_MspInit+0x16>
 8000d16:	bf00      	nop
 8000d18:	40012400 	.word	0x40012400
 8000d1c:	40010c00 	.word	0x40010c00

08000d20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d20:	b510      	push	{r4, lr}
 8000d22:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	2300      	movs	r3, #0
 8000d26:	9302      	str	r3, [sp, #8]
 8000d28:	9303      	str	r3, [sp, #12]
 8000d2a:	9304      	str	r3, [sp, #16]
 8000d2c:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8000d2e:	6802      	ldr	r2, [r0, #0]
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <HAL_I2C_MspInit+0x78>)
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d001      	beq.n	8000d3a <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d36:	b006      	add	sp, #24
 8000d38:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	4c18      	ldr	r4, [pc, #96]	; (8000d9c <HAL_I2C_MspInit+0x7c>)
 8000d3c:	69a3      	ldr	r3, [r4, #24]
 8000d3e:	f043 0308 	orr.w	r3, r3, #8
 8000d42:	61a3      	str	r3, [r4, #24]
 8000d44:	69a3      	ldr	r3, [r4, #24]
 8000d46:	f003 0308 	and.w	r3, r3, #8
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d4e:	23c0      	movs	r3, #192	; 0xc0
 8000d50:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d52:	2312      	movs	r3, #18
 8000d54:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	a902      	add	r1, sp, #8
 8000d5c:	4810      	ldr	r0, [pc, #64]	; (8000da0 <HAL_I2C_MspInit+0x80>)
 8000d5e:	f000 fc63 	bl	8001628 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d62:	69e3      	ldr	r3, [r4, #28]
 8000d64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d68:	61e3      	str	r3, [r4, #28]
 8000d6a:	69e3      	ldr	r3, [r4, #28]
 8000d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	4611      	mov	r1, r2
 8000d78:	201f      	movs	r0, #31
 8000d7a:	f000 fb87 	bl	800148c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d7e:	201f      	movs	r0, #31
 8000d80:	f000 fbbc 	bl	80014fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	4611      	mov	r1, r2
 8000d88:	2020      	movs	r0, #32
 8000d8a:	f000 fb7f 	bl	800148c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d8e:	2020      	movs	r0, #32
 8000d90:	f000 fbb4 	bl	80014fc <HAL_NVIC_EnableIRQ>
}
 8000d94:	e7cf      	b.n	8000d36 <HAL_I2C_MspInit+0x16>
 8000d96:	bf00      	nop
 8000d98:	40005400 	.word	0x40005400
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010c00 	.word	0x40010c00

08000da4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000da4:	b530      	push	{r4, r5, lr}
 8000da6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	2300      	movs	r3, #0
 8000daa:	9302      	str	r3, [sp, #8]
 8000dac:	9303      	str	r3, [sp, #12]
 8000dae:	9304      	str	r3, [sp, #16]
 8000db0:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 8000db2:	6802      	ldr	r2, [r0, #0]
 8000db4:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <HAL_SPI_MspInit+0x7c>)
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d001      	beq.n	8000dbe <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dba:	b007      	add	sp, #28
 8000dbc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dbe:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8000dc2:	699a      	ldr	r2, [r3, #24]
 8000dc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000dc8:	619a      	str	r2, [r3, #24]
 8000dca:	699a      	ldr	r2, [r3, #24]
 8000dcc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000dd0:	9200      	str	r2, [sp, #0]
 8000dd2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	699a      	ldr	r2, [r3, #24]
 8000dd6:	f042 0204 	orr.w	r2, r2, #4
 8000dda:	619a      	str	r2, [r3, #24]
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000de6:	23a0      	movs	r3, #160	; 0xa0
 8000de8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	4d0c      	ldr	r5, [pc, #48]	; (8000e24 <HAL_SPI_MspInit+0x80>)
 8000df4:	a902      	add	r1, sp, #8
 8000df6:	4628      	mov	r0, r5
 8000df8:	f000 fc16 	bl	8001628 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dfc:	2340      	movs	r3, #64	; 0x40
 8000dfe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e00:	2400      	movs	r4, #0
 8000e02:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	a902      	add	r1, sp, #8
 8000e08:	4628      	mov	r0, r5
 8000e0a:	f000 fc0d 	bl	8001628 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000e0e:	4622      	mov	r2, r4
 8000e10:	4621      	mov	r1, r4
 8000e12:	2023      	movs	r0, #35	; 0x23
 8000e14:	f000 fb3a 	bl	800148c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e18:	2023      	movs	r0, #35	; 0x23
 8000e1a:	f000 fb6f 	bl	80014fc <HAL_NVIC_EnableIRQ>
}
 8000e1e:	e7cc      	b.n	8000dba <HAL_SPI_MspInit+0x16>
 8000e20:	40013000 	.word	0x40013000
 8000e24:	40010800 	.word	0x40010800

08000e28 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8000e28:	6803      	ldr	r3, [r0, #0]
 8000e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e2e:	d000      	beq.n	8000e32 <HAL_TIM_Base_MspInit+0xa>
 8000e30:	4770      	bx	lr
{
 8000e32:	b500      	push	{lr}
 8000e34:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e36:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000e3a:	69da      	ldr	r2, [r3, #28]
 8000e3c:	f042 0201 	orr.w	r2, r2, #1
 8000e40:	61da      	str	r2, [r3, #28]
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	9301      	str	r3, [sp, #4]
 8000e4a:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	4611      	mov	r1, r2
 8000e50:	201c      	movs	r0, #28
 8000e52:	f000 fb1b 	bl	800148c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e56:	201c      	movs	r0, #28
 8000e58:	f000 fb50 	bl	80014fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e5c:	b003      	add	sp, #12
 8000e5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	2300      	movs	r3, #0
 8000e6a:	9306      	str	r3, [sp, #24]
 8000e6c:	9307      	str	r3, [sp, #28]
 8000e6e:	9308      	str	r3, [sp, #32]
 8000e70:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8000e72:	6803      	ldr	r3, [r0, #0]
 8000e74:	4a4f      	ldr	r2, [pc, #316]	; (8000fb4 <HAL_UART_MspInit+0x150>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d007      	beq.n	8000e8a <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8000e7a:	4a4f      	ldr	r2, [pc, #316]	; (8000fb8 <HAL_UART_MspInit+0x154>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d036      	beq.n	8000eee <HAL_UART_MspInit+0x8a>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8000e80:	4a4e      	ldr	r2, [pc, #312]	; (8000fbc <HAL_UART_MspInit+0x158>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d063      	beq.n	8000f4e <HAL_UART_MspInit+0xea>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e86:	b00b      	add	sp, #44	; 0x2c
 8000e88:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e8a:	4b4d      	ldr	r3, [pc, #308]	; (8000fc0 <HAL_UART_MspInit+0x15c>)
 8000e8c:	699a      	ldr	r2, [r3, #24]
 8000e8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e92:	619a      	str	r2, [r3, #24]
 8000e94:	699a      	ldr	r2, [r3, #24]
 8000e96:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000e9a:	9200      	str	r2, [sp, #0]
 8000e9c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	699a      	ldr	r2, [r3, #24]
 8000ea0:	f042 0204 	orr.w	r2, r2, #4
 8000ea4:	619a      	str	r2, [r3, #24]
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = EPS_TX_Pin;
 8000eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(EPS_TX_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	4d41      	ldr	r5, [pc, #260]	; (8000fc4 <HAL_UART_MspInit+0x160>)
 8000ec0:	a906      	add	r1, sp, #24
 8000ec2:	4628      	mov	r0, r5
 8000ec4:	f000 fbb0 	bl	8001628 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ESP_RX_Pin;
 8000ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ecc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ece:	2400      	movs	r4, #0
 8000ed0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(ESP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	a906      	add	r1, sp, #24
 8000ed6:	4628      	mov	r0, r5
 8000ed8:	f000 fba6 	bl	8001628 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000edc:	4622      	mov	r2, r4
 8000ede:	4621      	mov	r1, r4
 8000ee0:	2025      	movs	r0, #37	; 0x25
 8000ee2:	f000 fad3 	bl	800148c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ee6:	2025      	movs	r0, #37	; 0x25
 8000ee8:	f000 fb08 	bl	80014fc <HAL_NVIC_EnableIRQ>
 8000eec:	e7cb      	b.n	8000e86 <HAL_UART_MspInit+0x22>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eee:	4b34      	ldr	r3, [pc, #208]	; (8000fc0 <HAL_UART_MspInit+0x15c>)
 8000ef0:	69da      	ldr	r2, [r3, #28]
 8000ef2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ef6:	61da      	str	r2, [r3, #28]
 8000ef8:	69da      	ldr	r2, [r3, #28]
 8000efa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000efe:	9202      	str	r2, [sp, #8]
 8000f00:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	699a      	ldr	r2, [r3, #24]
 8000f04:	f042 0204 	orr.w	r2, r2, #4
 8000f08:	619a      	str	r2, [r3, #24]
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	9303      	str	r3, [sp, #12]
 8000f12:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8000f14:	2304      	movs	r3, #4
 8000f16:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8000f20:	4d28      	ldr	r5, [pc, #160]	; (8000fc4 <HAL_UART_MspInit+0x160>)
 8000f22:	a906      	add	r1, sp, #24
 8000f24:	4628      	mov	r0, r5
 8000f26:	f000 fb7f 	bl	8001628 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	2400      	movs	r4, #0
 8000f30:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 8000f34:	a906      	add	r1, sp, #24
 8000f36:	4628      	mov	r0, r5
 8000f38:	f000 fb76 	bl	8001628 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f3c:	4622      	mov	r2, r4
 8000f3e:	4621      	mov	r1, r4
 8000f40:	2026      	movs	r0, #38	; 0x26
 8000f42:	f000 faa3 	bl	800148c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f46:	2026      	movs	r0, #38	; 0x26
 8000f48:	f000 fad8 	bl	80014fc <HAL_NVIC_EnableIRQ>
 8000f4c:	e79b      	b.n	8000e86 <HAL_UART_MspInit+0x22>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <HAL_UART_MspInit+0x15c>)
 8000f50:	69da      	ldr	r2, [r3, #28]
 8000f52:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f56:	61da      	str	r2, [r3, #28]
 8000f58:	69da      	ldr	r2, [r3, #28]
 8000f5a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000f5e:	9204      	str	r2, [sp, #16]
 8000f60:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	699a      	ldr	r2, [r3, #24]
 8000f64:	f042 0208 	orr.w	r2, r2, #8
 8000f68:	619a      	str	r2, [r3, #24]
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0308 	and.w	r3, r3, #8
 8000f70:	9305      	str	r3, [sp, #20]
 8000f72:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = LTE_TX_Pin;
 8000f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f78:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(LTE_TX_GPIO_Port, &GPIO_InitStruct);
 8000f82:	4d11      	ldr	r5, [pc, #68]	; (8000fc8 <HAL_UART_MspInit+0x164>)
 8000f84:	a906      	add	r1, sp, #24
 8000f86:	4628      	mov	r0, r5
 8000f88:	f000 fb4e 	bl	8001628 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LTE_RX_Pin;
 8000f8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f90:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f92:	2400      	movs	r4, #0
 8000f94:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(LTE_RX_GPIO_Port, &GPIO_InitStruct);
 8000f98:	a906      	add	r1, sp, #24
 8000f9a:	4628      	mov	r0, r5
 8000f9c:	f000 fb44 	bl	8001628 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fa0:	4622      	mov	r2, r4
 8000fa2:	4621      	mov	r1, r4
 8000fa4:	2027      	movs	r0, #39	; 0x27
 8000fa6:	f000 fa71 	bl	800148c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000faa:	2027      	movs	r0, #39	; 0x27
 8000fac:	f000 faa6 	bl	80014fc <HAL_NVIC_EnableIRQ>
}
 8000fb0:	e769      	b.n	8000e86 <HAL_UART_MspInit+0x22>
 8000fb2:	bf00      	nop
 8000fb4:	40013800 	.word	0x40013800
 8000fb8:	40004400 	.word	0x40004400
 8000fbc:	40004800 	.word	0x40004800
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010800 	.word	0x40010800
 8000fc8:	40010c00 	.word	0x40010c00

08000fcc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fcc:	e7fe      	b.n	8000fcc <NMI_Handler>

08000fce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler>

08000fd0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler>

08000fd2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <BusFault_Handler>

08000fd4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler>

08000fd6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd6:	4770      	bx	lr

08000fd8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fda:	4770      	bx	lr

08000fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fdc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fde:	f000 f8cd 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe2:	bd08      	pop	{r3, pc}

08000fe4 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000fe4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fe6:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <USB_HP_CAN1_TX_IRQHandler+0xc>)
 8000fe8:	f002 fb1b 	bl	8003622 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000fec:	bd08      	pop	{r3, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000e78 	.word	0x20000e78

08000ff4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ff4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ff6:	4802      	ldr	r0, [pc, #8]	; (8001000 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8000ff8:	f002 fb13 	bl	8003622 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ffc:	bd08      	pop	{r3, pc}
 8000ffe:	bf00      	nop
 8001000:	20000e78 	.word	0x20000e78

08001004 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001004:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001006:	4802      	ldr	r0, [pc, #8]	; (8001010 <TIM2_IRQHandler+0xc>)
 8001008:	f003 fd9f 	bl	8004b4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800100c:	bd08      	pop	{r3, pc}
 800100e:	bf00      	nop
 8001010:	20000488 	.word	0x20000488

08001014 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001014:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001016:	4802      	ldr	r0, [pc, #8]	; (8001020 <I2C1_EV_IRQHandler+0xc>)
 8001018:	f001 fbea 	bl	80027f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800101c:	bd08      	pop	{r3, pc}
 800101e:	bf00      	nop
 8001020:	200003dc 	.word	0x200003dc

08001024 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001024:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001026:	4802      	ldr	r0, [pc, #8]	; (8001030 <I2C1_ER_IRQHandler+0xc>)
 8001028:	f001 fcb2 	bl	8002990 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800102c:	bd08      	pop	{r3, pc}
 800102e:	bf00      	nop
 8001030:	200003dc 	.word	0x200003dc

08001034 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001034:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001036:	4802      	ldr	r0, [pc, #8]	; (8001040 <SPI1_IRQHandler+0xc>)
 8001038:	f003 fcca 	bl	80049d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800103c:	bd08      	pop	{r3, pc}
 800103e:	bf00      	nop
 8001040:	20000430 	.word	0x20000430

08001044 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001044:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001046:	4802      	ldr	r0, [pc, #8]	; (8001050 <USART1_IRQHandler+0xc>)
 8001048:	f004 f8c4 	bl	80051d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800104c:	bd08      	pop	{r3, pc}
 800104e:	bf00      	nop
 8001050:	200004d0 	.word	0x200004d0

08001054 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001054:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001056:	4802      	ldr	r0, [pc, #8]	; (8001060 <USART2_IRQHandler+0xc>)
 8001058:	f004 f8bc 	bl	80051d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800105c:	bd08      	pop	{r3, pc}
 800105e:	bf00      	nop
 8001060:	20000518 	.word	0x20000518

08001064 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001064:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001066:	4802      	ldr	r0, [pc, #8]	; (8001070 <USART3_IRQHandler+0xc>)
 8001068:	f004 f8b4 	bl	80051d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800106c:	bd08      	pop	{r3, pc}
 800106e:	bf00      	nop
 8001070:	20000560 	.word	0x20000560

08001074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001074:	b510      	push	{r4, lr}
 8001076:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001078:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <_sbrk+0x38>)
 800107a:	490d      	ldr	r1, [pc, #52]	; (80010b0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <_sbrk+0x40>)
 800107e:	6800      	ldr	r0, [r0, #0]
 8001080:	b140      	cbz	r0, 8001094 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001082:	480c      	ldr	r0, [pc, #48]	; (80010b4 <_sbrk+0x40>)
 8001084:	6800      	ldr	r0, [r0, #0]
 8001086:	4403      	add	r3, r0
 8001088:	1a52      	subs	r2, r2, r1
 800108a:	4293      	cmp	r3, r2
 800108c:	d806      	bhi.n	800109c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800108e:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <_sbrk+0x40>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001092:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001094:	4807      	ldr	r0, [pc, #28]	; (80010b4 <_sbrk+0x40>)
 8001096:	4c08      	ldr	r4, [pc, #32]	; (80010b8 <_sbrk+0x44>)
 8001098:	6004      	str	r4, [r0, #0]
 800109a:	e7f2      	b.n	8001082 <_sbrk+0xe>
    errno = ENOMEM;
 800109c:	f008 fa4e 	bl	800953c <__errno>
 80010a0:	230c      	movs	r3, #12
 80010a2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010a8:	e7f3      	b.n	8001092 <_sbrk+0x1e>
 80010aa:	bf00      	nop
 80010ac:	20005000 	.word	0x20005000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	200005a8 	.word	0x200005a8
 80010b8:	20001718 	.word	0x20001718

080010bc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	4770      	bx	lr
	...

080010c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c0:	f7ff fffc 	bl	80010bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480b      	ldr	r0, [pc, #44]	; (80010f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010c6:	490c      	ldr	r1, [pc, #48]	; (80010f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010c8:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a09      	ldr	r2, [pc, #36]	; (8001100 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010dc:	4c09      	ldr	r4, [pc, #36]	; (8001104 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ea:	f008 fa2d 	bl	8009548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ee:	f7ff fdab 	bl	8000c48 <main>
  bx lr
 80010f2:	4770      	bx	lr
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	20000390 	.word	0x20000390
  ldr r2, =_sidata
 80010fc:	08009fa8 	.word	0x08009fa8
  ldr r2, =_sbss
 8001100:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 8001104:	20001714 	.word	0x20001714

08001108 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC1_2_IRQHandler>
	...

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b510      	push	{r4, lr}
 800110e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_InitTick+0x40>)
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001118:	fbb3 f3f2 	udiv	r3, r3, r2
 800111c:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <HAL_InitTick+0x44>)
 800111e:	6810      	ldr	r0, [r2, #0]
 8001120:	fbb0 f0f3 	udiv	r0, r0, r3
 8001124:	f000 f9f8 	bl	8001518 <HAL_SYSTICK_Config>
 8001128:	b968      	cbnz	r0, 8001146 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	2c0f      	cmp	r4, #15
 800112c:	d901      	bls.n	8001132 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800112e:	2001      	movs	r0, #1
 8001130:	e00a      	b.n	8001148 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001132:	2200      	movs	r2, #0
 8001134:	4621      	mov	r1, r4
 8001136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800113a:	f000 f9a7 	bl	800148c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_InitTick+0x48>)
 8001140:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2000      	movs	r0, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001146:	2001      	movs	r0, #1
}
 8001148:	bd10      	pop	{r4, pc}
 800114a:	bf00      	nop
 800114c:	20000004 	.word	0x20000004
 8001150:	20000000 	.word	0x20000000
 8001154:	20000008 	.word	0x20000008

08001158 <HAL_Init>:
{
 8001158:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800115a:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_Init+0x20>)
 800115c:	6813      	ldr	r3, [r2, #0]
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 f97f 	bl	8001468 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800116a:	2002      	movs	r0, #2
 800116c:	f7ff ffce 	bl	800110c <HAL_InitTick>
  HAL_MspInit();
 8001170:	f7ff fd84 	bl	8000c7c <HAL_MspInit>
}
 8001174:	2000      	movs	r0, #0
 8001176:	bd08      	pop	{r3, pc}
 8001178:	40022000 	.word	0x40022000

0800117c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800117c:	4a03      	ldr	r2, [pc, #12]	; (800118c <HAL_IncTick+0x10>)
 800117e:	6811      	ldr	r1, [r2, #0]
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <HAL_IncTick+0x14>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	440b      	add	r3, r1
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	200005ac 	.word	0x200005ac
 8001190:	20000004 	.word	0x20000004

08001194 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001194:	4b01      	ldr	r3, [pc, #4]	; (800119c <HAL_GetTick+0x8>)
 8001196:	6818      	ldr	r0, [r3, #0]
}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	200005ac 	.word	0x200005ac

080011a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b538      	push	{r3, r4, r5, lr}
 80011a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff fff6 	bl	8001194 <HAL_GetTick>
 80011a8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80011ae:	d002      	beq.n	80011b6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <HAL_Delay+0x24>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011b6:	f7ff ffed 	bl	8001194 <HAL_GetTick>
 80011ba:	1b40      	subs	r0, r0, r5
 80011bc:	42a0      	cmp	r0, r4
 80011be:	d3fa      	bcc.n	80011b6 <HAL_Delay+0x16>
  {
  }
}
 80011c0:	bd38      	pop	{r3, r4, r5, pc}
 80011c2:	bf00      	nop
 80011c4:	20000004 	.word	0x20000004

080011c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011c8:	b430      	push	{r4, r5}
 80011ca:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80011cc:	2200      	movs	r2, #0
 80011ce:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011d0:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80011d4:	2a01      	cmp	r2, #1
 80011d6:	f000 808f 	beq.w	80012f8 <HAL_ADC_ConfigChannel+0x130>
 80011da:	4603      	mov	r3, r0
 80011dc:	2201      	movs	r2, #1
 80011de:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011e2:	684a      	ldr	r2, [r1, #4]
 80011e4:	2a06      	cmp	r2, #6
 80011e6:	d82d      	bhi.n	8001244 <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011e8:	6804      	ldr	r4, [r0, #0]
 80011ea:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80011ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80011f0:	3a05      	subs	r2, #5
 80011f2:	f04f 0c1f 	mov.w	ip, #31
 80011f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80011fa:	ea20 000c 	bic.w	r0, r0, ip
 80011fe:	680d      	ldr	r5, [r1, #0]
 8001200:	fa05 f202 	lsl.w	r2, r5, r2
 8001204:	4302      	orrs	r2, r0
 8001206:	6362      	str	r2, [r4, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001208:	680a      	ldr	r2, [r1, #0]
 800120a:	2a09      	cmp	r2, #9
 800120c:	d938      	bls.n	8001280 <HAL_ADC_ConfigChannel+0xb8>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800120e:	681c      	ldr	r4, [r3, #0]
 8001210:	68e0      	ldr	r0, [r4, #12]
 8001212:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001216:	3a1e      	subs	r2, #30
 8001218:	f04f 0c07 	mov.w	ip, #7
 800121c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001220:	ea20 000c 	bic.w	r0, r0, ip
 8001224:	688d      	ldr	r5, [r1, #8]
 8001226:	fa05 f202 	lsl.w	r2, r5, r2
 800122a:	4302      	orrs	r2, r0
 800122c:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800122e:	680a      	ldr	r2, [r1, #0]
 8001230:	3a10      	subs	r2, #16
 8001232:	2a01      	cmp	r2, #1
 8001234:	d934      	bls.n	80012a0 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001236:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800123e:	b002      	add	sp, #8
 8001240:	bc30      	pop	{r4, r5}
 8001242:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8001244:	2a0c      	cmp	r2, #12
 8001246:	d80d      	bhi.n	8001264 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001248:	6805      	ldr	r5, [r0, #0]
 800124a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800124c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001250:	3a23      	subs	r2, #35	; 0x23
 8001252:	241f      	movs	r4, #31
 8001254:	4094      	lsls	r4, r2
 8001256:	ea20 0004 	bic.w	r0, r0, r4
 800125a:	680c      	ldr	r4, [r1, #0]
 800125c:	4094      	lsls	r4, r2
 800125e:	4320      	orrs	r0, r4
 8001260:	6328      	str	r0, [r5, #48]	; 0x30
 8001262:	e7d1      	b.n	8001208 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001264:	6805      	ldr	r5, [r0, #0]
 8001266:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001268:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800126c:	3a41      	subs	r2, #65	; 0x41
 800126e:	241f      	movs	r4, #31
 8001270:	4094      	lsls	r4, r2
 8001272:	ea20 0004 	bic.w	r0, r0, r4
 8001276:	680c      	ldr	r4, [r1, #0]
 8001278:	4094      	lsls	r4, r2
 800127a:	4320      	orrs	r0, r4
 800127c:	62e8      	str	r0, [r5, #44]	; 0x2c
 800127e:	e7c3      	b.n	8001208 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001280:	681c      	ldr	r4, [r3, #0]
 8001282:	6920      	ldr	r0, [r4, #16]
 8001284:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001288:	f04f 0c07 	mov.w	ip, #7
 800128c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001290:	ea20 000c 	bic.w	r0, r0, ip
 8001294:	688d      	ldr	r5, [r1, #8]
 8001296:	fa05 f202 	lsl.w	r2, r5, r2
 800129a:	4302      	orrs	r2, r0
 800129c:	6122      	str	r2, [r4, #16]
 800129e:	e7c6      	b.n	800122e <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4816      	ldr	r0, [pc, #88]	; (80012fc <HAL_ADC_ConfigChannel+0x134>)
 80012a4:	4282      	cmp	r2, r0
 80012a6:	d005      	beq.n	80012b4 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012aa:	f042 0220 	orr.w	r2, r2, #32
 80012ae:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80012b0:	2001      	movs	r0, #1
 80012b2:	e7c1      	b.n	8001238 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012b4:	6890      	ldr	r0, [r2, #8]
 80012b6:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80012ba:	d11b      	bne.n	80012f4 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012bc:	6890      	ldr	r0, [r2, #8]
 80012be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80012c2:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012c4:	680a      	ldr	r2, [r1, #0]
 80012c6:	2a10      	cmp	r2, #16
 80012c8:	d001      	beq.n	80012ce <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ca:	2000      	movs	r0, #0
 80012cc:	e7b4      	b.n	8001238 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012ce:	4a0c      	ldr	r2, [pc, #48]	; (8001300 <HAL_ADC_ConfigChannel+0x138>)
 80012d0:	6812      	ldr	r2, [r2, #0]
 80012d2:	490c      	ldr	r1, [pc, #48]	; (8001304 <HAL_ADC_ConfigChannel+0x13c>)
 80012d4:	fba1 1202 	umull	r1, r2, r1, r2
 80012d8:	0c92      	lsrs	r2, r2, #18
 80012da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80012de:	0052      	lsls	r2, r2, #1
 80012e0:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80012e2:	e002      	b.n	80012ea <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 80012e4:	9a01      	ldr	r2, [sp, #4]
 80012e6:	3a01      	subs	r2, #1
 80012e8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80012ea:	9a01      	ldr	r2, [sp, #4]
 80012ec:	2a00      	cmp	r2, #0
 80012ee:	d1f9      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f0:	2000      	movs	r0, #0
 80012f2:	e7a1      	b.n	8001238 <HAL_ADC_ConfigChannel+0x70>
 80012f4:	2000      	movs	r0, #0
 80012f6:	e79f      	b.n	8001238 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80012f8:	2002      	movs	r0, #2
 80012fa:	e7a0      	b.n	800123e <HAL_ADC_ConfigChannel+0x76>
 80012fc:	40012400 	.word	0x40012400
 8001300:	20000000 	.word	0x20000000
 8001304:	431bde83 	.word	0x431bde83

08001308 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001308:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800130a:	6803      	ldr	r3, [r0, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	f012 0f01 	tst.w	r2, #1
 8001312:	d101      	bne.n	8001318 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001314:	2000      	movs	r0, #0
}
 8001316:	bd38      	pop	{r3, r4, r5, pc}
 8001318:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	f022 0201 	bic.w	r2, r2, #1
 8001320:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001322:	f7ff ff37 	bl	8001194 <HAL_GetTick>
 8001326:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f013 0f01 	tst.w	r3, #1
 8001330:	d013      	beq.n	800135a <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001332:	f7ff ff2f 	bl	8001194 <HAL_GetTick>
 8001336:	1b43      	subs	r3, r0, r5
 8001338:	2b02      	cmp	r3, #2
 800133a:	d9f5      	bls.n	8001328 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f013 0f01 	tst.w	r3, #1
 8001344:	d0f0      	beq.n	8001328 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001346:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001348:	f043 0310 	orr.w	r3, r3, #16
 800134c:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800134e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001356:	2001      	movs	r0, #1
 8001358:	e7dd      	b.n	8001316 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 800135a:	2000      	movs	r0, #0
 800135c:	e7db      	b.n	8001316 <ADC_ConversionStop_Disable+0xe>
	...

08001360 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001360:	2800      	cmp	r0, #0
 8001362:	d07b      	beq.n	800145c <HAL_ADC_Init+0xfc>
{
 8001364:	b570      	push	{r4, r5, r6, lr}
 8001366:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001368:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800136a:	2b00      	cmp	r3, #0
 800136c:	d04d      	beq.n	800140a <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800136e:	4620      	mov	r0, r4
 8001370:	f7ff ffca 	bl	8001308 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001374:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001376:	f013 0310 	ands.w	r3, r3, #16
 800137a:	d169      	bne.n	8001450 <HAL_ADC_Init+0xf0>
 800137c:	2800      	cmp	r0, #0
 800137e:	d167      	bne.n	8001450 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8001380:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001382:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001386:	f022 0202 	bic.w	r2, r2, #2
 800138a:	f042 0202 	orr.w	r2, r2, #2
 800138e:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001390:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001392:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001394:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001396:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001398:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800139c:	68a5      	ldr	r5, [r4, #8]
 800139e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80013a2:	d002      	beq.n	80013aa <HAL_ADC_Init+0x4a>
 80013a4:	2d01      	cmp	r5, #1
 80013a6:	d036      	beq.n	8001416 <HAL_ADC_Init+0xb6>
 80013a8:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013aa:	7d26      	ldrb	r6, [r4, #20]
 80013ac:	2e01      	cmp	r6, #1
 80013ae:	d035      	beq.n	800141c <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 80013b0:	6826      	ldr	r6, [r4, #0]
 80013b2:	6871      	ldr	r1, [r6, #4]
 80013b4:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 80013b8:	4329      	orrs	r1, r5
 80013ba:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80013bc:	6825      	ldr	r5, [r4, #0]
 80013be:	68ae      	ldr	r6, [r5, #8]
 80013c0:	4927      	ldr	r1, [pc, #156]	; (8001460 <HAL_ADC_Init+0x100>)
 80013c2:	4031      	ands	r1, r6
 80013c4:	4311      	orrs	r1, r2
 80013c6:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80013c8:	68a1      	ldr	r1, [r4, #8]
 80013ca:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80013ce:	d001      	beq.n	80013d4 <HAL_ADC_Init+0x74>
 80013d0:	2901      	cmp	r1, #1
 80013d2:	d102      	bne.n	80013da <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80013d4:	6923      	ldr	r3, [r4, #16]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80013da:	6825      	ldr	r5, [r4, #0]
 80013dc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80013de:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 80013e2:	430b      	orrs	r3, r1
 80013e4:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	6899      	ldr	r1, [r3, #8]
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <HAL_ADC_Init+0x104>)
 80013ec:	400b      	ands	r3, r1
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d025      	beq.n	800143e <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 80013f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013f4:	f023 0312 	bic.w	r3, r3, #18
 80013f8:	f043 0310 	orr.w	r3, r3, #16
 80013fc:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8001406:	2001      	movs	r0, #1
 8001408:	e027      	b.n	800145a <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 800140a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800140c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001410:	f7ff fc56 	bl	8000cc0 <HAL_ADC_MspInit>
 8001414:	e7ab      	b.n	800136e <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001416:	f44f 7580 	mov.w	r5, #256	; 0x100
 800141a:	e7c6      	b.n	80013aa <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800141c:	b931      	cbnz	r1, 800142c <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800141e:	69a1      	ldr	r1, [r4, #24]
 8001420:	3901      	subs	r1, #1
 8001422:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8001426:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 800142a:	e7c1      	b.n	80013b0 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800142c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800142e:	f041 0120 	orr.w	r1, r1, #32
 8001432:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001434:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001436:	f041 0101 	orr.w	r1, r1, #1
 800143a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800143c:	e7b8      	b.n	80013b0 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 800143e:	2300      	movs	r3, #0
 8001440:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001442:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001444:	f023 0303 	bic.w	r3, r3, #3
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	62a3      	str	r3, [r4, #40]	; 0x28
 800144e:	e004      	b.n	800145a <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001450:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001458:	2001      	movs	r0, #1
}
 800145a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800145c:	2001      	movs	r0, #1
}
 800145e:	4770      	bx	lr
 8001460:	ffe1f7fd 	.word	0xffe1f7fd
 8001464:	ff1f0efe 	.word	0xff1f0efe

08001468 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800146a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001470:	041b      	lsls	r3, r3, #16
 8001472:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001474:	0200      	lsls	r0, r0, #8
 8001476:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800147a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800147c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001484:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_NVIC_SetPriority+0x68>)
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001496:	f1c3 0c07 	rsb	ip, r3, #7
 800149a:	f1bc 0f04 	cmp.w	ip, #4
 800149e:	bf28      	it	cs
 80014a0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a4:	f103 0e04 	add.w	lr, r3, #4
 80014a8:	f1be 0f06 	cmp.w	lr, #6
 80014ac:	d918      	bls.n	80014e0 <HAL_NVIC_SetPriority+0x54>
 80014ae:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80014b4:	fa0e fc0c 	lsl.w	ip, lr, ip
 80014b8:	ea21 010c 	bic.w	r1, r1, ip
 80014bc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014be:	fa0e fe03 	lsl.w	lr, lr, r3
 80014c2:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c6:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80014c8:	2800      	cmp	r0, #0
 80014ca:	db0b      	blt.n	80014e4 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80014d4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80014d8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80014dc:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e0:	2300      	movs	r3, #0
 80014e2:	e7e5      	b.n	80014b0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e4:	f000 000f 	and.w	r0, r0, #15
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	4b02      	ldr	r3, [pc, #8]	; (80014f8 <HAL_NVIC_SetPriority+0x6c>)
 80014ee:	541a      	strb	r2, [r3, r0]
 80014f0:	e7f4      	b.n	80014dc <HAL_NVIC_SetPriority+0x50>
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00
 80014f8:	e000ed14 	.word	0xe000ed14

080014fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80014fc:	2800      	cmp	r0, #0
 80014fe:	db07      	blt.n	8001510 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001500:	f000 021f 	and.w	r2, r0, #31
 8001504:	0940      	lsrs	r0, r0, #5
 8001506:	2301      	movs	r3, #1
 8001508:	4093      	lsls	r3, r2
 800150a:	4a02      	ldr	r2, [pc, #8]	; (8001514 <HAL_NVIC_EnableIRQ+0x18>)
 800150c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001518:	3801      	subs	r0, #1
 800151a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800151e:	d20b      	bcs.n	8001538 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001520:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001524:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <HAL_SYSTICK_Config+0x24>)
 8001528:	21f0      	movs	r1, #240	; 0xf0
 800152a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800152e:	2000      	movs	r0, #0
 8001530:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001532:	2207      	movs	r2, #7
 8001534:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001536:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001538:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001540:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001542:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	2a02      	cmp	r2, #2
 800154a:	d006      	beq.n	800155a <HAL_DMA_Abort+0x1a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154c:	2204      	movs	r2, #4
 800154e:	6382      	str	r2, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001550:	2200      	movs	r2, #0
 8001552:	f880 2020 	strb.w	r2, [r0, #32]
    
    return HAL_ERROR;
 8001556:	2001      	movs	r0, #1
 8001558:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155a:	6801      	ldr	r1, [r0, #0]
 800155c:	680a      	ldr	r2, [r1, #0]
 800155e:	f022 020e 	bic.w	r2, r2, #14
 8001562:	600a      	str	r2, [r1, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001564:	6801      	ldr	r1, [r0, #0]
 8001566:	680a      	ldr	r2, [r1, #0]
 8001568:	f022 0201 	bic.w	r2, r2, #1
 800156c:	600a      	str	r2, [r1, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800156e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001570:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8001572:	2101      	movs	r1, #1
 8001574:	fa01 f202 	lsl.w	r2, r1, r2
 8001578:	6042      	str	r2, [r0, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800157a:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800157e:	2000      	movs	r0, #0
 8001580:	f883 0020 	strb.w	r0, [r3, #32]
  
  return status; 
}
 8001584:	4770      	bx	lr
	...

08001588 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001588:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800158a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d003      	beq.n	800159c <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001594:	2304      	movs	r3, #4
 8001596:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001598:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800159a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800159c:	6802      	ldr	r2, [r0, #0]
 800159e:	6813      	ldr	r3, [r2, #0]
 80015a0:	f023 030e 	bic.w	r3, r3, #14
 80015a4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80015a6:	6802      	ldr	r2, [r0, #0]
 80015a8:	6813      	ldr	r3, [r2, #0]
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015b0:	6803      	ldr	r3, [r0, #0]
 80015b2:	4a19      	ldr	r2, [pc, #100]	; (8001618 <HAL_DMA_Abort_IT+0x90>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d014      	beq.n	80015e2 <HAL_DMA_Abort_IT+0x5a>
 80015b8:	3214      	adds	r2, #20
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d01f      	beq.n	80015fe <HAL_DMA_Abort_IT+0x76>
 80015be:	3214      	adds	r2, #20
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d01e      	beq.n	8001602 <HAL_DMA_Abort_IT+0x7a>
 80015c4:	3214      	adds	r2, #20
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d01e      	beq.n	8001608 <HAL_DMA_Abort_IT+0x80>
 80015ca:	3214      	adds	r2, #20
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d01e      	beq.n	800160e <HAL_DMA_Abort_IT+0x86>
 80015d0:	3214      	adds	r2, #20
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d002      	beq.n	80015dc <HAL_DMA_Abort_IT+0x54>
 80015d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015da:	e003      	b.n	80015e4 <HAL_DMA_Abort_IT+0x5c>
 80015dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015e0:	e000      	b.n	80015e4 <HAL_DMA_Abort_IT+0x5c>
 80015e2:	2201      	movs	r2, #1
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <HAL_DMA_Abort_IT+0x94>)
 80015e6:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80015e8:	2301      	movs	r3, #1
 80015ea:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80015ee:	2300      	movs	r3, #0
 80015f0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80015f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80015f6:	b16b      	cbz	r3, 8001614 <HAL_DMA_Abort_IT+0x8c>
      hdma->XferAbortCallback(hdma);
 80015f8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80015fa:	2000      	movs	r0, #0
 80015fc:	e7cd      	b.n	800159a <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015fe:	2210      	movs	r2, #16
 8001600:	e7f0      	b.n	80015e4 <HAL_DMA_Abort_IT+0x5c>
 8001602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001606:	e7ed      	b.n	80015e4 <HAL_DMA_Abort_IT+0x5c>
 8001608:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800160c:	e7ea      	b.n	80015e4 <HAL_DMA_Abort_IT+0x5c>
 800160e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001612:	e7e7      	b.n	80015e4 <HAL_DMA_Abort_IT+0x5c>
  HAL_StatusTypeDef status = HAL_OK;
 8001614:	2000      	movs	r0, #0
 8001616:	e7c0      	b.n	800159a <HAL_DMA_Abort_IT+0x12>
 8001618:	40020008 	.word	0x40020008
 800161c:	40020000 	.word	0x40020000

08001620 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8001620:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
}
 8001624:	4770      	bx	lr
	...

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b570      	push	{r4, r5, r6, lr}
 800162a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800162c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800162e:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001630:	e0a6      	b.n	8001780 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001632:	4d80      	ldr	r5, [pc, #512]	; (8001834 <HAL_GPIO_Init+0x20c>)
 8001634:	42ab      	cmp	r3, r5
 8001636:	d010      	beq.n	800165a <HAL_GPIO_Init+0x32>
 8001638:	d907      	bls.n	800164a <HAL_GPIO_Init+0x22>
 800163a:	4d7f      	ldr	r5, [pc, #508]	; (8001838 <HAL_GPIO_Init+0x210>)
 800163c:	42ab      	cmp	r3, r5
 800163e:	d00c      	beq.n	800165a <HAL_GPIO_Init+0x32>
 8001640:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8001644:	42ab      	cmp	r3, r5
 8001646:	d008      	beq.n	800165a <HAL_GPIO_Init+0x32>
 8001648:	e013      	b.n	8001672 <HAL_GPIO_Init+0x4a>
 800164a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800164e:	42ab      	cmp	r3, r5
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x32>
 8001652:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 8001656:	42ab      	cmp	r3, r5
 8001658:	d107      	bne.n	800166a <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800165a:	688b      	ldr	r3, [r1, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d058      	beq.n	8001712 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001660:	2b01      	cmp	r3, #1
 8001662:	d051      	beq.n	8001708 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001664:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001666:	2408      	movs	r4, #8
 8001668:	e003      	b.n	8001672 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800166a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800166e:	42ab      	cmp	r3, r5
 8001670:	d0f3      	beq.n	800165a <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001672:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8001676:	d84e      	bhi.n	8001716 <HAL_GPIO_Init+0xee>
 8001678:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800167a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800167e:	d84c      	bhi.n	800171a <HAL_GPIO_Init+0xf2>
 8001680:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001684:	6833      	ldr	r3, [r6, #0]
 8001686:	250f      	movs	r5, #15
 8001688:	4095      	lsls	r5, r2
 800168a:	ea23 0305 	bic.w	r3, r3, r5
 800168e:	fa04 f202 	lsl.w	r2, r4, r2
 8001692:	4313      	orrs	r3, r2
 8001694:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001696:	684b      	ldr	r3, [r1, #4]
 8001698:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800169c:	d06e      	beq.n	800177c <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800169e:	4b67      	ldr	r3, [pc, #412]	; (800183c <HAL_GPIO_Init+0x214>)
 80016a0:	699a      	ldr	r2, [r3, #24]
 80016a2:	f042 0201 	orr.w	r2, r2, #1
 80016a6:	619a      	str	r2, [r3, #24]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80016b2:	ea4f 029c 	mov.w	r2, ip, lsr #2
 80016b6:	1c95      	adds	r5, r2, #2
 80016b8:	4b61      	ldr	r3, [pc, #388]	; (8001840 <HAL_GPIO_Init+0x218>)
 80016ba:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016be:	f00c 0503 	and.w	r5, ip, #3
 80016c2:	00ad      	lsls	r5, r5, #2
 80016c4:	230f      	movs	r3, #15
 80016c6:	40ab      	lsls	r3, r5
 80016c8:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016cc:	4b5d      	ldr	r3, [pc, #372]	; (8001844 <HAL_GPIO_Init+0x21c>)
 80016ce:	4298      	cmp	r0, r3
 80016d0:	d029      	beq.n	8001726 <HAL_GPIO_Init+0xfe>
 80016d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016d6:	4298      	cmp	r0, r3
 80016d8:	f000 808e 	beq.w	80017f8 <HAL_GPIO_Init+0x1d0>
 80016dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016e0:	4298      	cmp	r0, r3
 80016e2:	f000 808b 	beq.w	80017fc <HAL_GPIO_Init+0x1d4>
 80016e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016ea:	4298      	cmp	r0, r3
 80016ec:	d019      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
 80016ee:	2304      	movs	r3, #4
 80016f0:	e01a      	b.n	8001728 <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016f2:	68cc      	ldr	r4, [r1, #12]
          break;
 80016f4:	e7bd      	b.n	8001672 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016f6:	68cc      	ldr	r4, [r1, #12]
 80016f8:	3404      	adds	r4, #4
          break;
 80016fa:	e7ba      	b.n	8001672 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016fc:	68cc      	ldr	r4, [r1, #12]
 80016fe:	3408      	adds	r4, #8
          break;
 8001700:	e7b7      	b.n	8001672 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001702:	68cc      	ldr	r4, [r1, #12]
 8001704:	340c      	adds	r4, #12
          break;
 8001706:	e7b4      	b.n	8001672 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8001708:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800170a:	2408      	movs	r4, #8
 800170c:	e7b1      	b.n	8001672 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800170e:	2400      	movs	r4, #0
 8001710:	e7af      	b.n	8001672 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001712:	2404      	movs	r4, #4
 8001714:	e7ad      	b.n	8001672 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001716:	1d06      	adds	r6, r0, #4
 8001718:	e7af      	b.n	800167a <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800171a:	f1ac 0208 	sub.w	r2, ip, #8
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	e7b0      	b.n	8001684 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001722:	2303      	movs	r3, #3
 8001724:	e000      	b.n	8001728 <HAL_GPIO_Init+0x100>
 8001726:	2300      	movs	r3, #0
 8001728:	40ab      	lsls	r3, r5
 800172a:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 800172c:	3202      	adds	r2, #2
 800172e:	4d44      	ldr	r5, [pc, #272]	; (8001840 <HAL_GPIO_Init+0x218>)
 8001730:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001734:	684b      	ldr	r3, [r1, #4]
 8001736:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800173a:	d061      	beq.n	8001800 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800173c:	4a42      	ldr	r2, [pc, #264]	; (8001848 <HAL_GPIO_Init+0x220>)
 800173e:	6893      	ldr	r3, [r2, #8]
 8001740:	ea43 030e 	orr.w	r3, r3, lr
 8001744:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001746:	684b      	ldr	r3, [r1, #4]
 8001748:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800174c:	d05e      	beq.n	800180c <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800174e:	4a3e      	ldr	r2, [pc, #248]	; (8001848 <HAL_GPIO_Init+0x220>)
 8001750:	68d3      	ldr	r3, [r2, #12]
 8001752:	ea43 030e 	orr.w	r3, r3, lr
 8001756:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001758:	684b      	ldr	r3, [r1, #4]
 800175a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800175e:	d05b      	beq.n	8001818 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001760:	4a39      	ldr	r2, [pc, #228]	; (8001848 <HAL_GPIO_Init+0x220>)
 8001762:	6853      	ldr	r3, [r2, #4]
 8001764:	ea43 030e 	orr.w	r3, r3, lr
 8001768:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800176a:	684b      	ldr	r3, [r1, #4]
 800176c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001770:	d058      	beq.n	8001824 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001772:	4a35      	ldr	r2, [pc, #212]	; (8001848 <HAL_GPIO_Init+0x220>)
 8001774:	6813      	ldr	r3, [r2, #0]
 8001776:	ea43 030e 	orr.w	r3, r3, lr
 800177a:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 800177c:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001780:	680b      	ldr	r3, [r1, #0]
 8001782:	fa33 f20c 	lsrs.w	r2, r3, ip
 8001786:	d053      	beq.n	8001830 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8001788:	2201      	movs	r2, #1
 800178a:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178e:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8001792:	ea32 0303 	bics.w	r3, r2, r3
 8001796:	d1f1      	bne.n	800177c <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8001798:	684b      	ldr	r3, [r1, #4]
 800179a:	2b12      	cmp	r3, #18
 800179c:	f63f af49 	bhi.w	8001632 <HAL_GPIO_Init+0xa>
 80017a0:	2b12      	cmp	r3, #18
 80017a2:	f63f af66 	bhi.w	8001672 <HAL_GPIO_Init+0x4a>
 80017a6:	a501      	add	r5, pc, #4	; (adr r5, 80017ac <HAL_GPIO_Init+0x184>)
 80017a8:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 80017ac:	0800165b 	.word	0x0800165b
 80017b0:	080016f3 	.word	0x080016f3
 80017b4:	080016fd 	.word	0x080016fd
 80017b8:	0800170f 	.word	0x0800170f
 80017bc:	08001673 	.word	0x08001673
 80017c0:	08001673 	.word	0x08001673
 80017c4:	08001673 	.word	0x08001673
 80017c8:	08001673 	.word	0x08001673
 80017cc:	08001673 	.word	0x08001673
 80017d0:	08001673 	.word	0x08001673
 80017d4:	08001673 	.word	0x08001673
 80017d8:	08001673 	.word	0x08001673
 80017dc:	08001673 	.word	0x08001673
 80017e0:	08001673 	.word	0x08001673
 80017e4:	08001673 	.word	0x08001673
 80017e8:	08001673 	.word	0x08001673
 80017ec:	08001673 	.word	0x08001673
 80017f0:	080016f7 	.word	0x080016f7
 80017f4:	08001703 	.word	0x08001703
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017f8:	2301      	movs	r3, #1
 80017fa:	e795      	b.n	8001728 <HAL_GPIO_Init+0x100>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e793      	b.n	8001728 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001800:	4a11      	ldr	r2, [pc, #68]	; (8001848 <HAL_GPIO_Init+0x220>)
 8001802:	6893      	ldr	r3, [r2, #8]
 8001804:	ea23 030e 	bic.w	r3, r3, lr
 8001808:	6093      	str	r3, [r2, #8]
 800180a:	e79c      	b.n	8001746 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800180c:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_GPIO_Init+0x220>)
 800180e:	68d3      	ldr	r3, [r2, #12]
 8001810:	ea23 030e 	bic.w	r3, r3, lr
 8001814:	60d3      	str	r3, [r2, #12]
 8001816:	e79f      	b.n	8001758 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001818:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <HAL_GPIO_Init+0x220>)
 800181a:	6853      	ldr	r3, [r2, #4]
 800181c:	ea23 030e 	bic.w	r3, r3, lr
 8001820:	6053      	str	r3, [r2, #4]
 8001822:	e7a2      	b.n	800176a <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001824:	4a08      	ldr	r2, [pc, #32]	; (8001848 <HAL_GPIO_Init+0x220>)
 8001826:	6813      	ldr	r3, [r2, #0]
 8001828:	ea23 030e 	bic.w	r3, r3, lr
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e7a5      	b.n	800177c <HAL_GPIO_Init+0x154>
  }
}
 8001830:	b002      	add	sp, #8
 8001832:	bd70      	pop	{r4, r5, r6, pc}
 8001834:	10220000 	.word	0x10220000
 8001838:	10310000 	.word	0x10310000
 800183c:	40021000 	.word	0x40021000
 8001840:	40010000 	.word	0x40010000
 8001844:	40010800 	.word	0x40010800
 8001848:	40010400 	.word	0x40010400

0800184c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800184c:	b10a      	cbz	r2, 8001852 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800184e:	6101      	str	r1, [r0, #16]
 8001850:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001852:	0409      	lsls	r1, r1, #16
 8001854:	6101      	str	r1, [r0, #16]
  }
}
 8001856:	4770      	bx	lr

08001858 <I2C_Flush_DR>:
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001858:	6803      	ldr	r3, [r0, #0]
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001860:	d001      	beq.n	8001866 <I2C_Flush_DR+0xe>
  {
    hi2c->Instance->DR = 0x00U;
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  }
}
 8001866:	4770      	bx	lr

08001868 <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001868:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b40      	cmp	r3, #64	; 0x40
 8001870:	d010      	beq.n	8001894 <I2C_Master_SB+0x2c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001872:	6903      	ldr	r3, [r0, #16]
 8001874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001878:	d01b      	beq.n	80018b2 <I2C_Master_SB+0x4a>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 800187a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800187c:	2b00      	cmp	r3, #0
 800187e:	d139      	bne.n	80018f4 <I2C_Master_SB+0x8c>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001880:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001882:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8001886:	6802      	ldr	r2, [r0, #0]
 8001888:	f003 0306 	and.w	r3, r3, #6
 800188c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001890:	6113      	str	r3, [r2, #16]
 8001892:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 8001894:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001896:	b92b      	cbnz	r3, 80018a4 <I2C_Master_SB+0x3c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001898:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800189a:	6802      	ldr	r2, [r0, #0]
 800189c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80018a0:	6113      	str	r3, [r2, #16]
 80018a2:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80018a4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80018a6:	6802      	ldr	r2, [r0, #0]
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	6113      	str	r3, [r2, #16]
 80018b0:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80018b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b21      	cmp	r3, #33	; 0x21
 80018ba:	d00f      	beq.n	80018dc <I2C_Master_SB+0x74>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80018bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80018be:	6802      	ldr	r2, [r0, #0]
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	6113      	str	r3, [r2, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80018c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80018ca:	b16b      	cbz	r3, 80018e8 <I2C_Master_SB+0x80>
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ce:	b15b      	cbz	r3, 80018e8 <I2C_Master_SB+0x80>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80018d0:	6802      	ldr	r2, [r0, #0]
 80018d2:	6853      	ldr	r3, [r2, #4]
 80018d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d8:	6053      	str	r3, [r2, #4]
 80018da:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80018dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80018de:	6802      	ldr	r2, [r0, #0]
 80018e0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80018e4:	6113      	str	r3, [r2, #16]
 80018e6:	e7ef      	b.n	80018c8 <I2C_Master_SB+0x60>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80018e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80018ea:	b133      	cbz	r3, 80018fa <I2C_Master_SB+0x92>
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1ee      	bne.n	80018d0 <I2C_Master_SB+0x68>
 80018f2:	e002      	b.n	80018fa <I2C_Master_SB+0x92>
      }
      else if (hi2c->EventCount == 1U)
 80018f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d000      	beq.n	80018fc <I2C_Master_SB+0x94>
      {
        /* Do nothing */
      }
    }
  }
}
 80018fa:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80018fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80018fe:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8001902:	6802      	ldr	r2, [r0, #0]
 8001904:	f003 0306 	and.w	r3, r3, #6
 8001908:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 800190c:	6113      	str	r3, [r2, #16]
}
 800190e:	e7f4      	b.n	80018fa <I2C_Master_SB+0x92>

08001910 <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001910:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001912:	6802      	ldr	r2, [r0, #0]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	6113      	str	r3, [r2, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001918:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800191a:	b13b      	cbz	r3, 800192c <I2C_Master_ADD10+0x1c>
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	b12b      	cbz	r3, 800192c <I2C_Master_ADD10+0x1c>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001920:	6802      	ldr	r2, [r0, #0]
 8001922:	6853      	ldr	r3, [r2, #4]
 8001924:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001928:	6053      	str	r3, [r2, #4]
  }
}
 800192a:	4770      	bx	lr
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800192c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0fb      	beq.n	800192a <I2C_Master_ADD10+0x1a>
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1f3      	bne.n	8001920 <I2C_Master_ADD10+0x10>
 8001938:	e7f7      	b.n	800192a <I2C_Master_ADD10+0x1a>
	...

0800193c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800193c:	b410      	push	{r4}
 800193e:	b08d      	sub	sp, #52	; 0x34
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001940:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001944:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001946:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001948:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800194a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b22      	cmp	r3, #34	; 0x22
 8001952:	d00a      	beq.n	800196a <I2C_Master_ADDR+0x2e>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001954:	2300      	movs	r3, #0
 8001956:	930b      	str	r3, [sp, #44]	; 0x2c
 8001958:	6803      	ldr	r3, [r0, #0]
 800195a:	695a      	ldr	r2, [r3, #20]
 800195c:	920b      	str	r2, [sp, #44]	; 0x2c
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	930b      	str	r3, [sp, #44]	; 0x2c
 8001962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  }
}
 8001964:	b00d      	add	sp, #52	; 0x34
 8001966:	bc10      	pop	{r4}
 8001968:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800196a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800196c:	b90b      	cbnz	r3, 8001972 <I2C_Master_ADDR+0x36>
 800196e:	2a40      	cmp	r2, #64	; 0x40
 8001970:	d017      	beq.n	80019a2 <I2C_Master_ADDR+0x66>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001972:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001974:	b91b      	cbnz	r3, 800197e <I2C_Master_ADDR+0x42>
 8001976:	6903      	ldr	r3, [r0, #16]
 8001978:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800197c:	d019      	beq.n	80019b2 <I2C_Master_ADDR+0x76>
      if (hi2c->XferCount == 0U)
 800197e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001980:	b29b      	uxth	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d125      	bne.n	80019d2 <I2C_Master_ADDR+0x96>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001986:	9303      	str	r3, [sp, #12]
 8001988:	6803      	ldr	r3, [r0, #0]
 800198a:	695a      	ldr	r2, [r3, #20]
 800198c:	9203      	str	r2, [sp, #12]
 800198e:	699a      	ldr	r2, [r3, #24]
 8001990:	9203      	str	r2, [sp, #12]
 8001992:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800199a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	6503      	str	r3, [r0, #80]	; 0x50
 80019a0:	e7e0      	b.n	8001964 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	6803      	ldr	r3, [r0, #0]
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	9201      	str	r2, [sp, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	9b01      	ldr	r3, [sp, #4]
 80019b0:	e7d8      	b.n	8001964 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019b2:	2300      	movs	r3, #0
 80019b4:	9302      	str	r3, [sp, #8]
 80019b6:	6803      	ldr	r3, [r0, #0]
 80019b8:	695a      	ldr	r2, [r3, #20]
 80019ba:	9202      	str	r2, [sp, #8]
 80019bc:	699a      	ldr	r2, [r3, #24]
 80019be:	9202      	str	r2, [sp, #8]
 80019c0:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019c8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80019ca:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80019cc:	3301      	adds	r3, #1
 80019ce:	6503      	str	r3, [r0, #80]	; 0x50
 80019d0:	e7c8      	b.n	8001964 <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 80019d2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d01c      	beq.n	8001a14 <I2C_Master_ADDR+0xd8>
      else if (hi2c->XferCount == 2U)
 80019da:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80019dc:	b29b      	uxth	r3, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d073      	beq.n	8001aca <I2C_Master_ADDR+0x18e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019e2:	6802      	ldr	r2, [r0, #0]
 80019e4:	6813      	ldr	r3, [r2, #0]
 80019e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ea:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80019ec:	6803      	ldr	r3, [r0, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80019f4:	f000 80b5 	beq.w	8001b62 <I2C_Master_ADDR+0x226>
 80019f8:	2920      	cmp	r1, #32
 80019fa:	f200 80bb 	bhi.w	8001b74 <I2C_Master_ADDR+0x238>
 80019fe:	2908      	cmp	r1, #8
 8001a00:	f080 80a8 	bcs.w	8001b54 <I2C_Master_ADDR+0x218>
 8001a04:	2901      	cmp	r1, #1
 8001a06:	f040 80ac 	bne.w	8001b62 <I2C_Master_ADDR+0x226>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	e0a6      	b.n	8001b62 <I2C_Master_ADDR+0x226>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001a14:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001a18:	d01a      	beq.n	8001a50 <I2C_Master_ADDR+0x114>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001a1a:	2908      	cmp	r1, #8
 8001a1c:	d03d      	beq.n	8001a9a <I2C_Master_ADDR+0x15e>
 8001a1e:	2920      	cmp	r1, #32
 8001a20:	d03b      	beq.n	8001a9a <I2C_Master_ADDR+0x15e>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001a22:	2c12      	cmp	r4, #18
 8001a24:	d037      	beq.n	8001a96 <I2C_Master_ADDR+0x15a>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001a26:	2910      	cmp	r1, #16
 8001a28:	d804      	bhi.n	8001a34 <I2C_Master_ADDR+0xf8>
 8001a2a:	4b54      	ldr	r3, [pc, #336]	; (8001b7c <I2C_Master_ADDR+0x240>)
 8001a2c:	40cb      	lsrs	r3, r1
 8001a2e:	f013 0f01 	tst.w	r3, #1
 8001a32:	d144      	bne.n	8001abe <I2C_Master_ADDR+0x182>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a34:	6802      	ldr	r2, [r0, #0]
 8001a36:	6813      	ldr	r3, [r2, #0]
 8001a38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a3c:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	9306      	str	r3, [sp, #24]
 8001a42:	6803      	ldr	r3, [r0, #0]
 8001a44:	695a      	ldr	r2, [r3, #20]
 8001a46:	9206      	str	r2, [sp, #24]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	9306      	str	r3, [sp, #24]
 8001a4c:	9b06      	ldr	r3, [sp, #24]
 8001a4e:	e7a5      	b.n	800199c <I2C_Master_ADDR+0x60>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a50:	6802      	ldr	r2, [r0, #0]
 8001a52:	6813      	ldr	r3, [r2, #0]
 8001a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a58:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001a5a:	6803      	ldr	r3, [r0, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001a62:	d00c      	beq.n	8001a7e <I2C_Master_ADDR+0x142>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a6a:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9304      	str	r3, [sp, #16]
 8001a70:	6803      	ldr	r3, [r0, #0]
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	9204      	str	r2, [sp, #16]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	9304      	str	r3, [sp, #16]
 8001a7a:	9b04      	ldr	r3, [sp, #16]
 8001a7c:	e78e      	b.n	800199c <I2C_Master_ADDR+0x60>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	9205      	str	r2, [sp, #20]
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	9205      	str	r2, [sp, #20]
 8001a86:	699a      	ldr	r2, [r3, #24]
 8001a88:	9205      	str	r2, [sp, #20]
 8001a8a:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e782      	b.n	800199c <I2C_Master_ADDR+0x60>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001a96:	2901      	cmp	r1, #1
 8001a98:	d0c5      	beq.n	8001a26 <I2C_Master_ADDR+0xea>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a9a:	6802      	ldr	r2, [r0, #0]
 8001a9c:	6813      	ldr	r3, [r2, #0]
 8001a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001aa2:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	9307      	str	r3, [sp, #28]
 8001aa8:	6803      	ldr	r3, [r0, #0]
 8001aaa:	695a      	ldr	r2, [r3, #20]
 8001aac:	9207      	str	r2, [sp, #28]
 8001aae:	699a      	ldr	r2, [r3, #24]
 8001ab0:	9207      	str	r2, [sp, #28]
 8001ab2:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	e76e      	b.n	800199c <I2C_Master_ADDR+0x60>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001abe:	6802      	ldr	r2, [r0, #0]
 8001ac0:	6813      	ldr	r3, [r2, #0]
 8001ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	e7b9      	b.n	8001a3e <I2C_Master_ADDR+0x102>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001aca:	2910      	cmp	r1, #16
 8001acc:	d804      	bhi.n	8001ad8 <I2C_Master_ADDR+0x19c>
 8001ace:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <I2C_Master_ADDR+0x240>)
 8001ad0:	40cb      	lsrs	r3, r1
 8001ad2:	f013 0f01 	tst.w	r3, #1
 8001ad6:	d122      	bne.n	8001b1e <I2C_Master_ADDR+0x1e2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ad8:	6802      	ldr	r2, [r0, #0]
 8001ada:	6813      	ldr	r3, [r2, #0]
 8001adc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ae0:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	9308      	str	r3, [sp, #32]
 8001ae6:	6803      	ldr	r3, [r0, #0]
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	9208      	str	r2, [sp, #32]
 8001aec:	699a      	ldr	r2, [r3, #24]
 8001aee:	9208      	str	r2, [sp, #32]
 8001af0:	9a08      	ldr	r2, [sp, #32]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001af8:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001afa:	6803      	ldr	r3, [r0, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001b02:	f43f af4b 	beq.w	800199c <I2C_Master_ADDR+0x60>
 8001b06:	2920      	cmp	r1, #32
 8001b08:	d81f      	bhi.n	8001b4a <I2C_Master_ADDR+0x20e>
 8001b0a:	2908      	cmp	r1, #8
 8001b0c:	d215      	bcs.n	8001b3a <I2C_Master_ADDR+0x1fe>
 8001b0e:	2901      	cmp	r1, #1
 8001b10:	f47f af44 	bne.w	800199c <I2C_Master_ADDR+0x60>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	e73e      	b.n	800199c <I2C_Master_ADDR+0x60>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b1e:	6802      	ldr	r2, [r0, #0]
 8001b20:	6813      	ldr	r3, [r2, #0]
 8001b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b26:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b28:	2300      	movs	r3, #0
 8001b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8001b2c:	6803      	ldr	r3, [r0, #0]
 8001b2e:	695a      	ldr	r2, [r3, #20]
 8001b30:	9209      	str	r2, [sp, #36]	; 0x24
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	9309      	str	r3, [sp, #36]	; 0x24
 8001b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b38:	e7df      	b.n	8001afa <I2C_Master_ADDR+0x1be>
 8001b3a:	3908      	subs	r1, #8
 8001b3c:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <I2C_Master_ADDR+0x244>)
 8001b3e:	40ca      	lsrs	r2, r1
 8001b40:	f012 0f01 	tst.w	r2, #1
 8001b44:	f43f af2a 	beq.w	800199c <I2C_Master_ADDR+0x60>
 8001b48:	e7e4      	b.n	8001b14 <I2C_Master_ADDR+0x1d8>
 8001b4a:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001b4e:	f47f af25 	bne.w	800199c <I2C_Master_ADDR+0x60>
 8001b52:	e7df      	b.n	8001b14 <I2C_Master_ADDR+0x1d8>
 8001b54:	3908      	subs	r1, #8
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <I2C_Master_ADDR+0x244>)
 8001b58:	40ca      	lsrs	r2, r1
 8001b5a:	f012 0f01 	tst.w	r2, #1
 8001b5e:	f47f af54 	bne.w	8001a0a <I2C_Master_ADDR+0xce>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b62:	2300      	movs	r3, #0
 8001b64:	930a      	str	r3, [sp, #40]	; 0x28
 8001b66:	6803      	ldr	r3, [r0, #0]
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	920a      	str	r2, [sp, #40]	; 0x28
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8001b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b72:	e713      	b.n	800199c <I2C_Master_ADDR+0x60>
 8001b74:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001b78:	d1f3      	bne.n	8001b62 <I2C_Master_ADDR+0x226>
 8001b7a:	e746      	b.n	8001a0a <I2C_Master_ADDR+0xce>
 8001b7c:	00010014 	.word	0x00010014
 8001b80:	01000101 	.word	0x01000101

08001b84 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8001b84:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	b15b      	cbz	r3, 8001ba2 <I2C_SlaveTransmit_BTF+0x1e>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b8a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001b8c:	6803      	ldr	r3, [r0, #0]
 8001b8e:	7812      	ldrb	r2, [r2, #0]
 8001b90:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001b92:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b94:	3301      	adds	r3, #1
 8001b96:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001b98:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8001ba2:	4770      	bx	lr

08001ba4 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8001ba4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	b15b      	cbz	r3, 8001bc2 <I2C_SlaveReceive_BTF+0x1e>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001baa:	6803      	ldr	r3, [r0, #0]
 8001bac:	691a      	ldr	r2, [r3, #16]
 8001bae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001bb0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001bb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001bb8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8001bc2:	4770      	bx	lr

08001bc4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8001bc4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	9301      	str	r3, [sp, #4]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <I2C_WaitOnSTOPRequestThroughIT+0x40>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	08db      	lsrs	r3, r3, #3
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <I2C_WaitOnSTOPRequestThroughIT+0x44>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001bdc:	9301      	str	r3, [sp, #4]
  do
  {
    count--;
 8001bde:	9b01      	ldr	r3, [sp, #4]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8001be4:	9b01      	ldr	r3, [sp, #4]
 8001be6:	b133      	cbz	r3, 8001bf6 <I2C_WaitOnSTOPRequestThroughIT+0x32>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

      return HAL_ERROR;
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8001be8:	6803      	ldr	r3, [r0, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001bf0:	d1f5      	bne.n	8001bde <I2C_WaitOnSTOPRequestThroughIT+0x1a>

  return HAL_OK;
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	e004      	b.n	8001c00 <I2C_WaitOnSTOPRequestThroughIT+0x3c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bf6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001bf8:	f043 0320 	orr.w	r3, r3, #32
 8001bfc:	6403      	str	r3, [r0, #64]	; 0x40
      return HAL_ERROR;
 8001bfe:	2001      	movs	r0, #1
}
 8001c00:	b002      	add	sp, #8
 8001c02:	4770      	bx	lr
 8001c04:	20000000 	.word	0x20000000
 8001c08:	14f8b589 	.word	0x14f8b589

08001c0c <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8001c0c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c0e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001c12:	d004      	beq.n	8001c1e <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8001c14:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c16:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001c1a:	d003      	beq.n	8001c24 <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001c1c:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001c22:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001c24:	2308      	movs	r3, #8
 8001c26:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8001c28:	e7f8      	b.n	8001c1c <I2C_ConvertOtherXferOptions+0x10>
	...

08001c2c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	f000 80cc 	beq.w	8001dca <HAL_I2C_Init+0x19e>
{
 8001c32:	b570      	push	{r4, r5, r6, lr}
 8001c34:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c36:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d077      	beq.n	8001d2e <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c3e:	2324      	movs	r3, #36	; 0x24
 8001c40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001c44:	6822      	ldr	r2, [r4, #0]
 8001c46:	6813      	ldr	r3, [r2, #0]
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c4e:	6822      	ldr	r2, [r4, #0]
 8001c50:	6813      	ldr	r3, [r2, #0]
 8001c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c56:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c58:	6822      	ldr	r2, [r4, #0]
 8001c5a:	6813      	ldr	r3, [r2, #0]
 8001c5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001c60:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c62:	f002 fa19 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c66:	6862      	ldr	r2, [r4, #4]
 8001c68:	4b5a      	ldr	r3, [pc, #360]	; (8001dd4 <HAL_I2C_Init+0x1a8>)
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d864      	bhi.n	8001d38 <HAL_I2C_Init+0x10c>
 8001c6e:	4b5a      	ldr	r3, [pc, #360]	; (8001dd8 <HAL_I2C_Init+0x1ac>)
 8001c70:	4298      	cmp	r0, r3
 8001c72:	bf8c      	ite	hi
 8001c74:	2300      	movhi	r3, #0
 8001c76:	2301      	movls	r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f040 80a8 	bne.w	8001dce <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8001c7e:	4957      	ldr	r1, [pc, #348]	; (8001ddc <HAL_I2C_Init+0x1b0>)
 8001c80:	fba1 3100 	umull	r3, r1, r1, r0
 8001c84:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c86:	6825      	ldr	r5, [r4, #0]
 8001c88:	686a      	ldr	r2, [r5, #4]
 8001c8a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001c8e:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8001c92:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c94:	6821      	ldr	r1, [r4, #0]
 8001c96:	6a0a      	ldr	r2, [r1, #32]
 8001c98:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001c9c:	6866      	ldr	r6, [r4, #4]
 8001c9e:	4d4d      	ldr	r5, [pc, #308]	; (8001dd4 <HAL_I2C_Init+0x1a8>)
 8001ca0:	42ae      	cmp	r6, r5
 8001ca2:	d84f      	bhi.n	8001d44 <HAL_I2C_Init+0x118>
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001caa:	6821      	ldr	r1, [r4, #0]
 8001cac:	69ca      	ldr	r2, [r1, #28]
 8001cae:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8001cb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cb6:	6865      	ldr	r5, [r4, #4]
 8001cb8:	4b46      	ldr	r3, [pc, #280]	; (8001dd4 <HAL_I2C_Init+0x1a8>)
 8001cba:	429d      	cmp	r5, r3
 8001cbc:	d84c      	bhi.n	8001d58 <HAL_I2C_Init+0x12c>
 8001cbe:	1e43      	subs	r3, r0, #1
 8001cc0:	006d      	lsls	r5, r5, #1
 8001cc2:	fbb3 f3f5 	udiv	r3, r3, r5
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f640 70fc 	movw	r0, #4092	; 0xffc
 8001ccc:	4203      	tst	r3, r0
 8001cce:	d078      	beq.n	8001dc2 <HAL_I2C_Init+0x196>
 8001cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cd8:	6821      	ldr	r1, [r4, #0]
 8001cda:	680b      	ldr	r3, [r1, #0]
 8001cdc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001ce0:	69e2      	ldr	r2, [r4, #28]
 8001ce2:	6a20      	ldr	r0, [r4, #32]
 8001ce4:	4302      	orrs	r2, r0
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cea:	6821      	ldr	r1, [r4, #0]
 8001cec:	688b      	ldr	r3, [r1, #8]
 8001cee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cf6:	6922      	ldr	r2, [r4, #16]
 8001cf8:	68e0      	ldr	r0, [r4, #12]
 8001cfa:	4302      	orrs	r2, r0
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d00:	6821      	ldr	r1, [r4, #0]
 8001d02:	68cb      	ldr	r3, [r1, #12]
 8001d04:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d08:	6962      	ldr	r2, [r4, #20]
 8001d0a:	69a0      	ldr	r0, [r4, #24]
 8001d0c:	4302      	orrs	r2, r0
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001d12:	6822      	ldr	r2, [r4, #0]
 8001d14:	6813      	ldr	r3, [r2, #0]
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d20:	2320      	movs	r3, #32
 8001d22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d26:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d28:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001d2c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001d2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001d32:	f7fe fff5 	bl	8000d20 <HAL_I2C_MspInit>
 8001d36:	e782      	b.n	8001c3e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d38:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <HAL_I2C_Init+0x1b4>)
 8001d3a:	4298      	cmp	r0, r3
 8001d3c:	bf8c      	ite	hi
 8001d3e:	2300      	movhi	r3, #0
 8001d40:	2301      	movls	r3, #1
 8001d42:	e799      	b.n	8001c78 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d44:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8001d48:	fb05 f303 	mul.w	r3, r5, r3
 8001d4c:	4d25      	ldr	r5, [pc, #148]	; (8001de4 <HAL_I2C_Init+0x1b8>)
 8001d4e:	fba5 5303 	umull	r5, r3, r5, r3
 8001d52:	099b      	lsrs	r3, r3, #6
 8001d54:	3301      	adds	r3, #1
 8001d56:	e7a6      	b.n	8001ca6 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d58:	68a6      	ldr	r6, [r4, #8]
 8001d5a:	b9be      	cbnz	r6, 8001d8c <HAL_I2C_Init+0x160>
 8001d5c:	1e43      	subs	r3, r0, #1
 8001d5e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8001d62:	fbb3 f3fc 	udiv	r3, r3, ip
 8001d66:	3301      	adds	r3, #1
 8001d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6c:	fab3 f383 	clz	r3, r3
 8001d70:	095b      	lsrs	r3, r3, #5
 8001d72:	bb43      	cbnz	r3, 8001dc6 <HAL_I2C_Init+0x19a>
 8001d74:	b9c6      	cbnz	r6, 8001da8 <HAL_I2C_Init+0x17c>
 8001d76:	1e43      	subs	r3, r0, #1
 8001d78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001d7c:	fbb3 f3f5 	udiv	r3, r3, r5
 8001d80:	3301      	adds	r3, #1
 8001d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d8a:	e7a3      	b.n	8001cd4 <HAL_I2C_Init+0xa8>
 8001d8c:	1e43      	subs	r3, r0, #1
 8001d8e:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8001d92:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8001d96:	fbb3 f3fc 	udiv	r3, r3, ip
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	095b      	lsrs	r3, r3, #5
 8001da6:	e7e4      	b.n	8001d72 <HAL_I2C_Init+0x146>
 8001da8:	1e43      	subs	r3, r0, #1
 8001daa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001dae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001db2:	fbb3 f3f5 	udiv	r3, r3, r5
 8001db6:	3301      	adds	r3, #1
 8001db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dc0:	e788      	b.n	8001cd4 <HAL_I2C_Init+0xa8>
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	e786      	b.n	8001cd4 <HAL_I2C_Init+0xa8>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e784      	b.n	8001cd4 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001dca:	2001      	movs	r0, #1
}
 8001dcc:	4770      	bx	lr
    return HAL_ERROR;
 8001dce:	2001      	movs	r0, #1
 8001dd0:	e7ac      	b.n	8001d2c <HAL_I2C_Init+0x100>
 8001dd2:	bf00      	nop
 8001dd4:	000186a0 	.word	0x000186a0
 8001dd8:	001e847f 	.word	0x001e847f
 8001ddc:	431bde83 	.word	0x431bde83
 8001de0:	003d08ff 	.word	0x003d08ff
 8001de4:	10624dd3 	.word	0x10624dd3

08001de8 <HAL_I2C_MasterTxCpltCallback>:
}
 8001de8:	4770      	bx	lr

08001dea <HAL_I2C_MasterRxCpltCallback>:
}
 8001dea:	4770      	bx	lr

08001dec <HAL_I2C_SlaveTxCpltCallback>:
}
 8001dec:	4770      	bx	lr

08001dee <I2C_SlaveTransmit_TXE>:
{
 8001dee:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001df0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001df4:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8001df6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b183      	cbz	r3, 8001e1e <I2C_SlaveTransmit_TXE+0x30>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dfc:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001dfe:	6803      	ldr	r3, [r0, #0]
 8001e00:	7809      	ldrb	r1, [r1, #0]
 8001e02:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8001e04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e06:	3301      	adds	r3, #1
 8001e08:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8001e0a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e14:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	b90b      	cbnz	r3, 8001e1e <I2C_SlaveTransmit_TXE+0x30>
 8001e1a:	2a29      	cmp	r2, #41	; 0x29
 8001e1c:	d000      	beq.n	8001e20 <I2C_SlaveTransmit_TXE+0x32>
}
 8001e1e:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e20:	6802      	ldr	r2, [r0, #0]
 8001e22:	6853      	ldr	r3, [r2, #4]
 8001e24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e28:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e2a:	2321      	movs	r3, #33	; 0x21
 8001e2c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001e2e:	2328      	movs	r3, #40	; 0x28
 8001e30:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e34:	f7ff ffda 	bl	8001dec <HAL_I2C_SlaveTxCpltCallback>
}
 8001e38:	e7f1      	b.n	8001e1e <I2C_SlaveTransmit_TXE+0x30>

08001e3a <HAL_I2C_SlaveRxCpltCallback>:
}
 8001e3a:	4770      	bx	lr

08001e3c <I2C_SlaveReceive_RXNE>:
{
 8001e3c:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e3e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e42:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8001e44:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b183      	cbz	r3, 8001e6c <I2C_SlaveReceive_RXNE+0x30>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e4a:	6803      	ldr	r3, [r0, #0]
 8001e4c:	6919      	ldr	r1, [r3, #16]
 8001e4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e50:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8001e52:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e54:	3301      	adds	r3, #1
 8001e56:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8001e58:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001e62:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	b90b      	cbnz	r3, 8001e6c <I2C_SlaveReceive_RXNE+0x30>
 8001e68:	2a2a      	cmp	r2, #42	; 0x2a
 8001e6a:	d000      	beq.n	8001e6e <I2C_SlaveReceive_RXNE+0x32>
}
 8001e6c:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e6e:	6802      	ldr	r2, [r0, #0]
 8001e70:	6853      	ldr	r3, [r2, #4]
 8001e72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e76:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001e78:	2322      	movs	r3, #34	; 0x22
 8001e7a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001e7c:	2328      	movs	r3, #40	; 0x28
 8001e7e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e82:	f7ff ffda 	bl	8001e3a <HAL_I2C_SlaveRxCpltCallback>
}
 8001e86:	e7f1      	b.n	8001e6c <I2C_SlaveReceive_RXNE+0x30>

08001e88 <HAL_I2C_AddrCallback>:
}
 8001e88:	4770      	bx	lr

08001e8a <I2C_Slave_ADDR>:
{
 8001e8a:	b500      	push	{lr}
 8001e8c:	b083      	sub	sp, #12
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001e8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e96:	2b28      	cmp	r3, #40	; 0x28
 8001e98:	d00c      	beq.n	8001eb4 <I2C_Slave_ADDR+0x2a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	6802      	ldr	r2, [r0, #0]
 8001ea0:	6951      	ldr	r1, [r2, #20]
 8001ea2:	9101      	str	r1, [sp, #4]
 8001ea4:	6992      	ldr	r2, [r2, #24]
 8001ea6:	9201      	str	r2, [sp, #4]
 8001ea8:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(hi2c);
 8001eaa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8001eae:	b003      	add	sp, #12
 8001eb0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8001eb4:	6802      	ldr	r2, [r0, #0]
 8001eb6:	6853      	ldr	r3, [r2, #4]
 8001eb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ebc:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8001ebe:	f011 0f04 	tst.w	r1, #4
 8001ec2:	d00b      	beq.n	8001edc <I2C_Slave_ADDR+0x52>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001ec4:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8001ec6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001eca:	d109      	bne.n	8001ee0 <I2C_Slave_ADDR+0x56>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8001ecc:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 8001ece:	2100      	movs	r1, #0
 8001ed0:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f7ff ffd7 	bl	8001e88 <HAL_I2C_AddrCallback>
 8001eda:	e7e8      	b.n	8001eae <I2C_Slave_ADDR+0x24>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e7f2      	b.n	8001ec6 <I2C_Slave_ADDR+0x3c>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8001ee0:	8b02      	ldrh	r2, [r0, #24]
 8001ee2:	e7f4      	b.n	8001ece <I2C_Slave_ADDR+0x44>

08001ee4 <HAL_I2C_ListenCpltCallback>:
}
 8001ee4:	4770      	bx	lr
	...

08001ee8 <I2C_Slave_AF>:
{
 8001ee8:	b510      	push	{r4, lr}
 8001eea:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001eec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ef0:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ef2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8001ef4:	2a08      	cmp	r2, #8
 8001ef6:	d001      	beq.n	8001efc <I2C_Slave_AF+0x14>
 8001ef8:	2a20      	cmp	r2, #32
 8001efa:	d101      	bne.n	8001f00 <I2C_Slave_AF+0x18>
 8001efc:	2b28      	cmp	r3, #40	; 0x28
 8001efe:	d006      	beq.n	8001f0e <I2C_Slave_AF+0x26>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001f00:	2b21      	cmp	r3, #33	; 0x21
 8001f02:	d01f      	beq.n	8001f44 <I2C_Slave_AF+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f0a:	615a      	str	r2, [r3, #20]
}
 8001f0c:	bd10      	pop	{r4, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <I2C_Slave_AF+0x9c>)
 8001f10:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f12:	6822      	ldr	r2, [r4, #0]
 8001f14:	6853      	ldr	r3, [r2, #4]
 8001f16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f1a:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f22:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f24:	6822      	ldr	r2, [r4, #0]
 8001f26:	6813      	ldr	r3, [r2, #0]
 8001f28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f2c:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8001f32:	2220      	movs	r2, #32
 8001f34:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001f38:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f7ff ffd1 	bl	8001ee4 <HAL_I2C_ListenCpltCallback>
 8001f42:	e7e3      	b.n	8001f0c <I2C_Slave_AF+0x24>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <I2C_Slave_AF+0x9c>)
 8001f46:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001f48:	2321      	movs	r3, #33	; 0x21
 8001f4a:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f58:	6822      	ldr	r2, [r4, #0]
 8001f5a:	6853      	ldr	r3, [r2, #4]
 8001f5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f60:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f68:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f6a:	6822      	ldr	r2, [r4, #0]
 8001f6c:	6813      	ldr	r3, [r2, #0]
 8001f6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f72:	6013      	str	r3, [r2, #0]
    I2C_Flush_DR(hi2c);
 8001f74:	4620      	mov	r0, r4
 8001f76:	f7ff fc6f 	bl	8001858 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	f7ff ff36 	bl	8001dec <HAL_I2C_SlaveTxCpltCallback>
 8001f80:	e7c4      	b.n	8001f0c <I2C_Slave_AF+0x24>
 8001f82:	bf00      	nop
 8001f84:	ffff0000 	.word	0xffff0000

08001f88 <HAL_I2C_MemTxCpltCallback>:
}
 8001f88:	4770      	bx	lr

08001f8a <I2C_MasterTransmit_BTF>:
{
 8001f8a:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f8c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b21      	cmp	r3, #33	; 0x21
 8001f96:	d000      	beq.n	8001f9a <I2C_MasterTransmit_BTF+0x10>
}
 8001f98:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 8001f9a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	b163      	cbz	r3, 8001fba <I2C_MasterTransmit_BTF+0x30>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fa0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001fa2:	6803      	ldr	r3, [r0, #0]
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001fa8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001faa:	3301      	adds	r3, #1
 8001fac:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8001fae:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001fb8:	e7ee      	b.n	8001f98 <I2C_MasterTransmit_BTF+0xe>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001fba:	2a08      	cmp	r2, #8
 8001fbc:	d004      	beq.n	8001fc8 <I2C_MasterTransmit_BTF+0x3e>
 8001fbe:	2a20      	cmp	r2, #32
 8001fc0:	d002      	beq.n	8001fc8 <I2C_MasterTransmit_BTF+0x3e>
 8001fc2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001fc6:	d119      	bne.n	8001ffc <I2C_MasterTransmit_BTF+0x72>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fc8:	6802      	ldr	r2, [r0, #0]
 8001fca:	6853      	ldr	r3, [r2, #4]
 8001fcc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fd0:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd2:	6802      	ldr	r2, [r0, #0]
 8001fd4:	6813      	ldr	r3, [r2, #0]
 8001fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fda:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fe6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b40      	cmp	r3, #64	; 0x40
 8001fee:	d015      	beq.n	800201c <I2C_MasterTransmit_BTF+0x92>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ff6:	f7ff fef7 	bl	8001de8 <HAL_I2C_MasterTxCpltCallback>
}
 8001ffa:	e7cd      	b.n	8001f98 <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ffc:	6802      	ldr	r2, [r0, #0]
 8001ffe:	6853      	ldr	r3, [r2, #4]
 8002000:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002004:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002006:	2311      	movs	r3, #17
 8002008:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800200a:	2300      	movs	r3, #0
 800200c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002010:	2320      	movs	r3, #32
 8002012:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002016:	f7ff fee7 	bl	8001de8 <HAL_I2C_MasterTxCpltCallback>
 800201a:	e7bd      	b.n	8001f98 <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800201c:	2300      	movs	r3, #0
 800201e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002022:	f7ff ffb1 	bl	8001f88 <HAL_I2C_MemTxCpltCallback>
 8002026:	e7b7      	b.n	8001f98 <I2C_MasterTransmit_BTF+0xe>

08002028 <I2C_MemoryTransmit_TXE_BTF>:
{
 8002028:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800202a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 800202e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002030:	b99a      	cbnz	r2, 800205a <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002032:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002034:	2b01      	cmp	r3, #1
 8002036:	d008      	beq.n	800204a <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002038:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800203a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800203e:	6802      	ldr	r2, [r0, #0]
 8002040:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8002042:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002044:	3301      	adds	r3, #1
 8002046:	6503      	str	r3, [r0, #80]	; 0x50
}
 8002048:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800204a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800204c:	6802      	ldr	r2, [r0, #0]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8002052:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002054:	3302      	adds	r3, #2
 8002056:	6503      	str	r3, [r0, #80]	; 0x50
 8002058:	e7f6      	b.n	8002048 <I2C_MemoryTransmit_TXE_BTF+0x20>
 800205a:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 800205c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800205e:	2a01      	cmp	r2, #1
 8002060:	d023      	beq.n	80020aa <I2C_MemoryTransmit_TXE_BTF+0x82>
  else if (hi2c->EventCount == 2U)
 8002062:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002064:	2a02      	cmp	r2, #2
 8002066:	d13e      	bne.n	80020e6 <I2C_MemoryTransmit_TXE_BTF+0xbe>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002068:	2b22      	cmp	r3, #34	; 0x22
 800206a:	d026      	beq.n	80020ba <I2C_MemoryTransmit_TXE_BTF+0x92>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800206c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800206e:	b292      	uxth	r2, r2
 8002070:	b10a      	cbz	r2, 8002076 <I2C_MemoryTransmit_TXE_BTF+0x4e>
 8002072:	2b21      	cmp	r3, #33	; 0x21
 8002074:	d02a      	beq.n	80020cc <I2C_MemoryTransmit_TXE_BTF+0xa4>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002076:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002078:	b292      	uxth	r2, r2
 800207a:	2a00      	cmp	r2, #0
 800207c:	d1e4      	bne.n	8002048 <I2C_MemoryTransmit_TXE_BTF+0x20>
 800207e:	2b21      	cmp	r3, #33	; 0x21
 8002080:	d1e2      	bne.n	8002048 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002082:	6802      	ldr	r2, [r0, #0]
 8002084:	6853      	ldr	r3, [r2, #4]
 8002086:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800208a:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800208c:	6802      	ldr	r2, [r0, #0]
 800208e:	6813      	ldr	r3, [r2, #0]
 8002090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002094:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002096:	2300      	movs	r3, #0
 8002098:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800209a:	2220      	movs	r2, #32
 800209c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80020a4:	f7ff ff70 	bl	8001f88 <HAL_I2C_MemTxCpltCallback>
 80020a8:	e7ce      	b.n	8002048 <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80020aa:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80020ac:	6802      	ldr	r2, [r0, #0]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 80020b2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80020b4:	3301      	adds	r3, #1
 80020b6:	6503      	str	r3, [r0, #80]	; 0x50
 80020b8:	e7c6      	b.n	8002048 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80020ba:	6802      	ldr	r2, [r0, #0]
 80020bc:	6813      	ldr	r3, [r2, #0]
 80020be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c2:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 80020c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80020c6:	3301      	adds	r3, #1
 80020c8:	6503      	str	r3, [r0, #80]	; 0x50
 80020ca:	e7bd      	b.n	8002048 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020cc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80020ce:	6803      	ldr	r3, [r0, #0]
 80020d0:	7812      	ldrb	r2, [r2, #0]
 80020d2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80020d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020d6:	3301      	adds	r3, #1
 80020d8:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80020da:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	8543      	strh	r3, [r0, #42]	; 0x2a
 80020e4:	e7b0      	b.n	8002048 <I2C_MemoryTransmit_TXE_BTF+0x20>
    I2C_Flush_DR(hi2c);
 80020e6:	f7ff fbb7 	bl	8001858 <I2C_Flush_DR>
}
 80020ea:	e7ad      	b.n	8002048 <I2C_MemoryTransmit_TXE_BTF+0x20>

080020ec <I2C_MasterTransmit_TXE>:
{
 80020ec:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020f2:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020f4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80020f8:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80020fa:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80020fc:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 80020fe:	b909      	cbnz	r1, 8002104 <I2C_MasterTransmit_TXE+0x18>
 8002100:	2b21      	cmp	r3, #33	; 0x21
 8002102:	d004      	beq.n	800210e <I2C_MasterTransmit_TXE+0x22>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002104:	2b21      	cmp	r3, #33	; 0x21
 8002106:	d03b      	beq.n	8002180 <I2C_MasterTransmit_TXE+0x94>
 8002108:	2a40      	cmp	r2, #64	; 0x40
 800210a:	d037      	beq.n	800217c <I2C_MasterTransmit_TXE+0x90>
}
 800210c:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800210e:	2c08      	cmp	r4, #8
 8002110:	d004      	beq.n	800211c <I2C_MasterTransmit_TXE+0x30>
 8002112:	2c20      	cmp	r4, #32
 8002114:	d002      	beq.n	800211c <I2C_MasterTransmit_TXE+0x30>
 8002116:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 800211a:	d119      	bne.n	8002150 <I2C_MasterTransmit_TXE+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800211c:	6802      	ldr	r2, [r0, #0]
 800211e:	6853      	ldr	r3, [r2, #4]
 8002120:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002124:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002126:	6802      	ldr	r2, [r0, #0]
 8002128:	6813      	ldr	r3, [r2, #0]
 800212a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800212e:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002130:	2300      	movs	r3, #0
 8002132:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002134:	2320      	movs	r3, #32
 8002136:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800213a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b40      	cmp	r3, #64	; 0x40
 8002142:	d015      	beq.n	8002170 <I2C_MasterTransmit_TXE+0x84>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002144:	2300      	movs	r3, #0
 8002146:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800214a:	f7ff fe4d 	bl	8001de8 <HAL_I2C_MasterTxCpltCallback>
 800214e:	e7dd      	b.n	800210c <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002150:	6802      	ldr	r2, [r0, #0]
 8002152:	6853      	ldr	r3, [r2, #4]
 8002154:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002158:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800215a:	2311      	movs	r3, #17
 800215c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800215e:	2300      	movs	r3, #0
 8002160:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002164:	2320      	movs	r3, #32
 8002166:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800216a:	f7ff fe3d 	bl	8001de8 <HAL_I2C_MasterTxCpltCallback>
 800216e:	e7cd      	b.n	800210c <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002170:	2300      	movs	r3, #0
 8002172:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002176:	f7ff ff07 	bl	8001f88 <HAL_I2C_MemTxCpltCallback>
 800217a:	e7c7      	b.n	800210c <I2C_MasterTransmit_TXE+0x20>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800217c:	2b22      	cmp	r3, #34	; 0x22
 800217e:	d1c5      	bne.n	800210c <I2C_MasterTransmit_TXE+0x20>
    if (hi2c->XferCount == 0U)
 8002180:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002182:	b29b      	uxth	r3, r3
 8002184:	b92b      	cbnz	r3, 8002192 <I2C_MasterTransmit_TXE+0xa6>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002186:	6802      	ldr	r2, [r0, #0]
 8002188:	6853      	ldr	r3, [r2, #4]
 800218a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800218e:	6053      	str	r3, [r2, #4]
 8002190:	e7bc      	b.n	800210c <I2C_MasterTransmit_TXE+0x20>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002192:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b40      	cmp	r3, #64	; 0x40
 800219a:	d00c      	beq.n	80021b6 <I2C_MasterTransmit_TXE+0xca>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800219c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800219e:	6803      	ldr	r3, [r0, #0]
 80021a0:	7812      	ldrb	r2, [r2, #0]
 80021a2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80021a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021a6:	3301      	adds	r3, #1
 80021a8:	6243      	str	r3, [r0, #36]	; 0x24
        hi2c->XferCount--;
 80021aa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80021b4:	e7aa      	b.n	800210c <I2C_MasterTransmit_TXE+0x20>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80021b6:	f7ff ff37 	bl	8002028 <I2C_MemoryTransmit_TXE_BTF>
 80021ba:	e7a7      	b.n	800210c <I2C_MasterTransmit_TXE+0x20>

080021bc <HAL_I2C_MemRxCpltCallback>:
}
 80021bc:	4770      	bx	lr

080021be <I2C_MasterReceive_BTF>:
{
 80021be:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021c0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80021c2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d014      	beq.n	80021f4 <I2C_MasterReceive_BTF+0x36>
  else if (hi2c->XferCount == 3U)
 80021ca:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d022      	beq.n	8002218 <I2C_MasterReceive_BTF+0x5a>
  else if (hi2c->XferCount == 2U)
 80021d2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d039      	beq.n	800224e <I2C_MasterReceive_BTF+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021da:	6803      	ldr	r3, [r0, #0]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021e4:	3301      	adds	r3, #1
 80021e6:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80021e8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80021f2:	e010      	b.n	8002216 <I2C_MasterReceive_BTF+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021f4:	6802      	ldr	r2, [r0, #0]
 80021f6:	6853      	ldr	r3, [r2, #4]
 80021f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021fc:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021fe:	6803      	ldr	r3, [r0, #0]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002204:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002206:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002208:	3301      	adds	r3, #1
 800220a:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800220c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800220e:	b29b      	uxth	r3, r3
 8002210:	3b01      	subs	r3, #1
 8002212:	b29b      	uxth	r3, r3
 8002214:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8002216:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002218:	6801      	ldr	r1, [r0, #0]
 800221a:	684b      	ldr	r3, [r1, #4]
 800221c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002220:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002222:	2a04      	cmp	r2, #4
 8002224:	d006      	beq.n	8002234 <I2C_MasterReceive_BTF+0x76>
 8002226:	2a02      	cmp	r2, #2
 8002228:	d004      	beq.n	8002234 <I2C_MasterReceive_BTF+0x76>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800222a:	6802      	ldr	r2, [r0, #0]
 800222c:	6813      	ldr	r3, [r2, #0]
 800222e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002232:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002234:	6803      	ldr	r3, [r0, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800223a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800223c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800223e:	3301      	adds	r3, #1
 8002240:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8002242:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002244:	b29b      	uxth	r3, r3
 8002246:	3b01      	subs	r3, #1
 8002248:	b29b      	uxth	r3, r3
 800224a:	8543      	strh	r3, [r0, #42]	; 0x2a
 800224c:	e7e3      	b.n	8002216 <I2C_MasterReceive_BTF+0x58>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800224e:	1e53      	subs	r3, r2, #1
 8002250:	2b0f      	cmp	r3, #15
 8002252:	d842      	bhi.n	80022da <I2C_MasterReceive_BTF+0x11c>
 8002254:	e8df f003 	tbb	[pc, r3]
 8002258:	3b413b08 	.word	0x3b413b08
 800225c:	41414141 	.word	0x41414141
 8002260:	41414141 	.word	0x41414141
 8002264:	08414141 	.word	0x08414141
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002268:	6801      	ldr	r1, [r0, #0]
 800226a:	680b      	ldr	r3, [r1, #0]
 800226c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002270:	600b      	str	r3, [r1, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002272:	6803      	ldr	r3, [r0, #0]
 8002274:	6919      	ldr	r1, [r3, #16]
 8002276:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002278:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 800227a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800227c:	1c4b      	adds	r3, r1, #1
 800227e:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8002280:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002282:	b29b      	uxth	r3, r3
 8002284:	3b01      	subs	r3, #1
 8002286:	b29b      	uxth	r3, r3
 8002288:	8543      	strh	r3, [r0, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228a:	6803      	ldr	r3, [r0, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	704b      	strb	r3, [r1, #1]
    hi2c->pBuffPtr++;
 8002290:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002292:	3301      	adds	r3, #1
 8002294:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8002296:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	b29b      	uxth	r3, r3
 800229e:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80022a0:	6801      	ldr	r1, [r0, #0]
 80022a2:	684b      	ldr	r3, [r1, #4]
 80022a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a8:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80022aa:	2320      	movs	r3, #32
 80022ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022b0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b40      	cmp	r3, #64	; 0x40
 80022b8:	d015      	beq.n	80022e6 <I2C_MasterReceive_BTF+0x128>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80022c0:	2a08      	cmp	r2, #8
 80022c2:	d017      	beq.n	80022f4 <I2C_MasterReceive_BTF+0x136>
 80022c4:	2a20      	cmp	r2, #32
 80022c6:	d015      	beq.n	80022f4 <I2C_MasterReceive_BTF+0x136>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80022c8:	2312      	movs	r3, #18
 80022ca:	6303      	str	r3, [r0, #48]	; 0x30
 80022cc:	e014      	b.n	80022f8 <I2C_MasterReceive_BTF+0x13a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ce:	6801      	ldr	r1, [r0, #0]
 80022d0:	680b      	ldr	r3, [r1, #0]
 80022d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d6:	600b      	str	r3, [r1, #0]
 80022d8:	e7cb      	b.n	8002272 <I2C_MasterReceive_BTF+0xb4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022da:	6801      	ldr	r1, [r0, #0]
 80022dc:	680b      	ldr	r3, [r1, #0]
 80022de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022e2:	600b      	str	r3, [r1, #0]
 80022e4:	e7c5      	b.n	8002272 <I2C_MasterReceive_BTF+0xb4>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80022ec:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80022ee:	f7ff ff65 	bl	80021bc <HAL_I2C_MemRxCpltCallback>
 80022f2:	e790      	b.n	8002216 <I2C_MasterReceive_BTF+0x58>
        hi2c->PreviousState = I2C_STATE_NONE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80022f8:	f7ff fd77 	bl	8001dea <HAL_I2C_MasterRxCpltCallback>
 80022fc:	e78b      	b.n	8002216 <I2C_MasterReceive_BTF+0x58>

080022fe <HAL_I2C_ErrorCallback>:
}
 80022fe:	4770      	bx	lr

08002300 <I2C_MasterReceive_RXNE>:
{
 8002300:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002302:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b22      	cmp	r3, #34	; 0x22
 800230a:	d000      	beq.n	800230e <I2C_MasterReceive_RXNE+0xe>
}
 800230c:	bd38      	pop	{r3, r4, r5, pc}
 800230e:	4604      	mov	r4, r0
    CurrentXferOptions = hi2c->XferOptions;
 8002310:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
    tmp = hi2c->XferCount;
 8002312:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002314:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 8002316:	2b03      	cmp	r3, #3
 8002318:	d915      	bls.n	8002346 <I2C_MasterReceive_RXNE+0x46>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800231a:	6803      	ldr	r3, [r0, #0]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002320:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002322:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002324:	3301      	adds	r3, #1
 8002326:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8002328:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29b      	uxth	r3, r3
 8002330:	8543      	strh	r3, [r0, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8002332:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002334:	b29b      	uxth	r3, r3
 8002336:	2b03      	cmp	r3, #3
 8002338:	d1e8      	bne.n	800230c <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800233a:	6802      	ldr	r2, [r0, #0]
 800233c:	6853      	ldr	r3, [r2, #4]
 800233e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002342:	6053      	str	r3, [r2, #4]
 8002344:	e7e2      	b.n	800230c <I2C_MasterReceive_RXNE+0xc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002346:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002348:	2a02      	cmp	r2, #2
 800234a:	d001      	beq.n	8002350 <I2C_MasterReceive_RXNE+0x50>
 800234c:	2b01      	cmp	r3, #1
 800234e:	d905      	bls.n	800235c <I2C_MasterReceive_RXNE+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002350:	6822      	ldr	r2, [r4, #0]
 8002352:	6853      	ldr	r3, [r2, #4]
 8002354:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002358:	6053      	str	r3, [r2, #4]
}
 800235a:	e7d7      	b.n	800230c <I2C_MasterReceive_RXNE+0xc>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800235c:	f7ff fc32 	bl	8001bc4 <I2C_WaitOnSTOPRequestThroughIT>
 8002360:	2800      	cmp	r0, #0
 8002362:	d135      	bne.n	80023d0 <I2C_MasterReceive_RXNE+0xd0>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002364:	6822      	ldr	r2, [r4, #0]
 8002366:	6813      	ldr	r3, [r2, #0]
 8002368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800236c:	6013      	str	r3, [r2, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800236e:	6822      	ldr	r2, [r4, #0]
 8002370:	6853      	ldr	r3, [r2, #4]
 8002372:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002376:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800237e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002382:	3301      	adds	r3, #1
 8002384:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002386:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b29b      	uxth	r3, r3
 800238e:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002390:	2320      	movs	r3, #32
 8002392:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002396:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d009      	beq.n	80023b4 <I2C_MasterReceive_RXNE+0xb4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80023a6:	2d08      	cmp	r5, #8
 80023a8:	d00c      	beq.n	80023c4 <I2C_MasterReceive_RXNE+0xc4>
 80023aa:	2d20      	cmp	r5, #32
 80023ac:	d00a      	beq.n	80023c4 <I2C_MasterReceive_RXNE+0xc4>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80023ae:	2312      	movs	r3, #18
 80023b0:	6323      	str	r3, [r4, #48]	; 0x30
 80023b2:	e009      	b.n	80023c8 <I2C_MasterReceive_RXNE+0xc8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80023ba:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80023bc:	4620      	mov	r0, r4
 80023be:	f7ff fefd 	bl	80021bc <HAL_I2C_MemRxCpltCallback>
 80023c2:	e7a3      	b.n	800230c <I2C_MasterReceive_RXNE+0xc>
            hi2c->PreviousState = I2C_STATE_NONE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80023c8:	4620      	mov	r0, r4
 80023ca:	f7ff fd0e 	bl	8001dea <HAL_I2C_MasterRxCpltCallback>
 80023ce:	e79d      	b.n	800230c <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023d0:	6822      	ldr	r2, [r4, #0]
 80023d2:	6853      	ldr	r3, [r2, #4]
 80023d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023d8:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80023e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023e4:	3301      	adds	r3, #1
 80023e6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80023e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80023f2:	2320      	movs	r3, #32
 80023f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80023fe:	4620      	mov	r0, r4
 8002400:	f7ff ff7d 	bl	80022fe <HAL_I2C_ErrorCallback>
 8002404:	e782      	b.n	800230c <I2C_MasterReceive_RXNE+0xc>

08002406 <HAL_I2C_AbortCpltCallback>:
}
 8002406:	4770      	bx	lr

08002408 <I2C_DMAAbort>:
{
 8002408:	b500      	push	{lr}
 800240a:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002410:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002412:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002416:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002418:	4b32      	ldr	r3, [pc, #200]	; (80024e4 <I2C_DMAAbort+0xdc>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	08db      	lsrs	r3, r3, #3
 800241e:	4932      	ldr	r1, [pc, #200]	; (80024e8 <I2C_DMAAbort+0xe0>)
 8002420:	fba1 1303 	umull	r1, r3, r1, r3
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800242a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800242e:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8002430:	9b01      	ldr	r3, [sp, #4]
 8002432:	b143      	cbz	r3, 8002446 <I2C_DMAAbort+0x3e>
    count--;
 8002434:	9b01      	ldr	r3, [sp, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800243a:	6803      	ldr	r3, [r0, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002442:	d1f5      	bne.n	8002430 <I2C_DMAAbort+0x28>
 8002444:	e003      	b.n	800244e <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002446:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002448:	f043 0320 	orr.w	r3, r3, #32
 800244c:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 800244e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002450:	b10b      	cbz	r3, 8002456 <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002452:	2100      	movs	r1, #0
 8002454:	6299      	str	r1, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8002456:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002458:	b10b      	cbz	r3, 800245e <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 800245a:	2100      	movs	r1, #0
 800245c:	6299      	str	r1, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800245e:	6801      	ldr	r1, [r0, #0]
 8002460:	680b      	ldr	r3, [r1, #0]
 8002462:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002466:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 800246c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800246e:	b10b      	cbz	r3, 8002474 <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002470:	2100      	movs	r1, #0
 8002472:	6359      	str	r1, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8002474:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002476:	b10b      	cbz	r3, 800247c <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002478:	2100      	movs	r1, #0
 800247a:	6359      	str	r1, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 800247c:	6801      	ldr	r1, [r0, #0]
 800247e:	680b      	ldr	r3, [r1, #0]
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002486:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b60      	cmp	r3, #96	; 0x60
 800248e:	d00e      	beq.n	80024ae <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002490:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002494:	2a28      	cmp	r2, #40	; 0x28
 8002496:	d014      	beq.n	80024c2 <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 8002498:	2320      	movs	r3, #32
 800249a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800249e:	2300      	movs	r3, #0
 80024a0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80024a4:	f7ff ff2b 	bl	80022fe <HAL_I2C_ErrorCallback>
}
 80024a8:	b003      	add	sp, #12
 80024aa:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 80024ae:	2320      	movs	r3, #32
 80024b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80024ba:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80024bc:	f7ff ffa3 	bl	8002406 <HAL_I2C_AbortCpltCallback>
 80024c0:	e7f2      	b.n	80024a8 <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 80024c2:	6802      	ldr	r2, [r0, #0]
 80024c4:	6813      	ldr	r3, [r2, #0]
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024cc:	6802      	ldr	r2, [r0, #0]
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024d4:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80024da:	2328      	movs	r3, #40	; 0x28
 80024dc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80024e0:	e7e0      	b.n	80024a4 <I2C_DMAAbort+0x9c>
 80024e2:	bf00      	nop
 80024e4:	20000000 	.word	0x20000000
 80024e8:	14f8b589 	.word	0x14f8b589

080024ec <I2C_ITError>:
{
 80024ec:	b510      	push	{r4, lr}
 80024ee:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024f4:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80024f6:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80024fa:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80024fc:	2a10      	cmp	r2, #16
 80024fe:	d036      	beq.n	800256e <I2C_ITError+0x82>
 8002500:	2a40      	cmp	r2, #64	; 0x40
 8002502:	d034      	beq.n	800256e <I2C_ITError+0x82>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002504:	f003 0228 	and.w	r2, r3, #40	; 0x28
 8002508:	2a28      	cmp	r2, #40	; 0x28
 800250a:	d038      	beq.n	800257e <I2C_ITError+0x92>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800250c:	6822      	ldr	r2, [r4, #0]
 800250e:	6852      	ldr	r2, [r2, #4]
 8002510:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002514:	d107      	bne.n	8002526 <I2C_ITError+0x3a>
 8002516:	2b60      	cmp	r3, #96	; 0x60
 8002518:	d005      	beq.n	8002526 <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 800251a:	2320      	movs	r3, #32
 800251c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002520:	2300      	movs	r3, #0
 8002522:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8002526:	2300      	movs	r3, #0
 8002528:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002532:	d048      	beq.n	80025c6 <I2C_ITError+0xda>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800253a:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800253c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800253e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b01      	cmp	r3, #1
 8002546:	d020      	beq.n	800258a <I2C_ITError+0x9e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002548:	4b44      	ldr	r3, [pc, #272]	; (800265c <I2C_ITError+0x170>)
 800254a:	6353      	str	r3, [r2, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800254c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800254e:	f7ff f81b 	bl	8001588 <HAL_DMA_Abort_IT>
 8002552:	2800      	cmp	r0, #0
 8002554:	d049      	beq.n	80025ea <I2C_ITError+0xfe>
        __HAL_I2C_DISABLE(hi2c);
 8002556:	6822      	ldr	r2, [r4, #0]
 8002558:	6813      	ldr	r3, [r2, #0]
 800255a:	f023 0301 	bic.w	r3, r3, #1
 800255e:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002560:	2320      	movs	r3, #32
 8002562:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002566:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002568:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800256a:	4798      	blx	r3
 800256c:	e03d      	b.n	80025ea <I2C_ITError+0xfe>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800256e:	2b22      	cmp	r3, #34	; 0x22
 8002570:	d1c8      	bne.n	8002504 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002572:	6821      	ldr	r1, [r4, #0]
 8002574:	680a      	ldr	r2, [r1, #0]
 8002576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800257a:	600a      	str	r2, [r1, #0]
 800257c:	e7c2      	b.n	8002504 <I2C_ITError+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 800257e:	2300      	movs	r3, #0
 8002580:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002582:	2328      	movs	r3, #40	; 0x28
 8002584:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002588:	e7cf      	b.n	800252a <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800258a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800258c:	4a33      	ldr	r2, [pc, #204]	; (800265c <I2C_ITError+0x170>)
 800258e:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002590:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002592:	f7fe fff9 	bl	8001588 <HAL_DMA_Abort_IT>
 8002596:	b340      	cbz	r0, 80025ea <I2C_ITError+0xfe>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	f012 0f40 	tst.w	r2, #64	; 0x40
 80025a0:	d005      	beq.n	80025ae <I2C_ITError+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025a6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80025a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025aa:	3301      	adds	r3, #1
 80025ac:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 80025ae:	6822      	ldr	r2, [r4, #0]
 80025b0:	6813      	ldr	r3, [r2, #0]
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80025b8:	2320      	movs	r3, #32
 80025ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80025be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80025c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80025c2:	4798      	blx	r3
 80025c4:	e011      	b.n	80025ea <I2C_ITError+0xfe>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80025c6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	2a60      	cmp	r2, #96	; 0x60
 80025ce:	d01f      	beq.n	8002610 <I2C_ITError+0x124>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80025d6:	d005      	beq.n	80025e4 <I2C_ITError+0xf8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025dc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80025de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025e0:	3301      	adds	r3, #1
 80025e2:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80025e4:	4620      	mov	r0, r4
 80025e6:	f7ff fe8a 	bl	80022fe <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 80025ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80025ec:	f013 0f0f 	tst.w	r3, #15
 80025f0:	d004      	beq.n	80025fc <I2C_ITError+0x110>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025f2:	6822      	ldr	r2, [r4, #0]
 80025f4:	6853      	ldr	r3, [r2, #4]
 80025f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025fa:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 80025fc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002600:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002602:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002604:	f012 0f04 	tst.w	r2, #4
 8002608:	d001      	beq.n	800260e <I2C_ITError+0x122>
 800260a:	2b28      	cmp	r3, #40	; 0x28
 800260c:	d018      	beq.n	8002640 <I2C_ITError+0x154>
}
 800260e:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8002610:	2220      	movs	r2, #32
 8002612:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002616:	2200      	movs	r2, #0
 8002618:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002620:	d005      	beq.n	800262e <I2C_ITError+0x142>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002626:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800262a:	3301      	adds	r3, #1
 800262c:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 800262e:	6822      	ldr	r2, [r4, #0]
 8002630:	6813      	ldr	r3, [r2, #0]
 8002632:	f023 0301 	bic.w	r3, r3, #1
 8002636:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002638:	4620      	mov	r0, r4
 800263a:	f7ff fee4 	bl	8002406 <HAL_I2C_AbortCpltCallback>
 800263e:	e7d4      	b.n	80025ea <I2C_ITError+0xfe>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002640:	4b07      	ldr	r3, [pc, #28]	; (8002660 <I2C_ITError+0x174>)
 8002642:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002644:	2300      	movs	r3, #0
 8002646:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002648:	2220      	movs	r2, #32
 800264a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800264e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002652:	4620      	mov	r0, r4
 8002654:	f7ff fc46 	bl	8001ee4 <HAL_I2C_ListenCpltCallback>
}
 8002658:	e7d9      	b.n	800260e <I2C_ITError+0x122>
 800265a:	bf00      	nop
 800265c:	08002409 	.word	0x08002409
 8002660:	ffff0000 	.word	0xffff0000

08002664 <I2C_Slave_STOPF>:
{
 8002664:	b530      	push	{r4, r5, lr}
 8002666:	b083      	sub	sp, #12
 8002668:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800266a:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800266e:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002670:	6802      	ldr	r2, [r0, #0]
 8002672:	6853      	ldr	r3, [r2, #4]
 8002674:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002678:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800267a:	2300      	movs	r3, #0
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	6803      	ldr	r3, [r0, #0]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	9201      	str	r2, [sp, #4]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800268e:	6802      	ldr	r2, [r0, #0]
 8002690:	6813      	ldr	r3, [r2, #0]
 8002692:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002696:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002698:	6803      	ldr	r3, [r0, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80026a0:	d038      	beq.n	8002714 <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80026a2:	2d22      	cmp	r5, #34	; 0x22
 80026a4:	d021      	beq.n	80026ea <I2C_Slave_STOPF+0x86>
 80026a6:	2d2a      	cmp	r5, #42	; 0x2a
 80026a8:	d01f      	beq.n	80026ea <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80026aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	6852      	ldr	r2, [r2, #4]
 80026b0:	b292      	uxth	r2, r2
 80026b2:	8542      	strh	r2, [r0, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80026b4:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80026b6:	b292      	uxth	r2, r2
 80026b8:	b11a      	cbz	r2, 80026c2 <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026ba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80026bc:	f042 0204 	orr.w	r2, r2, #4
 80026c0:	6402      	str	r2, [r0, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026c8:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026ca:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80026cc:	f7fe ffa8 	bl	8001620 <HAL_DMA_GetState>
 80026d0:	2801      	cmp	r0, #1
 80026d2:	d01f      	beq.n	8002714 <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80026d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026d6:	4a44      	ldr	r2, [pc, #272]	; (80027e8 <I2C_Slave_STOPF+0x184>)
 80026d8:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80026da:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80026dc:	f7fe ff54 	bl	8001588 <HAL_DMA_Abort_IT>
 80026e0:	b1c0      	cbz	r0, 8002714 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80026e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80026e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80026e6:	4798      	blx	r3
 80026e8:	e014      	b.n	8002714 <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80026ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	6852      	ldr	r2, [r2, #4]
 80026f0:	b292      	uxth	r2, r2
 80026f2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80026f4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80026f6:	b292      	uxth	r2, r2
 80026f8:	b11a      	cbz	r2, 8002702 <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80026fc:	f042 0204 	orr.w	r2, r2, #4
 8002700:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002708:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800270a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800270c:	f7fe ff88 	bl	8001620 <HAL_DMA_GetState>
 8002710:	2801      	cmp	r0, #1
 8002712:	d142      	bne.n	800279a <I2C_Slave_STOPF+0x136>
  if (hi2c->XferCount != 0U)
 8002714:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	b333      	cbz	r3, 8002768 <I2C_Slave_STOPF+0x104>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800271a:	6823      	ldr	r3, [r4, #0]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	f012 0f04 	tst.w	r2, #4
 8002722:	d00a      	beq.n	800273a <I2C_Slave_STOPF+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002728:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800272a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800272c:	3301      	adds	r3, #1
 800272e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002730:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002732:	b29b      	uxth	r3, r3
 8002734:	3b01      	subs	r3, #1
 8002736:	b29b      	uxth	r3, r3
 8002738:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002742:	d00a      	beq.n	800275a <I2C_Slave_STOPF+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002748:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800274a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800274c:	3301      	adds	r3, #1
 800274e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002750:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29b      	uxth	r3, r3
 8002758:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800275a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	b11b      	cbz	r3, 8002768 <I2C_Slave_STOPF+0x104>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002760:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002762:	f043 0304 	orr.w	r3, r3, #4
 8002766:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002768:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800276a:	bb13      	cbnz	r3, 80027b2 <I2C_Slave_STOPF+0x14e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800276c:	2d2a      	cmp	r5, #42	; 0x2a
 800276e:	d025      	beq.n	80027bc <I2C_Slave_STOPF+0x158>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002770:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b28      	cmp	r3, #40	; 0x28
 8002778:	d029      	beq.n	80027ce <I2C_Slave_STOPF+0x16a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800277a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800277c:	2b22      	cmp	r3, #34	; 0x22
 800277e:	d001      	beq.n	8002784 <I2C_Slave_STOPF+0x120>
 8002780:	2d22      	cmp	r5, #34	; 0x22
 8002782:	d119      	bne.n	80027b8 <I2C_Slave_STOPF+0x154>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002784:	2300      	movs	r3, #0
 8002786:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002788:	2220      	movs	r2, #32
 800278a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800278e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002792:	4620      	mov	r0, r4
 8002794:	f7ff fb51 	bl	8001e3a <HAL_I2C_SlaveRxCpltCallback>
}
 8002798:	e00e      	b.n	80027b8 <I2C_Slave_STOPF+0x154>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800279a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800279c:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <I2C_Slave_STOPF+0x184>)
 800279e:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80027a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80027a2:	f7fe fef1 	bl	8001588 <HAL_DMA_Abort_IT>
 80027a6:	2800      	cmp	r0, #0
 80027a8:	d0b4      	beq.n	8002714 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80027aa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80027ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80027ae:	4798      	blx	r3
 80027b0:	e7b0      	b.n	8002714 <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 80027b2:	4620      	mov	r0, r4
 80027b4:	f7ff fe9a 	bl	80024ec <I2C_ITError>
}
 80027b8:	b003      	add	sp, #12
 80027ba:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 80027bc:	2300      	movs	r3, #0
 80027be:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027c0:	2328      	movs	r3, #40	; 0x28
 80027c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027c6:	4620      	mov	r0, r4
 80027c8:	f7ff fb37 	bl	8001e3a <HAL_I2C_SlaveRxCpltCallback>
 80027cc:	e7d0      	b.n	8002770 <I2C_Slave_STOPF+0x10c>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027ce:	4b07      	ldr	r3, [pc, #28]	; (80027ec <I2C_Slave_STOPF+0x188>)
 80027d0:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80027d6:	2220      	movs	r2, #32
 80027d8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80027e0:	4620      	mov	r0, r4
 80027e2:	f7ff fb7f 	bl	8001ee4 <HAL_I2C_ListenCpltCallback>
 80027e6:	e7e7      	b.n	80027b8 <I2C_Slave_STOPF+0x154>
 80027e8:	08002409 	.word	0x08002409
 80027ec:	ffff0000 	.word	0xffff0000

080027f0 <HAL_I2C_EV_IRQHandler>:
{
 80027f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f2:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80027f4:	6802      	ldr	r2, [r0, #0]
 80027f6:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027f8:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027fa:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80027fe:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002800:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002804:	b2c8      	uxtb	r0, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002806:	2b10      	cmp	r3, #16
 8002808:	d013      	beq.n	8002832 <HAL_I2C_EV_IRQHandler+0x42>
 800280a:	2b40      	cmp	r3, #64	; 0x40
 800280c:	d011      	beq.n	8002832 <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800280e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	d07a      	beq.n	800290a <HAL_I2C_EV_IRQHandler+0x11a>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002814:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 8002816:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002818:	f013 0f02 	tst.w	r3, #2
 800281c:	d078      	beq.n	8002910 <HAL_I2C_EV_IRQHandler+0x120>
 800281e:	f415 7f00 	tst.w	r5, #512	; 0x200
 8002822:	d075      	beq.n	8002910 <HAL_I2C_EV_IRQHandler+0x120>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002824:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002826:	b103      	cbz	r3, 800282a <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002828:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800282a:	4620      	mov	r0, r4
 800282c:	f7ff fb2d 	bl	8001e8a <I2C_Slave_ADDR>
}
 8002830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002832:	f8d2 c018 	ldr.w	ip, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002836:	6951      	ldr	r1, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002838:	f011 0701 	ands.w	r7, r1, #1
 800283c:	d105      	bne.n	800284a <HAL_I2C_EV_IRQHandler+0x5a>
 800283e:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8002842:	d0f5      	beq.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
 8002844:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8002848:	d0f2      	beq.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800284a:	b117      	cbz	r7, 8002852 <HAL_I2C_EV_IRQHandler+0x62>
 800284c:	f415 7f00 	tst.w	r5, #512	; 0x200
 8002850:	d129      	bne.n	80028a6 <HAL_I2C_EV_IRQHandler+0xb6>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002852:	f011 0f08 	tst.w	r1, #8
 8002856:	d002      	beq.n	800285e <HAL_I2C_EV_IRQHandler+0x6e>
 8002858:	f415 7f00 	tst.w	r5, #512	; 0x200
 800285c:	d12a      	bne.n	80028b4 <HAL_I2C_EV_IRQHandler+0xc4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800285e:	f011 0f02 	tst.w	r1, #2
 8002862:	d002      	beq.n	800286a <HAL_I2C_EV_IRQHandler+0x7a>
 8002864:	f415 7f00 	tst.w	r5, #512	; 0x200
 8002868:	d128      	bne.n	80028bc <HAL_I2C_EV_IRQHandler+0xcc>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800286a:	f01c 0f04 	tst.w	ip, #4
 800286e:	d031      	beq.n	80028d4 <HAL_I2C_EV_IRQHandler+0xe4>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002870:	6852      	ldr	r2, [r2, #4]
 8002872:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002876:	d1db      	bne.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002878:	f011 0f80 	tst.w	r1, #128	; 0x80
 800287c:	d005      	beq.n	800288a <HAL_I2C_EV_IRQHandler+0x9a>
 800287e:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8002882:	d002      	beq.n	800288a <HAL_I2C_EV_IRQHandler+0x9a>
 8002884:	f011 0f04 	tst.w	r1, #4
 8002888:	d01c      	beq.n	80028c4 <HAL_I2C_EV_IRQHandler+0xd4>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800288a:	f011 0f04 	tst.w	r1, #4
 800288e:	d0cf      	beq.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
 8002890:	f415 7f00 	tst.w	r5, #512	; 0x200
 8002894:	d0cc      	beq.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002896:	2821      	cmp	r0, #33	; 0x21
 8002898:	d018      	beq.n	80028cc <HAL_I2C_EV_IRQHandler+0xdc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800289a:	2b40      	cmp	r3, #64	; 0x40
 800289c:	d1c8      	bne.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800289e:	4620      	mov	r0, r4
 80028a0:	f7ff fbc2 	bl	8002028 <I2C_MemoryTransmit_TXE_BTF>
 80028a4:	e7c4      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 80028a6:	4620      	mov	r0, r4
 80028a8:	f7ff f9b0 	bl	8001c0c <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 80028ac:	4620      	mov	r0, r4
 80028ae:	f7fe ffdb 	bl	8001868 <I2C_Master_SB>
 80028b2:	e7bd      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 80028b4:	4620      	mov	r0, r4
 80028b6:	f7ff f82b 	bl	8001910 <I2C_Master_ADD10>
 80028ba:	e7b9      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 80028bc:	4620      	mov	r0, r4
 80028be:	f7ff f83d 	bl	800193c <I2C_Master_ADDR>
 80028c2:	e7b5      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 80028c4:	4620      	mov	r0, r4
 80028c6:	f7ff fc11 	bl	80020ec <I2C_MasterTransmit_TXE>
 80028ca:	e7b1      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
            I2C_MasterTransmit_BTF(hi2c);
 80028cc:	4620      	mov	r0, r4
 80028ce:	f7ff fb5c 	bl	8001f8a <I2C_MasterTransmit_BTF>
 80028d2:	e7ad      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80028d4:	6853      	ldr	r3, [r2, #4]
 80028d6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80028da:	d1a9      	bne.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028dc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80028e0:	d005      	beq.n	80028ee <HAL_I2C_EV_IRQHandler+0xfe>
 80028e2:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80028e6:	d002      	beq.n	80028ee <HAL_I2C_EV_IRQHandler+0xfe>
 80028e8:	f011 0f04 	tst.w	r1, #4
 80028ec:	d009      	beq.n	8002902 <HAL_I2C_EV_IRQHandler+0x112>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028ee:	f011 0f04 	tst.w	r1, #4
 80028f2:	d09d      	beq.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
 80028f4:	f415 7f00 	tst.w	r5, #512	; 0x200
 80028f8:	d09a      	beq.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 80028fa:	4620      	mov	r0, r4
 80028fc:	f7ff fc5f 	bl	80021be <I2C_MasterReceive_BTF>
 8002900:	e796      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 8002902:	4620      	mov	r0, r4
 8002904:	f7ff fcfc 	bl	8002300 <I2C_MasterReceive_RXNE>
 8002908:	e792      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800290a:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800290c:	6953      	ldr	r3, [r2, #20]
 800290e:	e783      	b.n	8002818 <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002910:	f013 0f10 	tst.w	r3, #16
 8002914:	d002      	beq.n	800291c <HAL_I2C_EV_IRQHandler+0x12c>
 8002916:	f415 7f00 	tst.w	r5, #512	; 0x200
 800291a:	d118      	bne.n	800294e <HAL_I2C_EV_IRQHandler+0x15e>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800291c:	2821      	cmp	r0, #33	; 0x21
 800291e:	d01a      	beq.n	8002956 <HAL_I2C_EV_IRQHandler+0x166>
 8002920:	2829      	cmp	r0, #41	; 0x29
 8002922:	d018      	beq.n	8002956 <HAL_I2C_EV_IRQHandler+0x166>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002924:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002928:	d005      	beq.n	8002936 <HAL_I2C_EV_IRQHandler+0x146>
 800292a:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800292e:	d002      	beq.n	8002936 <HAL_I2C_EV_IRQHandler+0x146>
 8002930:	f013 0f04 	tst.w	r3, #4
 8002934:	d028      	beq.n	8002988 <HAL_I2C_EV_IRQHandler+0x198>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002936:	f013 0f04 	tst.w	r3, #4
 800293a:	f43f af79 	beq.w	8002830 <HAL_I2C_EV_IRQHandler+0x40>
 800293e:	f415 7f00 	tst.w	r5, #512	; 0x200
 8002942:	f43f af75 	beq.w	8002830 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 8002946:	4620      	mov	r0, r4
 8002948:	f7ff f92c 	bl	8001ba4 <I2C_SlaveReceive_BTF>
      }
 800294c:	e770      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 800294e:	4620      	mov	r0, r4
 8002950:	f7ff fe88 	bl	8002664 <I2C_Slave_STOPF>
 8002954:	e76c      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002956:	f013 0f80 	tst.w	r3, #128	; 0x80
 800295a:	d005      	beq.n	8002968 <HAL_I2C_EV_IRQHandler+0x178>
 800295c:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8002960:	d002      	beq.n	8002968 <HAL_I2C_EV_IRQHandler+0x178>
 8002962:	f013 0f04 	tst.w	r3, #4
 8002966:	d00b      	beq.n	8002980 <HAL_I2C_EV_IRQHandler+0x190>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002968:	f013 0f04 	tst.w	r3, #4
 800296c:	f43f af60 	beq.w	8002830 <HAL_I2C_EV_IRQHandler+0x40>
 8002970:	f415 7f00 	tst.w	r5, #512	; 0x200
 8002974:	f43f af5c 	beq.w	8002830 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 8002978:	4620      	mov	r0, r4
 800297a:	f7ff f903 	bl	8001b84 <I2C_SlaveTransmit_BTF>
 800297e:	e757      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 8002980:	4620      	mov	r0, r4
 8002982:	f7ff fa34 	bl	8001dee <I2C_SlaveTransmit_TXE>
 8002986:	e753      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 8002988:	4620      	mov	r0, r4
 800298a:	f7ff fa57 	bl	8001e3c <I2C_SlaveReceive_RXNE>
 800298e:	e74f      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x40>

08002990 <HAL_I2C_ER_IRQHandler>:
{
 8002990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002992:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002994:	6803      	ldr	r3, [r0, #0]
 8002996:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002998:	685f      	ldr	r7, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800299a:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800299e:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80029a0:	f415 7680 	ands.w	r6, r5, #256	; 0x100
 80029a4:	d00b      	beq.n	80029be <HAL_I2C_ER_IRQHandler+0x2e>
 80029a6:	f417 7680 	ands.w	r6, r7, #256	; 0x100
 80029aa:	d008      	beq.n	80029be <HAL_I2C_ER_IRQHandler+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029ac:	f46f 7180 	mvn.w	r1, #256	; 0x100
 80029b0:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80029b2:	6801      	ldr	r1, [r0, #0]
 80029b4:	680b      	ldr	r3, [r1, #0]
 80029b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ba:	600b      	str	r3, [r1, #0]
    error |= HAL_I2C_ERROR_BERR;
 80029bc:	2601      	movs	r6, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80029be:	f415 7f00 	tst.w	r5, #512	; 0x200
 80029c2:	d008      	beq.n	80029d6 <HAL_I2C_ER_IRQHandler+0x46>
 80029c4:	f417 7f80 	tst.w	r7, #256	; 0x100
 80029c8:	d005      	beq.n	80029d6 <HAL_I2C_ER_IRQHandler+0x46>
    error |= HAL_I2C_ERROR_ARLO;
 80029ca:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	f46f 7100 	mvn.w	r1, #512	; 0x200
 80029d4:	6159      	str	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80029d6:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80029da:	d019      	beq.n	8002a10 <HAL_I2C_ER_IRQHandler+0x80>
 80029dc:	f417 7f80 	tst.w	r7, #256	; 0x100
 80029e0:	d016      	beq.n	8002a10 <HAL_I2C_ER_IRQHandler+0x80>
    tmp2 = hi2c->XferCount;
 80029e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029e4:	b299      	uxth	r1, r3
    tmp3 = hi2c->State;
 80029e6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80029ea:	b2db      	uxtb	r3, r3
    tmp4 = hi2c->PreviousState;
 80029ec:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80029ee:	2a20      	cmp	r2, #32
 80029f0:	d01c      	beq.n	8002a2c <HAL_I2C_ER_IRQHandler+0x9c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80029f8:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 80029fa:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80029fe:	2a10      	cmp	r2, #16
 8002a00:	d001      	beq.n	8002a06 <HAL_I2C_ER_IRQHandler+0x76>
 8002a02:	2a40      	cmp	r2, #64	; 0x40
 8002a04:	d104      	bne.n	8002a10 <HAL_I2C_ER_IRQHandler+0x80>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a06:	6822      	ldr	r2, [r4, #0]
 8002a08:	6813      	ldr	r3, [r2, #0]
 8002a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a0e:	6013      	str	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a10:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8002a14:	d008      	beq.n	8002a28 <HAL_I2C_ER_IRQHandler+0x98>
 8002a16:	f417 7f80 	tst.w	r7, #256	; 0x100
 8002a1a:	d005      	beq.n	8002a28 <HAL_I2C_ER_IRQHandler+0x98>
    error |= HAL_I2C_ERROR_OVR;
 8002a1c:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002a26:	615a      	str	r2, [r3, #20]
  if (error != HAL_I2C_ERROR_NONE)
 8002a28:	b976      	cbnz	r6, 8002a48 <HAL_I2C_ER_IRQHandler+0xb8>
}
 8002a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002a2c:	2900      	cmp	r1, #0
 8002a2e:	d1e0      	bne.n	80029f2 <HAL_I2C_ER_IRQHandler+0x62>
 8002a30:	2b21      	cmp	r3, #33	; 0x21
 8002a32:	d005      	beq.n	8002a40 <HAL_I2C_ER_IRQHandler+0xb0>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002a34:	2b29      	cmp	r3, #41	; 0x29
 8002a36:	d003      	beq.n	8002a40 <HAL_I2C_ER_IRQHandler+0xb0>
 8002a38:	2b28      	cmp	r3, #40	; 0x28
 8002a3a:	d1da      	bne.n	80029f2 <HAL_I2C_ER_IRQHandler+0x62>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002a3c:	2821      	cmp	r0, #33	; 0x21
 8002a3e:	d1d8      	bne.n	80029f2 <HAL_I2C_ER_IRQHandler+0x62>
      I2C_Slave_AF(hi2c);
 8002a40:	4620      	mov	r0, r4
 8002a42:	f7ff fa51 	bl	8001ee8 <I2C_Slave_AF>
 8002a46:	e7e3      	b.n	8002a10 <HAL_I2C_ER_IRQHandler+0x80>
    hi2c->ErrorCode |= error;
 8002a48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a4a:	4333      	orrs	r3, r6
 8002a4c:	6423      	str	r3, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8002a4e:	4620      	mov	r0, r4
 8002a50:	f7ff fd4c 	bl	80024ec <I2C_ITError>
}
 8002a54:	e7e9      	b.n	8002a2a <HAL_I2C_ER_IRQHandler+0x9a>

08002a56 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a56:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a58:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002a5c:	d044      	beq.n	8002ae8 <HAL_PCD_EP_DB_Receive+0x92>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a5e:	6804      	ldr	r4, [r0, #0]
 8002a60:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f891 c000 	ldrb.w	ip, [r1]
 8002a6a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002a6e:	3302      	adds	r3, #2
 8002a70:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8002a74:	f8b4 4400 	ldrh.w	r4, [r4, #1024]	; 0x400
 8002a78:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8002a7c:	698b      	ldr	r3, [r1, #24]
 8002a7e:	42a3      	cmp	r3, r4
 8002a80:	d328      	bcc.n	8002ad4 <HAL_PCD_EP_DB_Receive+0x7e>
    {
      ep->xfer_len -= count;
 8002a82:	1b1b      	subs	r3, r3, r4
 8002a84:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8002a86:	698b      	ldr	r3, [r1, #24]
 8002a88:	b97b      	cbnz	r3, 8002aaa <HAL_PCD_EP_DB_Receive+0x54>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a8a:	6805      	ldr	r5, [r0, #0]
 8002a8c:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa6:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002aaa:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002aae:	d00e      	beq.n	8002ace <HAL_PCD_EP_DB_Receive+0x78>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ab0:	6802      	ldr	r2, [r0, #0]
 8002ab2:	780d      	ldrb	r5, [r1, #0]
 8002ab4:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002aca:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8002ace:	b924      	cbnz	r4, 8002ada <HAL_PCD_EP_DB_Receive+0x84>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	618b      	str	r3, [r1, #24]
 8002ad8:	e7d5      	b.n	8002a86 <HAL_PCD_EP_DB_Receive+0x30>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ada:	4623      	mov	r3, r4
 8002adc:	890a      	ldrh	r2, [r1, #8]
 8002ade:	6949      	ldr	r1, [r1, #20]
 8002ae0:	6800      	ldr	r0, [r0, #0]
 8002ae2:	f003 fc38 	bl	8006356 <USB_ReadPMA>
 8002ae6:	e7f3      	b.n	8002ad0 <HAL_PCD_EP_DB_Receive+0x7a>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ae8:	6804      	ldr	r4, [r0, #0]
 8002aea:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	f891 c000 	ldrb.w	ip, [r1]
 8002af4:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002af8:	3306      	adds	r3, #6
 8002afa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8002afe:	f8b4 4400 	ldrh.w	r4, [r4, #1024]	; 0x400
 8002b02:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 8002b06:	698b      	ldr	r3, [r1, #24]
 8002b08:	42a3      	cmp	r3, r4
 8002b0a:	d32f      	bcc.n	8002b6c <HAL_PCD_EP_DB_Receive+0x116>
      ep->xfer_len -= count;
 8002b0c:	1b1b      	subs	r3, r3, r4
 8002b0e:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8002b10:	698b      	ldr	r3, [r1, #24]
 8002b12:	b97b      	cbnz	r3, 8002b34 <HAL_PCD_EP_DB_Receive+0xde>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b14:	6805      	ldr	r5, [r0, #0]
 8002b16:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b30:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b34:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002b38:	d10f      	bne.n	8002b5a <HAL_PCD_EP_DB_Receive+0x104>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b3a:	6802      	ldr	r2, [r0, #0]
 8002b3c:	f891 c000 	ldrb.w	ip, [r1]
 8002b40:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b56:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 8002b5a:	2c00      	cmp	r4, #0
 8002b5c:	d0b8      	beq.n	8002ad0 <HAL_PCD_EP_DB_Receive+0x7a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b5e:	4623      	mov	r3, r4
 8002b60:	894a      	ldrh	r2, [r1, #10]
 8002b62:	6949      	ldr	r1, [r1, #20]
 8002b64:	6800      	ldr	r0, [r0, #0]
 8002b66:	f003 fbf6 	bl	8006356 <USB_ReadPMA>
 8002b6a:	e7b1      	b.n	8002ad0 <HAL_PCD_EP_DB_Receive+0x7a>
      ep->xfer_len = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	618b      	str	r3, [r1, #24]
 8002b70:	e7ce      	b.n	8002b10 <HAL_PCD_EP_DB_Receive+0xba>

08002b72 <HAL_PCD_Init>:
{
 8002b72:	b538      	push	{r3, r4, r5, lr}
  if (hpcd == NULL)
 8002b74:	2800      	cmp	r0, #0
 8002b76:	d06e      	beq.n	8002c56 <HAL_PCD_Init+0xe4>
 8002b78:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b7a:	f890 3291 	ldrb.w	r3, [r0, #657]	; 0x291
 8002b7e:	b1a3      	cbz	r3, 8002baa <HAL_PCD_Init+0x38>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b80:	2303      	movs	r3, #3
 8002b82:	f884 3291 	strb.w	r3, [r4, #657]	; 0x291
  hpcd->Init.dma_enable = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 8002b8a:	6820      	ldr	r0, [r4, #0]
 8002b8c:	f002 fc76 	bl	800547c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b90:	4623      	mov	r3, r4
 8002b92:	f853 0b04 	ldr.w	r0, [r3], #4
 8002b96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b98:	f002 fc60 	bl	800545c <USB_CoreInit>
 8002b9c:	b150      	cbz	r0, 8002bb4 <HAL_PCD_Init+0x42>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	f884 3291 	strb.w	r3, [r4, #657]	; 0x291
    return HAL_ERROR;
 8002ba4:	2501      	movs	r5, #1
}
 8002ba6:	4628      	mov	r0, r5
 8002ba8:	bd38      	pop	{r3, r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002baa:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
    HAL_PCD_MspInit(hpcd);
 8002bae:	f004 fb69 	bl	8007284 <HAL_PCD_MspInit>
 8002bb2:	e7e5      	b.n	8002b80 <HAL_PCD_Init+0xe>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	6820      	ldr	r0, [r4, #0]
 8002bb8:	f002 fc6a 	bl	8005490 <USB_SetCurrentMode>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	b908      	cbnz	r0, 8002bc4 <HAL_PCD_Init+0x52>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	e015      	b.n	8002bf0 <HAL_PCD_Init+0x7e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	f884 3291 	strb.w	r3, [r4, #657]	; 0x291
    return HAL_ERROR;
 8002bca:	2501      	movs	r5, #1
 8002bcc:	e7eb      	b.n	8002ba6 <HAL_PCD_Init+0x34>
    hpcd->IN_ep[i].is_in = 1U;
 8002bce:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002bd2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	7448      	strb	r0, [r1, #17]
    hpcd->IN_ep[i].num = i;
 8002bda:	740a      	strb	r2, [r1, #16]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bdc:	2000      	movs	r0, #0
 8002bde:	74c8      	strb	r0, [r1, #19]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002be0:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002be2:	6248      	str	r0, [r1, #36]	; 0x24
    hpcd->IN_ep[i].xfer_len = 0U;
 8002be4:	3201      	adds	r2, #1
 8002be6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002bea:	00c9      	lsls	r1, r1, #3
 8002bec:	5060      	str	r0, [r4, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	7920      	ldrb	r0, [r4, #4]
 8002bf2:	4290      	cmp	r0, r2
 8002bf4:	d8eb      	bhi.n	8002bce <HAL_PCD_Init+0x5c>
 8002bf6:	e016      	b.n	8002c26 <HAL_PCD_Init+0xb4>
    hpcd->OUT_ep[i].is_in = 0U;
 8002bf8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002bfc:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002c00:	2100      	movs	r1, #0
 8002c02:	f882 1151 	strb.w	r1, [r2, #337]	; 0x151
    hpcd->OUT_ep[i].num = i;
 8002c06:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c0a:	f882 1153 	strb.w	r1, [r2, #339]	; 0x153
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c0e:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c12:	f8c2 1164 	str.w	r1, [r2, #356]	; 0x164
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c16:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002c1a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002c1e:	f8c2 1168 	str.w	r1, [r2, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c22:	3301      	adds	r3, #1
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	4298      	cmp	r0, r3
 8002c28:	d8e6      	bhi.n	8002bf8 <HAL_PCD_Init+0x86>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c2a:	4623      	mov	r3, r4
 8002c2c:	f853 0b04 	ldr.w	r0, [r3], #4
 8002c30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c32:	f002 fc2f 	bl	8005494 <USB_DevInit>
 8002c36:	4605      	mov	r5, r0
 8002c38:	b120      	cbz	r0, 8002c44 <HAL_PCD_Init+0xd2>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	f884 3291 	strb.w	r3, [r4, #657]	; 0x291
    return HAL_ERROR;
 8002c40:	2501      	movs	r5, #1
 8002c42:	e7b0      	b.n	8002ba6 <HAL_PCD_Init+0x34>
  hpcd->USB_Address = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	7363      	strb	r3, [r4, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f884 3291 	strb.w	r3, [r4, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c4e:	6820      	ldr	r0, [r4, #0]
 8002c50:	f002 ff7f 	bl	8005b52 <USB_DevDisconnect>
  return HAL_OK;
 8002c54:	e7a7      	b.n	8002ba6 <HAL_PCD_Init+0x34>
    return HAL_ERROR;
 8002c56:	2501      	movs	r5, #1
 8002c58:	e7a5      	b.n	8002ba6 <HAL_PCD_Init+0x34>

08002c5a <HAL_PCD_Start>:
{
 8002c5a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8002c5c:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d011      	beq.n	8002c88 <HAL_PCD_Start+0x2e>
 8002c64:	4604      	mov	r4, r0
 8002c66:	2501      	movs	r5, #1
 8002c68:	f880 5290 	strb.w	r5, [r0, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002c6c:	6800      	ldr	r0, [r0, #0]
 8002c6e:	f002 fbfc 	bl	800546a <USB_EnableGlobalInt>
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002c72:	4629      	mov	r1, r5
 8002c74:	4620      	mov	r0, r4
 8002c76:	f004 fc22 	bl	80074be <HAL_PCDEx_SetConnectionState>
  (void)USB_DevConnect(hpcd->Instance);
 8002c7a:	6820      	ldr	r0, [r4, #0]
 8002c7c:	f002 ff67 	bl	8005b4e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c80:	2000      	movs	r0, #0
 8002c82:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
}
 8002c86:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002c88:	2002      	movs	r0, #2
 8002c8a:	e7fc      	b.n	8002c86 <HAL_PCD_Start+0x2c>

08002c8c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	4605      	mov	r5, r0
 8002c90:	460c      	mov	r4, r1
 8002c92:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c94:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002c98:	f000 810e 	beq.w	8002eb8 <HAL_PCD_EP_DB_Transmit+0x22c>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c9c:	6802      	ldr	r2, [r0, #0]
 8002c9e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	7809      	ldrb	r1, [r1, #0]
 8002ca6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002caa:	3302      	adds	r3, #2
 8002cac:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002cb0:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
 8002cb4:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 8002cb8:	69a3      	ldr	r3, [r4, #24]
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d94e      	bls.n	8002d5c <HAL_PCD_EP_DB_Transmit+0xd0>
    {
      ep->xfer_len -= TxPctSize;
 8002cbe:	1a9b      	subs	r3, r3, r2
 8002cc0:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cc2:	69a3      	ldr	r3, [r4, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d166      	bne.n	8002d96 <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cc8:	7863      	ldrb	r3, [r4, #1]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d149      	bne.n	8002d62 <HAL_PCD_EP_DB_Transmit+0xd6>
 8002cce:	682b      	ldr	r3, [r5, #0]
 8002cd0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002cd4:	b292      	uxth	r2, r2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002cdc:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002ce0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002ce4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002ce8:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002cec:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002cf0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002cf4:	b292      	uxth	r2, r2
 8002cf6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cfa:	682b      	ldr	r3, [r5, #0]
 8002cfc:	7862      	ldrb	r2, [r4, #1]
 8002cfe:	2a00      	cmp	r2, #0
 8002d00:	d13c      	bne.n	8002d7c <HAL_PCD_EP_DB_Transmit+0xf0>
 8002d02:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002d06:	b292      	uxth	r2, r2
 8002d08:	4413      	add	r3, r2
 8002d0a:	7822      	ldrb	r2, [r4, #0]
 8002d0c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002d10:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002d14:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002d18:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002d1c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002d20:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002d24:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002d28:	b292      	uxth	r2, r2
 8002d2a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d2e:	7821      	ldrb	r1, [r4, #0]
 8002d30:	4628      	mov	r0, r5
 8002d32:	f004 fae3 	bl	80072fc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d36:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002d3a:	d041      	beq.n	8002dc0 <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d3c:	682a      	ldr	r2, [r5, #0]
 8002d3e:	7821      	ldrb	r1, [r4, #0]
 8002d40:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d56:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002d5a:	e031      	b.n	8002dc0 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61a3      	str	r3, [r4, #24]
 8002d60:	e7af      	b.n	8002cc2 <HAL_PCD_EP_DB_Transmit+0x36>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d1c9      	bne.n	8002cfa <HAL_PCD_EP_DB_Transmit+0x6e>
 8002d66:	682b      	ldr	r3, [r5, #0]
 8002d68:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002d6c:	b292      	uxth	r2, r2
 8002d6e:	4413      	add	r3, r2
 8002d70:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002d74:	2200      	movs	r2, #0
 8002d76:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002d7a:	e7be      	b.n	8002cfa <HAL_PCD_EP_DB_Transmit+0x6e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d7c:	2a01      	cmp	r2, #1
 8002d7e:	d1d6      	bne.n	8002d2e <HAL_PCD_EP_DB_Transmit+0xa2>
 8002d80:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002d84:	b292      	uxth	r2, r2
 8002d86:	4413      	add	r3, r2
 8002d88:	7822      	ldrb	r2, [r4, #0]
 8002d8a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002d94:	e7cb      	b.n	8002d2e <HAL_PCD_EP_DB_Transmit+0xa2>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d96:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002d9a:	d00d      	beq.n	8002db8 <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d9c:	6828      	ldr	r0, [r5, #0]
 8002d9e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db4:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002db8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d012      	beq.n	8002de6 <HAL_PCD_EP_DB_Transmit+0x15a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002dc0:	682a      	ldr	r2, [r5, #0]
 8002dc2:	7821      	ldrb	r1, [r4, #0]
 8002dc4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dde:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8002de2:	2000      	movs	r0, #0
 8002de4:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 8002de6:	6963      	ldr	r3, [r4, #20]
 8002de8:	4413      	add	r3, r2
 8002dea:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8002dec:	69e3      	ldr	r3, [r4, #28]
 8002dee:	4413      	add	r3, r2
 8002df0:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8002df2:	6a21      	ldr	r1, [r4, #32]
 8002df4:	6923      	ldr	r3, [r4, #16]
 8002df6:	4299      	cmp	r1, r3
 8002df8:	d324      	bcc.n	8002e44 <HAL_PCD_EP_DB_Transmit+0x1b8>
          ep->xfer_len_db -= len;
 8002dfa:	1ac9      	subs	r1, r1, r3
 8002dfc:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002dfe:	7862      	ldrb	r2, [r4, #1]
 8002e00:	2a00      	cmp	r2, #0
 8002e02:	d144      	bne.n	8002e8e <HAL_PCD_EP_DB_Transmit+0x202>
 8002e04:	682a      	ldr	r2, [r5, #0]
 8002e06:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8002e0a:	b289      	uxth	r1, r1
 8002e0c:	440a      	add	r2, r1
 8002e0e:	7821      	ldrb	r1, [r4, #0]
 8002e10:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002e14:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8002e18:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002e1c:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002e20:	2b3e      	cmp	r3, #62	; 0x3e
 8002e22:	d91b      	bls.n	8002e5c <HAL_PCD_EP_DB_Transmit+0x1d0>
 8002e24:	0958      	lsrs	r0, r3, #5
 8002e26:	f013 0f1f 	tst.w	r3, #31
 8002e2a:	d100      	bne.n	8002e2e <HAL_PCD_EP_DB_Transmit+0x1a2>
 8002e2c:	3801      	subs	r0, #1
 8002e2e:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8002e32:	b289      	uxth	r1, r1
 8002e34:	0280      	lsls	r0, r0, #10
 8002e36:	b280      	uxth	r0, r0
 8002e38:	4301      	orrs	r1, r0
 8002e3a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002e3e:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002e42:	e026      	b.n	8002e92 <HAL_PCD_EP_DB_Transmit+0x206>
        else if (ep->xfer_len_db == 0U)
 8002e44:	b921      	cbnz	r1, 8002e50 <HAL_PCD_EP_DB_Transmit+0x1c4>
          ep->xfer_fill_db = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	e7d6      	b.n	8002dfe <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8002e56:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8002e58:	460b      	mov	r3, r1
 8002e5a:	e7d0      	b.n	8002dfe <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e5c:	b94b      	cbnz	r3, 8002e72 <HAL_PCD_EP_DB_Transmit+0x1e6>
 8002e5e:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8002e62:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002e66:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002e6a:	b289      	uxth	r1, r1
 8002e6c:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002e70:	e00f      	b.n	8002e92 <HAL_PCD_EP_DB_Transmit+0x206>
 8002e72:	0859      	lsrs	r1, r3, #1
 8002e74:	f013 0f01 	tst.w	r3, #1
 8002e78:	d000      	beq.n	8002e7c <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002e7a:	3101      	adds	r1, #1
 8002e7c:	f8b2 0404 	ldrh.w	r0, [r2, #1028]	; 0x404
 8002e80:	b280      	uxth	r0, r0
 8002e82:	0289      	lsls	r1, r1, #10
 8002e84:	b289      	uxth	r1, r1
 8002e86:	4301      	orrs	r1, r0
 8002e88:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002e8c:	e001      	b.n	8002e92 <HAL_PCD_EP_DB_Transmit+0x206>
 8002e8e:	2a01      	cmp	r2, #1
 8002e90:	d006      	beq.n	8002ea0 <HAL_PCD_EP_DB_Transmit+0x214>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	8922      	ldrh	r2, [r4, #8]
 8002e96:	6961      	ldr	r1, [r4, #20]
 8002e98:	6828      	ldr	r0, [r5, #0]
 8002e9a:	f002 fe62 	bl	8005b62 <USB_WritePMA>
 8002e9e:	e78f      	b.n	8002dc0 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ea0:	682a      	ldr	r2, [r5, #0]
 8002ea2:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8002ea6:	b289      	uxth	r1, r1
 8002ea8:	440a      	add	r2, r1
 8002eaa:	7821      	ldrb	r1, [r4, #0]
 8002eac:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002eb0:	b299      	uxth	r1, r3
 8002eb2:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002eb6:	e7ec      	b.n	8002e92 <HAL_PCD_EP_DB_Transmit+0x206>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002eb8:	6802      	ldr	r2, [r0, #0]
 8002eba:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	7809      	ldrb	r1, [r1, #0]
 8002ec2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002ec6:	3306      	adds	r3, #6
 8002ec8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002ecc:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
 8002ed0:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8002ed4:	69a3      	ldr	r3, [r4, #24]
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d34f      	bcc.n	8002f7a <HAL_PCD_EP_DB_Transmit+0x2ee>
      ep->xfer_len -= TxPctSize;
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8002ede:	69a3      	ldr	r3, [r4, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d167      	bne.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x328>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ee4:	7863      	ldrb	r3, [r4, #1]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d14a      	bne.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8002eea:	682b      	ldr	r3, [r5, #0]
 8002eec:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002ef0:	b292      	uxth	r2, r2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002ef8:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002efc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002f00:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002f04:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002f08:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002f0c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002f10:	b292      	uxth	r2, r2
 8002f12:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f16:	682b      	ldr	r3, [r5, #0]
 8002f18:	7862      	ldrb	r2, [r4, #1]
 8002f1a:	2a00      	cmp	r2, #0
 8002f1c:	d13d      	bne.n	8002f9a <HAL_PCD_EP_DB_Transmit+0x30e>
 8002f1e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002f22:	b292      	uxth	r2, r2
 8002f24:	4413      	add	r3, r2
 8002f26:	7822      	ldrb	r2, [r4, #0]
 8002f28:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002f2c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002f30:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002f34:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002f38:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002f3c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002f40:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002f44:	b292      	uxth	r2, r2
 8002f46:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f4a:	7821      	ldrb	r1, [r4, #0]
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	f004 f9d5 	bl	80072fc <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f52:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002f56:	f47f af33 	bne.w	8002dc0 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f5a:	682a      	ldr	r2, [r5, #0]
 8002f5c:	7821      	ldrb	r1, [r4, #0]
 8002f5e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f74:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002f78:	e722      	b.n	8002dc0 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61a3      	str	r3, [r4, #24]
 8002f7e:	e7ae      	b.n	8002ede <HAL_PCD_EP_DB_Transmit+0x252>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d1c8      	bne.n	8002f16 <HAL_PCD_EP_DB_Transmit+0x28a>
 8002f84:	682b      	ldr	r3, [r5, #0]
 8002f86:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002f8a:	b292      	uxth	r2, r2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002f98:	e7bd      	b.n	8002f16 <HAL_PCD_EP_DB_Transmit+0x28a>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f9a:	2a01      	cmp	r2, #1
 8002f9c:	d1d5      	bne.n	8002f4a <HAL_PCD_EP_DB_Transmit+0x2be>
 8002f9e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002fa2:	b292      	uxth	r2, r2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	7822      	ldrb	r2, [r4, #0]
 8002fa8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002fac:	2200      	movs	r2, #0
 8002fae:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002fb2:	e7ca      	b.n	8002f4a <HAL_PCD_EP_DB_Transmit+0x2be>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fb4:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002fb8:	d10d      	bne.n	8002fd6 <HAL_PCD_EP_DB_Transmit+0x34a>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002fba:	6828      	ldr	r0, [r5, #0]
 8002fbc:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd2:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002fd6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	f47f aef0 	bne.w	8002dc0 <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxPctSize;
 8002fe0:	6963      	ldr	r3, [r4, #20]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8002fe6:	69e3      	ldr	r3, [r4, #28]
 8002fe8:	4413      	add	r3, r2
 8002fea:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fec:	6a21      	ldr	r1, [r4, #32]
 8002fee:	6923      	ldr	r3, [r4, #16]
 8002ff0:	4299      	cmp	r1, r3
 8002ff2:	d324      	bcc.n	800303e <HAL_PCD_EP_DB_Transmit+0x3b2>
          ep->xfer_len_db -= len;
 8002ff4:	1ac9      	subs	r1, r1, r3
 8002ff6:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ff8:	682a      	ldr	r2, [r5, #0]
 8002ffa:	7861      	ldrb	r1, [r4, #1]
 8002ffc:	2900      	cmp	r1, #0
 8002ffe:	d143      	bne.n	8003088 <HAL_PCD_EP_DB_Transmit+0x3fc>
 8003000:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8003004:	b289      	uxth	r1, r1
 8003006:	440a      	add	r2, r1
 8003008:	7821      	ldrb	r1, [r4, #0]
 800300a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800300e:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 8003012:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003016:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 800301a:	2b3e      	cmp	r3, #62	; 0x3e
 800301c:	d91b      	bls.n	8003056 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800301e:	0958      	lsrs	r0, r3, #5
 8003020:	f013 0f1f 	tst.w	r3, #31
 8003024:	d100      	bne.n	8003028 <HAL_PCD_EP_DB_Transmit+0x39c>
 8003026:	3801      	subs	r0, #1
 8003028:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 800302c:	b289      	uxth	r1, r1
 800302e:	0280      	lsls	r0, r0, #10
 8003030:	b280      	uxth	r0, r0
 8003032:	4301      	orrs	r1, r0
 8003034:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003038:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 800303c:	e026      	b.n	800308c <HAL_PCD_EP_DB_Transmit+0x400>
        else if (ep->xfer_len_db == 0U)
 800303e:	b921      	cbnz	r1, 800304a <HAL_PCD_EP_DB_Transmit+0x3be>
          ep->xfer_fill_db = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxPctSize;
 8003046:	4613      	mov	r3, r2
 8003048:	e7d6      	b.n	8002ff8 <HAL_PCD_EP_DB_Transmit+0x36c>
          ep->xfer_len_db = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 800304e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 8003052:	460b      	mov	r3, r1
 8003054:	e7d0      	b.n	8002ff8 <HAL_PCD_EP_DB_Transmit+0x36c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003056:	b94b      	cbnz	r3, 800306c <HAL_PCD_EP_DB_Transmit+0x3e0>
 8003058:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 800305c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003060:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003064:	b289      	uxth	r1, r1
 8003066:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 800306a:	e00f      	b.n	800308c <HAL_PCD_EP_DB_Transmit+0x400>
 800306c:	0859      	lsrs	r1, r3, #1
 800306e:	f013 0f01 	tst.w	r3, #1
 8003072:	d000      	beq.n	8003076 <HAL_PCD_EP_DB_Transmit+0x3ea>
 8003074:	3101      	adds	r1, #1
 8003076:	f8b2 040c 	ldrh.w	r0, [r2, #1036]	; 0x40c
 800307a:	b280      	uxth	r0, r0
 800307c:	0289      	lsls	r1, r1, #10
 800307e:	b289      	uxth	r1, r1
 8003080:	4301      	orrs	r1, r0
 8003082:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8003086:	e001      	b.n	800308c <HAL_PCD_EP_DB_Transmit+0x400>
 8003088:	2901      	cmp	r1, #1
 800308a:	d006      	beq.n	800309a <HAL_PCD_EP_DB_Transmit+0x40e>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800308c:	b29b      	uxth	r3, r3
 800308e:	8962      	ldrh	r2, [r4, #10]
 8003090:	6961      	ldr	r1, [r4, #20]
 8003092:	6828      	ldr	r0, [r5, #0]
 8003094:	f002 fd65 	bl	8005b62 <USB_WritePMA>
 8003098:	e692      	b.n	8002dc0 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800309a:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800309e:	b289      	uxth	r1, r1
 80030a0:	440a      	add	r2, r1
 80030a2:	7821      	ldrb	r1, [r4, #0]
 80030a4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80030a8:	b299      	uxth	r1, r3
 80030aa:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80030ae:	e7ed      	b.n	800308c <HAL_PCD_EP_DB_Transmit+0x400>

080030b0 <PCD_EP_ISR_Handler>:
{
 80030b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030b4:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030b6:	6828      	ldr	r0, [r5, #0]
 80030b8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80030bc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80030c0:	f000 8299 	beq.w	80035f6 <PCD_EP_ISR_Handler+0x546>
    wIstr = hpcd->Instance->ISTR;
 80030c4:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 80030c8:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 80030ca:	f014 040f 	ands.w	r4, r4, #15
 80030ce:	f040 80de 	bne.w	800328e <PCD_EP_ISR_Handler+0x1de>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80030d2:	f013 0f10 	tst.w	r3, #16
 80030d6:	d06b      	beq.n	80031b0 <PCD_EP_ISR_Handler+0x100>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80030d8:	8803      	ldrh	r3, [r0, #0]
 80030da:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80030dc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80030e0:	f040 8099 	bne.w	8003216 <PCD_EP_ISR_Handler+0x166>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80030e4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80030e8:	d0e5      	beq.n	80030b6 <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030ea:	8803      	ldrh	r3, [r0, #0]
 80030ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f0:	051b      	lsls	r3, r3, #20
 80030f2:	0d1b      	lsrs	r3, r3, #20
 80030f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f8:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030fa:	6828      	ldr	r0, [r5, #0]
 80030fc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003100:	b29b      	uxth	r3, r3
 8003102:	f895 2150 	ldrb.w	r2, [r5, #336]	; 0x150
 8003106:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800310a:	3306      	adds	r3, #6
 800310c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003110:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003114:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003118:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800311c:	b18b      	cbz	r3, 8003142 <PCD_EP_ISR_Handler+0x92>
 800311e:	f8d5 1164 	ldr.w	r1, [r5, #356]	; 0x164
 8003122:	b171      	cbz	r1, 8003142 <PCD_EP_ISR_Handler+0x92>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003124:	f8b5 2156 	ldrh.w	r2, [r5, #342]	; 0x156
 8003128:	f003 f915 	bl	8006356 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800312c:	f8d5 216c 	ldr.w	r2, [r5, #364]	; 0x16c
 8003130:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
 8003134:	4413      	add	r3, r2
 8003136:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800313a:	2100      	movs	r1, #0
 800313c:	4628      	mov	r0, r5
 800313e:	f004 f8d1 	bl	80072e4 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003142:	682a      	ldr	r2, [r5, #0]
 8003144:	8813      	ldrh	r3, [r2, #0]
 8003146:	b299      	uxth	r1, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003148:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800314c:	d1b3      	bne.n	80030b6 <PCD_EP_ISR_Handler+0x6>
 800314e:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 8003152:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8003156:	d0ae      	beq.n	80030b6 <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003158:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800315c:	b29b      	uxth	r3, r3
 800315e:	441a      	add	r2, r3
 8003160:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8003164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003168:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 800316c:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
 8003170:	2b3e      	cmp	r3, #62	; 0x3e
 8003172:	d973      	bls.n	800325c <PCD_EP_ISR_Handler+0x1ac>
 8003174:	0959      	lsrs	r1, r3, #5
 8003176:	f013 0f1f 	tst.w	r3, #31
 800317a:	d100      	bne.n	800317e <PCD_EP_ISR_Handler+0xce>
 800317c:	3901      	subs	r1, #1
 800317e:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8003182:	b29b      	uxth	r3, r3
 8003184:	0289      	lsls	r1, r1, #10
 8003186:	b289      	uxth	r1, r1
 8003188:	430b      	orrs	r3, r1
 800318a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800318e:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003192:	682a      	ldr	r2, [r5, #0]
 8003194:	8813      	ldrh	r3, [r2, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800319c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80031a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ac:	8013      	strh	r3, [r2, #0]
 80031ae:	e782      	b.n	80030b6 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031b0:	8803      	ldrh	r3, [r0, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80031b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031c8:	682a      	ldr	r2, [r5, #0]
 80031ca:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	7c29      	ldrb	r1, [r5, #16]
 80031d2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80031d6:	3302      	adds	r3, #2
 80031d8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80031dc:	f8b2 3400 	ldrh.w	r3, [r2, #1024]	; 0x400
 80031e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031e4:	62eb      	str	r3, [r5, #44]	; 0x2c
        ep->xfer_buff += ep->xfer_count;
 80031e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80031e8:	441a      	add	r2, r3
 80031ea:	626a      	str	r2, [r5, #36]	; 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80031ec:	2100      	movs	r1, #0
 80031ee:	4628      	mov	r0, r5
 80031f0:	f004 f884 	bl	80072fc <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80031f4:	7b6b      	ldrb	r3, [r5, #13]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f43f af5d 	beq.w	80030b6 <PCD_EP_ISR_Handler+0x6>
 80031fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f47f af59 	bne.w	80030b6 <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003204:	7b6b      	ldrb	r3, [r5, #13]
 8003206:	682a      	ldr	r2, [r5, #0]
 8003208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800320c:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	736b      	strb	r3, [r5, #13]
 8003214:	e74f      	b.n	80030b6 <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003216:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800321a:	b29b      	uxth	r3, r3
 800321c:	f895 2150 	ldrb.w	r2, [r5, #336]	; 0x150
 8003220:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003224:	3306      	adds	r3, #6
 8003226:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800322a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800322e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003232:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003236:	f8b5 2156 	ldrh.w	r2, [r5, #342]	; 0x156
 800323a:	f505 7126 	add.w	r1, r5, #664	; 0x298
 800323e:	f003 f88a 	bl	8006356 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003242:	682a      	ldr	r2, [r5, #0]
 8003244:	8813      	ldrh	r3, [r2, #0]
 8003246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324a:	051b      	lsls	r3, r3, #20
 800324c:	0d1b      	lsrs	r3, r3, #20
 800324e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003252:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003254:	4628      	mov	r0, r5
 8003256:	f004 f83d 	bl	80072d4 <HAL_PCD_SetupStageCallback>
 800325a:	e72c      	b.n	80030b6 <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800325c:	b94b      	cbnz	r3, 8003272 <PCD_EP_ISR_Handler+0x1c2>
 800325e:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8003262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800326a:	b29b      	uxth	r3, r3
 800326c:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8003270:	e78f      	b.n	8003192 <PCD_EP_ISR_Handler+0xe2>
 8003272:	0859      	lsrs	r1, r3, #1
 8003274:	f013 0f01 	tst.w	r3, #1
 8003278:	d000      	beq.n	800327c <PCD_EP_ISR_Handler+0x1cc>
 800327a:	3101      	adds	r1, #1
 800327c:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8003280:	b298      	uxth	r0, r3
 8003282:	028b      	lsls	r3, r1, #10
 8003284:	b29b      	uxth	r3, r3
 8003286:	4303      	orrs	r3, r0
 8003288:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 800328c:	e781      	b.n	8003192 <PCD_EP_ISR_Handler+0xe2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800328e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003292:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003294:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003298:	d150      	bne.n	800333c <PCD_EP_ISR_Handler+0x28c>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800329a:	f016 0f80 	tst.w	r6, #128	; 0x80
 800329e:	f43f af0a 	beq.w	80030b6 <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 80032a2:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80032a6:	00c9      	lsls	r1, r1, #3
 80032a8:	3110      	adds	r1, #16
 80032aa:	4429      	add	r1, r5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80032ac:	682a      	ldr	r2, [r5, #0]
 80032ae:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80032b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 80032ca:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80032ce:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80032d2:	7cdb      	ldrb	r3, [r3, #19]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	f000 80f2 	beq.w	80034be <PCD_EP_ISR_Handler+0x40e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 80032da:	f416 7f80 	tst.w	r6, #256	; 0x100
 80032de:	f040 8185 	bne.w	80035ec <PCD_EP_ISR_Handler+0x53c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032e2:	6828      	ldr	r0, [r5, #0]
 80032e4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80032ee:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80032f2:	7c16      	ldrb	r6, [r2, #16]
 80032f4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80032f8:	3302      	adds	r3, #2
 80032fa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80032fe:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003302:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 8003306:	1c62      	adds	r2, r4, #1
 8003308:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800330c:	f855 2032 	ldr.w	r2, [r5, r2, lsl #3]
 8003310:	429a      	cmp	r2, r3
 8003312:	f240 8152 	bls.w	80035ba <PCD_EP_ISR_Handler+0x50a>
              ep->xfer_len -= TxPctSize;
 8003316:	1c67      	adds	r7, r4, #1
 8003318:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800331c:	1ad2      	subs	r2, r2, r3
 800331e:	f845 2037 	str.w	r2, [r5, r7, lsl #3]
            if (ep->xfer_len == 0U)
 8003322:	1c62      	adds	r2, r4, #1
 8003324:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003328:	f855 2032 	ldr.w	r2, [r5, r2, lsl #3]
 800332c:	2a00      	cmp	r2, #0
 800332e:	f040 814b 	bne.w	80035c8 <PCD_EP_ISR_Handler+0x518>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003332:	4631      	mov	r1, r6
 8003334:	4628      	mov	r0, r5
 8003336:	f003 ffe1 	bl	80072fc <HAL_PCD_DataInStageCallback>
 800333a:	e6bc      	b.n	80030b6 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800333c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	0d1b      	lsrs	r3, r3, #20
 8003348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800334c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8003350:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003354:	00c9      	lsls	r1, r1, #3
 8003356:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800335a:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 800335e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003362:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8003366:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800336a:	2b00      	cmp	r3, #0
 800336c:	d142      	bne.n	80033f4 <PCD_EP_ISR_Handler+0x344>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800336e:	6828      	ldr	r0, [r5, #0]
 8003370:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003374:	b29b      	uxth	r3, r3
 8003376:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800337a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800337e:	f892 2150 	ldrb.w	r2, [r2, #336]	; 0x150
 8003382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003386:	3306      	adds	r3, #6
 8003388:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800338c:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8003390:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8003394:	bb17      	cbnz	r7, 80033dc <PCD_EP_ISR_Handler+0x32c>
        ep->xfer_count += count;
 8003396:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800339a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800339e:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 80033a2:	443a      	add	r2, r7
 80033a4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        ep->xfer_buff += count;
 80033a8:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 80033ac:	443a      	add	r2, r7
 80033ae:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80033b2:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80033b6:	b13b      	cbz	r3, 80033c8 <PCD_EP_ISR_Handler+0x318>
 80033b8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80033bc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80033c0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80033c4:	429f      	cmp	r7, r3
 80033c6:	d275      	bcs.n	80034b4 <PCD_EP_ISR_Handler+0x404>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80033c8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80033cc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80033d0:	f893 1150 	ldrb.w	r1, [r3, #336]	; 0x150
 80033d4:	4628      	mov	r0, r5
 80033d6:	f003 ff85 	bl	80072e4 <HAL_PCD_DataOutStageCallback>
 80033da:	e75e      	b.n	800329a <PCD_EP_ISR_Handler+0x1ea>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80033dc:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80033e0:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80033e4:	463b      	mov	r3, r7
 80033e6:	f8b1 2156 	ldrh.w	r2, [r1, #342]	; 0x156
 80033ea:	f8d1 1164 	ldr.w	r1, [r1, #356]	; 0x164
 80033ee:	f002 ffb2 	bl	8006356 <USB_ReadPMA>
 80033f2:	e7d0      	b.n	8003396 <PCD_EP_ISR_Handler+0x2e6>
          if (ep->type == EP_TYPE_BULK)
 80033f4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80033f8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80033fc:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 8003400:	2b02      	cmp	r3, #2
 8003402:	d035      	beq.n	8003470 <PCD_EP_ISR_Handler+0x3c0>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003404:	6829      	ldr	r1, [r5, #0]
 8003406:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800340a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800340e:	f892 0150 	ldrb.w	r0, [r2, #336]	; 0x150
 8003412:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8003416:	b29b      	uxth	r3, r3
 8003418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800341c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003424:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003428:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800342c:	6828      	ldr	r0, [r5, #0]
 800342e:	f892 2150 	ldrb.w	r2, [r2, #336]	; 0x150
 8003432:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003436:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800343a:	d020      	beq.n	800347e <PCD_EP_ISR_Handler+0x3ce>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800343c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003440:	b29b      	uxth	r3, r3
 8003442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003446:	3302      	adds	r3, #2
 8003448:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800344c:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8003450:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8003454:	2f00      	cmp	r7, #0
 8003456:	d09e      	beq.n	8003396 <PCD_EP_ISR_Handler+0x2e6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003458:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800345c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8003460:	463b      	mov	r3, r7
 8003462:	f8b1 2158 	ldrh.w	r2, [r1, #344]	; 0x158
 8003466:	f8d1 1164 	ldr.w	r1, [r1, #356]	; 0x164
 800346a:	f002 ff74 	bl	8006356 <USB_ReadPMA>
 800346e:	e792      	b.n	8003396 <PCD_EP_ISR_Handler+0x2e6>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003470:	4632      	mov	r2, r6
 8003472:	4641      	mov	r1, r8
 8003474:	4628      	mov	r0, r5
 8003476:	f7ff faee 	bl	8002a56 <HAL_PCD_EP_DB_Receive>
 800347a:	4607      	mov	r7, r0
 800347c:	e78b      	b.n	8003396 <PCD_EP_ISR_Handler+0x2e6>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800347e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003482:	b29b      	uxth	r3, r3
 8003484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003488:	3306      	adds	r3, #6
 800348a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800348e:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8003492:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8003496:	2f00      	cmp	r7, #0
 8003498:	f43f af7d 	beq.w	8003396 <PCD_EP_ISR_Handler+0x2e6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800349c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80034a0:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80034a4:	463b      	mov	r3, r7
 80034a6:	f8b1 215a 	ldrh.w	r2, [r1, #346]	; 0x15a
 80034aa:	f8d1 1164 	ldr.w	r1, [r1, #356]	; 0x164
 80034ae:	f002 ff52 	bl	8006356 <USB_ReadPMA>
 80034b2:	e770      	b.n	8003396 <PCD_EP_ISR_Handler+0x2e6>
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034b4:	4641      	mov	r1, r8
 80034b6:	6828      	ldr	r0, [r5, #0]
 80034b8:	f002 fb66 	bl	8005b88 <USB_EPStartXfer>
 80034bc:	e6ed      	b.n	800329a <PCD_EP_ISR_Handler+0x1ea>
          ep->xfer_len = 0U;
 80034be:	1c63      	adds	r3, r4, #1
 80034c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	2200      	movs	r2, #0
 80034c8:	50ea      	str	r2, [r5, r3]
          if (ep->doublebuffer != 0U)
 80034ca:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80034ce:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80034d2:	7f1b      	ldrb	r3, [r3, #28]
 80034d4:	b31b      	cbz	r3, 800351e <PCD_EP_ISR_Handler+0x46e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034d6:	f016 0f40 	tst.w	r6, #64	; 0x40
 80034da:	d03b      	beq.n	8003554 <PCD_EP_ISR_Handler+0x4a4>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034dc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80034e0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80034e4:	7c5b      	ldrb	r3, [r3, #17]
 80034e6:	bb1b      	cbnz	r3, 8003530 <PCD_EP_ISR_Handler+0x480>
 80034e8:	682b      	ldr	r3, [r5, #0]
 80034ea:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80034ee:	b292      	uxth	r2, r2
 80034f0:	4413      	add	r3, r2
 80034f2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80034f6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80034fa:	7c12      	ldrb	r2, [r2, #16]
 80034fc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003500:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8003504:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003508:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800350c:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8003510:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003514:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003518:	b292      	uxth	r2, r2
 800351a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800351e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003522:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8003526:	7c21      	ldrb	r1, [r4, #16]
 8003528:	4628      	mov	r0, r5
 800352a:	f003 fee7 	bl	80072fc <HAL_PCD_DataInStageCallback>
 800352e:	e5c2      	b.n	80030b6 <PCD_EP_ISR_Handler+0x6>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003530:	2b01      	cmp	r3, #1
 8003532:	d1f4      	bne.n	800351e <PCD_EP_ISR_Handler+0x46e>
 8003534:	682b      	ldr	r3, [r5, #0]
 8003536:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800353a:	b292      	uxth	r2, r2
 800353c:	4413      	add	r3, r2
 800353e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003542:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003546:	7c12      	ldrb	r2, [r2, #16]
 8003548:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800354c:	2200      	movs	r2, #0
 800354e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8003552:	e7e4      	b.n	800351e <PCD_EP_ISR_Handler+0x46e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003554:	682b      	ldr	r3, [r5, #0]
 8003556:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800355a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800355e:	7c52      	ldrb	r2, [r2, #17]
 8003560:	b9d2      	cbnz	r2, 8003598 <PCD_EP_ISR_Handler+0x4e8>
 8003562:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003566:	b292      	uxth	r2, r2
 8003568:	4413      	add	r3, r2
 800356a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800356e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003572:	7c12      	ldrb	r2, [r2, #16]
 8003574:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003578:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 800357c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003580:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003584:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8003588:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800358c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003590:	b292      	uxth	r2, r2
 8003592:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003596:	e7c2      	b.n	800351e <PCD_EP_ISR_Handler+0x46e>
 8003598:	2a01      	cmp	r2, #1
 800359a:	d1c0      	bne.n	800351e <PCD_EP_ISR_Handler+0x46e>
 800359c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80035a0:	b292      	uxth	r2, r2
 80035a2:	4413      	add	r3, r2
 80035a4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80035a8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80035ac:	7c12      	ldrb	r2, [r2, #16]
 80035ae:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80035b2:	2200      	movs	r2, #0
 80035b4:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80035b8:	e7b1      	b.n	800351e <PCD_EP_ISR_Handler+0x46e>
              ep->xfer_len = 0U;
 80035ba:	1c62      	adds	r2, r4, #1
 80035bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80035c0:	00d2      	lsls	r2, r2, #3
 80035c2:	2700      	movs	r7, #0
 80035c4:	50af      	str	r7, [r5, r2]
 80035c6:	e6ac      	b.n	8003322 <PCD_EP_ISR_Handler+0x272>
              ep->xfer_buff += TxPctSize;
 80035c8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80035cc:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80035d0:	6a56      	ldr	r6, [r2, #36]	; 0x24
 80035d2:	441e      	add	r6, r3
 80035d4:	6256      	str	r6, [r2, #36]	; 0x24
              ep->xfer_count += TxPctSize;
 80035d6:	3401      	adds	r4, #1
 80035d8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80035dc:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80035e0:	6854      	ldr	r4, [r2, #4]
 80035e2:	4423      	add	r3, r4
 80035e4:	6053      	str	r3, [r2, #4]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035e6:	f002 facf 	bl	8005b88 <USB_EPStartXfer>
 80035ea:	e564      	b.n	80030b6 <PCD_EP_ISR_Handler+0x6>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80035ec:	4632      	mov	r2, r6
 80035ee:	4628      	mov	r0, r5
 80035f0:	f7ff fb4c 	bl	8002c8c <HAL_PCD_EP_DB_Transmit>
 80035f4:	e55f      	b.n	80030b6 <PCD_EP_ISR_Handler+0x6>
}
 80035f6:	2000      	movs	r0, #0
 80035f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080035fc <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80035fc:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8003600:	2b01      	cmp	r3, #1
 8003602:	d00c      	beq.n	800361e <HAL_PCD_SetAddress+0x22>
{
 8003604:	b510      	push	{r4, lr}
 8003606:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003608:	2301      	movs	r3, #1
 800360a:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  hpcd->USB_Address = address;
 800360e:	7341      	strb	r1, [r0, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003610:	6800      	ldr	r0, [r0, #0]
 8003612:	f002 fa96 	bl	8005b42 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003616:	2000      	movs	r0, #0
 8003618:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
}
 800361c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800361e:	2002      	movs	r0, #2
}
 8003620:	4770      	bx	lr

08003622 <HAL_PCD_IRQHandler>:
{
 8003622:	b510      	push	{r4, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003628:	6800      	ldr	r0, [r0, #0]
 800362a:	f002 fa94 	bl	8005b56 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800362e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003632:	d120      	bne.n	8003676 <HAL_PCD_IRQHandler+0x54>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003634:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8003638:	d121      	bne.n	800367e <HAL_PCD_IRQHandler+0x5c>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800363a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800363e:	d12f      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x7e>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003640:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8003644:	d137      	bne.n	80036b6 <HAL_PCD_IRQHandler+0x94>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003646:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 800364a:	d13e      	bne.n	80036ca <HAL_PCD_IRQHandler+0xa8>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800364c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8003650:	f040 8087 	bne.w	8003762 <HAL_PCD_IRQHandler+0x140>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003654:	f410 7f00 	tst.w	r0, #512	; 0x200
 8003658:	f040 80ae 	bne.w	80037b8 <HAL_PCD_IRQHandler+0x196>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800365c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003660:	d027      	beq.n	80036b2 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003662:	6822      	ldr	r2, [r4, #0]
 8003664:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003668:	b29b      	uxth	r3, r3
 800366a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800366e:	b29b      	uxth	r3, r3
 8003670:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8003674:	e01d      	b.n	80036b2 <HAL_PCD_IRQHandler+0x90>
    (void)PCD_EP_ISR_Handler(hpcd);
 8003676:	4620      	mov	r0, r4
 8003678:	f7ff fd1a 	bl	80030b0 <PCD_EP_ISR_Handler>
    return;
 800367c:	e019      	b.n	80036b2 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800367e:	6822      	ldr	r2, [r4, #0]
 8003680:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003684:	b29b      	uxth	r3, r3
 8003686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800368a:	b29b      	uxth	r3, r3
 800368c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003690:	4620      	mov	r0, r4
 8003692:	f003 fe44 	bl	800731e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003696:	2100      	movs	r1, #0
 8003698:	4620      	mov	r0, r4
 800369a:	f7ff ffaf 	bl	80035fc <HAL_PCD_SetAddress>
    return;
 800369e:	e008      	b.n	80036b2 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80036a0:	6822      	ldr	r2, [r4, #0]
 80036a2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80036b2:	b004      	add	sp, #16
 80036b4:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80036b6:	6822      	ldr	r2, [r4, #0]
 80036b8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 80036c8:	e7f3      	b.n	80036b2 <HAL_PCD_IRQHandler+0x90>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80036ca:	6822      	ldr	r2, [r4, #0]
 80036cc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f023 0304 	bic.w	r3, r3, #4
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80036dc:	6822      	ldr	r2, [r4, #0]
 80036de:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	f023 0308 	bic.w	r3, r3, #8
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80036ee:	4620      	mov	r0, r4
 80036f0:	f003 fe38 	bl	8007364 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80036f4:	6822      	ldr	r2, [r4, #0]
 80036f6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003700:	b29b      	uxth	r3, r3
 8003702:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8003706:	e7d4      	b.n	80036b2 <HAL_PCD_IRQHandler+0x90>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003708:	6822      	ldr	r2, [r4, #0]
 800370a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800370e:	aa04      	add	r2, sp, #16
 8003710:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003714:	f822 1c10 	strh.w	r1, [r2, #-16]
    for (i = 0U; i < 8U; i++)
 8003718:	3301      	adds	r3, #1
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b07      	cmp	r3, #7
 800371e:	d9f3      	bls.n	8003708 <HAL_PCD_IRQHandler+0xe6>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003720:	6822      	ldr	r2, [r4, #0]
 8003722:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003726:	b29b      	uxth	r3, r3
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003730:	6822      	ldr	r2, [r4, #0]
 8003732:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003736:	b29b      	uxth	r3, r3
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	b29b      	uxth	r3, r3
 800373e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003748:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800374c:	d0f9      	beq.n	8003742 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800374e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003752:	b292      	uxth	r2, r2
 8003754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003758:	b292      	uxth	r2, r2
 800375a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    for (i = 0U; i < 8U; i++)
 800375e:	2300      	movs	r3, #0
 8003760:	e00b      	b.n	800377a <HAL_PCD_IRQHandler+0x158>
    for (i = 0U; i < 8U; i++)
 8003762:	2300      	movs	r3, #0
 8003764:	e7da      	b.n	800371c <HAL_PCD_IRQHandler+0xfa>
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003766:	6822      	ldr	r2, [r4, #0]
 8003768:	a904      	add	r1, sp, #16
 800376a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800376e:	f831 1c10 	ldrh.w	r1, [r1, #-16]
 8003772:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
    for (i = 0U; i < 8U; i++)
 8003776:	3301      	adds	r3, #1
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b07      	cmp	r3, #7
 800377c:	d9f3      	bls.n	8003766 <HAL_PCD_IRQHandler+0x144>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800377e:	6822      	ldr	r2, [r4, #0]
 8003780:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003784:	b29b      	uxth	r3, r3
 8003786:	f043 0308 	orr.w	r3, r3, #8
 800378a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800378e:	6822      	ldr	r2, [r4, #0]
 8003790:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003794:	b29b      	uxth	r3, r3
 8003796:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800379a:	b29b      	uxth	r3, r3
 800379c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80037a0:	6822      	ldr	r2, [r4, #0]
 80037a2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f043 0304 	orr.w	r3, r3, #4
 80037ac:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80037b0:	4620      	mov	r0, r4
 80037b2:	f003 fdc7 	bl	8007344 <HAL_PCD_SuspendCallback>
    return;
 80037b6:	e77c      	b.n	80036b2 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80037b8:	6822      	ldr	r2, [r4, #0]
 80037ba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80037ca:	4620      	mov	r0, r4
 80037cc:	f003 fda1 	bl	8007312 <HAL_PCD_SOFCallback>
    return;
 80037d0:	e76f      	b.n	80036b2 <HAL_PCD_IRQHandler+0x90>

080037d2 <HAL_PCD_EP_Open>:
{
 80037d2:	b510      	push	{r4, lr}
 80037d4:	4604      	mov	r4, r0
 80037d6:	4608      	mov	r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80037d8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80037dc:	d126      	bne.n	800382c <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037de:	f001 0c07 	and.w	ip, r1, #7
 80037e2:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
 80037e6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80037ea:	f50e 7ea8 	add.w	lr, lr, #336	; 0x150
 80037ee:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 80037f2:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80037f6:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 80037fa:	f04f 0e00 	mov.w	lr, #0
 80037fe:	f88c e151 	strb.w	lr, [ip, #337]	; 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 8003802:	f000 0007 	and.w	r0, r0, #7
 8003806:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 8003808:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800380a:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 800380c:	2b02      	cmp	r3, #2
 800380e:	d01d      	beq.n	800384c <HAL_PCD_EP_Open+0x7a>
  __HAL_LOCK(hpcd);
 8003810:	f894 3290 	ldrb.w	r3, [r4, #656]	; 0x290
 8003814:	2b01      	cmp	r3, #1
 8003816:	d01c      	beq.n	8003852 <HAL_PCD_EP_Open+0x80>
 8003818:	2301      	movs	r3, #1
 800381a:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800381e:	6820      	ldr	r0, [r4, #0]
 8003820:	f001 fe49 	bl	80054b6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003824:	2000      	movs	r0, #0
 8003826:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
}
 800382a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800382c:	f001 0c07 	and.w	ip, r1, #7
 8003830:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8003834:	00c9      	lsls	r1, r1, #3
 8003836:	3110      	adds	r1, #16
 8003838:	4421      	add	r1, r4
    ep->is_in = 1U;
 800383a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800383e:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8003842:	f04f 0e01 	mov.w	lr, #1
 8003846:	f88c e011 	strb.w	lr, [ip, #17]
 800384a:	e7da      	b.n	8003802 <HAL_PCD_EP_Open+0x30>
    ep->data_pid_start = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	710b      	strb	r3, [r1, #4]
 8003850:	e7de      	b.n	8003810 <HAL_PCD_EP_Open+0x3e>
  __HAL_LOCK(hpcd);
 8003852:	2002      	movs	r0, #2
 8003854:	e7e9      	b.n	800382a <HAL_PCD_EP_Open+0x58>

08003856 <HAL_PCD_EP_Close>:
{
 8003856:	b510      	push	{r4, lr}
 8003858:	4604      	mov	r4, r0
 800385a:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800385c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003860:	d11f      	bne.n	80038a2 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003862:	f001 0007 	and.w	r0, r1, #7
 8003866:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003870:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8003872:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003876:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800387a:	2300      	movs	r3, #0
 800387c:	f880 3151 	strb.w	r3, [r0, #337]	; 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 8003880:	f002 0207 	and.w	r2, r2, #7
 8003884:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003886:	f894 3290 	ldrb.w	r3, [r4, #656]	; 0x290
 800388a:	2b01      	cmp	r3, #1
 800388c:	d017      	beq.n	80038be <HAL_PCD_EP_Close+0x68>
 800388e:	2301      	movs	r3, #1
 8003890:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003894:	6820      	ldr	r0, [r4, #0]
 8003896:	f001 fff3 	bl	8005880 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800389a:	2000      	movs	r0, #0
 800389c:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
}
 80038a0:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038a2:	f001 0007 	and.w	r0, r1, #7
 80038a6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	3310      	adds	r3, #16
 80038ae:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 80038b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80038b4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80038b8:	2301      	movs	r3, #1
 80038ba:	7443      	strb	r3, [r0, #17]
 80038bc:	e7e0      	b.n	8003880 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 80038be:	2002      	movs	r0, #2
 80038c0:	e7ee      	b.n	80038a0 <HAL_PCD_EP_Close+0x4a>

080038c2 <HAL_PCD_EP_Receive>:
{
 80038c2:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038c4:	f001 0c07 	and.w	ip, r1, #7
 80038c8:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 80038cc:	00c9      	lsls	r1, r1, #3
 80038ce:	f501 71a8 	add.w	r1, r1, #336	; 0x150
  ep->xfer_buff = pBuf;
 80038d2:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
 80038d6:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80038da:	f8ce 2164 	str.w	r2, [lr, #356]	; 0x164
  ep->xfer_len = len;
 80038de:	f8ce 3168 	str.w	r3, [lr, #360]	; 0x168
  ep->xfer_count = 0U;
 80038e2:	2400      	movs	r4, #0
 80038e4:	f8ce 416c 	str.w	r4, [lr, #364]	; 0x16c
  ep->is_in = 0U;
 80038e8:	f88e 4151 	strb.w	r4, [lr, #337]	; 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ec:	f88e c150 	strb.w	ip, [lr, #336]	; 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038f0:	4401      	add	r1, r0
 80038f2:	6800      	ldr	r0, [r0, #0]
 80038f4:	f002 f948 	bl	8005b88 <USB_EPStartXfer>
}
 80038f8:	4620      	mov	r0, r4
 80038fa:	bd10      	pop	{r4, pc}

080038fc <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038fc:	f001 0107 	and.w	r1, r1, #7
 8003900:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003904:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 8003908:	f8d0 016c 	ldr.w	r0, [r0, #364]	; 0x16c
 800390c:	4770      	bx	lr

0800390e <HAL_PCD_EP_Transmit>:
{
 800390e:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003910:	f001 0c07 	and.w	ip, r1, #7
 8003914:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8003918:	00c9      	lsls	r1, r1, #3
 800391a:	3110      	adds	r1, #16
  ep->xfer_buff = pBuf;
 800391c:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
 8003920:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8003924:	f8ce 2024 	str.w	r2, [lr, #36]	; 0x24
  ep->xfer_len = len;
 8003928:	f10c 0201 	add.w	r2, ip, #1
 800392c:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 8003930:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
  ep->xfer_fill_db = 1U;
 8003934:	2501      	movs	r5, #1
 8003936:	f88e 5034 	strb.w	r5, [lr, #52]	; 0x34
  ep->xfer_len_db = len;
 800393a:	f8ce 3030 	str.w	r3, [lr, #48]	; 0x30
  ep->xfer_count = 0U;
 800393e:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
 8003942:	2400      	movs	r4, #0
 8003944:	6054      	str	r4, [r2, #4]
  ep->is_in = 1U;
 8003946:	f88e 5011 	strb.w	r5, [lr, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 800394a:	f88e c010 	strb.w	ip, [lr, #16]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800394e:	4401      	add	r1, r0
 8003950:	6800      	ldr	r0, [r0, #0]
 8003952:	f002 f919 	bl	8005b88 <USB_EPStartXfer>
}
 8003956:	4620      	mov	r0, r4
 8003958:	bd38      	pop	{r3, r4, r5, pc}

0800395a <HAL_PCD_EP_SetStall>:
{
 800395a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800395c:	f001 0507 	and.w	r5, r1, #7
 8003960:	7902      	ldrb	r2, [r0, #4]
 8003962:	42aa      	cmp	r2, r5
 8003964:	d335      	bcc.n	80039d2 <HAL_PCD_EP_SetStall+0x78>
 8003966:	4604      	mov	r4, r0
 8003968:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 800396a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800396e:	d11e      	bne.n	80039ae <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 8003970:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003974:	00c9      	lsls	r1, r1, #3
 8003976:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800397a:	4401      	add	r1, r0
    ep->is_in = 0U;
 800397c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003980:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
  ep->is_stall = 1U;
 800398a:	2301      	movs	r3, #1
 800398c:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800398e:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8003990:	f894 3290 	ldrb.w	r3, [r4, #656]	; 0x290
 8003994:	2b01      	cmp	r3, #1
 8003996:	d01e      	beq.n	80039d6 <HAL_PCD_EP_SetStall+0x7c>
 8003998:	2301      	movs	r3, #1
 800399a:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800399e:	6820      	ldr	r0, [r4, #0]
 80039a0:	f002 f859 	bl	8005a56 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039a4:	b17d      	cbz	r5, 80039c6 <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 80039a6:	2000      	movs	r0, #0
 80039a8:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
}
 80039ac:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ae:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80039b2:	00c9      	lsls	r1, r1, #3
 80039b4:	3110      	adds	r1, #16
 80039b6:	4401      	add	r1, r0
    ep->is_in = 1U;
 80039b8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80039bc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80039c0:	2201      	movs	r2, #1
 80039c2:	745a      	strb	r2, [r3, #17]
 80039c4:	e7e1      	b.n	800398a <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80039c6:	f504 7126 	add.w	r1, r4, #664	; 0x298
 80039ca:	6820      	ldr	r0, [r4, #0]
 80039cc:	f002 f8c7 	bl	8005b5e <USB_EP0_OutStart>
 80039d0:	e7e9      	b.n	80039a6 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 80039d2:	2001      	movs	r0, #1
 80039d4:	e7ea      	b.n	80039ac <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 80039d6:	2002      	movs	r0, #2
 80039d8:	e7e8      	b.n	80039ac <HAL_PCD_EP_SetStall+0x52>

080039da <HAL_PCD_EP_ClrStall>:
{
 80039da:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039dc:	7901      	ldrb	r1, [r0, #4]
 80039de:	f003 020f 	and.w	r2, r3, #15
 80039e2:	4291      	cmp	r1, r2
 80039e4:	d334      	bcc.n	8003a50 <HAL_PCD_EP_ClrStall+0x76>
{
 80039e6:	b510      	push	{r4, lr}
 80039e8:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80039ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80039ee:	d121      	bne.n	8003a34 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f0:	f003 0207 	and.w	r2, r3, #7
 80039f4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80039f8:	00c9      	lsls	r1, r1, #3
 80039fa:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 80039fe:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003a00:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003a04:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8003a08:	2000      	movs	r0, #0
 8003a0a:	f882 0151 	strb.w	r0, [r2, #337]	; 0x151
  ep->is_stall = 0U;
 8003a0e:	2200      	movs	r2, #0
 8003a10:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003a18:	f894 3290 	ldrb.w	r3, [r4, #656]	; 0x290
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d019      	beq.n	8003a54 <HAL_PCD_EP_ClrStall+0x7a>
 8003a20:	2301      	movs	r3, #1
 8003a22:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a26:	6820      	ldr	r0, [r4, #0]
 8003a28:	f002 f83a 	bl	8005aa0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
}
 8003a32:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a34:	f003 0207 	and.w	r2, r3, #7
 8003a38:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003a3c:	00c9      	lsls	r1, r1, #3
 8003a3e:	3110      	adds	r1, #16
 8003a40:	4401      	add	r1, r0
    ep->is_in = 1U;
 8003a42:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003a46:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	7450      	strb	r0, [r2, #17]
 8003a4e:	e7de      	b.n	8003a0e <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8003a50:	2001      	movs	r0, #1
}
 8003a52:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8003a54:	2002      	movs	r0, #2
 8003a56:	e7ec      	b.n	8003a32 <HAL_PCD_EP_ClrStall+0x58>

08003a58 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003a58:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003a5c:	d00b      	beq.n	8003a76 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a5e:	f001 0107 	and.w	r1, r1, #7
 8003a62:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003a66:	00c9      	lsls	r1, r1, #3
 8003a68:	3110      	adds	r1, #16
 8003a6a:	4408      	add	r0, r1
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003a6c:	b952      	cbnz	r2, 8003a84 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003a6e:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003a70:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8003a72:	2000      	movs	r0, #0
 8003a74:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8003a76:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003a7a:	00c9      	lsls	r1, r1, #3
 8003a7c:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8003a80:	4408      	add	r0, r1
 8003a82:	e7f3      	b.n	8003a6c <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8003a84:	2201      	movs	r2, #1
 8003a86:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003a88:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003a8a:	0c1b      	lsrs	r3, r3, #16
 8003a8c:	8143      	strh	r3, [r0, #10]
 8003a8e:	e7f0      	b.n	8003a72 <HAL_PCDEx_PMAConfig+0x1a>

08003a90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a90:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a92:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <RCC_Delay+0x24>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a08      	ldr	r2, [pc, #32]	; (8003ab8 <RCC_Delay+0x28>)
 8003a98:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9c:	0a5b      	lsrs	r3, r3, #9
 8003a9e:	fb00 f303 	mul.w	r3, r0, r3
 8003aa2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003aa4:	bf00      	nop
  }
  while (Delay --);
 8003aa6:	9b01      	ldr	r3, [sp, #4]
 8003aa8:	1e5a      	subs	r2, r3, #1
 8003aaa:	9201      	str	r2, [sp, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f9      	bne.n	8003aa4 <RCC_Delay+0x14>
}
 8003ab0:	b002      	add	sp, #8
 8003ab2:	4770      	bx	lr
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	10624dd3 	.word	0x10624dd3

08003abc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003abc:	2800      	cmp	r0, #0
 8003abe:	f000 81f1 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x3e8>
{
 8003ac2:	b570      	push	{r4, r5, r6, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac8:	6803      	ldr	r3, [r0, #0]
 8003aca:	f013 0f01 	tst.w	r3, #1
 8003ace:	d02c      	beq.n	8003b2a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ad0:	4b99      	ldr	r3, [pc, #612]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 030c 	and.w	r3, r3, #12
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d01d      	beq.n	8003b18 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003adc:	4b96      	ldr	r3, [pc, #600]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 030c 	and.w	r3, r3, #12
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d012      	beq.n	8003b0e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae8:	6863      	ldr	r3, [r4, #4]
 8003aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aee:	d041      	beq.n	8003b74 <HAL_RCC_OscConfig+0xb8>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d155      	bne.n	8003ba0 <HAL_RCC_OscConfig+0xe4>
 8003af4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003af8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	e037      	b.n	8003b7e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b0e:	4b8a      	ldr	r3, [pc, #552]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003b16:	d0e7      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	4b87      	ldr	r3, [pc, #540]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003b20:	d003      	beq.n	8003b2a <HAL_RCC_OscConfig+0x6e>
 8003b22:	6863      	ldr	r3, [r4, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 81bf 	beq.w	8003ea8 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	f013 0f02 	tst.w	r3, #2
 8003b30:	d075      	beq.n	8003c1e <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b32:	4b81      	ldr	r3, [pc, #516]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f013 0f0c 	tst.w	r3, #12
 8003b3a:	d05f      	beq.n	8003bfc <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b3c:	4b7e      	ldr	r3, [pc, #504]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 030c 	and.w	r3, r3, #12
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d054      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b48:	6923      	ldr	r3, [r4, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 808a 	beq.w	8003c64 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8003b50:	4b7a      	ldr	r3, [pc, #488]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003b56:	f7fd fb1d 	bl	8001194 <HAL_GetTick>
 8003b5a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5c:	4b76      	ldr	r3, [pc, #472]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f013 0f02 	tst.w	r3, #2
 8003b64:	d175      	bne.n	8003c52 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b66:	f7fd fb15 	bl	8001194 <HAL_GetTick>
 8003b6a:	1b40      	subs	r0, r0, r5
 8003b6c:	2802      	cmp	r0, #2
 8003b6e:	d9f5      	bls.n	8003b5c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8003b70:	2003      	movs	r0, #3
 8003b72:	e19e      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b74:	4a70      	ldr	r2, [pc, #448]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003b76:	6813      	ldr	r3, [r2, #0]
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b7e:	6863      	ldr	r3, [r4, #4]
 8003b80:	b343      	cbz	r3, 8003bd4 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8003b82:	f7fd fb07 	bl	8001194 <HAL_GetTick>
 8003b86:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b88:	4b6b      	ldr	r3, [pc, #428]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003b90:	d1cb      	bne.n	8003b2a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b92:	f7fd faff 	bl	8001194 <HAL_GetTick>
 8003b96:	1b40      	subs	r0, r0, r5
 8003b98:	2864      	cmp	r0, #100	; 0x64
 8003b9a:	d9f5      	bls.n	8003b88 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8003b9c:	2003      	movs	r0, #3
 8003b9e:	e188      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ba4:	d009      	beq.n	8003bba <HAL_RCC_OscConfig+0xfe>
 8003ba6:	4b64      	ldr	r3, [pc, #400]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	e7e1      	b.n	8003b7e <HAL_RCC_OscConfig+0xc2>
 8003bba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bbe:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	e7d4      	b.n	8003b7e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8003bd4:	f7fd fade 	bl	8001194 <HAL_GetTick>
 8003bd8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bda:	4b57      	ldr	r3, [pc, #348]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003be2:	d0a2      	beq.n	8003b2a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fd fad6 	bl	8001194 <HAL_GetTick>
 8003be8:	1b40      	subs	r0, r0, r5
 8003bea:	2864      	cmp	r0, #100	; 0x64
 8003bec:	d9f5      	bls.n	8003bda <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8003bee:	2003      	movs	r0, #3
 8003bf0:	e15f      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bf2:	4b51      	ldr	r3, [pc, #324]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003bfa:	d1a5      	bne.n	8003b48 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfc:	4b4e      	ldr	r3, [pc, #312]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f013 0f02 	tst.w	r3, #2
 8003c04:	d003      	beq.n	8003c0e <HAL_RCC_OscConfig+0x152>
 8003c06:	6923      	ldr	r3, [r4, #16]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	f040 814f 	bne.w	8003eac <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0e:	4a4a      	ldr	r2, [pc, #296]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003c10:	6813      	ldr	r3, [r2, #0]
 8003c12:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003c16:	6961      	ldr	r1, [r4, #20]
 8003c18:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003c1c:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	f013 0f08 	tst.w	r3, #8
 8003c24:	d033      	beq.n	8003c8e <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c26:	69a3      	ldr	r3, [r4, #24]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d05c      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8003c2c:	4b43      	ldr	r3, [pc, #268]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003c34:	f7fd faae 	bl	8001194 <HAL_GetTick>
 8003c38:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3a:	4b3f      	ldr	r3, [pc, #252]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	f013 0f02 	tst.w	r3, #2
 8003c42:	d121      	bne.n	8003c88 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c44:	f7fd faa6 	bl	8001194 <HAL_GetTick>
 8003c48:	1b40      	subs	r0, r0, r5
 8003c4a:	2802      	cmp	r0, #2
 8003c4c:	d9f5      	bls.n	8003c3a <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8003c4e:	2003      	movs	r0, #3
 8003c50:	e12f      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c52:	4a39      	ldr	r2, [pc, #228]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003c54:	6813      	ldr	r3, [r2, #0]
 8003c56:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003c5a:	6961      	ldr	r1, [r4, #20]
 8003c5c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	e7dc      	b.n	8003c1e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8003c64:	4b35      	ldr	r3, [pc, #212]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003c6a:	f7fd fa93 	bl	8001194 <HAL_GetTick>
 8003c6e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c70:	4b31      	ldr	r3, [pc, #196]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f013 0f02 	tst.w	r3, #2
 8003c78:	d0d1      	beq.n	8003c1e <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7a:	f7fd fa8b 	bl	8001194 <HAL_GetTick>
 8003c7e:	1b40      	subs	r0, r0, r5
 8003c80:	2802      	cmp	r0, #2
 8003c82:	d9f5      	bls.n	8003c70 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8003c84:	2003      	movs	r0, #3
 8003c86:	e114      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8003c88:	2001      	movs	r0, #1
 8003c8a:	f7ff ff01 	bl	8003a90 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	f013 0f04 	tst.w	r3, #4
 8003c94:	f000 8096 	beq.w	8003dc4 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c98:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003ca0:	d134      	bne.n	8003d0c <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca2:	4b25      	ldr	r3, [pc, #148]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003ca4:	69da      	ldr	r2, [r3, #28]
 8003ca6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003caa:	61da      	str	r2, [r3, #28]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	9301      	str	r3, [sp, #4]
 8003cb4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003cb6:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb8:	4b21      	ldr	r3, [pc, #132]	; (8003d40 <HAL_RCC_OscConfig+0x284>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003cc0:	d026      	beq.n	8003d10 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc2:	68e3      	ldr	r3, [r4, #12]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d03d      	beq.n	8003d44 <HAL_RCC_OscConfig+0x288>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d153      	bne.n	8003d74 <HAL_RCC_OscConfig+0x2b8>
 8003ccc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cd0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003cd4:	6a1a      	ldr	r2, [r3, #32]
 8003cd6:	f022 0201 	bic.w	r2, r2, #1
 8003cda:	621a      	str	r2, [r3, #32]
 8003cdc:	6a1a      	ldr	r2, [r3, #32]
 8003cde:	f022 0204 	bic.w	r2, r2, #4
 8003ce2:	621a      	str	r2, [r3, #32]
 8003ce4:	e033      	b.n	8003d4e <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8003ce6:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003cee:	f7fd fa51 	bl	8001194 <HAL_GetTick>
 8003cf2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf4:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f013 0f02 	tst.w	r3, #2
 8003cfc:	d0c7      	beq.n	8003c8e <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfe:	f7fd fa49 	bl	8001194 <HAL_GetTick>
 8003d02:	1b40      	subs	r0, r0, r5
 8003d04:	2802      	cmp	r0, #2
 8003d06:	d9f5      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8003d08:	2003      	movs	r0, #3
 8003d0a:	e0d2      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8003d0c:	2500      	movs	r5, #0
 8003d0e:	e7d3      	b.n	8003cb8 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d10:	4a0b      	ldr	r2, [pc, #44]	; (8003d40 <HAL_RCC_OscConfig+0x284>)
 8003d12:	6813      	ldr	r3, [r2, #0]
 8003d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d18:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003d1a:	f7fd fa3b 	bl	8001194 <HAL_GetTick>
 8003d1e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d20:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <HAL_RCC_OscConfig+0x284>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003d28:	d1cb      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2a:	f7fd fa33 	bl	8001194 <HAL_GetTick>
 8003d2e:	1b80      	subs	r0, r0, r6
 8003d30:	2864      	cmp	r0, #100	; 0x64
 8003d32:	d9f5      	bls.n	8003d20 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8003d34:	2003      	movs	r0, #3
 8003d36:	e0bc      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	42420000 	.word	0x42420000
 8003d40:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d44:	4a5f      	ldr	r2, [pc, #380]	; (8003ec4 <HAL_RCC_OscConfig+0x408>)
 8003d46:	6a13      	ldr	r3, [r2, #32]
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d4e:	68e3      	ldr	r3, [r4, #12]
 8003d50:	b333      	cbz	r3, 8003da0 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8003d52:	f7fd fa1f 	bl	8001194 <HAL_GetTick>
 8003d56:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d58:	4b5a      	ldr	r3, [pc, #360]	; (8003ec4 <HAL_RCC_OscConfig+0x408>)
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f013 0f02 	tst.w	r3, #2
 8003d60:	d12f      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d62:	f7fd fa17 	bl	8001194 <HAL_GetTick>
 8003d66:	1b80      	subs	r0, r0, r6
 8003d68:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d6c:	4298      	cmp	r0, r3
 8003d6e:	d9f3      	bls.n	8003d58 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8003d70:	2003      	movs	r0, #3
 8003d72:	e09e      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d74:	2b05      	cmp	r3, #5
 8003d76:	d009      	beq.n	8003d8c <HAL_RCC_OscConfig+0x2d0>
 8003d78:	4b52      	ldr	r3, [pc, #328]	; (8003ec4 <HAL_RCC_OscConfig+0x408>)
 8003d7a:	6a1a      	ldr	r2, [r3, #32]
 8003d7c:	f022 0201 	bic.w	r2, r2, #1
 8003d80:	621a      	str	r2, [r3, #32]
 8003d82:	6a1a      	ldr	r2, [r3, #32]
 8003d84:	f022 0204 	bic.w	r2, r2, #4
 8003d88:	621a      	str	r2, [r3, #32]
 8003d8a:	e7e0      	b.n	8003d4e <HAL_RCC_OscConfig+0x292>
 8003d8c:	4b4d      	ldr	r3, [pc, #308]	; (8003ec4 <HAL_RCC_OscConfig+0x408>)
 8003d8e:	6a1a      	ldr	r2, [r3, #32]
 8003d90:	f042 0204 	orr.w	r2, r2, #4
 8003d94:	621a      	str	r2, [r3, #32]
 8003d96:	6a1a      	ldr	r2, [r3, #32]
 8003d98:	f042 0201 	orr.w	r2, r2, #1
 8003d9c:	621a      	str	r2, [r3, #32]
 8003d9e:	e7d6      	b.n	8003d4e <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8003da0:	f7fd f9f8 	bl	8001194 <HAL_GetTick>
 8003da4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da6:	4b47      	ldr	r3, [pc, #284]	; (8003ec4 <HAL_RCC_OscConfig+0x408>)
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	f013 0f02 	tst.w	r3, #2
 8003dae:	d008      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db0:	f7fd f9f0 	bl	8001194 <HAL_GetTick>
 8003db4:	1b80      	subs	r0, r0, r6
 8003db6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003dba:	4298      	cmp	r0, r3
 8003dbc:	d9f3      	bls.n	8003da6 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8003dbe:	2003      	movs	r0, #3
 8003dc0:	e077      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8003dc2:	b9e5      	cbnz	r5, 8003dfe <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dc4:	69e3      	ldr	r3, [r4, #28]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d072      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dca:	4a3e      	ldr	r2, [pc, #248]	; (8003ec4 <HAL_RCC_OscConfig+0x408>)
 8003dcc:	6852      	ldr	r2, [r2, #4]
 8003dce:	f002 020c 	and.w	r2, r2, #12
 8003dd2:	2a08      	cmp	r2, #8
 8003dd4:	d056      	beq.n	8003e84 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d017      	beq.n	8003e0a <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8003dda:	4b3b      	ldr	r3, [pc, #236]	; (8003ec8 <HAL_RCC_OscConfig+0x40c>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003de0:	f7fd f9d8 	bl	8001194 <HAL_GetTick>
 8003de4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de6:	4b37      	ldr	r3, [pc, #220]	; (8003ec4 <HAL_RCC_OscConfig+0x408>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003dee:	d047      	beq.n	8003e80 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df0:	f7fd f9d0 	bl	8001194 <HAL_GetTick>
 8003df4:	1b00      	subs	r0, r0, r4
 8003df6:	2802      	cmp	r0, #2
 8003df8:	d9f5      	bls.n	8003de6 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8003dfa:	2003      	movs	r0, #3
 8003dfc:	e059      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfe:	4a31      	ldr	r2, [pc, #196]	; (8003ec4 <HAL_RCC_OscConfig+0x408>)
 8003e00:	69d3      	ldr	r3, [r2, #28]
 8003e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e06:	61d3      	str	r3, [r2, #28]
 8003e08:	e7dc      	b.n	8003dc4 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8003e0a:	4b2f      	ldr	r3, [pc, #188]	; (8003ec8 <HAL_RCC_OscConfig+0x40c>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003e10:	f7fd f9c0 	bl	8001194 <HAL_GetTick>
 8003e14:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e16:	4b2b      	ldr	r3, [pc, #172]	; (8003ec4 <HAL_RCC_OscConfig+0x408>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003e1e:	d006      	beq.n	8003e2e <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e20:	f7fd f9b8 	bl	8001194 <HAL_GetTick>
 8003e24:	1b40      	subs	r0, r0, r5
 8003e26:	2802      	cmp	r0, #2
 8003e28:	d9f5      	bls.n	8003e16 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8003e2a:	2003      	movs	r0, #3
 8003e2c:	e041      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e2e:	6a23      	ldr	r3, [r4, #32]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d01a      	beq.n	8003e6c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e36:	4923      	ldr	r1, [pc, #140]	; (8003ec4 <HAL_RCC_OscConfig+0x408>)
 8003e38:	684b      	ldr	r3, [r1, #4]
 8003e3a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8003e3e:	6a22      	ldr	r2, [r4, #32]
 8003e40:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003e42:	4302      	orrs	r2, r0
 8003e44:	4313      	orrs	r3, r2
 8003e46:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003e48:	4b1f      	ldr	r3, [pc, #124]	; (8003ec8 <HAL_RCC_OscConfig+0x40c>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003e4e:	f7fd f9a1 	bl	8001194 <HAL_GetTick>
 8003e52:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_RCC_OscConfig+0x408>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003e5c:	d10e      	bne.n	8003e7c <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5e:	f7fd f999 	bl	8001194 <HAL_GetTick>
 8003e62:	1b00      	subs	r0, r0, r4
 8003e64:	2802      	cmp	r0, #2
 8003e66:	d9f5      	bls.n	8003e54 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8003e68:	2003      	movs	r0, #3
 8003e6a:	e022      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e6c:	4a15      	ldr	r2, [pc, #84]	; (8003ec4 <HAL_RCC_OscConfig+0x408>)
 8003e6e:	6853      	ldr	r3, [r2, #4]
 8003e70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e74:	68a1      	ldr	r1, [r4, #8]
 8003e76:	430b      	orrs	r3, r1
 8003e78:	6053      	str	r3, [r2, #4]
 8003e7a:	e7dc      	b.n	8003e36 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	e018      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
 8003e80:	2000      	movs	r0, #0
 8003e82:	e016      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d016      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8003e88:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <HAL_RCC_OscConfig+0x408>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003e90:	6a22      	ldr	r2, [r4, #32]
 8003e92:	4291      	cmp	r1, r2
 8003e94:	d111      	bne.n	8003eba <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e96:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d10e      	bne.n	8003ebe <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	e006      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8003ea4:	2001      	movs	r0, #1
}
 8003ea6:	4770      	bx	lr
        return HAL_ERROR;
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	e002      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8003eac:	2001      	movs	r0, #1
 8003eae:	e000      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8003eb0:	2000      	movs	r0, #0
}
 8003eb2:	b002      	add	sp, #8
 8003eb4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003eb6:	2001      	movs	r0, #1
 8003eb8:	e7fb      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8003eba:	2001      	movs	r0, #1
 8003ebc:	e7f9      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	e7f7      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3f6>
 8003ec2:	bf00      	nop
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	42420000 	.word	0x42420000

08003ecc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003ecc:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x40>)
 8003ece:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003ed0:	f003 020c 	and.w	r2, r3, #12
 8003ed4:	2a08      	cmp	r2, #8
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8003ed8:	480d      	ldr	r0, [pc, #52]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x44>)
}
 8003eda:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003edc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003ee0:	490c      	ldr	r1, [pc, #48]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x48>)
 8003ee2:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ee4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003ee8:	d00b      	beq.n	8003f02 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003eea:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x40>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003ef2:	4a09      	ldr	r2, [pc, #36]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x4c>)
 8003ef4:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ef6:	4a06      	ldr	r2, [pc, #24]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x44>)
 8003ef8:	fb02 f000 	mul.w	r0, r2, r0
 8003efc:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f00:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f02:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x50>)
 8003f04:	fb03 f000 	mul.w	r0, r3, r0
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	007a1200 	.word	0x007a1200
 8003f14:	08009d58 	.word	0x08009d58
 8003f18:	08009d68 	.word	0x08009d68
 8003f1c:	003d0900 	.word	0x003d0900

08003f20 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003f20:	2800      	cmp	r0, #0
 8003f22:	f000 80a0 	beq.w	8004066 <HAL_RCC_ClockConfig+0x146>
{
 8003f26:	b570      	push	{r4, r5, r6, lr}
 8003f28:	460d      	mov	r5, r1
 8003f2a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f2c:	4b52      	ldr	r3, [pc, #328]	; (8004078 <HAL_RCC_ClockConfig+0x158>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	428b      	cmp	r3, r1
 8003f36:	d20b      	bcs.n	8003f50 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f38:	4a4f      	ldr	r2, [pc, #316]	; (8004078 <HAL_RCC_ClockConfig+0x158>)
 8003f3a:	6813      	ldr	r3, [r2, #0]
 8003f3c:	f023 0307 	bic.w	r3, r3, #7
 8003f40:	430b      	orrs	r3, r1
 8003f42:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f44:	6813      	ldr	r3, [r2, #0]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	428b      	cmp	r3, r1
 8003f4c:	f040 808d 	bne.w	800406a <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	f013 0f02 	tst.w	r3, #2
 8003f56:	d017      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f58:	f013 0f04 	tst.w	r3, #4
 8003f5c:	d004      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f5e:	4a47      	ldr	r2, [pc, #284]	; (800407c <HAL_RCC_ClockConfig+0x15c>)
 8003f60:	6853      	ldr	r3, [r2, #4]
 8003f62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f66:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	f013 0f08 	tst.w	r3, #8
 8003f6e:	d004      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f70:	4a42      	ldr	r2, [pc, #264]	; (800407c <HAL_RCC_ClockConfig+0x15c>)
 8003f72:	6853      	ldr	r3, [r2, #4]
 8003f74:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f78:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f7a:	4a40      	ldr	r2, [pc, #256]	; (800407c <HAL_RCC_ClockConfig+0x15c>)
 8003f7c:	6853      	ldr	r3, [r2, #4]
 8003f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f82:	68a1      	ldr	r1, [r4, #8]
 8003f84:	430b      	orrs	r3, r1
 8003f86:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	f013 0f01 	tst.w	r3, #1
 8003f8e:	d031      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f90:	6863      	ldr	r3, [r4, #4]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d020      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d025      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f9a:	4a38      	ldr	r2, [pc, #224]	; (800407c <HAL_RCC_ClockConfig+0x15c>)
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	f012 0f02 	tst.w	r2, #2
 8003fa2:	d064      	beq.n	800406e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fa4:	4935      	ldr	r1, [pc, #212]	; (800407c <HAL_RCC_ClockConfig+0x15c>)
 8003fa6:	684a      	ldr	r2, [r1, #4]
 8003fa8:	f022 0203 	bic.w	r2, r2, #3
 8003fac:	4313      	orrs	r3, r2
 8003fae:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003fb0:	f7fd f8f0 	bl	8001194 <HAL_GetTick>
 8003fb4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	4b31      	ldr	r3, [pc, #196]	; (800407c <HAL_RCC_ClockConfig+0x15c>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	6862      	ldr	r2, [r4, #4]
 8003fc0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003fc4:	d016      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc6:	f7fd f8e5 	bl	8001194 <HAL_GetTick>
 8003fca:	1b80      	subs	r0, r0, r6
 8003fcc:	f241 3388 	movw	r3, #5000	; 0x1388
 8003fd0:	4298      	cmp	r0, r3
 8003fd2:	d9f0      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8003fd4:	2003      	movs	r0, #3
 8003fd6:	e045      	b.n	8004064 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd8:	4a28      	ldr	r2, [pc, #160]	; (800407c <HAL_RCC_ClockConfig+0x15c>)
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003fe0:	d1e0      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003fe2:	2001      	movs	r0, #1
 8003fe4:	e03e      	b.n	8004064 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe6:	4a25      	ldr	r2, [pc, #148]	; (800407c <HAL_RCC_ClockConfig+0x15c>)
 8003fe8:	6812      	ldr	r2, [r2, #0]
 8003fea:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003fee:	d1d9      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003ff0:	2001      	movs	r0, #1
 8003ff2:	e037      	b.n	8004064 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b20      	ldr	r3, [pc, #128]	; (8004078 <HAL_RCC_ClockConfig+0x158>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	42ab      	cmp	r3, r5
 8003ffe:	d90a      	bls.n	8004016 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004000:	4a1d      	ldr	r2, [pc, #116]	; (8004078 <HAL_RCC_ClockConfig+0x158>)
 8004002:	6813      	ldr	r3, [r2, #0]
 8004004:	f023 0307 	bic.w	r3, r3, #7
 8004008:	432b      	orrs	r3, r5
 800400a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400c:	6813      	ldr	r3, [r2, #0]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	42ab      	cmp	r3, r5
 8004014:	d12d      	bne.n	8004072 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	f013 0f04 	tst.w	r3, #4
 800401c:	d006      	beq.n	800402c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800401e:	4a17      	ldr	r2, [pc, #92]	; (800407c <HAL_RCC_ClockConfig+0x15c>)
 8004020:	6853      	ldr	r3, [r2, #4]
 8004022:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004026:	68e1      	ldr	r1, [r4, #12]
 8004028:	430b      	orrs	r3, r1
 800402a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	f013 0f08 	tst.w	r3, #8
 8004032:	d007      	beq.n	8004044 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004034:	4a11      	ldr	r2, [pc, #68]	; (800407c <HAL_RCC_ClockConfig+0x15c>)
 8004036:	6853      	ldr	r3, [r2, #4]
 8004038:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800403c:	6921      	ldr	r1, [r4, #16]
 800403e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004042:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004044:	f7ff ff42 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 8004048:	4b0c      	ldr	r3, [pc, #48]	; (800407c <HAL_RCC_ClockConfig+0x15c>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004050:	4a0b      	ldr	r2, [pc, #44]	; (8004080 <HAL_RCC_ClockConfig+0x160>)
 8004052:	5cd3      	ldrb	r3, [r2, r3]
 8004054:	40d8      	lsrs	r0, r3
 8004056:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_RCC_ClockConfig+0x164>)
 8004058:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <HAL_RCC_ClockConfig+0x168>)
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	f7fd f855 	bl	800110c <HAL_InitTick>
  return HAL_OK;
 8004062:	2000      	movs	r0, #0
}
 8004064:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004066:	2001      	movs	r0, #1
}
 8004068:	4770      	bx	lr
    return HAL_ERROR;
 800406a:	2001      	movs	r0, #1
 800406c:	e7fa      	b.n	8004064 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800406e:	2001      	movs	r0, #1
 8004070:	e7f8      	b.n	8004064 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8004072:	2001      	movs	r0, #1
 8004074:	e7f6      	b.n	8004064 <HAL_RCC_ClockConfig+0x144>
 8004076:	bf00      	nop
 8004078:	40022000 	.word	0x40022000
 800407c:	40021000 	.word	0x40021000
 8004080:	08009d40 	.word	0x08009d40
 8004084:	20000000 	.word	0x20000000
 8004088:	20000008 	.word	0x20000008

0800408c <HAL_RCC_GetHCLKFreq>:
}
 800408c:	4b01      	ldr	r3, [pc, #4]	; (8004094 <HAL_RCC_GetHCLKFreq+0x8>)
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	20000000 	.word	0x20000000

08004098 <HAL_RCC_GetPCLK1Freq>:
{
 8004098:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800409a:	f7ff fff7 	bl	800408c <HAL_RCC_GetHCLKFreq>
 800409e:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80040a6:	4a03      	ldr	r2, [pc, #12]	; (80040b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80040a8:	5cd3      	ldrb	r3, [r2, r3]
}
 80040aa:	40d8      	lsrs	r0, r3
 80040ac:	bd08      	pop	{r3, pc}
 80040ae:	bf00      	nop
 80040b0:	40021000 	.word	0x40021000
 80040b4:	08009d50 	.word	0x08009d50

080040b8 <HAL_RCC_GetPCLK2Freq>:
{
 80040b8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040ba:	f7ff ffe7 	bl	800408c <HAL_RCC_GetHCLKFreq>
 80040be:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80040c6:	4a03      	ldr	r2, [pc, #12]	; (80040d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80040c8:	5cd3      	ldrb	r3, [r2, r3]
}
 80040ca:	40d8      	lsrs	r0, r3
 80040cc:	bd08      	pop	{r3, pc}
 80040ce:	bf00      	nop
 80040d0:	40021000 	.word	0x40021000
 80040d4:	08009d50 	.word	0x08009d50

080040d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d8:	b570      	push	{r4, r5, r6, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80040de:	6803      	ldr	r3, [r0, #0]
 80040e0:	f013 0f01 	tst.w	r3, #1
 80040e4:	d036      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040e6:	4b3f      	ldr	r3, [pc, #252]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80040ee:	d149      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f0:	4b3c      	ldr	r3, [pc, #240]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80040f8:	61da      	str	r2, [r3, #28]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004104:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004106:	4b38      	ldr	r3, [pc, #224]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800410e:	d03b      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004110:	4b34      	ldr	r3, [pc, #208]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004112:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004114:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004118:	d013      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800411a:	6862      	ldr	r2, [r4, #4]
 800411c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004120:	429a      	cmp	r2, r3
 8004122:	d00e      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004124:	4a2f      	ldr	r2, [pc, #188]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004126:	6a13      	ldr	r3, [r2, #32]
 8004128:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800412c:	492f      	ldr	r1, [pc, #188]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800412e:	2601      	movs	r6, #1
 8004130:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004134:	2600      	movs	r6, #0
 8004136:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800413a:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800413c:	f013 0f01 	tst.w	r3, #1
 8004140:	d136      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004142:	4a28      	ldr	r2, [pc, #160]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004144:	6a13      	ldr	r3, [r2, #32]
 8004146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414a:	6861      	ldr	r1, [r4, #4]
 800414c:	430b      	orrs	r3, r1
 800414e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004150:	2d00      	cmp	r5, #0
 8004152:	d13e      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	f013 0f02 	tst.w	r3, #2
 800415a:	d006      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800415c:	4a21      	ldr	r2, [pc, #132]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800415e:	6853      	ldr	r3, [r2, #4]
 8004160:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004164:	68a1      	ldr	r1, [r4, #8]
 8004166:	430b      	orrs	r3, r1
 8004168:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	f013 0f10 	tst.w	r3, #16
 8004170:	d034      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004172:	4a1c      	ldr	r2, [pc, #112]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004174:	6853      	ldr	r3, [r2, #4]
 8004176:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800417a:	68e1      	ldr	r1, [r4, #12]
 800417c:	430b      	orrs	r3, r1
 800417e:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004180:	2000      	movs	r0, #0
 8004182:	e02c      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8004184:	2500      	movs	r5, #0
 8004186:	e7be      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004188:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800418a:	6813      	ldr	r3, [r2, #0]
 800418c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004190:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004192:	f7fc ffff 	bl	8001194 <HAL_GetTick>
 8004196:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004198:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f413 7f80 	tst.w	r3, #256	; 0x100
 80041a0:	d1b6      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a2:	f7fc fff7 	bl	8001194 <HAL_GetTick>
 80041a6:	1b80      	subs	r0, r0, r6
 80041a8:	2864      	cmp	r0, #100	; 0x64
 80041aa:	d9f5      	bls.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 80041ac:	2003      	movs	r0, #3
 80041ae:	e016      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 80041b0:	f7fc fff0 	bl	8001194 <HAL_GetTick>
 80041b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b6:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	f013 0f02 	tst.w	r3, #2
 80041be:	d1c0      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c0:	f7fc ffe8 	bl	8001194 <HAL_GetTick>
 80041c4:	1b80      	subs	r0, r0, r6
 80041c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80041ca:	4298      	cmp	r0, r3
 80041cc:	d9f3      	bls.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 80041ce:	2003      	movs	r0, #3
 80041d0:	e005      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d2:	69d3      	ldr	r3, [r2, #28]
 80041d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d8:	61d3      	str	r3, [r2, #28]
 80041da:	e7bb      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 80041dc:	2000      	movs	r0, #0
}
 80041de:	b002      	add	sp, #8
 80041e0:	bd70      	pop	{r4, r5, r6, pc}
 80041e2:	bf00      	nop
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40007000 	.word	0x40007000
 80041ec:	42420000 	.word	0x42420000

080041f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	4605      	mov	r5, r0
 80041f8:	4688      	mov	r8, r1
 80041fa:	4617      	mov	r7, r2
 80041fc:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041fe:	f7fc ffc9 	bl	8001194 <HAL_GetTick>
 8004202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004204:	1a1b      	subs	r3, r3, r0
 8004206:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 800420a:	f7fc ffc3 	bl	8001194 <HAL_GetTick>
 800420e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004210:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004218:	fb09 f303 	mul.w	r3, r9, r3
 800421c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800421e:	682b      	ldr	r3, [r5, #0]
 8004220:	689c      	ldr	r4, [r3, #8]
 8004222:	ea38 0404 	bics.w	r4, r8, r4
 8004226:	bf0c      	ite	eq
 8004228:	2301      	moveq	r3, #1
 800422a:	2300      	movne	r3, #0
 800422c:	42bb      	cmp	r3, r7
 800422e:	d040      	beq.n	80042b2 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004230:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8004234:	d0f3      	beq.n	800421e <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004236:	f7fc ffad 	bl	8001194 <HAL_GetTick>
 800423a:	eba0 000a 	sub.w	r0, r0, sl
 800423e:	4548      	cmp	r0, r9
 8004240:	d20a      	bcs.n	8004258 <SPI_WaitFlagStateUntilTimeout+0x68>
 8004242:	f1b9 0f00 	cmp.w	r9, #0
 8004246:	d007      	beq.n	8004258 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004248:	9a01      	ldr	r2, [sp, #4]
 800424a:	b102      	cbz	r2, 800424e <SPI_WaitFlagStateUntilTimeout+0x5e>
 800424c:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800424e:	9b01      	ldr	r3, [sp, #4]
 8004250:	3b01      	subs	r3, #1
 8004252:	9301      	str	r3, [sp, #4]
 8004254:	4691      	mov	r9, r2
 8004256:	e7e2      	b.n	800421e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004258:	682a      	ldr	r2, [r5, #0]
 800425a:	6853      	ldr	r3, [r2, #4]
 800425c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004260:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004262:	686b      	ldr	r3, [r5, #4]
 8004264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004268:	d00b      	beq.n	8004282 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800426a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800426c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004270:	d014      	beq.n	800429c <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8004272:	2301      	movs	r3, #1
 8004274:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004278:	2300      	movs	r3, #0
 800427a:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 800427e:	2003      	movs	r0, #3
 8004280:	e018      	b.n	80042b4 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004282:	68ab      	ldr	r3, [r5, #8]
 8004284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004288:	d002      	beq.n	8004290 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800428a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428e:	d1ec      	bne.n	800426a <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8004290:	682a      	ldr	r2, [r5, #0]
 8004292:	6813      	ldr	r3, [r2, #0]
 8004294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	e7e6      	b.n	800426a <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 800429c:	682a      	ldr	r2, [r5, #0]
 800429e:	6813      	ldr	r3, [r2, #0]
 80042a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	682a      	ldr	r2, [r5, #0]
 80042a8:	6813      	ldr	r3, [r2, #0]
 80042aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	e7df      	b.n	8004272 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 80042b2:	2000      	movs	r0, #0
}
 80042b4:	b002      	add	sp, #8
 80042b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ba:	bf00      	nop
 80042bc:	20000000 	.word	0x20000000

080042c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042c0:	b570      	push	{r4, r5, r6, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	4606      	mov	r6, r0
 80042c6:	460c      	mov	r4, r1
 80042c8:	4615      	mov	r5, r2
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80042ca:	9200      	str	r2, [sp, #0]
 80042cc:	460b      	mov	r3, r1
 80042ce:	2201      	movs	r2, #1
 80042d0:	2102      	movs	r1, #2
 80042d2:	f7ff ff8d 	bl	80041f0 <SPI_WaitFlagStateUntilTimeout>
 80042d6:	b948      	cbnz	r0, 80042ec <SPI_EndRxTxTransaction+0x2c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042d8:	9500      	str	r5, [sp, #0]
 80042da:	4623      	mov	r3, r4
 80042dc:	2200      	movs	r2, #0
 80042de:	2180      	movs	r1, #128	; 0x80
 80042e0:	4630      	mov	r0, r6
 80042e2:	f7ff ff85 	bl	80041f0 <SPI_WaitFlagStateUntilTimeout>
 80042e6:	b938      	cbnz	r0, 80042f8 <SPI_EndRxTxTransaction+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 80042e8:	b002      	add	sp, #8
 80042ea:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042ec:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80042ee:	f043 0320 	orr.w	r3, r3, #32
 80042f2:	6573      	str	r3, [r6, #84]	; 0x54
    return HAL_TIMEOUT;
 80042f4:	2003      	movs	r0, #3
 80042f6:	e7f7      	b.n	80042e8 <SPI_EndRxTxTransaction+0x28>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042f8:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80042fa:	f043 0320 	orr.w	r3, r3, #32
 80042fe:	6573      	str	r3, [r6, #84]	; 0x54
    return HAL_TIMEOUT;
 8004300:	2003      	movs	r0, #3
 8004302:	e7f1      	b.n	80042e8 <SPI_EndRxTxTransaction+0x28>

08004304 <SPI_EndRxTransaction>:
{
 8004304:	b510      	push	{r4, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	4604      	mov	r4, r0
 800430a:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800430c:	6841      	ldr	r1, [r0, #4]
 800430e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004312:	d010      	beq.n	8004336 <SPI_EndRxTransaction+0x32>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004314:	6861      	ldr	r1, [r4, #4]
 8004316:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800431a:	d103      	bne.n	8004324 <SPI_EndRxTransaction+0x20>
 800431c:	68a1      	ldr	r1, [r4, #8]
 800431e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004322:	d015      	beq.n	8004350 <SPI_EndRxTransaction+0x4c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004324:	9200      	str	r2, [sp, #0]
 8004326:	2200      	movs	r2, #0
 8004328:	2180      	movs	r1, #128	; 0x80
 800432a:	4620      	mov	r0, r4
 800432c:	f7ff ff60 	bl	80041f0 <SPI_WaitFlagStateUntilTimeout>
 8004330:	b9e0      	cbnz	r0, 800436c <SPI_EndRxTransaction+0x68>
}
 8004332:	b002      	add	sp, #8
 8004334:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004336:	6881      	ldr	r1, [r0, #8]
 8004338:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800433c:	d002      	beq.n	8004344 <SPI_EndRxTransaction+0x40>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800433e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004342:	d1e7      	bne.n	8004314 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8004344:	6820      	ldr	r0, [r4, #0]
 8004346:	6801      	ldr	r1, [r0, #0]
 8004348:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800434c:	6001      	str	r1, [r0, #0]
 800434e:	e7e1      	b.n	8004314 <SPI_EndRxTransaction+0x10>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004350:	9200      	str	r2, [sp, #0]
 8004352:	2200      	movs	r2, #0
 8004354:	2101      	movs	r1, #1
 8004356:	4620      	mov	r0, r4
 8004358:	f7ff ff4a 	bl	80041f0 <SPI_WaitFlagStateUntilTimeout>
 800435c:	2800      	cmp	r0, #0
 800435e:	d0e8      	beq.n	8004332 <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004360:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004362:	f043 0320 	orr.w	r3, r3, #32
 8004366:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004368:	2003      	movs	r0, #3
 800436a:	e7e2      	b.n	8004332 <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800436c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800436e:	f043 0320 	orr.w	r3, r3, #32
 8004372:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004374:	2003      	movs	r0, #3
 8004376:	e7dc      	b.n	8004332 <SPI_EndRxTransaction+0x2e>

08004378 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004378:	2800      	cmp	r0, #0
 800437a:	d056      	beq.n	800442a <HAL_SPI_Init+0xb2>
{
 800437c:	b510      	push	{r4, lr}
 800437e:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004380:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004382:	b933      	cbnz	r3, 8004392 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004384:	6843      	ldr	r3, [r0, #4]
 8004386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800438a:	d005      	beq.n	8004398 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800438c:	2300      	movs	r3, #0
 800438e:	61c3      	str	r3, [r0, #28]
 8004390:	e002      	b.n	8004398 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004392:	2300      	movs	r3, #0
 8004394:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004396:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004398:	2300      	movs	r3, #0
 800439a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800439c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d03c      	beq.n	800441e <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 80043a4:	2302      	movs	r3, #2
 80043a6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80043aa:	6822      	ldr	r2, [r4, #0]
 80043ac:	6813      	ldr	r3, [r2, #0]
 80043ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043b4:	6863      	ldr	r3, [r4, #4]
 80043b6:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80043ba:	68a2      	ldr	r2, [r4, #8]
 80043bc:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80043c0:	4313      	orrs	r3, r2
 80043c2:	68e2      	ldr	r2, [r4, #12]
 80043c4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80043c8:	4313      	orrs	r3, r2
 80043ca:	6922      	ldr	r2, [r4, #16]
 80043cc:	f002 0202 	and.w	r2, r2, #2
 80043d0:	4313      	orrs	r3, r2
 80043d2:	6962      	ldr	r2, [r4, #20]
 80043d4:	f002 0201 	and.w	r2, r2, #1
 80043d8:	4313      	orrs	r3, r2
 80043da:	69a2      	ldr	r2, [r4, #24]
 80043dc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80043e0:	4313      	orrs	r3, r2
 80043e2:	69e2      	ldr	r2, [r4, #28]
 80043e4:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80043e8:	4313      	orrs	r3, r2
 80043ea:	6a22      	ldr	r2, [r4, #32]
 80043ec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80043f0:	4313      	orrs	r3, r2
 80043f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80043f4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80043f8:	6821      	ldr	r1, [r4, #0]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80043fe:	8b63      	ldrh	r3, [r4, #26]
 8004400:	6822      	ldr	r2, [r4, #0]
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004408:	6822      	ldr	r2, [r4, #0]
 800440a:	69d3      	ldr	r3, [r2, #28]
 800440c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004410:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004412:	2000      	movs	r0, #0
 8004414:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004416:	2301      	movs	r3, #1
 8004418:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800441c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800441e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004422:	4620      	mov	r0, r4
 8004424:	f7fc fcbe 	bl	8000da4 <HAL_SPI_MspInit>
 8004428:	e7bc      	b.n	80043a4 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800442a:	2001      	movs	r0, #1
}
 800442c:	4770      	bx	lr

0800442e <HAL_SPI_Transmit>:
{
 800442e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004432:	b083      	sub	sp, #12
 8004434:	4604      	mov	r4, r0
 8004436:	4689      	mov	r9, r1
 8004438:	4690      	mov	r8, r2
 800443a:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 800443c:	f7fc feaa 	bl	8001194 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004440:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8004444:	b2f6      	uxtb	r6, r6
 8004446:	2e01      	cmp	r6, #1
 8004448:	f040 80cc 	bne.w	80045e4 <HAL_SPI_Transmit+0x1b6>
 800444c:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 800444e:	f1b9 0f00 	cmp.w	r9, #0
 8004452:	f000 80c8 	beq.w	80045e6 <HAL_SPI_Transmit+0x1b8>
 8004456:	f1b8 0f00 	cmp.w	r8, #0
 800445a:	f000 80c4 	beq.w	80045e6 <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 800445e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004462:	2b01      	cmp	r3, #1
 8004464:	f000 80c3 	beq.w	80045ee <HAL_SPI_Transmit+0x1c0>
 8004468:	2301      	movs	r3, #1
 800446a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800446e:	2303      	movs	r3, #3
 8004470:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004474:	2300      	movs	r3, #0
 8004476:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004478:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800447c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004480:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004484:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004486:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004488:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800448a:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800448c:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800448e:	68a3      	ldr	r3, [r4, #8]
 8004490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004494:	d01e      	beq.n	80044d4 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800449e:	d103      	bne.n	80044a8 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044a6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044a8:	68e3      	ldr	r3, [r4, #12]
 80044aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ae:	d01c      	beq.n	80044ea <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044b0:	6863      	ldr	r3, [r4, #4]
 80044b2:	b113      	cbz	r3, 80044ba <HAL_SPI_Transmit+0x8c>
 80044b4:	f1b8 0f01 	cmp.w	r8, #1
 80044b8:	d15f      	bne.n	800457a <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	7812      	ldrb	r2, [r2, #0]
 80044c0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80044c4:	3301      	adds	r3, #1
 80044c6:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80044c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	86e3      	strh	r3, [r4, #54]	; 0x36
 80044d2:	e052      	b.n	800457a <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 80044d4:	6822      	ldr	r2, [r4, #0]
 80044d6:	6813      	ldr	r3, [r2, #0]
 80044d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044dc:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80044de:	6822      	ldr	r2, [r4, #0]
 80044e0:	6813      	ldr	r3, [r2, #0]
 80044e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	e7d5      	b.n	8004496 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ea:	6863      	ldr	r3, [r4, #4]
 80044ec:	b113      	cbz	r3, 80044f4 <HAL_SPI_Transmit+0xc6>
 80044ee:	f1b8 0f01 	cmp.w	r8, #1
 80044f2:	d115      	bne.n	8004520 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	8812      	ldrh	r2, [r2, #0]
 80044fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80044fe:	3302      	adds	r3, #2
 8004500:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004502:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29b      	uxth	r3, r3
 800450a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800450c:	e008      	b.n	8004520 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800450e:	f7fc fe41 	bl	8001194 <HAL_GetTick>
 8004512:	1bc0      	subs	r0, r0, r7
 8004514:	42a8      	cmp	r0, r5
 8004516:	d302      	bcc.n	800451e <HAL_SPI_Transmit+0xf0>
 8004518:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800451c:	d115      	bne.n	800454a <HAL_SPI_Transmit+0x11c>
 800451e:	b1a5      	cbz	r5, 800454a <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8004520:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d042      	beq.n	80045ae <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	f012 0f02 	tst.w	r2, #2
 8004530:	d0ed      	beq.n	800450e <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004532:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004534:	8812      	ldrh	r2, [r2, #0]
 8004536:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004538:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800453a:	3302      	adds	r3, #2
 800453c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800453e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004540:	b29b      	uxth	r3, r3
 8004542:	3b01      	subs	r3, #1
 8004544:	b29b      	uxth	r3, r3
 8004546:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004548:	e7ea      	b.n	8004520 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 800454a:	2301      	movs	r3, #1
 800454c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004550:	2300      	movs	r3, #0
 8004552:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 8004556:	2603      	movs	r6, #3
 8004558:	e045      	b.n	80045e6 <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800455a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800455c:	7812      	ldrb	r2, [r2, #0]
 800455e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004560:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004562:	3301      	adds	r3, #1
 8004564:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004566:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 800456a:	fa1f fc8c 	uxth.w	ip, ip
 800456e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8004572:	fa1f fc8c 	uxth.w	ip, ip
 8004576:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800457a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800457c:	b29b      	uxth	r3, r3
 800457e:	b1b3      	cbz	r3, 80045ae <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	f012 0f02 	tst.w	r2, #2
 8004588:	d1e7      	bne.n	800455a <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800458a:	f7fc fe03 	bl	8001194 <HAL_GetTick>
 800458e:	1bc0      	subs	r0, r0, r7
 8004590:	42a8      	cmp	r0, r5
 8004592:	d302      	bcc.n	800459a <HAL_SPI_Transmit+0x16c>
 8004594:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004598:	d101      	bne.n	800459e <HAL_SPI_Transmit+0x170>
 800459a:	2d00      	cmp	r5, #0
 800459c:	d1ed      	bne.n	800457a <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 800459e:	2301      	movs	r3, #1
 80045a0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80045a4:	2300      	movs	r3, #0
 80045a6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 80045aa:	2603      	movs	r6, #3
 80045ac:	e01b      	b.n	80045e6 <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045ae:	463a      	mov	r2, r7
 80045b0:	4629      	mov	r1, r5
 80045b2:	4620      	mov	r0, r4
 80045b4:	f7ff fe84 	bl	80042c0 <SPI_EndRxTxTransaction>
 80045b8:	b108      	cbz	r0, 80045be <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045ba:	2320      	movs	r3, #32
 80045bc:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045be:	68a3      	ldr	r3, [r4, #8]
 80045c0:	b933      	cbnz	r3, 80045d0 <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045c2:	9301      	str	r3, [sp, #4]
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	9201      	str	r2, [sp, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	9301      	str	r3, [sp, #4]
 80045ce:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80045d0:	2301      	movs	r3, #1
 80045d2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045d6:	2300      	movs	r3, #0
 80045d8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045de:	b913      	cbnz	r3, 80045e6 <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 80045e0:	2600      	movs	r6, #0
 80045e2:	e000      	b.n	80045e6 <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 80045e4:	2602      	movs	r6, #2
}
 80045e6:	4630      	mov	r0, r6
 80045e8:	b003      	add	sp, #12
 80045ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80045ee:	2602      	movs	r6, #2
 80045f0:	e7f9      	b.n	80045e6 <HAL_SPI_Transmit+0x1b8>

080045f2 <HAL_SPI_TransmitReceive>:
{
 80045f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045f6:	b083      	sub	sp, #12
 80045f8:	4604      	mov	r4, r0
 80045fa:	4688      	mov	r8, r1
 80045fc:	4691      	mov	r9, r2
 80045fe:	461f      	mov	r7, r3
 8004600:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  tickstart = HAL_GetTick();
 8004602:	f7fc fdc7 	bl	8001194 <HAL_GetTick>
 8004606:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8004608:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800460c:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800460e:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004610:	2b01      	cmp	r3, #1
 8004612:	d00a      	beq.n	800462a <HAL_SPI_TransmitReceive+0x38>
 8004614:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004618:	f040 8105 	bne.w	8004826 <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800461c:	68a2      	ldr	r2, [r4, #8]
 800461e:	2a00      	cmp	r2, #0
 8004620:	f040 8105 	bne.w	800482e <HAL_SPI_TransmitReceive+0x23c>
 8004624:	2b04      	cmp	r3, #4
 8004626:	f040 8104 	bne.w	8004832 <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800462a:	f1b8 0f00 	cmp.w	r8, #0
 800462e:	f000 8102 	beq.w	8004836 <HAL_SPI_TransmitReceive+0x244>
 8004632:	f1b9 0f00 	cmp.w	r9, #0
 8004636:	f000 8100 	beq.w	800483a <HAL_SPI_TransmitReceive+0x248>
 800463a:	2f00      	cmp	r7, #0
 800463c:	f000 80ff 	beq.w	800483e <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 8004640:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004644:	2b01      	cmp	r3, #1
 8004646:	f000 80fc 	beq.w	8004842 <HAL_SPI_TransmitReceive+0x250>
 800464a:	2301      	movs	r3, #1
 800464c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004650:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b04      	cmp	r3, #4
 8004658:	d002      	beq.n	8004660 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800465a:	2305      	movs	r3, #5
 800465c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004660:	2300      	movs	r3, #0
 8004662:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004664:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004668:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800466a:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800466c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004670:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004672:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8004674:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004676:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004680:	d103      	bne.n	800468a <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004688:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800468a:	68e3      	ldr	r3, [r4, #12]
 800468c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004690:	d011      	beq.n	80046b6 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004692:	6863      	ldr	r3, [r4, #4]
 8004694:	b10b      	cbz	r3, 800469a <HAL_SPI_TransmitReceive+0xa8>
 8004696:	2f01      	cmp	r7, #1
 8004698:	d10b      	bne.n	80046b2 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800469a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	7812      	ldrb	r2, [r2, #0]
 80046a0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046a4:	3301      	adds	r3, #1
 80046a6:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80046a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80046b2:	2701      	movs	r7, #1
 80046b4:	e071      	b.n	800479a <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046b6:	6863      	ldr	r3, [r4, #4]
 80046b8:	b10b      	cbz	r3, 80046be <HAL_SPI_TransmitReceive+0xcc>
 80046ba:	2f01      	cmp	r7, #1
 80046bc:	d10b      	bne.n	80046d6 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	8812      	ldrh	r2, [r2, #0]
 80046c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046c8:	3302      	adds	r3, #2
 80046ca:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80046cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80046d6:	2701      	movs	r7, #1
 80046d8:	e01b      	b.n	8004712 <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	f012 0f01 	tst.w	r2, #1
 80046e2:	d00e      	beq.n	8004702 <HAL_SPI_TransmitReceive+0x110>
 80046e4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80046e6:	b292      	uxth	r2, r2
 80046e8:	b15a      	cbz	r2, 8004702 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046f2:	3302      	adds	r3, #2
 80046f4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80046f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004700:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004702:	f7fc fd47 	bl	8001194 <HAL_GetTick>
 8004706:	1b80      	subs	r0, r0, r6
 8004708:	42a8      	cmp	r0, r5
 800470a:	d302      	bcc.n	8004712 <HAL_SPI_TransmitReceive+0x120>
 800470c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004710:	d11e      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004712:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004714:	b29b      	uxth	r3, r3
 8004716:	b91b      	cbnz	r3, 8004720 <HAL_SPI_TransmitReceive+0x12e>
 8004718:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d062      	beq.n	80047e6 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	f012 0f02 	tst.w	r2, #2
 8004728:	d0d7      	beq.n	80046da <HAL_SPI_TransmitReceive+0xe8>
 800472a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800472c:	b292      	uxth	r2, r2
 800472e:	2a00      	cmp	r2, #0
 8004730:	d0d3      	beq.n	80046da <HAL_SPI_TransmitReceive+0xe8>
 8004732:	2f00      	cmp	r7, #0
 8004734:	d0d1      	beq.n	80046da <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004736:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004738:	8812      	ldrh	r2, [r2, #0]
 800473a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800473c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800473e:	3302      	adds	r3, #2
 8004740:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004742:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29b      	uxth	r3, r3
 800474a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800474c:	2700      	movs	r7, #0
 800474e:	e7c4      	b.n	80046da <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8004750:	2301      	movs	r3, #1
 8004752:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004756:	2300      	movs	r3, #0
 8004758:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_TIMEOUT;
 800475c:	2003      	movs	r0, #3
 800475e:	e063      	b.n	8004828 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	f012 0f01 	tst.w	r2, #1
 8004768:	d00e      	beq.n	8004788 <HAL_SPI_TransmitReceive+0x196>
 800476a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800476c:	b292      	uxth	r2, r2
 800476e:	b15a      	cbz	r2, 8004788 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004774:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004776:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004778:	3301      	adds	r3, #1
 800477a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800477c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29b      	uxth	r3, r3
 8004784:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004786:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004788:	f7fc fd04 	bl	8001194 <HAL_GetTick>
 800478c:	1b83      	subs	r3, r0, r6
 800478e:	42ab      	cmp	r3, r5
 8004790:	d302      	bcc.n	8004798 <HAL_SPI_TransmitReceive+0x1a6>
 8004792:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004796:	d11e      	bne.n	80047d6 <HAL_SPI_TransmitReceive+0x1e4>
 8004798:	b1ed      	cbz	r5, 80047d6 <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800479a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800479c:	b29b      	uxth	r3, r3
 800479e:	b913      	cbnz	r3, 80047a6 <HAL_SPI_TransmitReceive+0x1b4>
 80047a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	b1fb      	cbz	r3, 80047e6 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	f012 0f02 	tst.w	r2, #2
 80047ae:	d0d7      	beq.n	8004760 <HAL_SPI_TransmitReceive+0x16e>
 80047b0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80047b2:	b292      	uxth	r2, r2
 80047b4:	2a00      	cmp	r2, #0
 80047b6:	d0d3      	beq.n	8004760 <HAL_SPI_TransmitReceive+0x16e>
 80047b8:	2f00      	cmp	r7, #0
 80047ba:	d0d1      	beq.n	8004760 <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80047bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80047be:	7812      	ldrb	r2, [r2, #0]
 80047c0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80047c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047c4:	3301      	adds	r3, #1
 80047c6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80047c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80047d2:	2700      	movs	r7, #0
 80047d4:	e7c4      	b.n	8004760 <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80047dc:	2300      	movs	r3, #0
 80047de:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_TIMEOUT;
 80047e2:	2003      	movs	r0, #3
 80047e4:	e020      	b.n	8004828 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047e6:	4632      	mov	r2, r6
 80047e8:	4629      	mov	r1, r5
 80047ea:	4620      	mov	r0, r4
 80047ec:	f7ff fd68 	bl	80042c0 <SPI_EndRxTxTransaction>
 80047f0:	b990      	cbnz	r0, 8004818 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047f2:	68a3      	ldr	r3, [r4, #8]
 80047f4:	b933      	cbnz	r3, 8004804 <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047f6:	9301      	str	r3, [sp, #4]
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	9201      	str	r2, [sp, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	9301      	str	r3, [sp, #4]
 8004802:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8004804:	2301      	movs	r3, #1
 8004806:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800480a:	2300      	movs	r3, #0
 800480c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004810:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004812:	b14b      	cbz	r3, 8004828 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8004814:	2001      	movs	r0, #1
 8004816:	e007      	b.n	8004828 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004818:	2320      	movs	r3, #32
 800481a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 800481c:	2300      	movs	r3, #0
 800481e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
 8004822:	2001      	movs	r0, #1
 8004824:	e000      	b.n	8004828 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 8004826:	2002      	movs	r0, #2
}
 8004828:	b003      	add	sp, #12
 800482a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800482e:	2002      	movs	r0, #2
 8004830:	e7fa      	b.n	8004828 <HAL_SPI_TransmitReceive+0x236>
 8004832:	2002      	movs	r0, #2
 8004834:	e7f8      	b.n	8004828 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8004836:	2001      	movs	r0, #1
 8004838:	e7f6      	b.n	8004828 <HAL_SPI_TransmitReceive+0x236>
 800483a:	2001      	movs	r0, #1
 800483c:	e7f4      	b.n	8004828 <HAL_SPI_TransmitReceive+0x236>
 800483e:	2001      	movs	r0, #1
 8004840:	e7f2      	b.n	8004828 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 8004842:	2002      	movs	r0, #2
 8004844:	e7f0      	b.n	8004828 <HAL_SPI_TransmitReceive+0x236>

08004846 <HAL_SPI_Receive>:
{
 8004846:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800484a:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 800484c:	f890 6051 	ldrb.w	r6, [r0, #81]	; 0x51
 8004850:	b2f6      	uxtb	r6, r6
 8004852:	2e01      	cmp	r6, #1
 8004854:	f040 80b4 	bne.w	80049c0 <HAL_SPI_Receive+0x17a>
 8004858:	4604      	mov	r4, r0
 800485a:	4689      	mov	r9, r1
 800485c:	4690      	mov	r8, r2
 800485e:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004860:	6843      	ldr	r3, [r0, #4]
 8004862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004866:	d101      	bne.n	800486c <HAL_SPI_Receive+0x26>
 8004868:	6883      	ldr	r3, [r0, #8]
 800486a:	b393      	cbz	r3, 80048d2 <HAL_SPI_Receive+0x8c>
  tickstart = HAL_GetTick();
 800486c:	f7fc fc92 	bl	8001194 <HAL_GetTick>
 8004870:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8004872:	f1b9 0f00 	cmp.w	r9, #0
 8004876:	f000 80a4 	beq.w	80049c2 <HAL_SPI_Receive+0x17c>
 800487a:	f1b8 0f00 	cmp.w	r8, #0
 800487e:	f000 80a0 	beq.w	80049c2 <HAL_SPI_Receive+0x17c>
  __HAL_LOCK(hspi);
 8004882:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004886:	2b01      	cmp	r3, #1
 8004888:	f000 809f 	beq.w	80049ca <HAL_SPI_Receive+0x184>
 800488c:	2301      	movs	r3, #1
 800488e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004892:	2304      	movs	r3, #4
 8004894:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004898:	2300      	movs	r3, #0
 800489a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800489c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80048a0:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80048a4:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048a8:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80048aa:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80048ac:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 80048ae:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80048b0:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048b2:	68a3      	ldr	r3, [r4, #8]
 80048b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b8:	d015      	beq.n	80048e6 <HAL_SPI_Receive+0xa0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	f012 0f40 	tst.w	r2, #64	; 0x40
 80048c2:	d103      	bne.n	80048cc <HAL_SPI_Receive+0x86>
    __HAL_SPI_ENABLE(hspi);
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ca:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80048cc:	68e3      	ldr	r3, [r4, #12]
 80048ce:	b1f3      	cbz	r3, 800490e <HAL_SPI_Receive+0xc8>
 80048d0:	e043      	b.n	800495a <HAL_SPI_Receive+0x114>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048d2:	2304      	movs	r3, #4
 80048d4:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80048d8:	9500      	str	r5, [sp, #0]
 80048da:	4613      	mov	r3, r2
 80048dc:	460a      	mov	r2, r1
 80048de:	f7ff fe88 	bl	80045f2 <HAL_SPI_TransmitReceive>
 80048e2:	4606      	mov	r6, r0
 80048e4:	e06d      	b.n	80049c2 <HAL_SPI_Receive+0x17c>
    __HAL_SPI_DISABLE(hspi);
 80048e6:	6822      	ldr	r2, [r4, #0]
 80048e8:	6813      	ldr	r3, [r2, #0]
 80048ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ee:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80048f0:	6822      	ldr	r2, [r4, #0]
 80048f2:	6813      	ldr	r3, [r2, #0]
 80048f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	e7de      	b.n	80048ba <HAL_SPI_Receive+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048fc:	f7fc fc4a 	bl	8001194 <HAL_GetTick>
 8004900:	1bc0      	subs	r0, r0, r7
 8004902:	42a8      	cmp	r0, r5
 8004904:	d302      	bcc.n	800490c <HAL_SPI_Receive+0xc6>
 8004906:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800490a:	d115      	bne.n	8004938 <HAL_SPI_Receive+0xf2>
 800490c:	b1a5      	cbz	r5, 8004938 <HAL_SPI_Receive+0xf2>
    while (hspi->RxXferCount > 0U)
 800490e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d042      	beq.n	800499c <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	f012 0f01 	tst.w	r2, #1
 800491e:	d0ed      	beq.n	80048fc <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004920:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004922:	7b1b      	ldrb	r3, [r3, #12]
 8004924:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004926:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004928:	3301      	adds	r3, #1
 800492a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800492c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29b      	uxth	r3, r3
 8004934:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004936:	e7ea      	b.n	800490e <HAL_SPI_Receive+0xc8>
          hspi->State = HAL_SPI_STATE_READY;
 8004938:	2301      	movs	r3, #1
 800493a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800493e:	2300      	movs	r3, #0
 8004940:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 8004944:	2603      	movs	r6, #3
 8004946:	e03c      	b.n	80049c2 <HAL_SPI_Receive+0x17c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004948:	f7fc fc24 	bl	8001194 <HAL_GetTick>
 800494c:	1bc0      	subs	r0, r0, r7
 800494e:	42a8      	cmp	r0, r5
 8004950:	d302      	bcc.n	8004958 <HAL_SPI_Receive+0x112>
 8004952:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004956:	d119      	bne.n	800498c <HAL_SPI_Receive+0x146>
 8004958:	b1c5      	cbz	r5, 800498c <HAL_SPI_Receive+0x146>
    while (hspi->RxXferCount > 0U)
 800495a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800495c:	b29b      	uxth	r3, r3
 800495e:	b1eb      	cbz	r3, 800499c <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	f012 0f01 	tst.w	r2, #1
 8004968:	d0ee      	beq.n	8004948 <HAL_SPI_Receive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800496e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004970:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004972:	3302      	adds	r3, #2
 8004974:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004976:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 800497a:	fa1f fc8c 	uxth.w	ip, ip
 800497e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8004982:	fa1f fc8c 	uxth.w	ip, ip
 8004986:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 800498a:	e7e6      	b.n	800495a <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 800498c:	2301      	movs	r3, #1
 800498e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004992:	2300      	movs	r3, #0
 8004994:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 8004998:	2603      	movs	r6, #3
 800499a:	e012      	b.n	80049c2 <HAL_SPI_Receive+0x17c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800499c:	463a      	mov	r2, r7
 800499e:	4629      	mov	r1, r5
 80049a0:	4620      	mov	r0, r4
 80049a2:	f7ff fcaf 	bl	8004304 <SPI_EndRxTransaction>
 80049a6:	b108      	cbz	r0, 80049ac <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049a8:	2320      	movs	r3, #32
 80049aa:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80049ac:	2301      	movs	r3, #1
 80049ae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80049b2:	2300      	movs	r3, #0
 80049b4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80049ba:	b913      	cbnz	r3, 80049c2 <HAL_SPI_Receive+0x17c>
    return HAL_OK;
 80049bc:	2600      	movs	r6, #0
 80049be:	e000      	b.n	80049c2 <HAL_SPI_Receive+0x17c>
    return HAL_BUSY;
 80049c0:	2602      	movs	r6, #2
}
 80049c2:	4630      	mov	r0, r6
 80049c4:	b003      	add	sp, #12
 80049c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80049ca:	2602      	movs	r6, #2
 80049cc:	e7f9      	b.n	80049c2 <HAL_SPI_Receive+0x17c>

080049ce <HAL_SPI_ErrorCallback>:
}
 80049ce:	4770      	bx	lr

080049d0 <HAL_SPI_IRQHandler>:
{
 80049d0:	b510      	push	{r4, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80049d6:	6802      	ldr	r2, [r0, #0]
 80049d8:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80049da:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80049dc:	f003 0041 	and.w	r0, r3, #65	; 0x41
 80049e0:	2801      	cmp	r0, #1
 80049e2:	d05a      	beq.n	8004a9a <HAL_SPI_IRQHandler+0xca>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80049e4:	f013 0f02 	tst.w	r3, #2
 80049e8:	d002      	beq.n	80049f0 <HAL_SPI_IRQHandler+0x20>
 80049ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80049ee:	d15b      	bne.n	8004aa8 <HAL_SPI_IRQHandler+0xd8>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80049f0:	f013 0f60 	tst.w	r3, #96	; 0x60
 80049f4:	d05b      	beq.n	8004aae <HAL_SPI_IRQHandler+0xde>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80049f6:	f011 0f20 	tst.w	r1, #32
 80049fa:	d058      	beq.n	8004aae <HAL_SPI_IRQHandler+0xde>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80049fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a00:	d00f      	beq.n	8004a22 <HAL_SPI_IRQHandler+0x52>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004a02:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8004a06:	b2c0      	uxtb	r0, r0
 8004a08:	2803      	cmp	r0, #3
 8004a0a:	d052      	beq.n	8004ab2 <HAL_SPI_IRQHandler+0xe2>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004a0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a0e:	f040 0004 	orr.w	r0, r0, #4
 8004a12:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a14:	2000      	movs	r0, #0
 8004a16:	9001      	str	r0, [sp, #4]
 8004a18:	68d0      	ldr	r0, [r2, #12]
 8004a1a:	9001      	str	r0, [sp, #4]
 8004a1c:	6890      	ldr	r0, [r2, #8]
 8004a1e:	9001      	str	r0, [sp, #4]
 8004a20:	9801      	ldr	r0, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004a22:	f013 0f20 	tst.w	r3, #32
 8004a26:	d00c      	beq.n	8004a42 <HAL_SPI_IRQHandler+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004a28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004a30:	2300      	movs	r3, #0
 8004a32:	9303      	str	r3, [sp, #12]
 8004a34:	6893      	ldr	r3, [r2, #8]
 8004a36:	9303      	str	r3, [sp, #12]
 8004a38:	6813      	ldr	r3, [r2, #0]
 8004a3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a42:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d032      	beq.n	8004aae <HAL_SPI_IRQHandler+0xde>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004a48:	6822      	ldr	r2, [r4, #0]
 8004a4a:	6853      	ldr	r3, [r2, #4]
 8004a4c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004a50:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8004a52:	2301      	movs	r3, #1
 8004a54:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004a58:	f011 0f03 	tst.w	r1, #3
 8004a5c:	d031      	beq.n	8004ac2 <HAL_SPI_IRQHandler+0xf2>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004a5e:	6822      	ldr	r2, [r4, #0]
 8004a60:	6853      	ldr	r3, [r2, #4]
 8004a62:	f023 0303 	bic.w	r3, r3, #3
 8004a66:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8004a68:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004a6a:	b14b      	cbz	r3, 8004a80 <HAL_SPI_IRQHandler+0xb0>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a6c:	4a17      	ldr	r2, [pc, #92]	; (8004acc <HAL_SPI_IRQHandler+0xfc>)
 8004a6e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004a70:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004a72:	f7fc fd89 	bl	8001588 <HAL_DMA_Abort_IT>
 8004a76:	b118      	cbz	r0, 8004a80 <HAL_SPI_IRQHandler+0xb0>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a78:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a7e:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004a80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004a82:	b1a3      	cbz	r3, 8004aae <HAL_SPI_IRQHandler+0xde>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a84:	4a11      	ldr	r2, [pc, #68]	; (8004acc <HAL_SPI_IRQHandler+0xfc>)
 8004a86:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004a88:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004a8a:	f7fc fd7d 	bl	8001588 <HAL_DMA_Abort_IT>
 8004a8e:	b170      	cbz	r0, 8004aae <HAL_SPI_IRQHandler+0xde>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a96:	6563      	str	r3, [r4, #84]	; 0x54
 8004a98:	e009      	b.n	8004aae <HAL_SPI_IRQHandler+0xde>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004a9a:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004a9e:	d0a1      	beq.n	80049e4 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8004aa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	4798      	blx	r3
    return;
 8004aa6:	e002      	b.n	8004aae <HAL_SPI_IRQHandler+0xde>
    hspi->TxISR(hspi);
 8004aa8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004aaa:	4620      	mov	r0, r4
 8004aac:	4798      	blx	r3
}
 8004aae:	b004      	add	sp, #16
 8004ab0:	bd10      	pop	{r4, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	9302      	str	r3, [sp, #8]
 8004ab6:	68d3      	ldr	r3, [r2, #12]
 8004ab8:	9302      	str	r3, [sp, #8]
 8004aba:	6893      	ldr	r3, [r2, #8]
 8004abc:	9302      	str	r3, [sp, #8]
 8004abe:	9b02      	ldr	r3, [sp, #8]
        return;
 8004ac0:	e7f5      	b.n	8004aae <HAL_SPI_IRQHandler+0xde>
        HAL_SPI_ErrorCallback(hspi);
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f7ff ff83 	bl	80049ce <HAL_SPI_ErrorCallback>
    return;
 8004ac8:	e7f1      	b.n	8004aae <HAL_SPI_IRQHandler+0xde>
 8004aca:	bf00      	nop
 8004acc:	08004ad1 	.word	0x08004ad1

08004ad0 <SPI_DMAAbortOnError>:
{
 8004ad0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ad2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004ad8:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8004ada:	f7ff ff78 	bl	80049ce <HAL_SPI_ErrorCallback>
}
 8004ade:	bd08      	pop	{r3, pc}

08004ae0 <HAL_SPI_GetState>:
  return hspi->State;
 8004ae0:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8004ae4:	4770      	bx	lr

08004ae6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ae6:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ae8:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aea:	6a04      	ldr	r4, [r0, #32]
 8004aec:	f024 0401 	bic.w	r4, r4, #1
 8004af0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af2:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004af4:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004af8:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004afc:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004b00:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b02:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004b04:	6203      	str	r3, [r0, #32]
}
 8004b06:	bc10      	pop	{r4}
 8004b08:	4770      	bx	lr

08004b0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b0a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b0c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0e:	6a04      	ldr	r4, [r0, #32]
 8004b10:	f024 0410 	bic.w	r4, r4, #16
 8004b14:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b16:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b18:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b1c:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b24:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b28:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004b2a:	6203      	str	r3, [r0, #32]
}
 8004b2c:	bc10      	pop	{r4}
 8004b2e:	4770      	bx	lr

08004b30 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b30:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b36:	430b      	orrs	r3, r1
 8004b38:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b3c:	6083      	str	r3, [r0, #8]
}
 8004b3e:	4770      	bx	lr

08004b40 <HAL_TIM_PeriodElapsedCallback>:
}
 8004b40:	4770      	bx	lr

08004b42 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIM_IC_CaptureCallback>:
}
 8004b44:	4770      	bx	lr

08004b46 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004b46:	4770      	bx	lr

08004b48 <HAL_TIM_TriggerCallback>:
}
 8004b48:	4770      	bx	lr

08004b4a <HAL_TIM_IRQHandler>:
{
 8004b4a:	b570      	push	{r4, r5, r6, lr}
 8004b4c:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8004b4e:	6803      	ldr	r3, [r0, #0]
 8004b50:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b52:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b54:	f015 0f02 	tst.w	r5, #2
 8004b58:	d010      	beq.n	8004b7c <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b5a:	f016 0f02 	tst.w	r6, #2
 8004b5e:	d00d      	beq.n	8004b7c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b60:	f06f 0202 	mvn.w	r2, #2
 8004b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b66:	2301      	movs	r3, #1
 8004b68:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b6a:	6803      	ldr	r3, [r0, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f013 0f03 	tst.w	r3, #3
 8004b72:	d05e      	beq.n	8004c32 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8004b74:	f7ff ffe6 	bl	8004b44 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b7c:	f015 0f04 	tst.w	r5, #4
 8004b80:	d012      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b82:	f016 0f04 	tst.w	r6, #4
 8004b86:	d00f      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	f06f 0204 	mvn.w	r2, #4
 8004b8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b90:	2302      	movs	r3, #2
 8004b92:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004b9c:	d04f      	beq.n	8004c3e <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f7ff ffd0 	bl	8004b44 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ba8:	f015 0f08 	tst.w	r5, #8
 8004bac:	d012      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bae:	f016 0f08 	tst.w	r6, #8
 8004bb2:	d00f      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	f06f 0208 	mvn.w	r2, #8
 8004bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bbc:	2304      	movs	r3, #4
 8004bbe:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	f013 0f03 	tst.w	r3, #3
 8004bc8:	d040      	beq.n	8004c4c <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f7ff ffba 	bl	8004b44 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bd4:	f015 0f10 	tst.w	r5, #16
 8004bd8:	d012      	beq.n	8004c00 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bda:	f016 0f10 	tst.w	r6, #16
 8004bde:	d00f      	beq.n	8004c00 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	f06f 0210 	mvn.w	r2, #16
 8004be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004be8:	2308      	movs	r3, #8
 8004bea:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004bf4:	d031      	beq.n	8004c5a <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f7ff ffa4 	bl	8004b44 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c00:	f015 0f01 	tst.w	r5, #1
 8004c04:	d002      	beq.n	8004c0c <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c06:	f016 0f01 	tst.w	r6, #1
 8004c0a:	d12d      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c0c:	f015 0f80 	tst.w	r5, #128	; 0x80
 8004c10:	d002      	beq.n	8004c18 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c12:	f016 0f80 	tst.w	r6, #128	; 0x80
 8004c16:	d12f      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c18:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c1c:	d002      	beq.n	8004c24 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c1e:	f016 0f40 	tst.w	r6, #64	; 0x40
 8004c22:	d131      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c24:	f015 0f20 	tst.w	r5, #32
 8004c28:	d002      	beq.n	8004c30 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c2a:	f016 0f20 	tst.w	r6, #32
 8004c2e:	d133      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x14e>
}
 8004c30:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c32:	f7ff ff86 	bl	8004b42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c36:	4620      	mov	r0, r4
 8004c38:	f7ff ff85 	bl	8004b46 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c3c:	e79c      	b.n	8004b78 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f7ff ff7f 	bl	8004b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c44:	4620      	mov	r0, r4
 8004c46:	f7ff ff7e 	bl	8004b46 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c4a:	e7ab      	b.n	8004ba4 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f7ff ff78 	bl	8004b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c52:	4620      	mov	r0, r4
 8004c54:	f7ff ff77 	bl	8004b46 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c58:	e7ba      	b.n	8004bd0 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f7ff ff71 	bl	8004b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c60:	4620      	mov	r0, r4
 8004c62:	f7ff ff70 	bl	8004b46 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c66:	e7c9      	b.n	8004bfc <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	f06f 0201 	mvn.w	r2, #1
 8004c6e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c70:	4620      	mov	r0, r4
 8004c72:	f7ff ff65 	bl	8004b40 <HAL_TIM_PeriodElapsedCallback>
 8004c76:	e7c9      	b.n	8004c0c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c7e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004c80:	4620      	mov	r0, r4
 8004c82:	f000 f942 	bl	8004f0a <HAL_TIMEx_BreakCallback>
 8004c86:	e7c7      	b.n	8004c18 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c8e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004c90:	4620      	mov	r0, r4
 8004c92:	f7ff ff59 	bl	8004b48 <HAL_TIM_TriggerCallback>
 8004c96:	e7c5      	b.n	8004c24 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	f06f 0220 	mvn.w	r2, #32
 8004c9e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f000 f931 	bl	8004f08 <HAL_TIMEx_CommutCallback>
}
 8004ca6:	e7c3      	b.n	8004c30 <HAL_TIM_IRQHandler+0xe6>

08004ca8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004ca8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004caa:	4a1f      	ldr	r2, [pc, #124]	; (8004d28 <TIM_Base_SetConfig+0x80>)
 8004cac:	4290      	cmp	r0, r2
 8004cae:	d00a      	beq.n	8004cc6 <TIM_Base_SetConfig+0x1e>
 8004cb0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004cb4:	d007      	beq.n	8004cc6 <TIM_Base_SetConfig+0x1e>
 8004cb6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004cba:	4290      	cmp	r0, r2
 8004cbc:	d003      	beq.n	8004cc6 <TIM_Base_SetConfig+0x1e>
 8004cbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cc2:	4290      	cmp	r0, r2
 8004cc4:	d103      	bne.n	8004cce <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004cca:	684a      	ldr	r2, [r1, #4]
 8004ccc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cce:	4a16      	ldr	r2, [pc, #88]	; (8004d28 <TIM_Base_SetConfig+0x80>)
 8004cd0:	4290      	cmp	r0, r2
 8004cd2:	d00a      	beq.n	8004cea <TIM_Base_SetConfig+0x42>
 8004cd4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004cd8:	d007      	beq.n	8004cea <TIM_Base_SetConfig+0x42>
 8004cda:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004cde:	4290      	cmp	r0, r2
 8004ce0:	d003      	beq.n	8004cea <TIM_Base_SetConfig+0x42>
 8004ce2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ce6:	4290      	cmp	r0, r2
 8004ce8:	d103      	bne.n	8004cf2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cee:	68ca      	ldr	r2, [r1, #12]
 8004cf0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cf6:	694a      	ldr	r2, [r1, #20]
 8004cf8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004cfa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cfc:	688b      	ldr	r3, [r1, #8]
 8004cfe:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d00:	680b      	ldr	r3, [r1, #0]
 8004d02:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d04:	4b08      	ldr	r3, [pc, #32]	; (8004d28 <TIM_Base_SetConfig+0x80>)
 8004d06:	4298      	cmp	r0, r3
 8004d08:	d00a      	beq.n	8004d20 <TIM_Base_SetConfig+0x78>
  TIMx->EGR = TIM_EGR_UG;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d0e:	6903      	ldr	r3, [r0, #16]
 8004d10:	f013 0f01 	tst.w	r3, #1
 8004d14:	d003      	beq.n	8004d1e <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d16:	6903      	ldr	r3, [r0, #16]
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	6103      	str	r3, [r0, #16]
}
 8004d1e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8004d20:	690b      	ldr	r3, [r1, #16]
 8004d22:	6303      	str	r3, [r0, #48]	; 0x30
 8004d24:	e7f1      	b.n	8004d0a <TIM_Base_SetConfig+0x62>
 8004d26:	bf00      	nop
 8004d28:	40012c00 	.word	0x40012c00

08004d2c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004d2c:	b340      	cbz	r0, 8004d80 <HAL_TIM_Base_Init+0x54>
{
 8004d2e:	b510      	push	{r4, lr}
 8004d30:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004d32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004d36:	b1f3      	cbz	r3, 8004d76 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d3e:	4621      	mov	r1, r4
 8004d40:	f851 0b04 	ldr.w	r0, [r1], #4
 8004d44:	f7ff ffb0 	bl	8004ca8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d4e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004d52:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004d56:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004d5a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d66:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004d6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004d6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004d72:	2000      	movs	r0, #0
}
 8004d74:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004d76:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004d7a:	f7fc f855 	bl	8000e28 <HAL_TIM_Base_MspInit>
 8004d7e:	e7db      	b.n	8004d38 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004d80:	2001      	movs	r0, #1
}
 8004d82:	4770      	bx	lr

08004d84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d84:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d86:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d88:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d8c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004d90:	430a      	orrs	r2, r1
 8004d92:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d96:	6082      	str	r2, [r0, #8]
}
 8004d98:	bc10      	pop	{r4}
 8004d9a:	4770      	bx	lr

08004d9c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004d9c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d078      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0xfa>
{
 8004da4:	b510      	push	{r4, lr}
 8004da6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004da8:	2301      	movs	r3, #1
 8004daa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004dae:	2302      	movs	r3, #2
 8004db0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004db4:	6802      	ldr	r2, [r0, #0]
 8004db6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dbc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004dc0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004dc2:	680b      	ldr	r3, [r1, #0]
 8004dc4:	2b60      	cmp	r3, #96	; 0x60
 8004dc6:	d04c      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0xc6>
 8004dc8:	d829      	bhi.n	8004e1e <HAL_TIM_ConfigClockSource+0x82>
 8004dca:	2b40      	cmp	r3, #64	; 0x40
 8004dcc:	d054      	beq.n	8004e78 <HAL_TIM_ConfigClockSource+0xdc>
 8004dce:	d90c      	bls.n	8004dea <HAL_TIM_ConfigClockSource+0x4e>
 8004dd0:	2b50      	cmp	r3, #80	; 0x50
 8004dd2:	d122      	bne.n	8004e1a <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd4:	68ca      	ldr	r2, [r1, #12]
 8004dd6:	6849      	ldr	r1, [r1, #4]
 8004dd8:	6800      	ldr	r0, [r0, #0]
 8004dda:	f7ff fe84 	bl	8004ae6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dde:	2150      	movs	r1, #80	; 0x50
 8004de0:	6820      	ldr	r0, [r4, #0]
 8004de2:	f7ff fea5 	bl	8004b30 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004de6:	2000      	movs	r0, #0
      break;
 8004de8:	e005      	b.n	8004df6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d00d      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x6e>
 8004dee:	d909      	bls.n	8004e04 <HAL_TIM_ConfigClockSource+0x68>
 8004df0:	2b30      	cmp	r3, #48	; 0x30
 8004df2:	d00a      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8004df4:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004e02:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8004e04:	b10b      	cbz	r3, 8004e0a <HAL_TIM_ConfigClockSource+0x6e>
 8004e06:	2b10      	cmp	r3, #16
 8004e08:	d105      	bne.n	8004e16 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6820      	ldr	r0, [r4, #0]
 8004e0e:	f7ff fe8f 	bl	8004b30 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004e12:	2000      	movs	r0, #0
      break;
 8004e14:	e7ef      	b.n	8004df6 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8004e16:	2001      	movs	r0, #1
 8004e18:	e7ed      	b.n	8004df6 <HAL_TIM_ConfigClockSource+0x5a>
 8004e1a:	2001      	movs	r0, #1
 8004e1c:	e7eb      	b.n	8004df6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e22:	d034      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0xf2>
 8004e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e28:	d10c      	bne.n	8004e44 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8004e2a:	68cb      	ldr	r3, [r1, #12]
 8004e2c:	684a      	ldr	r2, [r1, #4]
 8004e2e:	6889      	ldr	r1, [r1, #8]
 8004e30:	6800      	ldr	r0, [r0, #0]
 8004e32:	f7ff ffa7 	bl	8004d84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e36:	6822      	ldr	r2, [r4, #0]
 8004e38:	6893      	ldr	r3, [r2, #8]
 8004e3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e3e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004e40:	2000      	movs	r0, #0
      break;
 8004e42:	e7d8      	b.n	8004df6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004e44:	2b70      	cmp	r3, #112	; 0x70
 8004e46:	d124      	bne.n	8004e92 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8004e48:	68cb      	ldr	r3, [r1, #12]
 8004e4a:	684a      	ldr	r2, [r1, #4]
 8004e4c:	6889      	ldr	r1, [r1, #8]
 8004e4e:	6800      	ldr	r0, [r0, #0]
 8004e50:	f7ff ff98 	bl	8004d84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e54:	6822      	ldr	r2, [r4, #0]
 8004e56:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004e5c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5e:	2000      	movs	r0, #0
      break;
 8004e60:	e7c9      	b.n	8004df6 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e62:	68ca      	ldr	r2, [r1, #12]
 8004e64:	6849      	ldr	r1, [r1, #4]
 8004e66:	6800      	ldr	r0, [r0, #0]
 8004e68:	f7ff fe4f 	bl	8004b0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e6c:	2160      	movs	r1, #96	; 0x60
 8004e6e:	6820      	ldr	r0, [r4, #0]
 8004e70:	f7ff fe5e 	bl	8004b30 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004e74:	2000      	movs	r0, #0
      break;
 8004e76:	e7be      	b.n	8004df6 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e78:	68ca      	ldr	r2, [r1, #12]
 8004e7a:	6849      	ldr	r1, [r1, #4]
 8004e7c:	6800      	ldr	r0, [r0, #0]
 8004e7e:	f7ff fe32 	bl	8004ae6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e82:	2140      	movs	r1, #64	; 0x40
 8004e84:	6820      	ldr	r0, [r4, #0]
 8004e86:	f7ff fe53 	bl	8004b30 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004e8a:	2000      	movs	r0, #0
      break;
 8004e8c:	e7b3      	b.n	8004df6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004e8e:	2000      	movs	r0, #0
 8004e90:	e7b1      	b.n	8004df6 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8004e92:	2001      	movs	r0, #1
 8004e94:	e7af      	b.n	8004df6 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8004e96:	2002      	movs	r0, #2
}
 8004e98:	4770      	bx	lr
	...

08004e9c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e9c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004ea0:	2a01      	cmp	r2, #1
 8004ea2:	d02c      	beq.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8004ea4:	b410      	push	{r4}
 8004ea6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eb4:	6802      	ldr	r2, [r0, #0]
 8004eb6:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eb8:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eba:	f020 0c70 	bic.w	ip, r0, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ebe:	6808      	ldr	r0, [r1, #0]
 8004ec0:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ec4:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	480e      	ldr	r0, [pc, #56]	; (8004f04 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8004eca:	4282      	cmp	r2, r0
 8004ecc:	d00a      	beq.n	8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004ece:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004ed2:	d007      	beq.n	8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004ed4:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 8004ed8:	4282      	cmp	r2, r0
 8004eda:	d003      	beq.n	8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004edc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004ee0:	4282      	cmp	r2, r0
 8004ee2:	d104      	bne.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ee4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ee8:	6849      	ldr	r1, [r1, #4]
 8004eea:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eec:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8004efa:	bc10      	pop	{r4}
 8004efc:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004efe:	2002      	movs	r0, #2
}
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40012c00 	.word	0x40012c00

08004f08 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f08:	4770      	bx	lr

08004f0a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f0a:	4770      	bx	lr

08004f0c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f0c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	f102 030c 	add.w	r3, r2, #12
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	320c      	adds	r2, #12
 8004f1c:	e842 3100 	strex	r1, r3, [r2]
 8004f20:	2900      	cmp	r1, #0
 8004f22:	d1f3      	bne.n	8004f0c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f24:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	f102 0314 	add.w	r3, r2, #20
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	3214      	adds	r2, #20
 8004f34:	e842 3100 	strex	r1, r3, [r2]
 8004f38:	2900      	cmp	r1, #0
 8004f3a:	d1f3      	bne.n	8004f24 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d005      	beq.n	8004f4e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f42:	2320      	movs	r3, #32
 8004f44:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	6303      	str	r3, [r0, #48]	; 0x30
}
 8004f4c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	f102 030c 	add.w	r3, r2, #12
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	320c      	adds	r2, #12
 8004f5e:	e842 3100 	strex	r1, r3, [r2]
 8004f62:	2900      	cmp	r1, #0
 8004f64:	d1f3      	bne.n	8004f4e <UART_EndRxTransfer+0x42>
 8004f66:	e7ec      	b.n	8004f42 <UART_EndRxTransfer+0x36>

08004f68 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f68:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b21      	cmp	r3, #33	; 0x21
 8004f70:	d001      	beq.n	8004f76 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004f72:	2002      	movs	r0, #2
  }
}
 8004f74:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f76:	6883      	ldr	r3, [r0, #8]
 8004f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7c:	d017      	beq.n	8004fae <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f7e:	6a03      	ldr	r3, [r0, #32]
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	6202      	str	r2, [r0, #32]
 8004f84:	781a      	ldrb	r2, [r3, #0]
 8004f86:	6803      	ldr	r3, [r0, #0]
 8004f88:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004f8a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	84c3      	strh	r3, [r0, #38]	; 0x26
 8004f94:	b94b      	cbnz	r3, 8004faa <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f96:	6802      	ldr	r2, [r0, #0]
 8004f98:	68d3      	ldr	r3, [r2, #12]
 8004f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f9e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fa0:	6802      	ldr	r2, [r0, #0]
 8004fa2:	68d3      	ldr	r3, [r2, #12]
 8004fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fa8:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8004faa:	2000      	movs	r0, #0
 8004fac:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fae:	6903      	ldr	r3, [r0, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e4      	bne.n	8004f7e <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fb4:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	6802      	ldr	r2, [r0, #0]
 8004fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fbe:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8004fc0:	6a03      	ldr	r3, [r0, #32]
 8004fc2:	3302      	adds	r3, #2
 8004fc4:	6203      	str	r3, [r0, #32]
 8004fc6:	e7e0      	b.n	8004f8a <UART_Transmit_IT+0x22>

08004fc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fc8:	b510      	push	{r4, lr}
 8004fca:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fcc:	6802      	ldr	r2, [r0, #0]
 8004fce:	6913      	ldr	r3, [r2, #16]
 8004fd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004fd4:	68c1      	ldr	r1, [r0, #12]
 8004fd6:	430b      	orrs	r3, r1
 8004fd8:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004fda:	6883      	ldr	r3, [r0, #8]
 8004fdc:	6902      	ldr	r2, [r0, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	6942      	ldr	r2, [r0, #20]
 8004fe2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8004fe4:	6801      	ldr	r1, [r0, #0]
 8004fe6:	68cb      	ldr	r3, [r1, #12]
 8004fe8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004fec:	f023 030c 	bic.w	r3, r3, #12
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ff4:	6802      	ldr	r2, [r0, #0]
 8004ff6:	6953      	ldr	r3, [r2, #20]
 8004ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ffc:	6981      	ldr	r1, [r0, #24]
 8004ffe:	430b      	orrs	r3, r1
 8005000:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8005002:	6802      	ldr	r2, [r0, #0]
 8005004:	4b13      	ldr	r3, [pc, #76]	; (8005054 <UART_SetConfig+0x8c>)
 8005006:	429a      	cmp	r2, r3
 8005008:	d020      	beq.n	800504c <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800500a:	f7ff f845 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 800500e:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005010:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005014:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005018:	6863      	ldr	r3, [r4, #4]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005020:	480d      	ldr	r0, [pc, #52]	; (8005058 <UART_SetConfig+0x90>)
 8005022:	fba0 3102 	umull	r3, r1, r0, r2
 8005026:	0949      	lsrs	r1, r1, #5
 8005028:	2364      	movs	r3, #100	; 0x64
 800502a:	fb03 2311 	mls	r3, r3, r1, r2
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	3332      	adds	r3, #50	; 0x32
 8005032:	fba0 0303 	umull	r0, r3, r0, r3
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800503c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	6821      	ldr	r1, [r4, #0]
 8005046:	4413      	add	r3, r2
 8005048:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 800504a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800504c:	f7ff f834 	bl	80040b8 <HAL_RCC_GetPCLK2Freq>
 8005050:	4602      	mov	r2, r0
 8005052:	e7dd      	b.n	8005010 <UART_SetConfig+0x48>
 8005054:	40013800 	.word	0x40013800
 8005058:	51eb851f 	.word	0x51eb851f

0800505c <HAL_UART_Init>:
  if (huart == NULL)
 800505c:	b360      	cbz	r0, 80050b8 <HAL_UART_Init+0x5c>
{
 800505e:	b510      	push	{r4, lr}
 8005060:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005062:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005066:	b313      	cbz	r3, 80050ae <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8005068:	2324      	movs	r3, #36	; 0x24
 800506a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	68d3      	ldr	r3, [r2, #12]
 8005072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005076:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005078:	4620      	mov	r0, r4
 800507a:	f7ff ffa5 	bl	8004fc8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800507e:	6822      	ldr	r2, [r4, #0]
 8005080:	6913      	ldr	r3, [r2, #16]
 8005082:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005086:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005088:	6822      	ldr	r2, [r4, #0]
 800508a:	6953      	ldr	r3, [r2, #20]
 800508c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005090:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8005092:	6822      	ldr	r2, [r4, #0]
 8005094:	68d3      	ldr	r3, [r2, #12]
 8005096:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800509a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509c:	2000      	movs	r0, #0
 800509e:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050a0:	2320      	movs	r3, #32
 80050a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050aa:	6360      	str	r0, [r4, #52]	; 0x34
}
 80050ac:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80050ae:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 80050b2:	f7fb fed7 	bl	8000e64 <HAL_UART_MspInit>
 80050b6:	e7d7      	b.n	8005068 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80050b8:	2001      	movs	r0, #1
}
 80050ba:	4770      	bx	lr

080050bc <HAL_UART_TxCpltCallback>:
}
 80050bc:	4770      	bx	lr

080050be <UART_EndTransmit_IT>:
{
 80050be:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050c0:	6801      	ldr	r1, [r0, #0]
 80050c2:	68ca      	ldr	r2, [r1, #12]
 80050c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c8:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80050ca:	2220      	movs	r2, #32
 80050cc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 80050d0:	f7ff fff4 	bl	80050bc <HAL_UART_TxCpltCallback>
}
 80050d4:	2000      	movs	r0, #0
 80050d6:	bd08      	pop	{r3, pc}

080050d8 <HAL_UART_RxCpltCallback>:
}
 80050d8:	4770      	bx	lr

080050da <HAL_UART_ErrorCallback>:
}
 80050da:	4770      	bx	lr

080050dc <UART_DMAAbortOnError>:
{
 80050dc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050de:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050e4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80050e6:	f7ff fff8 	bl	80050da <HAL_UART_ErrorCallback>
}
 80050ea:	bd08      	pop	{r3, pc}

080050ec <HAL_UARTEx_RxEventCallback>:
}
 80050ec:	4770      	bx	lr

080050ee <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050ee:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b22      	cmp	r3, #34	; 0x22
 80050f6:	d169      	bne.n	80051cc <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050f8:	6883      	ldr	r3, [r0, #8]
 80050fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050fe:	d04f      	beq.n	80051a0 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005100:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005106:	d004      	beq.n	8005112 <UART_Receive_IT+0x24>
 8005108:	2b00      	cmp	r3, #0
 800510a:	d156      	bne.n	80051ba <UART_Receive_IT+0xcc>
 800510c:	6903      	ldr	r3, [r0, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d153      	bne.n	80051ba <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005112:	6803      	ldr	r3, [r0, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8005118:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800511a:	3301      	adds	r3, #1
 800511c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800511e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b29b      	uxth	r3, r3
 8005126:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8005128:	2b00      	cmp	r3, #0
 800512a:	d151      	bne.n	80051d0 <UART_Receive_IT+0xe2>
{
 800512c:	b500      	push	{lr}
 800512e:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005130:	6802      	ldr	r2, [r0, #0]
 8005132:	68d3      	ldr	r3, [r2, #12]
 8005134:	f023 0320 	bic.w	r3, r3, #32
 8005138:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800513a:	6802      	ldr	r2, [r0, #0]
 800513c:	68d3      	ldr	r3, [r2, #12]
 800513e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005142:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005144:	6802      	ldr	r2, [r0, #0]
 8005146:	6953      	ldr	r3, [r2, #20]
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800514e:	2320      	movs	r3, #32
 8005150:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005154:	2300      	movs	r3, #0
 8005156:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005158:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800515a:	2b01      	cmp	r3, #1
 800515c:	d133      	bne.n	80051c6 <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800515e:	2300      	movs	r3, #0
 8005160:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005162:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005164:	f102 030c 	add.w	r3, r2, #12
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005170:	320c      	adds	r2, #12
 8005172:	e842 3100 	strex	r1, r3, [r2]
 8005176:	2900      	cmp	r1, #0
 8005178:	d1f3      	bne.n	8005162 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800517a:	6803      	ldr	r3, [r0, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	f012 0f10 	tst.w	r2, #16
 8005182:	d006      	beq.n	8005192 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005184:	2200      	movs	r2, #0
 8005186:	9201      	str	r2, [sp, #4]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	9201      	str	r2, [sp, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005192:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8005194:	f7ff ffaa 	bl	80050ec <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8005198:	2000      	movs	r0, #0
}
 800519a:	b003      	add	sp, #12
 800519c:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a0:	6902      	ldr	r2, [r0, #16]
 80051a2:	2a00      	cmp	r2, #0
 80051a4:	d1ac      	bne.n	8005100 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051a6:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051a8:	6803      	ldr	r3, [r0, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b0:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80051b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80051b4:	3302      	adds	r3, #2
 80051b6:	6283      	str	r3, [r0, #40]	; 0x28
 80051b8:	e7b1      	b.n	800511e <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051ba:	6803      	ldr	r3, [r0, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c2:	7013      	strb	r3, [r2, #0]
 80051c4:	e7a8      	b.n	8005118 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 80051c6:	f7ff ff87 	bl	80050d8 <HAL_UART_RxCpltCallback>
 80051ca:	e7e5      	b.n	8005198 <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 80051cc:	2002      	movs	r0, #2
 80051ce:	4770      	bx	lr
    return HAL_OK;
 80051d0:	2000      	movs	r0, #0
}
 80051d2:	4770      	bx	lr

080051d4 <HAL_UART_IRQHandler>:
{
 80051d4:	b530      	push	{r4, r5, lr}
 80051d6:	b083      	sub	sp, #12
 80051d8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051da:	6802      	ldr	r2, [r0, #0]
 80051dc:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051de:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051e0:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80051e2:	f013 050f 	ands.w	r5, r3, #15
 80051e6:	d105      	bne.n	80051f4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051e8:	f013 0f20 	tst.w	r3, #32
 80051ec:	d002      	beq.n	80051f4 <HAL_UART_IRQHandler+0x20>
 80051ee:	f010 0f20 	tst.w	r0, #32
 80051f2:	d119      	bne.n	8005228 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051f4:	b12d      	cbz	r5, 8005202 <HAL_UART_IRQHandler+0x2e>
 80051f6:	f011 0101 	ands.w	r1, r1, #1
 80051fa:	d119      	bne.n	8005230 <HAL_UART_IRQHandler+0x5c>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051fc:	f410 7f90 	tst.w	r0, #288	; 0x120
 8005200:	d116      	bne.n	8005230 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005202:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005204:	2901      	cmp	r1, #1
 8005206:	d07d      	beq.n	8005304 <HAL_UART_IRQHandler+0x130>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005208:	f013 0f80 	tst.w	r3, #128	; 0x80
 800520c:	d003      	beq.n	8005216 <HAL_UART_IRQHandler+0x42>
 800520e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005212:	f040 8118 	bne.w	8005446 <HAL_UART_IRQHandler+0x272>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005216:	f013 0f40 	tst.w	r3, #64	; 0x40
 800521a:	d003      	beq.n	8005224 <HAL_UART_IRQHandler+0x50>
 800521c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005220:	f040 8115 	bne.w	800544e <HAL_UART_IRQHandler+0x27a>
}
 8005224:	b003      	add	sp, #12
 8005226:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8005228:	4620      	mov	r0, r4
 800522a:	f7ff ff60 	bl	80050ee <UART_Receive_IT>
      return;
 800522e:	e7f9      	b.n	8005224 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005230:	f013 0f01 	tst.w	r3, #1
 8005234:	d006      	beq.n	8005244 <HAL_UART_IRQHandler+0x70>
 8005236:	f410 7f80 	tst.w	r0, #256	; 0x100
 800523a:	d003      	beq.n	8005244 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800523c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005244:	f013 0f04 	tst.w	r3, #4
 8005248:	d004      	beq.n	8005254 <HAL_UART_IRQHandler+0x80>
 800524a:	b119      	cbz	r1, 8005254 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800524c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800524e:	f042 0202 	orr.w	r2, r2, #2
 8005252:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005254:	f013 0f02 	tst.w	r3, #2
 8005258:	d004      	beq.n	8005264 <HAL_UART_IRQHandler+0x90>
 800525a:	b119      	cbz	r1, 8005264 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800525c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800525e:	f042 0204 	orr.w	r2, r2, #4
 8005262:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005264:	f013 0f08 	tst.w	r3, #8
 8005268:	d007      	beq.n	800527a <HAL_UART_IRQHandler+0xa6>
 800526a:	f010 0f20 	tst.w	r0, #32
 800526e:	d100      	bne.n	8005272 <HAL_UART_IRQHandler+0x9e>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005270:	b119      	cbz	r1, 800527a <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005272:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005274:	f042 0208 	orr.w	r2, r2, #8
 8005278:	6462      	str	r2, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800527a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800527c:	2a00      	cmp	r2, #0
 800527e:	d0d1      	beq.n	8005224 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005280:	f013 0f20 	tst.w	r3, #32
 8005284:	d002      	beq.n	800528c <HAL_UART_IRQHandler+0xb8>
 8005286:	f010 0f20 	tst.w	r0, #32
 800528a:	d129      	bne.n	80052e0 <HAL_UART_IRQHandler+0x10c>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005294:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005296:	f012 0f08 	tst.w	r2, #8
 800529a:	d100      	bne.n	800529e <HAL_UART_IRQHandler+0xca>
 800529c:	b363      	cbz	r3, 80052f8 <HAL_UART_IRQHandler+0x124>
        UART_EndRxTransfer(huart);
 800529e:	4620      	mov	r0, r4
 80052a0:	f7ff fe34 	bl	8004f0c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80052ac:	d020      	beq.n	80052f0 <HAL_UART_IRQHandler+0x11c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	f102 0314 	add.w	r3, r2, #20
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	3214      	adds	r2, #20
 80052be:	e842 3100 	strex	r1, r3, [r2]
 80052c2:	2900      	cmp	r1, #0
 80052c4:	d1f3      	bne.n	80052ae <HAL_UART_IRQHandler+0xda>
          if (huart->hdmarx != NULL)
 80052c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052c8:	b173      	cbz	r3, 80052e8 <HAL_UART_IRQHandler+0x114>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052ca:	4a63      	ldr	r2, [pc, #396]	; (8005458 <HAL_UART_IRQHandler+0x284>)
 80052cc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80052d0:	f7fc f95a 	bl	8001588 <HAL_DMA_Abort_IT>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	d0a5      	beq.n	8005224 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052d8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80052da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80052dc:	4798      	blx	r3
 80052de:	e7a1      	b.n	8005224 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 80052e0:	4620      	mov	r0, r4
 80052e2:	f7ff ff04 	bl	80050ee <UART_Receive_IT>
 80052e6:	e7d1      	b.n	800528c <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 80052e8:	4620      	mov	r0, r4
 80052ea:	f7ff fef6 	bl	80050da <HAL_UART_ErrorCallback>
 80052ee:	e799      	b.n	8005224 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 80052f0:	4620      	mov	r0, r4
 80052f2:	f7ff fef2 	bl	80050da <HAL_UART_ErrorCallback>
 80052f6:	e795      	b.n	8005224 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 80052f8:	4620      	mov	r0, r4
 80052fa:	f7ff feee 	bl	80050da <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052fe:	2300      	movs	r3, #0
 8005300:	6463      	str	r3, [r4, #68]	; 0x44
    return;
 8005302:	e78f      	b.n	8005224 <HAL_UART_IRQHandler+0x50>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005304:	f013 0f10 	tst.w	r3, #16
 8005308:	f43f af7e 	beq.w	8005208 <HAL_UART_IRQHandler+0x34>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800530c:	f010 0f10 	tst.w	r0, #16
 8005310:	f43f af7a 	beq.w	8005208 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005314:	2300      	movs	r3, #0
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	6813      	ldr	r3, [r2, #0]
 800531a:	9301      	str	r3, [sp, #4]
 800531c:	6853      	ldr	r3, [r2, #4]
 800531e:	9301      	str	r3, [sp, #4]
 8005320:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005322:	6953      	ldr	r3, [r2, #20]
 8005324:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005328:	d051      	beq.n	80053ce <HAL_UART_IRQHandler+0x1fa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800532a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800532c:	6813      	ldr	r3, [r2, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005332:	2b00      	cmp	r3, #0
 8005334:	f43f af76 	beq.w	8005224 <HAL_UART_IRQHandler+0x50>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005338:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800533a:	4299      	cmp	r1, r3
 800533c:	f67f af72 	bls.w	8005224 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8005340:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005342:	6993      	ldr	r3, [r2, #24]
 8005344:	2b20      	cmp	r3, #32
 8005346:	d037      	beq.n	80053b8 <HAL_UART_IRQHandler+0x1e4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005348:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	f102 030c 	add.w	r3, r2, #12
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005356:	320c      	adds	r2, #12
 8005358:	e842 3100 	strex	r1, r3, [r2]
 800535c:	2900      	cmp	r1, #0
 800535e:	d1f3      	bne.n	8005348 <HAL_UART_IRQHandler+0x174>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005360:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005362:	f102 0314 	add.w	r3, r2, #20
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	3214      	adds	r2, #20
 8005370:	e842 3100 	strex	r1, r3, [r2]
 8005374:	2900      	cmp	r1, #0
 8005376:	d1f3      	bne.n	8005360 <HAL_UART_IRQHandler+0x18c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005378:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	f102 0314 	add.w	r3, r2, #20
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	3214      	adds	r2, #20
 8005388:	e842 3100 	strex	r1, r3, [r2]
 800538c:	2900      	cmp	r1, #0
 800538e:	d1f3      	bne.n	8005378 <HAL_UART_IRQHandler+0x1a4>
          huart->RxState = HAL_UART_STATE_READY;
 8005390:	2320      	movs	r3, #32
 8005392:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005396:	2300      	movs	r3, #0
 8005398:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800539a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	f102 030c 	add.w	r3, r2, #12
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a8:	320c      	adds	r2, #12
 80053aa:	e842 3100 	strex	r1, r3, [r2]
 80053ae:	2900      	cmp	r1, #0
 80053b0:	d1f3      	bne.n	800539a <HAL_UART_IRQHandler+0x1c6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80053b4:	f7fc f8c4 	bl	8001540 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053b8:	2302      	movs	r3, #2
 80053ba:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053bc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80053be:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	1ac9      	subs	r1, r1, r3
 80053c4:	b289      	uxth	r1, r1
 80053c6:	4620      	mov	r0, r4
 80053c8:	f7ff fe90 	bl	80050ec <HAL_UARTEx_RxEventCallback>
      return;
 80053cc:	e72a      	b.n	8005224 <HAL_UART_IRQHandler+0x50>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053ce:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80053d0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	1ac9      	subs	r1, r1, r3
 80053d6:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80053d8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f43f af21 	beq.w	8005224 <HAL_UART_IRQHandler+0x50>
          && (nb_rx_data > 0U))
 80053e2:	2900      	cmp	r1, #0
 80053e4:	f43f af1e 	beq.w	8005224 <HAL_UART_IRQHandler+0x50>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053e8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ea:	f102 030c 	add.w	r3, r2, #12
 80053ee:	e853 3f00 	ldrex	r3, [r3]
 80053f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	320c      	adds	r2, #12
 80053f8:	e842 3000 	strex	r0, r3, [r2]
 80053fc:	2800      	cmp	r0, #0
 80053fe:	d1f3      	bne.n	80053e8 <HAL_UART_IRQHandler+0x214>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005400:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	f102 0314 	add.w	r3, r2, #20
 8005406:	e853 3f00 	ldrex	r3, [r3]
 800540a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	3214      	adds	r2, #20
 8005410:	e842 3000 	strex	r0, r3, [r2]
 8005414:	2800      	cmp	r0, #0
 8005416:	d1f3      	bne.n	8005400 <HAL_UART_IRQHandler+0x22c>
        huart->RxState = HAL_UART_STATE_READY;
 8005418:	2320      	movs	r3, #32
 800541a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800541e:	2300      	movs	r3, #0
 8005420:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005422:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	f102 030c 	add.w	r3, r2, #12
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005430:	320c      	adds	r2, #12
 8005432:	e842 3000 	strex	r0, r3, [r2]
 8005436:	2800      	cmp	r0, #0
 8005438:	d1f3      	bne.n	8005422 <HAL_UART_IRQHandler+0x24e>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800543a:	2302      	movs	r3, #2
 800543c:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800543e:	4620      	mov	r0, r4
 8005440:	f7ff fe54 	bl	80050ec <HAL_UARTEx_RxEventCallback>
      return;
 8005444:	e6ee      	b.n	8005224 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8005446:	4620      	mov	r0, r4
 8005448:	f7ff fd8e 	bl	8004f68 <UART_Transmit_IT>
    return;
 800544c:	e6ea      	b.n	8005224 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 800544e:	4620      	mov	r0, r4
 8005450:	f7ff fe35 	bl	80050be <UART_EndTransmit_IT>
    return;
 8005454:	e6e6      	b.n	8005224 <HAL_UART_IRQHandler+0x50>
 8005456:	bf00      	nop
 8005458:	080050dd 	.word	0x080050dd

0800545c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800545c:	b084      	sub	sp, #16
 800545e:	a804      	add	r0, sp, #16
 8005460:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8005464:	2000      	movs	r0, #0
 8005466:	b004      	add	sp, #16
 8005468:	4770      	bx	lr

0800546a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800546a:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800546c:	2000      	movs	r0, #0
 800546e:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005472:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8005476:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 800547a:	4770      	bx	lr

0800547c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800547c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8005480:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005484:	045b      	lsls	r3, r3, #17
 8005486:	0c5b      	lsrs	r3, r3, #17
 8005488:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800548c:	2000      	movs	r0, #0
 800548e:	4770      	bx	lr

08005490 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005490:	2000      	movs	r0, #0
 8005492:	4770      	bx	lr

08005494 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005494:	b084      	sub	sp, #16
 8005496:	4684      	mov	ip, r0
 8005498:	a804      	add	r0, sp, #16
 800549a:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800549e:	2301      	movs	r3, #1
 80054a0:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80054a4:	2000      	movs	r0, #0
 80054a6:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80054aa:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80054ae:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 80054b2:	b004      	add	sp, #16
 80054b4:	4770      	bx	lr

080054b6 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054b6:	b510      	push	{r4, lr}
 80054b8:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80054ba:	f891 c000 	ldrb.w	ip, [r1]
 80054be:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 80054c2:	b292      	uxth	r2, r2
 80054c4:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80054c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80054cc:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 80054ce:	78c8      	ldrb	r0, [r1, #3]
 80054d0:	2803      	cmp	r0, #3
 80054d2:	d861      	bhi.n	8005598 <USB_ActivateEndpoint+0xe2>
 80054d4:	e8df f000 	tbb	[pc, r0]
 80054d8:	58025c55 	.word	0x58025c55
 80054dc:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80054de:	f248 0e80 	movw	lr, #32896	; 0x8080
 80054e2:	ea42 020e 	orr.w	r2, r2, lr
 80054e6:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80054ea:	f891 c000 	ldrb.w	ip, [r1]
 80054ee:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 80054f2:	b292      	uxth	r2, r2
 80054f4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80054f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80054fc:	ea4c 0202 	orr.w	r2, ip, r2
 8005500:	ea42 020e 	orr.w	r2, r2, lr
 8005504:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 8005508:	7b0a      	ldrb	r2, [r1, #12]
 800550a:	2a00      	cmp	r2, #0
 800550c:	f040 80dc 	bne.w	80056c8 <USB_ActivateEndpoint+0x212>
  {
    if (ep->is_in != 0U)
 8005510:	784a      	ldrb	r2, [r1, #1]
 8005512:	2a00      	cmp	r2, #0
 8005514:	d051      	beq.n	80055ba <USB_ActivateEndpoint+0x104>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005516:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800551a:	b292      	uxth	r2, r2
 800551c:	441a      	add	r2, r3
 800551e:	780c      	ldrb	r4, [r1, #0]
 8005520:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8005524:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8005528:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800552c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005530:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005534:	780c      	ldrb	r4, [r1, #0]
 8005536:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800553a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800553e:	d00c      	beq.n	800555a <USB_ActivateEndpoint+0xa4>
 8005540:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005544:	b292      	uxth	r2, r2
 8005546:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800554a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800554e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005552:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005556:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800555a:	78ca      	ldrb	r2, [r1, #3]
 800555c:	2a01      	cmp	r2, #1
 800555e:	d01d      	beq.n	800559c <USB_ActivateEndpoint+0xe6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005560:	7809      	ldrb	r1, [r1, #0]
 8005562:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005566:	b292      	uxth	r2, r2
 8005568:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800556c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005570:	f082 0220 	eor.w	r2, r2, #32
 8005574:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005578:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800557c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005580:	e117      	b.n	80057b2 <USB_ActivateEndpoint+0x2fc>
      wEpRegVal |= USB_EP_CONTROL;
 8005582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 8005586:	e7aa      	b.n	80054de <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 8005588:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800558c:	2000      	movs	r0, #0
      break;
 800558e:	e7a6      	b.n	80054de <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005590:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8005594:	2000      	movs	r0, #0
      break;
 8005596:	e7a2      	b.n	80054de <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8005598:	2001      	movs	r0, #1
 800559a:	e7a0      	b.n	80054de <USB_ActivateEndpoint+0x28>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800559c:	7809      	ldrb	r1, [r1, #0]
 800559e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80055a2:	b292      	uxth	r2, r2
 80055a4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80055a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055b4:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80055b8:	e0fb      	b.n	80057b2 <USB_ActivateEndpoint+0x2fc>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80055ba:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80055be:	b292      	uxth	r2, r2
 80055c0:	441a      	add	r2, r3
 80055c2:	780c      	ldrb	r4, [r1, #0]
 80055c4:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80055c8:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 80055cc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80055d0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80055d4:	f8a2 c408 	strh.w	ip, [r2, #1032]	; 0x408

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80055d8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80055dc:	b292      	uxth	r2, r2
 80055de:	441a      	add	r2, r3
 80055e0:	780c      	ldrb	r4, [r1, #0]
 80055e2:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80055e6:	f8b2 c40c 	ldrh.w	ip, [r2, #1036]	; 0x40c
 80055ea:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80055ee:	f8a2 c40c 	strh.w	ip, [r2, #1036]	; 0x40c
 80055f2:	690c      	ldr	r4, [r1, #16]
 80055f4:	2c3e      	cmp	r4, #62	; 0x3e
 80055f6:	d939      	bls.n	800566c <USB_ActivateEndpoint+0x1b6>
 80055f8:	ea4f 1e54 	mov.w	lr, r4, lsr #5
 80055fc:	f014 0f1f 	tst.w	r4, #31
 8005600:	d101      	bne.n	8005606 <USB_ActivateEndpoint+0x150>
 8005602:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005606:	f8b2 c40c 	ldrh.w	ip, [r2, #1036]	; 0x40c
 800560a:	fa1f fc8c 	uxth.w	ip, ip
 800560e:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8005612:	fa1f fe8e 	uxth.w	lr, lr
 8005616:	ea4c 0c0e 	orr.w	ip, ip, lr
 800561a:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
 800561e:	f8a2 c40c 	strh.w	ip, [r2, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005622:	780c      	ldrb	r4, [r1, #0]
 8005624:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005628:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800562c:	d00c      	beq.n	8005648 <USB_ActivateEndpoint+0x192>
 800562e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005632:	b292      	uxth	r2, r2
 8005634:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005638:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800563c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005640:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005644:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->num == 0U)
 8005648:	7809      	ldrb	r1, [r1, #0]
 800564a:	bb69      	cbnz	r1, 80056a8 <USB_ActivateEndpoint+0x1f2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800564c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005650:	b292      	uxth	r2, r2
 8005652:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005656:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800565a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800565e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005662:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005666:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800566a:	e0a2      	b.n	80057b2 <USB_ActivateEndpoint+0x2fc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800566c:	b94c      	cbnz	r4, 8005682 <USB_ActivateEndpoint+0x1cc>
 800566e:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 8005672:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8005676:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800567a:	b2a4      	uxth	r4, r4
 800567c:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 8005680:	e7cf      	b.n	8005622 <USB_ActivateEndpoint+0x16c>
 8005682:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8005686:	f014 0f01 	tst.w	r4, #1
 800568a:	d001      	beq.n	8005690 <USB_ActivateEndpoint+0x1da>
 800568c:	f10c 0c01 	add.w	ip, ip, #1
 8005690:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 8005694:	b2a4      	uxth	r4, r4
 8005696:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 800569a:	fa1f fc8c 	uxth.w	ip, ip
 800569e:	ea44 040c 	orr.w	r4, r4, ip
 80056a2:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 80056a6:	e7bc      	b.n	8005622 <USB_ActivateEndpoint+0x16c>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80056a8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80056ac:	b292      	uxth	r2, r2
 80056ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80056b6:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80056ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056c2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80056c6:	e074      	b.n	80057b2 <USB_ActivateEndpoint+0x2fc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80056c8:	78ca      	ldrb	r2, [r1, #3]
 80056ca:	2a02      	cmp	r2, #2
 80056cc:	d072      	beq.n	80057b4 <USB_ActivateEndpoint+0x2fe>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80056ce:	780c      	ldrb	r4, [r1, #0]
 80056d0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80056d4:	b292      	uxth	r2, r2
 80056d6:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80056da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80056de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056e6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80056ea:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80056ee:	b292      	uxth	r2, r2
 80056f0:	441a      	add	r2, r3
 80056f2:	f891 c000 	ldrb.w	ip, [r1]
 80056f6:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 80056fa:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80056fe:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005702:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005706:	f8a2 c400 	strh.w	ip, [r2, #1024]	; 0x400
 800570a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800570e:	b292      	uxth	r2, r2
 8005710:	441a      	add	r2, r3
 8005712:	f891 c000 	ldrb.w	ip, [r1]
 8005716:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 800571a:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 800571e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005722:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005726:	f8a2 c408 	strh.w	ip, [r2, #1032]	; 0x408

    if (ep->is_in == 0U)
 800572a:	784a      	ldrb	r2, [r1, #1]
 800572c:	2a00      	cmp	r2, #0
 800572e:	d150      	bne.n	80057d2 <USB_ActivateEndpoint+0x31c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005730:	780c      	ldrb	r4, [r1, #0]
 8005732:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005736:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800573a:	d00c      	beq.n	8005756 <USB_ActivateEndpoint+0x2a0>
 800573c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005740:	b292      	uxth	r2, r2
 8005742:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005746:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800574a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800574e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005752:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005756:	780c      	ldrb	r4, [r1, #0]
 8005758:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800575c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005760:	d00c      	beq.n	800577c <USB_ActivateEndpoint+0x2c6>
 8005762:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005766:	b292      	uxth	r2, r2
 8005768:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800576c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005770:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005774:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005778:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800577c:	f891 c000 	ldrb.w	ip, [r1]
 8005780:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8005784:	b292      	uxth	r2, r2
 8005786:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800578a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800578e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8005792:	f248 0480 	movw	r4, #32896	; 0x8080
 8005796:	4322      	orrs	r2, r4
 8005798:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800579c:	7809      	ldrb	r1, [r1, #0]
 800579e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80057a2:	b292      	uxth	r2, r2
 80057a4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80057a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ac:	4322      	orrs	r2, r4
 80057ae:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80057b2:	bd10      	pop	{r4, pc}
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80057b4:	780c      	ldrb	r4, [r1, #0]
 80057b6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80057ba:	b292      	uxth	r2, r2
 80057bc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80057c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80057c4:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80057c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057cc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 80057d0:	e78b      	b.n	80056ea <USB_ActivateEndpoint+0x234>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057d2:	780c      	ldrb	r4, [r1, #0]
 80057d4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80057d8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80057dc:	d00c      	beq.n	80057f8 <USB_ActivateEndpoint+0x342>
 80057de:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80057e2:	b292      	uxth	r2, r2
 80057e4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80057e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80057ec:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80057f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057f4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057f8:	780c      	ldrb	r4, [r1, #0]
 80057fa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80057fe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005802:	d00c      	beq.n	800581e <USB_ActivateEndpoint+0x368>
 8005804:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005808:	b292      	uxth	r2, r2
 800580a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800580e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005812:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005816:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800581a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800581e:	78ca      	ldrb	r2, [r1, #3]
 8005820:	2a01      	cmp	r2, #1
 8005822:	d01e      	beq.n	8005862 <USB_ActivateEndpoint+0x3ac>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005824:	780c      	ldrb	r4, [r1, #0]
 8005826:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800582a:	b292      	uxth	r2, r2
 800582c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005834:	f082 0220 	eor.w	r2, r2, #32
 8005838:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800583c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005840:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005844:	7809      	ldrb	r1, [r1, #0]
 8005846:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800584a:	b292      	uxth	r2, r2
 800584c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005850:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005854:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005858:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800585c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005860:	e7a7      	b.n	80057b2 <USB_ActivateEndpoint+0x2fc>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005862:	780c      	ldrb	r4, [r1, #0]
 8005864:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005868:	b292      	uxth	r2, r2
 800586a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800586e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005876:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800587a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800587e:	e7e1      	b.n	8005844 <USB_ActivateEndpoint+0x38e>

08005880 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005880:	7b0b      	ldrb	r3, [r1, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d146      	bne.n	8005914 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8005886:	784b      	ldrb	r3, [r1, #1]
 8005888:	b313      	cbz	r3, 80058d0 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800588a:	780a      	ldrb	r2, [r1, #0]
 800588c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005890:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005894:	d00c      	beq.n	80058b0 <USB_DeactivateEndpoint+0x30>
 8005896:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800589a:	b29b      	uxth	r3, r3
 800589c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058b0:	780a      	ldrb	r2, [r1, #0]
 80058b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80058cc:	2000      	movs	r0, #0
 80058ce:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058d0:	780a      	ldrb	r2, [r1, #0]
 80058d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80058d6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80058da:	d00c      	beq.n	80058f6 <USB_DeactivateEndpoint+0x76>
 80058dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058f6:	780a      	ldrb	r2, [r1, #0]
 80058f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800590e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005912:	e7db      	b.n	80058cc <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8005914:	784b      	ldrb	r3, [r1, #1]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d14e      	bne.n	80059b8 <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800591a:	780a      	ldrb	r2, [r1, #0]
 800591c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005920:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005924:	d00c      	beq.n	8005940 <USB_DeactivateEndpoint+0xc0>
 8005926:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005940:	780a      	ldrb	r2, [r1, #0]
 8005942:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005946:	f013 0f40 	tst.w	r3, #64	; 0x40
 800594a:	d00c      	beq.n	8005966 <USB_DeactivateEndpoint+0xe6>
 800594c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005950:	b29b      	uxth	r3, r3
 8005952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005962:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8005966:	780a      	ldrb	r2, [r1, #0]
 8005968:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800596c:	b29b      	uxth	r3, r3
 800596e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800597a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800597e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005982:	780a      	ldrb	r2, [r1, #0]
 8005984:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005988:	b29b      	uxth	r3, r3
 800598a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800598e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005992:	f248 0c80 	movw	ip, #32896	; 0x8080
 8005996:	ea43 030c 	orr.w	r3, r3, ip
 800599a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800599e:	780a      	ldrb	r2, [r1, #0]
 80059a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ae:	ea43 030c 	orr.w	r3, r3, ip
 80059b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80059b6:	e789      	b.n	80058cc <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059b8:	780a      	ldrb	r2, [r1, #0]
 80059ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80059be:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80059c2:	d00c      	beq.n	80059de <USB_DeactivateEndpoint+0x15e>
 80059c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059da:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059de:	780a      	ldrb	r2, [r1, #0]
 80059e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80059e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80059e8:	d00c      	beq.n	8005a04 <USB_DeactivateEndpoint+0x184>
 80059ea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a00:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8005a04:	780a      	ldrb	r2, [r1, #0]
 8005a06:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a20:	780a      	ldrb	r2, [r1, #0]
 8005a22:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a30:	f248 0c80 	movw	ip, #32896	; 0x8080
 8005a34:	ea43 030c 	orr.w	r3, r3, ip
 8005a38:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a3c:	780a      	ldrb	r2, [r1, #0]
 8005a3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4c:	ea43 030c 	orr.w	r3, r3, ip
 8005a50:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005a54:	e73a      	b.n	80058cc <USB_DeactivateEndpoint+0x4c>

08005a56 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8005a56:	784b      	ldrb	r3, [r1, #1]
 8005a58:	b18b      	cbz	r3, 8005a7e <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005a5a:	780a      	ldrb	r2, [r1, #0]
 8005a5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a6a:	f083 0310 	eor.w	r3, r3, #16
 8005a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a76:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005a7e:	780a      	ldrb	r2, [r1, #0]
 8005a80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a9a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005a9e:	e7ec      	b.n	8005a7a <USB_EPSetStall+0x24>

08005aa0 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005aa0:	7b0b      	ldrb	r3, [r1, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d14b      	bne.n	8005b3e <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8005aa6:	784b      	ldrb	r3, [r1, #1]
 8005aa8:	b333      	cbz	r3, 8005af8 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005aaa:	780a      	ldrb	r2, [r1, #0]
 8005aac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ab0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ab4:	d00c      	beq.n	8005ad0 <USB_EPClearStall+0x30>
 8005ab6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005acc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8005ad0:	78cb      	ldrb	r3, [r1, #3]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d033      	beq.n	8005b3e <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ad6:	780a      	ldrb	r2, [r1, #0]
 8005ad8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae6:	f083 0320 	eor.w	r3, r3, #32
 8005aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005af6:	e022      	b.n	8005b3e <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005af8:	780a      	ldrb	r2, [r1, #0]
 8005afa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005afe:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005b02:	d00c      	beq.n	8005b1e <USB_EPClearStall+0x7e>
 8005b04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b1e:	780a      	ldrb	r2, [r1, #0]
 8005b20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b3a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8005b3e:	2000      	movs	r0, #0
 8005b40:	4770      	bx	lr

08005b42 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8005b42:	b911      	cbnz	r1, 8005b4a <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	4770      	bx	lr

08005b4e <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8005b4e:	2000      	movs	r0, #0
 8005b50:	4770      	bx	lr

08005b52 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8005b52:	2000      	movs	r0, #0
 8005b54:	4770      	bx	lr

08005b56 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005b56:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8005b5a:	b280      	uxth	r0, r0
 8005b5c:	4770      	bx	lr

08005b5e <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005b5e:	2000      	movs	r0, #0
 8005b60:	4770      	bx	lr

08005b62 <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b62:	3301      	adds	r3, #1
 8005b64:	085b      	lsrs	r3, r3, #1
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b66:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8005b6a:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (count = n; count != 0U; count--)
 8005b6e:	e008      	b.n	8005b82 <USB_WritePMA+0x20>
  {
    WrVal = pBuf[0];
 8005b70:	780a      	ldrb	r2, [r1, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005b72:	f891 c001 	ldrb.w	ip, [r1, #1]
 8005b76:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    *pdwVal = (WrVal & 0xFFFFU);
 8005b7a:	f820 2b04 	strh.w	r2, [r0], #4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 8005b7e:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8005b80:	3b01      	subs	r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1f4      	bne.n	8005b70 <USB_WritePMA+0xe>
  }
}
 8005b86:	4770      	bx	lr

08005b88 <USB_EPStartXfer>:
{
 8005b88:	b570      	push	{r4, r5, r6, lr}
 8005b8a:	4605      	mov	r5, r0
 8005b8c:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8005b8e:	784a      	ldrb	r2, [r1, #1]
 8005b90:	2a01      	cmp	r2, #1
 8005b92:	d03b      	beq.n	8005c0c <USB_EPStartXfer+0x84>
    if (ep->doublebuffer == 0U)
 8005b94:	7b0b      	ldrb	r3, [r1, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f040 82a6 	bne.w	80060e8 <USB_EPStartXfer+0x560>
      if (ep->xfer_len > ep->maxpacket)
 8005b9c:	698b      	ldr	r3, [r1, #24]
 8005b9e:	690a      	ldr	r2, [r1, #16]
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	f240 8284 	bls.w	80060ae <USB_EPStartXfer+0x526>
        ep->xfer_len -= len;
 8005ba6:	1a9b      	subs	r3, r3, r2
 8005ba8:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005baa:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	442b      	add	r3, r5
 8005bb2:	7821      	ldrb	r1, [r4, #0]
 8005bb4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005bb8:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	; 0x40c
 8005bbc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005bc0:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8005bc4:	2a3e      	cmp	r2, #62	; 0x3e
 8005bc6:	f240 8276 	bls.w	80060b6 <USB_EPStartXfer+0x52e>
 8005bca:	0951      	lsrs	r1, r2, #5
 8005bcc:	f012 0f1f 	tst.w	r2, #31
 8005bd0:	d100      	bne.n	8005bd4 <USB_EPStartXfer+0x4c>
 8005bd2:	3901      	subs	r1, #1
 8005bd4:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005bd8:	b292      	uxth	r2, r2
 8005bda:	0289      	lsls	r1, r1, #10
 8005bdc:	b289      	uxth	r1, r1
 8005bde:	430a      	orrs	r2, r1
 8005be0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005be4:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005be8:	7822      	ldrb	r2, [r4, #0]
 8005bea:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c04:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8005c08:	2000      	movs	r0, #0
}
 8005c0a:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8005c0c:	698e      	ldr	r6, [r1, #24]
 8005c0e:	6909      	ldr	r1, [r1, #16]
 8005c10:	428e      	cmp	r6, r1
 8005c12:	d900      	bls.n	8005c16 <USB_EPStartXfer+0x8e>
      len = ep->maxpacket;
 8005c14:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 8005c16:	7b23      	ldrb	r3, [r4, #12]
 8005c18:	b373      	cbz	r3, 8005c78 <USB_EPStartXfer+0xf0>
      if (ep->type == EP_TYPE_BULK)
 8005c1a:	78e3      	ldrb	r3, [r4, #3]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d04d      	beq.n	8005cbc <USB_EPStartXfer+0x134>
        ep->xfer_len_db -= len;
 8005c20:	6a23      	ldr	r3, [r4, #32]
 8005c22:	1b9b      	subs	r3, r3, r6
 8005c24:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c26:	7821      	ldrb	r1, [r4, #0]
 8005c28:	f835 3021 	ldrh.w	r3, [r5, r1, lsl #2]
 8005c2c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c30:	f000 81f5 	beq.w	800601e <USB_EPStartXfer+0x496>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c34:	2a00      	cmp	r2, #0
 8005c36:	f040 81e2 	bne.w	8005ffe <USB_EPStartXfer+0x476>
 8005c3a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	442b      	add	r3, r5
 8005c42:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005c46:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005c4a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005c4e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005c52:	2e3e      	cmp	r6, #62	; 0x3e
 8005c54:	f240 81ba 	bls.w	8005fcc <USB_EPStartXfer+0x444>
 8005c58:	0971      	lsrs	r1, r6, #5
 8005c5a:	f016 0f1f 	tst.w	r6, #31
 8005c5e:	d100      	bne.n	8005c62 <USB_EPStartXfer+0xda>
 8005c60:	3901      	subs	r1, #1
 8005c62:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005c66:	b292      	uxth	r2, r2
 8005c68:	0289      	lsls	r1, r1, #10
 8005c6a:	b289      	uxth	r1, r1
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c72:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005c76:	e1cb      	b.n	8006010 <USB_EPStartXfer+0x488>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005c78:	b2b6      	uxth	r6, r6
 8005c7a:	4633      	mov	r3, r6
 8005c7c:	88e2      	ldrh	r2, [r4, #6]
 8005c7e:	6961      	ldr	r1, [r4, #20]
 8005c80:	4628      	mov	r0, r5
 8005c82:	f7ff ff6e 	bl	8005b62 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c86:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	442b      	add	r3, r5
 8005c8e:	7822      	ldrb	r2, [r4, #0]
 8005c90:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005c94:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005c98:	7822      	ldrb	r2, [r4, #0]
 8005c9a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ca8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8005cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8005cb8:	2000      	movs	r0, #0
 8005cba:	e7a6      	b.n	8005c0a <USB_EPStartXfer+0x82>
        if (ep->xfer_len_db > ep->maxpacket)
 8005cbc:	6a23      	ldr	r3, [r4, #32]
 8005cbe:	4299      	cmp	r1, r3
 8005cc0:	f080 8166 	bcs.w	8005f90 <USB_EPStartXfer+0x408>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005cc4:	7822      	ldrb	r2, [r4, #0]
 8005cc6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cdc:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 8005ce0:	6a23      	ldr	r3, [r4, #32]
 8005ce2:	1b9b      	subs	r3, r3, r6
 8005ce4:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ce6:	7822      	ldrb	r2, [r4, #0]
 8005ce8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005cec:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005cf0:	f000 80a7 	beq.w	8005e42 <USB_EPStartXfer+0x2ba>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cf4:	7863      	ldrb	r3, [r4, #1]
 8005cf6:	bbb3      	cbnz	r3, 8005d66 <USB_EPStartXfer+0x1de>
 8005cf8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	442b      	add	r3, r5
 8005d00:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005d04:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005d08:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005d0c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005d10:	2e3e      	cmp	r6, #62	; 0x3e
 8005d12:	d90f      	bls.n	8005d34 <USB_EPStartXfer+0x1ac>
 8005d14:	0971      	lsrs	r1, r6, #5
 8005d16:	f016 0f1f 	tst.w	r6, #31
 8005d1a:	d100      	bne.n	8005d1e <USB_EPStartXfer+0x196>
 8005d1c:	3901      	subs	r1, #1
 8005d1e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005d22:	b292      	uxth	r2, r2
 8005d24:	0289      	lsls	r1, r1, #10
 8005d26:	b289      	uxth	r1, r1
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d2e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005d32:	e01a      	b.n	8005d6a <USB_EPStartXfer+0x1e2>
 8005d34:	b94e      	cbnz	r6, 8005d4a <USB_EPStartXfer+0x1c2>
 8005d36:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005d3a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005d3e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005d42:	b292      	uxth	r2, r2
 8005d44:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005d48:	e00f      	b.n	8005d6a <USB_EPStartXfer+0x1e2>
 8005d4a:	0872      	lsrs	r2, r6, #1
 8005d4c:	f016 0f01 	tst.w	r6, #1
 8005d50:	d000      	beq.n	8005d54 <USB_EPStartXfer+0x1cc>
 8005d52:	3201      	adds	r2, #1
 8005d54:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	; 0x40c
 8005d58:	b289      	uxth	r1, r1
 8005d5a:	0292      	lsls	r2, r2, #10
 8005d5c:	b292      	uxth	r2, r2
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005d64:	e001      	b.n	8005d6a <USB_EPStartXfer+0x1e2>
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d030      	beq.n	8005dcc <USB_EPStartXfer+0x244>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d6a:	b2b3      	uxth	r3, r6
 8005d6c:	8962      	ldrh	r2, [r4, #10]
 8005d6e:	6961      	ldr	r1, [r4, #20]
 8005d70:	4628      	mov	r0, r5
 8005d72:	f7ff fef6 	bl	8005b62 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d76:	6963      	ldr	r3, [r4, #20]
 8005d78:	4433      	add	r3, r6
 8005d7a:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8005d7c:	6a23      	ldr	r3, [r4, #32]
 8005d7e:	6922      	ldr	r2, [r4, #16]
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d92d      	bls.n	8005de0 <USB_EPStartXfer+0x258>
              ep->xfer_len_db -= len;
 8005d84:	1b9b      	subs	r3, r3, r6
 8005d86:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d88:	7863      	ldrb	r3, [r4, #1]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d145      	bne.n	8005e1a <USB_EPStartXfer+0x292>
 8005d8e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	442b      	add	r3, r5
 8005d96:	7822      	ldrb	r2, [r4, #0]
 8005d98:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005d9c:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8005da0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005da4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005da8:	2e3e      	cmp	r6, #62	; 0x3e
 8005daa:	d91d      	bls.n	8005de8 <USB_EPStartXfer+0x260>
 8005dac:	0971      	lsrs	r1, r6, #5
 8005dae:	f016 0f1f 	tst.w	r6, #31
 8005db2:	d100      	bne.n	8005db6 <USB_EPStartXfer+0x22e>
 8005db4:	3901      	subs	r1, #1
 8005db6:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8005dba:	b292      	uxth	r2, r2
 8005dbc:	0289      	lsls	r1, r1, #10
 8005dbe:	b289      	uxth	r1, r1
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dc6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005dca:	e028      	b.n	8005e1e <USB_EPStartXfer+0x296>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005dcc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	442b      	add	r3, r5
 8005dd4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005dd8:	b2b2      	uxth	r2, r6
 8005dda:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005dde:	e7c4      	b.n	8005d6a <USB_EPStartXfer+0x1e2>
              ep->xfer_len_db = 0U;
 8005de0:	2200      	movs	r2, #0
 8005de2:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8005de4:	461e      	mov	r6, r3
 8005de6:	e7cf      	b.n	8005d88 <USB_EPStartXfer+0x200>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005de8:	b94e      	cbnz	r6, 8005dfe <USB_EPStartXfer+0x276>
 8005dea:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8005dee:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005df2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005df6:	b292      	uxth	r2, r2
 8005df8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005dfc:	e00f      	b.n	8005e1e <USB_EPStartXfer+0x296>
 8005dfe:	0872      	lsrs	r2, r6, #1
 8005e00:	f016 0f01 	tst.w	r6, #1
 8005e04:	d000      	beq.n	8005e08 <USB_EPStartXfer+0x280>
 8005e06:	3201      	adds	r2, #1
 8005e08:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	; 0x404
 8005e0c:	b289      	uxth	r1, r1
 8005e0e:	0292      	lsls	r2, r2, #10
 8005e10:	b292      	uxth	r2, r2
 8005e12:	430a      	orrs	r2, r1
 8005e14:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005e18:	e001      	b.n	8005e1e <USB_EPStartXfer+0x296>
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d006      	beq.n	8005e2c <USB_EPStartXfer+0x2a4>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e1e:	b2b3      	uxth	r3, r6
 8005e20:	8922      	ldrh	r2, [r4, #8]
 8005e22:	6961      	ldr	r1, [r4, #20]
 8005e24:	4628      	mov	r0, r5
 8005e26:	f7ff fe9c 	bl	8005b62 <USB_WritePMA>
 8005e2a:	e735      	b.n	8005c98 <USB_EPStartXfer+0x110>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e2c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	442b      	add	r3, r5
 8005e34:	7822      	ldrb	r2, [r4, #0]
 8005e36:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005e3a:	b2b2      	uxth	r2, r6
 8005e3c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005e40:	e7ed      	b.n	8005e1e <USB_EPStartXfer+0x296>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e42:	7863      	ldrb	r3, [r4, #1]
 8005e44:	bbb3      	cbnz	r3, 8005eb4 <USB_EPStartXfer+0x32c>
 8005e46:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	442b      	add	r3, r5
 8005e4e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005e52:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8005e56:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005e5a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005e5e:	2e3e      	cmp	r6, #62	; 0x3e
 8005e60:	d90f      	bls.n	8005e82 <USB_EPStartXfer+0x2fa>
 8005e62:	0971      	lsrs	r1, r6, #5
 8005e64:	f016 0f1f 	tst.w	r6, #31
 8005e68:	d100      	bne.n	8005e6c <USB_EPStartXfer+0x2e4>
 8005e6a:	3901      	subs	r1, #1
 8005e6c:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8005e70:	b292      	uxth	r2, r2
 8005e72:	0289      	lsls	r1, r1, #10
 8005e74:	b289      	uxth	r1, r1
 8005e76:	430a      	orrs	r2, r1
 8005e78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e7c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005e80:	e01a      	b.n	8005eb8 <USB_EPStartXfer+0x330>
 8005e82:	b94e      	cbnz	r6, 8005e98 <USB_EPStartXfer+0x310>
 8005e84:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8005e88:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005e8c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005e90:	b292      	uxth	r2, r2
 8005e92:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005e96:	e00f      	b.n	8005eb8 <USB_EPStartXfer+0x330>
 8005e98:	0872      	lsrs	r2, r6, #1
 8005e9a:	f016 0f01 	tst.w	r6, #1
 8005e9e:	d000      	beq.n	8005ea2 <USB_EPStartXfer+0x31a>
 8005ea0:	3201      	adds	r2, #1
 8005ea2:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	; 0x404
 8005ea6:	b289      	uxth	r1, r1
 8005ea8:	0292      	lsls	r2, r2, #10
 8005eaa:	b292      	uxth	r2, r2
 8005eac:	430a      	orrs	r2, r1
 8005eae:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005eb2:	e001      	b.n	8005eb8 <USB_EPStartXfer+0x330>
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d030      	beq.n	8005f1a <USB_EPStartXfer+0x392>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005eb8:	b2b3      	uxth	r3, r6
 8005eba:	8922      	ldrh	r2, [r4, #8]
 8005ebc:	6961      	ldr	r1, [r4, #20]
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f7ff fe4f 	bl	8005b62 <USB_WritePMA>
            ep->xfer_buff += len;
 8005ec4:	6963      	ldr	r3, [r4, #20]
 8005ec6:	4433      	add	r3, r6
 8005ec8:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8005eca:	6a23      	ldr	r3, [r4, #32]
 8005ecc:	6922      	ldr	r2, [r4, #16]
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d92d      	bls.n	8005f2e <USB_EPStartXfer+0x3a6>
              ep->xfer_len_db -= len;
 8005ed2:	1b9b      	subs	r3, r3, r6
 8005ed4:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ed6:	7863      	ldrb	r3, [r4, #1]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d145      	bne.n	8005f68 <USB_EPStartXfer+0x3e0>
 8005edc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	442b      	add	r3, r5
 8005ee4:	7822      	ldrb	r2, [r4, #0]
 8005ee6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005eea:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005eee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005ef2:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005ef6:	2e3e      	cmp	r6, #62	; 0x3e
 8005ef8:	d91d      	bls.n	8005f36 <USB_EPStartXfer+0x3ae>
 8005efa:	0971      	lsrs	r1, r6, #5
 8005efc:	f016 0f1f 	tst.w	r6, #31
 8005f00:	d100      	bne.n	8005f04 <USB_EPStartXfer+0x37c>
 8005f02:	3901      	subs	r1, #1
 8005f04:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005f08:	b292      	uxth	r2, r2
 8005f0a:	0289      	lsls	r1, r1, #10
 8005f0c:	b289      	uxth	r1, r1
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f14:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005f18:	e028      	b.n	8005f6c <USB_EPStartXfer+0x3e4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f1a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	442b      	add	r3, r5
 8005f22:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005f26:	b2b2      	uxth	r2, r6
 8005f28:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005f2c:	e7c4      	b.n	8005eb8 <USB_EPStartXfer+0x330>
              ep->xfer_len_db = 0U;
 8005f2e:	2200      	movs	r2, #0
 8005f30:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8005f32:	461e      	mov	r6, r3
 8005f34:	e7cf      	b.n	8005ed6 <USB_EPStartXfer+0x34e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f36:	b94e      	cbnz	r6, 8005f4c <USB_EPStartXfer+0x3c4>
 8005f38:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005f3c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005f40:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005f44:	b292      	uxth	r2, r2
 8005f46:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005f4a:	e00f      	b.n	8005f6c <USB_EPStartXfer+0x3e4>
 8005f4c:	0872      	lsrs	r2, r6, #1
 8005f4e:	f016 0f01 	tst.w	r6, #1
 8005f52:	d000      	beq.n	8005f56 <USB_EPStartXfer+0x3ce>
 8005f54:	3201      	adds	r2, #1
 8005f56:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	; 0x40c
 8005f5a:	b289      	uxth	r1, r1
 8005f5c:	0292      	lsls	r2, r2, #10
 8005f5e:	b292      	uxth	r2, r2
 8005f60:	430a      	orrs	r2, r1
 8005f62:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005f66:	e001      	b.n	8005f6c <USB_EPStartXfer+0x3e4>
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d006      	beq.n	8005f7a <USB_EPStartXfer+0x3f2>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f6c:	b2b3      	uxth	r3, r6
 8005f6e:	8962      	ldrh	r2, [r4, #10]
 8005f70:	6961      	ldr	r1, [r4, #20]
 8005f72:	4628      	mov	r0, r5
 8005f74:	f7ff fdf5 	bl	8005b62 <USB_WritePMA>
 8005f78:	e68e      	b.n	8005c98 <USB_EPStartXfer+0x110>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f7a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	442b      	add	r3, r5
 8005f82:	7822      	ldrb	r2, [r4, #0]
 8005f84:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005f88:	b2b2      	uxth	r2, r6
 8005f8a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005f8e:	e7ed      	b.n	8005f6c <USB_EPStartXfer+0x3e4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005f90:	7821      	ldrb	r1, [r4, #0]
 8005f92:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 8005f96:	b292      	uxth	r2, r2
 8005f98:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8005f9c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005fa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fa4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005fa8:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005fac:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005fb0:	b292      	uxth	r2, r2
 8005fb2:	442a      	add	r2, r5
 8005fb4:	7821      	ldrb	r1, [r4, #0]
 8005fb6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	f8a2 3404 	strh.w	r3, [r2, #1028]	; 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fc0:	8922      	ldrh	r2, [r4, #8]
 8005fc2:	6961      	ldr	r1, [r4, #20]
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f7ff fdcc 	bl	8005b62 <USB_WritePMA>
 8005fca:	e665      	b.n	8005c98 <USB_EPStartXfer+0x110>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fcc:	b94e      	cbnz	r6, 8005fe2 <USB_EPStartXfer+0x45a>
 8005fce:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8005fd2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005fd6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005fda:	b292      	uxth	r2, r2
 8005fdc:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005fe0:	e016      	b.n	8006010 <USB_EPStartXfer+0x488>
 8005fe2:	0872      	lsrs	r2, r6, #1
 8005fe4:	f016 0f01 	tst.w	r6, #1
 8005fe8:	d000      	beq.n	8005fec <USB_EPStartXfer+0x464>
 8005fea:	3201      	adds	r2, #1
 8005fec:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	; 0x40c
 8005ff0:	b289      	uxth	r1, r1
 8005ff2:	0292      	lsls	r2, r2, #10
 8005ff4:	b292      	uxth	r2, r2
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005ffc:	e008      	b.n	8006010 <USB_EPStartXfer+0x488>
 8005ffe:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006002:	b29b      	uxth	r3, r3
 8006004:	442b      	add	r3, r5
 8006006:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800600a:	b2b2      	uxth	r2, r6
 800600c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006010:	b2b3      	uxth	r3, r6
 8006012:	8962      	ldrh	r2, [r4, #10]
 8006014:	6961      	ldr	r1, [r4, #20]
 8006016:	4628      	mov	r0, r5
 8006018:	f7ff fda3 	bl	8005b62 <USB_WritePMA>
 800601c:	e63c      	b.n	8005c98 <USB_EPStartXfer+0x110>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800601e:	bbb2      	cbnz	r2, 800608e <USB_EPStartXfer+0x506>
 8006020:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006024:	b29b      	uxth	r3, r3
 8006026:	442b      	add	r3, r5
 8006028:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800602c:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8006030:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006034:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8006038:	2e3e      	cmp	r6, #62	; 0x3e
 800603a:	d90f      	bls.n	800605c <USB_EPStartXfer+0x4d4>
 800603c:	0971      	lsrs	r1, r6, #5
 800603e:	f016 0f1f 	tst.w	r6, #31
 8006042:	d100      	bne.n	8006046 <USB_EPStartXfer+0x4be>
 8006044:	3901      	subs	r1, #1
 8006046:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 800604a:	b292      	uxth	r2, r2
 800604c:	0289      	lsls	r1, r1, #10
 800604e:	b289      	uxth	r1, r1
 8006050:	430a      	orrs	r2, r1
 8006052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006056:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800605a:	e021      	b.n	80060a0 <USB_EPStartXfer+0x518>
 800605c:	b94e      	cbnz	r6, 8006072 <USB_EPStartXfer+0x4ea>
 800605e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8006062:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006066:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800606a:	b292      	uxth	r2, r2
 800606c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8006070:	e016      	b.n	80060a0 <USB_EPStartXfer+0x518>
 8006072:	0872      	lsrs	r2, r6, #1
 8006074:	f016 0f01 	tst.w	r6, #1
 8006078:	d000      	beq.n	800607c <USB_EPStartXfer+0x4f4>
 800607a:	3201      	adds	r2, #1
 800607c:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	; 0x404
 8006080:	b289      	uxth	r1, r1
 8006082:	0292      	lsls	r2, r2, #10
 8006084:	b292      	uxth	r2, r2
 8006086:	430a      	orrs	r2, r1
 8006088:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800608c:	e008      	b.n	80060a0 <USB_EPStartXfer+0x518>
 800608e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006092:	b29b      	uxth	r3, r3
 8006094:	442b      	add	r3, r5
 8006096:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800609a:	b2b2      	uxth	r2, r6
 800609c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060a0:	b2b3      	uxth	r3, r6
 80060a2:	8922      	ldrh	r2, [r4, #8]
 80060a4:	6961      	ldr	r1, [r4, #20]
 80060a6:	4628      	mov	r0, r5
 80060a8:	f7ff fd5b 	bl	8005b62 <USB_WritePMA>
 80060ac:	e5f4      	b.n	8005c98 <USB_EPStartXfer+0x110>
        ep->xfer_len = 0U;
 80060ae:	2200      	movs	r2, #0
 80060b0:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 80060b2:	461a      	mov	r2, r3
 80060b4:	e579      	b.n	8005baa <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80060b6:	b94a      	cbnz	r2, 80060cc <USB_EPStartXfer+0x544>
 80060b8:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80060bc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80060c0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80060c4:	b292      	uxth	r2, r2
 80060c6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80060ca:	e58d      	b.n	8005be8 <USB_EPStartXfer+0x60>
 80060cc:	0851      	lsrs	r1, r2, #1
 80060ce:	f012 0f01 	tst.w	r2, #1
 80060d2:	d000      	beq.n	80060d6 <USB_EPStartXfer+0x54e>
 80060d4:	3101      	adds	r1, #1
 80060d6:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80060da:	b292      	uxth	r2, r2
 80060dc:	0289      	lsls	r1, r1, #10
 80060de:	b289      	uxth	r1, r1
 80060e0:	430a      	orrs	r2, r1
 80060e2:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80060e6:	e57f      	b.n	8005be8 <USB_EPStartXfer+0x60>
      if (ep->type == EP_TYPE_BULK)
 80060e8:	78cb      	ldrb	r3, [r1, #3]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d04d      	beq.n	800618a <USB_EPStartXfer+0x602>
      else if (ep->type == EP_TYPE_ISOC)
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	f040 812f 	bne.w	8006352 <USB_EPStartXfer+0x7ca>
        if (ep->xfer_len > ep->maxpacket)
 80060f4:	6989      	ldr	r1, [r1, #24]
 80060f6:	6923      	ldr	r3, [r4, #16]
 80060f8:	4299      	cmp	r1, r3
 80060fa:	f240 80e6 	bls.w	80062ca <USB_EPStartXfer+0x742>
          ep->xfer_len -= len;
 80060fe:	1ac9      	subs	r1, r1, r3
 8006100:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006102:	b9f2      	cbnz	r2, 8006142 <USB_EPStartXfer+0x5ba>
 8006104:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006108:	b292      	uxth	r2, r2
 800610a:	442a      	add	r2, r5
 800610c:	7821      	ldrb	r1, [r4, #0]
 800610e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006112:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8006116:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800611a:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 800611e:	2b3e      	cmp	r3, #62	; 0x3e
 8006120:	f240 80d7 	bls.w	80062d2 <USB_EPStartXfer+0x74a>
 8006124:	0958      	lsrs	r0, r3, #5
 8006126:	f013 0f1f 	tst.w	r3, #31
 800612a:	d100      	bne.n	800612e <USB_EPStartXfer+0x5a6>
 800612c:	3801      	subs	r0, #1
 800612e:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8006132:	b289      	uxth	r1, r1
 8006134:	0280      	lsls	r0, r0, #10
 8006136:	b280      	uxth	r0, r0
 8006138:	4301      	orrs	r1, r0
 800613a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800613e:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8006142:	7862      	ldrb	r2, [r4, #1]
 8006144:	2a00      	cmp	r2, #0
 8006146:	f040 80f6 	bne.w	8006336 <USB_EPStartXfer+0x7ae>
 800614a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800614e:	b292      	uxth	r2, r2
 8006150:	442a      	add	r2, r5
 8006152:	7821      	ldrb	r1, [r4, #0]
 8006154:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006158:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 800615c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006160:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8006164:	2b3e      	cmp	r3, #62	; 0x3e
 8006166:	f240 80cd 	bls.w	8006304 <USB_EPStartXfer+0x77c>
 800616a:	0959      	lsrs	r1, r3, #5
 800616c:	f013 0f1f 	tst.w	r3, #31
 8006170:	d100      	bne.n	8006174 <USB_EPStartXfer+0x5ec>
 8006172:	3901      	subs	r1, #1
 8006174:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8006178:	b29b      	uxth	r3, r3
 800617a:	0289      	lsls	r1, r1, #10
 800617c:	b289      	uxth	r1, r1
 800617e:	430b      	orrs	r3, r1
 8006180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006184:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8006188:	e52e      	b.n	8005be8 <USB_EPStartXfer+0x60>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800618a:	b9f2      	cbnz	r2, 80061ca <USB_EPStartXfer+0x642>
 800618c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006190:	b29b      	uxth	r3, r3
 8006192:	4403      	add	r3, r0
 8006194:	780a      	ldrb	r2, [r1, #0]
 8006196:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800619a:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 800619e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80061a2:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80061a6:	690a      	ldr	r2, [r1, #16]
 80061a8:	2a3e      	cmp	r2, #62	; 0x3e
 80061aa:	d931      	bls.n	8006210 <USB_EPStartXfer+0x688>
 80061ac:	0951      	lsrs	r1, r2, #5
 80061ae:	f012 0f1f 	tst.w	r2, #31
 80061b2:	d100      	bne.n	80061b6 <USB_EPStartXfer+0x62e>
 80061b4:	3901      	subs	r1, #1
 80061b6:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80061ba:	b292      	uxth	r2, r2
 80061bc:	0289      	lsls	r1, r1, #10
 80061be:	b289      	uxth	r1, r1
 80061c0:	430a      	orrs	r2, r1
 80061c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061c6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80061ca:	7863      	ldrb	r3, [r4, #1]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d151      	bne.n	8006274 <USB_EPStartXfer+0x6ec>
 80061d0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	442b      	add	r3, r5
 80061d8:	7822      	ldrb	r2, [r4, #0]
 80061da:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80061de:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80061e2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80061e6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80061ea:	6922      	ldr	r2, [r4, #16]
 80061ec:	2a3e      	cmp	r2, #62	; 0x3e
 80061ee:	d928      	bls.n	8006242 <USB_EPStartXfer+0x6ba>
 80061f0:	0951      	lsrs	r1, r2, #5
 80061f2:	f012 0f1f 	tst.w	r2, #31
 80061f6:	d100      	bne.n	80061fa <USB_EPStartXfer+0x672>
 80061f8:	3901      	subs	r1, #1
 80061fa:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80061fe:	b292      	uxth	r2, r2
 8006200:	0289      	lsls	r1, r1, #10
 8006202:	b289      	uxth	r1, r1
 8006204:	430a      	orrs	r2, r1
 8006206:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800620a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800620e:	e033      	b.n	8006278 <USB_EPStartXfer+0x6f0>
 8006210:	b94a      	cbnz	r2, 8006226 <USB_EPStartXfer+0x69e>
 8006212:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8006216:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800621a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800621e:	b292      	uxth	r2, r2
 8006220:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8006224:	e7d1      	b.n	80061ca <USB_EPStartXfer+0x642>
 8006226:	0851      	lsrs	r1, r2, #1
 8006228:	f012 0f01 	tst.w	r2, #1
 800622c:	d000      	beq.n	8006230 <USB_EPStartXfer+0x6a8>
 800622e:	3101      	adds	r1, #1
 8006230:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8006234:	b290      	uxth	r0, r2
 8006236:	028a      	lsls	r2, r1, #10
 8006238:	b292      	uxth	r2, r2
 800623a:	4302      	orrs	r2, r0
 800623c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8006240:	e7c3      	b.n	80061ca <USB_EPStartXfer+0x642>
 8006242:	b94a      	cbnz	r2, 8006258 <USB_EPStartXfer+0x6d0>
 8006244:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8006248:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800624c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006250:	b292      	uxth	r2, r2
 8006252:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8006256:	e00f      	b.n	8006278 <USB_EPStartXfer+0x6f0>
 8006258:	0851      	lsrs	r1, r2, #1
 800625a:	f012 0f01 	tst.w	r2, #1
 800625e:	d000      	beq.n	8006262 <USB_EPStartXfer+0x6da>
 8006260:	3101      	adds	r1, #1
 8006262:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8006266:	b290      	uxth	r0, r2
 8006268:	028a      	lsls	r2, r1, #10
 800626a:	b292      	uxth	r2, r2
 800626c:	4302      	orrs	r2, r0
 800626e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8006272:	e001      	b.n	8006278 <USB_EPStartXfer+0x6f0>
 8006274:	2b01      	cmp	r3, #1
 8006276:	d01d      	beq.n	80062b4 <USB_EPStartXfer+0x72c>
        if (ep->xfer_count != 0U)
 8006278:	69e3      	ldr	r3, [r4, #28]
 800627a:	2b00      	cmp	r3, #0
 800627c:	f43f acb4 	beq.w	8005be8 <USB_EPStartXfer+0x60>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006280:	7822      	ldrb	r2, [r4, #0]
 8006282:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006286:	f244 0340 	movw	r3, #16448	; 0x4040
 800628a:	ea03 0001 	and.w	r0, r3, r1
 800628e:	438b      	bics	r3, r1
 8006290:	d002      	beq.n	8006298 <USB_EPStartXfer+0x710>
 8006292:	2800      	cmp	r0, #0
 8006294:	f47f aca8 	bne.w	8005be8 <USB_EPStartXfer+0x60>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006298:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800629c:	b29b      	uxth	r3, r3
 800629e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062ae:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80062b2:	e499      	b.n	8005be8 <USB_EPStartXfer+0x60>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80062b4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	442b      	add	r3, r5
 80062bc:	7822      	ldrb	r2, [r4, #0]
 80062be:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80062c2:	8a22      	ldrh	r2, [r4, #16]
 80062c4:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80062c8:	e7d6      	b.n	8006278 <USB_EPStartXfer+0x6f0>
          ep->xfer_len = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 80062ce:	460b      	mov	r3, r1
 80062d0:	e717      	b.n	8006102 <USB_EPStartXfer+0x57a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80062d2:	b94b      	cbnz	r3, 80062e8 <USB_EPStartXfer+0x760>
 80062d4:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 80062d8:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80062dc:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80062e0:	b289      	uxth	r1, r1
 80062e2:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 80062e6:	e72c      	b.n	8006142 <USB_EPStartXfer+0x5ba>
 80062e8:	0859      	lsrs	r1, r3, #1
 80062ea:	f013 0f01 	tst.w	r3, #1
 80062ee:	d000      	beq.n	80062f2 <USB_EPStartXfer+0x76a>
 80062f0:	3101      	adds	r1, #1
 80062f2:	f8b2 0404 	ldrh.w	r0, [r2, #1028]	; 0x404
 80062f6:	b280      	uxth	r0, r0
 80062f8:	0289      	lsls	r1, r1, #10
 80062fa:	b289      	uxth	r1, r1
 80062fc:	4301      	orrs	r1, r0
 80062fe:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8006302:	e71e      	b.n	8006142 <USB_EPStartXfer+0x5ba>
 8006304:	b94b      	cbnz	r3, 800631a <USB_EPStartXfer+0x792>
 8006306:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 800630a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800630e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006312:	b29b      	uxth	r3, r3
 8006314:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8006318:	e466      	b.n	8005be8 <USB_EPStartXfer+0x60>
 800631a:	0859      	lsrs	r1, r3, #1
 800631c:	f013 0f01 	tst.w	r3, #1
 8006320:	d000      	beq.n	8006324 <USB_EPStartXfer+0x79c>
 8006322:	3101      	adds	r1, #1
 8006324:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8006328:	b298      	uxth	r0, r3
 800632a:	028b      	lsls	r3, r1, #10
 800632c:	b29b      	uxth	r3, r3
 800632e:	4303      	orrs	r3, r0
 8006330:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8006334:	e458      	b.n	8005be8 <USB_EPStartXfer+0x60>
 8006336:	2a01      	cmp	r2, #1
 8006338:	f47f ac56 	bne.w	8005be8 <USB_EPStartXfer+0x60>
 800633c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006340:	b292      	uxth	r2, r2
 8006342:	442a      	add	r2, r5
 8006344:	7821      	ldrb	r1, [r4, #0]
 8006346:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800634a:	b29b      	uxth	r3, r3
 800634c:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8006350:	e44a      	b.n	8005be8 <USB_EPStartXfer+0x60>
        return HAL_ERROR;
 8006352:	2001      	movs	r0, #1
 8006354:	e459      	b.n	8005c0a <USB_EPStartXfer+0x82>

08006356 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006356:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006358:	085c      	lsrs	r4, r3, #1
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800635a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800635e:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (count = n; count != 0U; count--)
 8006362:	e007      	b.n	8006374 <USB_ReadPMA+0x1e>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006364:	f830 2b04 	ldrh.w	r2, [r0], #4
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006368:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800636a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800636e:	704a      	strb	r2, [r1, #1]
    pBuf++;
 8006370:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8006372:	3c01      	subs	r4, #1
 8006374:	2c00      	cmp	r4, #0
 8006376:	d1f5      	bne.n	8006364 <USB_ReadPMA+0xe>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006378:	f013 0f01 	tst.w	r3, #1
 800637c:	d001      	beq.n	8006382 <USB_ReadPMA+0x2c>
  {
    RdVal = *pdwVal;
 800637e:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006380:	700b      	strb	r3, [r1, #0]
  }
}
 8006382:	bc10      	pop	{r4}
 8006384:	4770      	bx	lr

08006386 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006386:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006388:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800638c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8006390:	b15b      	cbz	r3, 80063aa <USBD_CDC_EP0_RxReady+0x24>
 8006392:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8006396:	28ff      	cmp	r0, #255	; 0xff
 8006398:	d007      	beq.n	80063aa <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80063a0:	4621      	mov	r1, r4
 80063a2:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80063a4:	23ff      	movs	r3, #255	; 0xff
 80063a6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80063aa:	2000      	movs	r0, #0
 80063ac:	bd10      	pop	{r4, pc}
	...

080063b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80063b0:	2343      	movs	r3, #67	; 0x43
 80063b2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80063b4:	4800      	ldr	r0, [pc, #0]	; (80063b8 <USBD_CDC_GetFSCfgDesc+0x8>)
 80063b6:	4770      	bx	lr
 80063b8:	20000044 	.word	0x20000044

080063bc <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80063bc:	2343      	movs	r3, #67	; 0x43
 80063be:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80063c0:	4800      	ldr	r0, [pc, #0]	; (80063c4 <USBD_CDC_GetHSCfgDesc+0x8>)
 80063c2:	4770      	bx	lr
 80063c4:	20000088 	.word	0x20000088

080063c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80063c8:	2343      	movs	r3, #67	; 0x43
 80063ca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80063cc:	4800      	ldr	r0, [pc, #0]	; (80063d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80063ce:	4770      	bx	lr
 80063d0:	200000d8 	.word	0x200000d8

080063d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80063d4:	230a      	movs	r3, #10
 80063d6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80063d8:	4800      	ldr	r0, [pc, #0]	; (80063dc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80063da:	4770      	bx	lr
 80063dc:	200000cc 	.word	0x200000cc

080063e0 <USBD_CDC_DataOut>:
{
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063e4:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80063e8:	f001 f85d 	bl	80074a6 <USBD_LL_GetRxDataSize>
 80063ec:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 80063f0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80063f4:	b14b      	cbz	r3, 800640a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80063f6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8006400:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8006404:	4798      	blx	r3
    return USBD_OK;
 8006406:	2000      	movs	r0, #0
}
 8006408:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800640a:	2002      	movs	r0, #2
 800640c:	e7fc      	b.n	8006408 <USBD_CDC_DataOut+0x28>

0800640e <USBD_CDC_DataIn>:
{
 800640e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006410:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006414:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
  if (pdev->pClassData != NULL)
 8006418:	b1f2      	cbz	r2, 8006458 <USBD_CDC_DataIn+0x4a>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800641a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800641e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	b14b      	cbz	r3, 800643a <USBD_CDC_DataIn+0x2c>
 8006426:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800642a:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 800642e:	6a24      	ldr	r4, [r4, #32]
 8006430:	fbb3 fcf4 	udiv	ip, r3, r4
 8006434:	fb04 331c 	mls	r3, r4, ip, r3
 8006438:	b123      	cbz	r3, 8006444 <USBD_CDC_DataIn+0x36>
      hcdc->TxState = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    return USBD_OK;
 8006440:	2000      	movs	r0, #0
}
 8006442:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8006444:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006448:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800644c:	2200      	movs	r2, #0
 800644e:	61da      	str	r2, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006450:	4613      	mov	r3, r2
 8006452:	f001 f818 	bl	8007486 <USBD_LL_Transmit>
 8006456:	e7f3      	b.n	8006440 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8006458:	2002      	movs	r0, #2
 800645a:	e7f2      	b.n	8006442 <USBD_CDC_DataIn+0x34>

0800645c <USBD_CDC_Setup>:
{
 800645c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800645e:	b083      	sub	sp, #12
 8006460:	4606      	mov	r6, r0
 8006462:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006464:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800646e:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006472:	780b      	ldrb	r3, [r1, #0]
 8006474:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8006478:	d027      	beq.n	80064ca <USBD_CDC_Setup+0x6e>
 800647a:	2d20      	cmp	r5, #32
 800647c:	d153      	bne.n	8006526 <USBD_CDC_Setup+0xca>
      if (req->wLength)
 800647e:	88ca      	ldrh	r2, [r1, #6]
 8006480:	b1da      	cbz	r2, 80064ba <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8006482:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006486:	d00c      	beq.n	80064a2 <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006488:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	4639      	mov	r1, r7
 8006490:	7860      	ldrb	r0, [r4, #1]
 8006492:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006494:	88e2      	ldrh	r2, [r4, #6]
 8006496:	4639      	mov	r1, r7
 8006498:	4630      	mov	r0, r6
 800649a:	f000 fd99 	bl	8006fd0 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800649e:	2500      	movs	r5, #0
 80064a0:	e044      	b.n	800652c <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 80064a2:	784b      	ldrb	r3, [r1, #1]
 80064a4:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80064a8:	798b      	ldrb	r3, [r1, #6]
 80064aa:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80064ae:	88ca      	ldrh	r2, [r1, #6]
 80064b0:	4639      	mov	r1, r7
 80064b2:	f000 fda2 	bl	8006ffa <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 80064b6:	2500      	movs	r5, #0
 80064b8:	e038      	b.n	800652c <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064ba:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	2200      	movs	r2, #0
 80064c2:	7848      	ldrb	r0, [r1, #1]
 80064c4:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 80064c6:	2500      	movs	r5, #0
 80064c8:	e030      	b.n	800652c <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 80064ca:	784f      	ldrb	r7, [r1, #1]
 80064cc:	2f0a      	cmp	r7, #10
 80064ce:	d014      	beq.n	80064fa <USBD_CDC_Setup+0x9e>
 80064d0:	2f0b      	cmp	r7, #11
 80064d2:	d020      	beq.n	8006516 <USBD_CDC_Setup+0xba>
 80064d4:	b11f      	cbz	r7, 80064de <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 80064d6:	f000 fa6f 	bl	80069b8 <USBD_CtlError>
          ret = USBD_FAIL;
 80064da:	2502      	movs	r5, #2
          break;
 80064dc:	e026      	b.n	800652c <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064de:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d003      	beq.n	80064ee <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 80064e6:	f000 fa67 	bl	80069b8 <USBD_CtlError>
            ret = USBD_FAIL;
 80064ea:	2502      	movs	r5, #2
 80064ec:	e01e      	b.n	800652c <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80064ee:	2202      	movs	r2, #2
 80064f0:	a901      	add	r1, sp, #4
 80064f2:	f000 fd6d 	bl	8006fd0 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80064f6:	463d      	mov	r5, r7
 80064f8:	e018      	b.n	800652c <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d003      	beq.n	800650a <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 8006502:	f000 fa59 	bl	80069b8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006506:	2502      	movs	r5, #2
 8006508:	e010      	b.n	800652c <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800650a:	2201      	movs	r2, #1
 800650c:	f10d 0107 	add.w	r1, sp, #7
 8006510:	f000 fd5e 	bl	8006fd0 <USBD_CtlSendData>
 8006514:	e00a      	b.n	800652c <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006516:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800651a:	2b03      	cmp	r3, #3
 800651c:	d006      	beq.n	800652c <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 800651e:	f000 fa4b 	bl	80069b8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006522:	2502      	movs	r5, #2
 8006524:	e002      	b.n	800652c <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 8006526:	f000 fa47 	bl	80069b8 <USBD_CtlError>
      ret = USBD_FAIL;
 800652a:	2502      	movs	r5, #2
}
 800652c:	4628      	mov	r0, r5
 800652e:	b003      	add	sp, #12
 8006530:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006532 <USBD_CDC_DeInit>:
{
 8006532:	b538      	push	{r3, r4, r5, lr}
 8006534:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006536:	2181      	movs	r1, #129	; 0x81
 8006538:	f000 ff6f 	bl	800741a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800653c:	2500      	movs	r5, #0
 800653e:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006540:	2101      	movs	r1, #1
 8006542:	4620      	mov	r0, r4
 8006544:	f000 ff69 	bl	800741a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006548:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800654c:	2182      	movs	r1, #130	; 0x82
 800654e:	4620      	mov	r0, r4
 8006550:	f000 ff63 	bl	800741a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006554:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8006556:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800655a:	b14b      	cbz	r3, 8006570 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800655c:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006564:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8006568:	f000 ffa8 	bl	80074bc <USBD_static_free>
    pdev->pClassData = NULL;
 800656c:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8006570:	2000      	movs	r0, #0
 8006572:	bd38      	pop	{r3, r4, r5, pc}

08006574 <USBD_CDC_Init>:
{
 8006574:	b570      	push	{r4, r5, r6, lr}
 8006576:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006578:	7c03      	ldrb	r3, [r0, #16]
 800657a:	bbab      	cbnz	r3, 80065e8 <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800657c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006580:	2202      	movs	r2, #2
 8006582:	2181      	movs	r1, #129	; 0x81
 8006584:	f000 ff3e 	bl	8007404 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006588:	2501      	movs	r5, #1
 800658a:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800658c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006590:	2202      	movs	r2, #2
 8006592:	4629      	mov	r1, r5
 8006594:	4620      	mov	r0, r4
 8006596:	f000 ff35 	bl	8007404 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800659a:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800659e:	2308      	movs	r3, #8
 80065a0:	2203      	movs	r2, #3
 80065a2:	2182      	movs	r1, #130	; 0x82
 80065a4:	4620      	mov	r0, r4
 80065a6:	f000 ff2d 	bl	8007404 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065aa:	2301      	movs	r3, #1
 80065ac:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065ae:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065b2:	f000 ff7f 	bl	80074b4 <USBD_static_malloc>
 80065b6:	4605      	mov	r5, r0
 80065b8:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 80065bc:	b368      	cbz	r0, 800661a <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80065be:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4798      	blx	r3
    hcdc->TxState = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 80065cc:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065d0:	7c26      	ldrb	r6, [r4, #16]
 80065d2:	b9ce      	cbnz	r6, 8006608 <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065d8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80065dc:	2101      	movs	r1, #1
 80065de:	4620      	mov	r0, r4
 80065e0:	f000 ff59 	bl	8007496 <USBD_LL_PrepareReceive>
}
 80065e4:	4630      	mov	r0, r6
 80065e6:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065e8:	2340      	movs	r3, #64	; 0x40
 80065ea:	2202      	movs	r2, #2
 80065ec:	2181      	movs	r1, #129	; 0x81
 80065ee:	f000 ff09 	bl	8007404 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065f2:	2501      	movs	r5, #1
 80065f4:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065f6:	2340      	movs	r3, #64	; 0x40
 80065f8:	2202      	movs	r2, #2
 80065fa:	4629      	mov	r1, r5
 80065fc:	4620      	mov	r0, r4
 80065fe:	f000 ff01 	bl	8007404 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006602:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8006606:	e7ca      	b.n	800659e <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006608:	2340      	movs	r3, #64	; 0x40
 800660a:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800660e:	2101      	movs	r1, #1
 8006610:	4620      	mov	r0, r4
 8006612:	f000 ff40 	bl	8007496 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8006616:	2600      	movs	r6, #0
 8006618:	e7e4      	b.n	80065e4 <USBD_CDC_Init+0x70>
    ret = 1U;
 800661a:	2601      	movs	r6, #1
 800661c:	e7e2      	b.n	80065e4 <USBD_CDC_Init+0x70>

0800661e <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800661e:	b119      	cbz	r1, 8006628 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8006620:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8006624:	2000      	movs	r0, #0
 8006626:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8006628:	2002      	movs	r0, #2
  }

  return ret;
}
 800662a:	4770      	bx	lr

0800662c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800662c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 8006630:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006634:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8006638:	2000      	movs	r0, #0
 800663a:	4770      	bx	lr

0800663c <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800663c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 8006640:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8006644:	2000      	movs	r0, #0
 8006646:	4770      	bx	lr

08006648 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006648:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 800664c:	b1a2      	cbz	r2, 8006678 <USBD_CDC_TransmitPacket+0x30>
{
 800664e:	b508      	push	{r3, lr}
  {
    if (hcdc->TxState == 0U)
 8006650:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8006654:	b10b      	cbz	r3, 800665a <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8006656:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8006658:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 800665a:	2301      	movs	r3, #1
 800665c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006660:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8006664:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006666:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 800666a:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800666e:	2181      	movs	r1, #129	; 0x81
 8006670:	f000 ff09 	bl	8007486 <USBD_LL_Transmit>
      return USBD_OK;
 8006674:	2000      	movs	r0, #0
 8006676:	e7ef      	b.n	8006658 <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 8006678:	2002      	movs	r0, #2
}
 800667a:	4770      	bx	lr

0800667c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800667c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006680:	b192      	cbz	r2, 80066a8 <USBD_CDC_ReceivePacket+0x2c>
{
 8006682:	b508      	push	{r3, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006684:	7c03      	ldrb	r3, [r0, #16]
 8006686:	b943      	cbnz	r3, 800669a <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800668c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8006690:	2101      	movs	r1, #1
 8006692:	f000 ff00 	bl	8007496 <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006696:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8006698:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 800669a:	2340      	movs	r3, #64	; 0x40
 800669c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80066a0:	2101      	movs	r1, #1
 80066a2:	f000 fef8 	bl	8007496 <USBD_LL_PrepareReceive>
 80066a6:	e7f6      	b.n	8006696 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 80066a8:	2002      	movs	r0, #2
}
 80066aa:	4770      	bx	lr

080066ac <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066ac:	b198      	cbz	r0, 80066d6 <USBD_Init+0x2a>
{
 80066ae:	b508      	push	{r3, lr}
 80066b0:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80066b2:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 80066b6:	b110      	cbz	r0, 80066be <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 80066b8:	2000      	movs	r0, #0
 80066ba:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066be:	b109      	cbz	r1, 80066c4 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 80066c0:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066c4:	2101      	movs	r1, #1
 80066c6:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 80066ca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 fe4f 	bl	8007370 <USBD_LL_Init>

  return USBD_OK;
 80066d2:	2000      	movs	r0, #0
}
 80066d4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80066d6:	2002      	movs	r0, #2
}
 80066d8:	4770      	bx	lr

080066da <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80066da:	b119      	cbz	r1, 80066e4 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80066dc:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80066e0:	2000      	movs	r0, #0
 80066e2:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80066e4:	2002      	movs	r0, #2
  }

  return status;
}
 80066e6:	4770      	bx	lr

080066e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80066e8:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80066ea:	f000 fe83 	bl	80073f4 <USBD_LL_Start>

  return USBD_OK;
}
 80066ee:	2000      	movs	r0, #0
 80066f0:	bd08      	pop	{r3, pc}

080066f2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80066f2:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80066f4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80066f8:	b12b      	cbz	r3, 8006706 <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4798      	blx	r3
 80066fe:	b900      	cbnz	r0, 8006702 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8006700:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006702:	2002      	movs	r0, #2
 8006704:	e7fc      	b.n	8006700 <USBD_SetClassConfig+0xe>
 8006706:	2002      	movs	r0, #2
 8006708:	e7fa      	b.n	8006700 <USBD_SetClassConfig+0xe>

0800670a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800670a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800670c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	4798      	blx	r3

  return USBD_OK;
}
 8006714:	2000      	movs	r0, #0
 8006716:	bd08      	pop	{r3, pc}

08006718 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800671c:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8006720:	4628      	mov	r0, r5
 8006722:	f000 f935 	bl	8006990 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006726:	2301      	movs	r3, #1
 8006728:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800672c:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8006730:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006734:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8006738:	f001 031f 	and.w	r3, r1, #31
 800673c:	2b01      	cmp	r3, #1
 800673e:	d00e      	beq.n	800675e <USBD_LL_SetupStage+0x46>
 8006740:	2b02      	cmp	r3, #2
 8006742:	d011      	beq.n	8006768 <USBD_LL_SetupStage+0x50>
 8006744:	b12b      	cbz	r3, 8006752 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006746:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800674a:	4620      	mov	r0, r4
 800674c:	f000 fe6d 	bl	800742a <USBD_LL_StallEP>
      break;
 8006750:	e003      	b.n	800675a <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8006752:	4629      	mov	r1, r5
 8006754:	4620      	mov	r0, r4
 8006756:	f000 fac9 	bl	8006cec <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800675a:	2000      	movs	r0, #0
 800675c:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800675e:	4629      	mov	r1, r5
 8006760:	4620      	mov	r0, r4
 8006762:	f000 faf7 	bl	8006d54 <USBD_StdItfReq>
      break;
 8006766:	e7f8      	b.n	800675a <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8006768:	4629      	mov	r1, r5
 800676a:	4620      	mov	r0, r4
 800676c:	f000 fb22 	bl	8006db4 <USBD_StdEPReq>
      break;
 8006770:	e7f3      	b.n	800675a <USBD_LL_SetupStage+0x42>

08006772 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006772:	b538      	push	{r3, r4, r5, lr}
 8006774:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006776:	460d      	mov	r5, r1
 8006778:	bb91      	cbnz	r1, 80067e0 <USBD_LL_DataOutStage+0x6e>
 800677a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800677c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8006780:	2a03      	cmp	r2, #3
 8006782:	d003      	beq.n	800678c <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006784:	2a05      	cmp	r2, #5
 8006786:	d024      	beq.n	80067d2 <USBD_LL_DataOutStage+0x60>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8006788:	4608      	mov	r0, r1
 800678a:	e033      	b.n	80067f4 <USBD_LL_DataOutStage+0x82>
      if (pep->rem_length > pep->maxpacket)
 800678c:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 8006790:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8006794:	4291      	cmp	r1, r2
 8006796:	d90d      	bls.n	80067b4 <USBD_LL_DataOutStage+0x42>
        pep->rem_length -= pep->maxpacket;
 8006798:	1a89      	subs	r1, r1, r2
 800679a:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800679e:	428a      	cmp	r2, r1
 80067a0:	d906      	bls.n	80067b0 <USBD_LL_DataOutStage+0x3e>
 80067a2:	b28a      	uxth	r2, r1
 80067a4:	4619      	mov	r1, r3
 80067a6:	4620      	mov	r0, r4
 80067a8:	f000 fc36 	bl	8007018 <USBD_CtlContinueRx>
  return USBD_OK;
 80067ac:	4628      	mov	r0, r5
 80067ae:	e021      	b.n	80067f4 <USBD_LL_DataOutStage+0x82>
        USBD_CtlContinueRx(pdev, pdata,
 80067b0:	b292      	uxth	r2, r2
 80067b2:	e7f7      	b.n	80067a4 <USBD_LL_DataOutStage+0x32>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80067b4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	b11b      	cbz	r3, 80067c4 <USBD_LL_DataOutStage+0x52>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067bc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80067c0:	2a03      	cmp	r2, #3
 80067c2:	d004      	beq.n	80067ce <USBD_LL_DataOutStage+0x5c>
        USBD_CtlSendStatus(pdev);
 80067c4:	4620      	mov	r0, r4
 80067c6:	f000 fc2f 	bl	8007028 <USBD_CtlSendStatus>
  return USBD_OK;
 80067ca:	4628      	mov	r0, r5
 80067cc:	e012      	b.n	80067f4 <USBD_LL_DataOutStage+0x82>
          pdev->pClass->EP0_RxReady(pdev);
 80067ce:	4798      	blx	r3
 80067d0:	e7f8      	b.n	80067c4 <USBD_LL_DataOutStage+0x52>
        pdev->ep0_state = USBD_EP0_IDLE;
 80067d2:	2100      	movs	r1, #0
 80067d4:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80067d8:	f000 fe27 	bl	800742a <USBD_LL_StallEP>
  return USBD_OK;
 80067dc:	4628      	mov	r0, r5
 80067de:	e009      	b.n	80067f4 <USBD_LL_DataOutStage+0x82>
  else if ((pdev->pClass->DataOut != NULL) &&
 80067e0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	b133      	cbz	r3, 80067f6 <USBD_LL_DataOutStage+0x84>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067e8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80067ec:	2a03      	cmp	r2, #3
 80067ee:	d104      	bne.n	80067fa <USBD_LL_DataOutStage+0x88>
    pdev->pClass->DataOut(pdev, epnum);
 80067f0:	4798      	blx	r3
  return USBD_OK;
 80067f2:	2000      	movs	r0, #0
}
 80067f4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80067f6:	2002      	movs	r0, #2
 80067f8:	e7fc      	b.n	80067f4 <USBD_LL_DataOutStage+0x82>
 80067fa:	2002      	movs	r0, #2
 80067fc:	e7fa      	b.n	80067f4 <USBD_LL_DataOutStage+0x82>

080067fe <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80067fe:	b538      	push	{r3, r4, r5, lr}
 8006800:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006802:	460d      	mov	r5, r1
 8006804:	2900      	cmp	r1, #0
 8006806:	d153      	bne.n	80068b0 <USBD_LL_DataInStage+0xb2>
 8006808:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800680a:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800680e:	2a02      	cmp	r2, #2
 8006810:	d00c      	beq.n	800682c <USBD_LL_DataInStage+0x2e>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006812:	2a04      	cmp	r2, #4
 8006814:	d000      	beq.n	8006818 <USBD_LL_DataInStage+0x1a>
 8006816:	b91a      	cbnz	r2, 8006820 <USBD_LL_DataInStage+0x22>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006818:	2180      	movs	r1, #128	; 0x80
 800681a:	4620      	mov	r0, r4
 800681c:	f000 fe05 	bl	800742a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006820:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8006824:	2b01      	cmp	r3, #1
 8006826:	d03e      	beq.n	80068a6 <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8006828:	4628      	mov	r0, r5
}
 800682a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800682c:	6a02      	ldr	r2, [r0, #32]
 800682e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8006830:	428a      	cmp	r2, r1
 8006832:	d81b      	bhi.n	800686c <USBD_LL_DataInStage+0x6e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006834:	69c2      	ldr	r2, [r0, #28]
 8006836:	fbb2 f3f1 	udiv	r3, r2, r1
 800683a:	fb01 2313 	mls	r3, r1, r3, r2
 800683e:	b92b      	cbnz	r3, 800684c <USBD_LL_DataInStage+0x4e>
 8006840:	4291      	cmp	r1, r2
 8006842:	d803      	bhi.n	800684c <USBD_LL_DataInStage+0x4e>
            (pep->total_length < pdev->ep0_data_len))
 8006844:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006848:	429a      	cmp	r2, r3
 800684a:	d31c      	bcc.n	8006886 <USBD_LL_DataInStage+0x88>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800684c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	b11b      	cbz	r3, 800685c <USBD_LL_DataInStage+0x5e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006854:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006858:	2a03      	cmp	r2, #3
 800685a:	d021      	beq.n	80068a0 <USBD_LL_DataInStage+0xa2>
          USBD_LL_StallEP(pdev, 0x80U);
 800685c:	2180      	movs	r1, #128	; 0x80
 800685e:	4620      	mov	r0, r4
 8006860:	f000 fde3 	bl	800742a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006864:	4620      	mov	r0, r4
 8006866:	f000 fbea 	bl	800703e <USBD_CtlReceiveStatus>
 800686a:	e7d9      	b.n	8006820 <USBD_LL_DataInStage+0x22>
        pep->rem_length -= pep->maxpacket;
 800686c:	1a52      	subs	r2, r2, r1
 800686e:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006870:	b292      	uxth	r2, r2
 8006872:	4619      	mov	r1, r3
 8006874:	f000 fbb9 	bl	8006fea <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006878:	2300      	movs	r3, #0
 800687a:	461a      	mov	r2, r3
 800687c:	4619      	mov	r1, r3
 800687e:	4620      	mov	r0, r4
 8006880:	f000 fe09 	bl	8007496 <USBD_LL_PrepareReceive>
 8006884:	e7cc      	b.n	8006820 <USBD_LL_DataInStage+0x22>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006886:	2200      	movs	r2, #0
 8006888:	4611      	mov	r1, r2
 800688a:	f000 fbae 	bl	8006fea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800688e:	2100      	movs	r1, #0
 8006890:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006894:	460b      	mov	r3, r1
 8006896:	460a      	mov	r2, r1
 8006898:	4620      	mov	r0, r4
 800689a:	f000 fdfc 	bl	8007496 <USBD_LL_PrepareReceive>
 800689e:	e7bf      	b.n	8006820 <USBD_LL_DataInStage+0x22>
            pdev->pClass->EP0_TxSent(pdev);
 80068a0:	4620      	mov	r0, r4
 80068a2:	4798      	blx	r3
 80068a4:	e7da      	b.n	800685c <USBD_LL_DataInStage+0x5e>
      pdev->dev_test_mode = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 80068ac:	4628      	mov	r0, r5
 80068ae:	e7bc      	b.n	800682a <USBD_LL_DataInStage+0x2c>
  else if ((pdev->pClass->DataIn != NULL) &&
 80068b0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	b133      	cbz	r3, 80068c6 <USBD_LL_DataInStage+0xc8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068b8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80068bc:	2a03      	cmp	r2, #3
 80068be:	d104      	bne.n	80068ca <USBD_LL_DataInStage+0xcc>
    pdev->pClass->DataIn(pdev, epnum);
 80068c0:	4798      	blx	r3
  return USBD_OK;
 80068c2:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80068c4:	e7b1      	b.n	800682a <USBD_LL_DataInStage+0x2c>
    return USBD_FAIL;
 80068c6:	2002      	movs	r0, #2
 80068c8:	e7af      	b.n	800682a <USBD_LL_DataInStage+0x2c>
 80068ca:	2002      	movs	r0, #2
 80068cc:	e7ad      	b.n	800682a <USBD_LL_DataInStage+0x2c>

080068ce <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80068ce:	b570      	push	{r4, r5, r6, lr}
 80068d0:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068d2:	2340      	movs	r3, #64	; 0x40
 80068d4:	2200      	movs	r2, #0
 80068d6:	4611      	mov	r1, r2
 80068d8:	f000 fd94 	bl	8007404 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068dc:	2501      	movs	r5, #1
 80068de:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068e2:	2640      	movs	r6, #64	; 0x40
 80068e4:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068e8:	4633      	mov	r3, r6
 80068ea:	2200      	movs	r2, #0
 80068ec:	2180      	movs	r1, #128	; 0x80
 80068ee:	4620      	mov	r0, r4
 80068f0:	f000 fd88 	bl	8007404 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068f4:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068f6:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068f8:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80068fc:	2300      	movs	r3, #0
 80068fe:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8006902:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8006904:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 8006908:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800690c:	b12b      	cbz	r3, 800691a <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800690e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2100      	movs	r1, #0
 8006916:	4620      	mov	r0, r4
 8006918:	4798      	blx	r3
  }

  return USBD_OK;
}
 800691a:	2000      	movs	r0, #0
 800691c:	bd70      	pop	{r4, r5, r6, pc}

0800691e <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800691e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8006920:	2000      	movs	r0, #0
 8006922:	4770      	bx	lr

08006924 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8006924:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006928:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800692c:	2304      	movs	r3, #4
 800692e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8006932:	2000      	movs	r0, #0
 8006934:	4770      	bx	lr

08006936 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006936:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800693a:	2b04      	cmp	r3, #4
 800693c:	d001      	beq.n	8006942 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800693e:	2000      	movs	r0, #0
 8006940:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8006942:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8006946:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800694a:	e7f8      	b.n	800693e <USBD_LL_Resume+0x8>

0800694c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800694c:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800694e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006952:	2b03      	cmp	r3, #3
 8006954:	d001      	beq.n	800695a <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8006956:	2000      	movs	r0, #0
 8006958:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800695a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d0f8      	beq.n	8006956 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8006964:	4798      	blx	r3
 8006966:	e7f6      	b.n	8006956 <USBD_LL_SOF+0xa>

08006968 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006968:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800696a:	2000      	movs	r0, #0

  while (*buf != '\0')
 800696c:	e002      	b.n	8006974 <USBD_GetLen+0xc>
  {
    len++;
 800696e:	3001      	adds	r0, #1
 8006970:	b2c0      	uxtb	r0, r0
    buf++;
 8006972:	3301      	adds	r3, #1
  while (*buf != '\0')
 8006974:	781a      	ldrb	r2, [r3, #0]
 8006976:	2a00      	cmp	r2, #0
 8006978:	d1f9      	bne.n	800696e <USBD_GetLen+0x6>
  }

  return len;
}
 800697a:	4770      	bx	lr

0800697c <USBD_SetFeature>:
{
 800697c:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800697e:	884b      	ldrh	r3, [r1, #2]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d000      	beq.n	8006986 <USBD_SetFeature+0xa>
}
 8006984:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8006986:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800698a:	f000 fb4d 	bl	8007028 <USBD_CtlSendStatus>
}
 800698e:	e7f9      	b.n	8006984 <USBD_SetFeature+0x8>

08006990 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8006990:	780b      	ldrb	r3, [r1, #0]
 8006992:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006994:	784b      	ldrb	r3, [r1, #1]
 8006996:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006998:	788b      	ldrb	r3, [r1, #2]
 800699a:	78ca      	ldrb	r2, [r1, #3]
 800699c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80069a0:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80069a2:	790b      	ldrb	r3, [r1, #4]
 80069a4:	794a      	ldrb	r2, [r1, #5]
 80069a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80069aa:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80069ac:	798b      	ldrb	r3, [r1, #6]
 80069ae:	79ca      	ldrb	r2, [r1, #7]
 80069b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80069b4:	80c3      	strh	r3, [r0, #6]
}
 80069b6:	4770      	bx	lr

080069b8 <USBD_CtlError>:
{
 80069b8:	b510      	push	{r4, lr}
 80069ba:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80069bc:	2180      	movs	r1, #128	; 0x80
 80069be:	f000 fd34 	bl	800742a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80069c2:	2100      	movs	r1, #0
 80069c4:	4620      	mov	r0, r4
 80069c6:	f000 fd30 	bl	800742a <USBD_LL_StallEP>
}
 80069ca:	bd10      	pop	{r4, pc}

080069cc <USBD_GetDescriptor>:
{
 80069cc:	b530      	push	{r4, r5, lr}
 80069ce:	b083      	sub	sp, #12
 80069d0:	4605      	mov	r5, r0
 80069d2:	460c      	mov	r4, r1
  uint16_t len = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80069da:	884a      	ldrh	r2, [r1, #2]
 80069dc:	0a13      	lsrs	r3, r2, #8
 80069de:	3b01      	subs	r3, #1
 80069e0:	2b06      	cmp	r3, #6
 80069e2:	f200 80a4 	bhi.w	8006b2e <USBD_GetDescriptor+0x162>
 80069e6:	e8df f003 	tbb	[pc, r3]
 80069ea:	1804      	.short	0x1804
 80069ec:	86a2a22c 	.word	0x86a2a22c
 80069f0:	93          	.byte	0x93
 80069f1:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80069f2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f10d 0106 	add.w	r1, sp, #6
 80069fc:	7c00      	ldrb	r0, [r0, #16]
 80069fe:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8006a00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006a04:	b11a      	cbz	r2, 8006a0e <USBD_GetDescriptor+0x42>
 8006a06:	88e3      	ldrh	r3, [r4, #6]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f040 8094 	bne.w	8006b36 <USBD_GetDescriptor+0x16a>
    if (req->wLength == 0U)
 8006a0e:	88e3      	ldrh	r3, [r4, #6]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 809a 	beq.w	8006b4a <USBD_GetDescriptor+0x17e>
}
 8006a16:	b003      	add	sp, #12
 8006a18:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a1a:	7c03      	ldrb	r3, [r0, #16]
 8006a1c:	b943      	cbnz	r3, 8006a30 <USBD_GetDescriptor+0x64>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006a1e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a24:	f10d 0006 	add.w	r0, sp, #6
 8006a28:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006a2e:	e7e7      	b.n	8006a00 <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006a30:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a36:	f10d 0006 	add.w	r0, sp, #6
 8006a3a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006a40:	e7de      	b.n	8006a00 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	2a05      	cmp	r2, #5
 8006a46:	d852      	bhi.n	8006aee <USBD_GetDescriptor+0x122>
 8006a48:	e8df f002 	tbb	[pc, r2]
 8006a4c:	2a1d1003 	.word	0x2a1d1003
 8006a50:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a52:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	b123      	cbz	r3, 8006a64 <USBD_GetDescriptor+0x98>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a5a:	f10d 0106 	add.w	r1, sp, #6
 8006a5e:	7c00      	ldrb	r0, [r0, #16]
 8006a60:	4798      	blx	r3
  if (err != 0U)
 8006a62:	e7cd      	b.n	8006a00 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006a64:	4621      	mov	r1, r4
 8006a66:	f7ff ffa7 	bl	80069b8 <USBD_CtlError>
  if (err != 0U)
 8006a6a:	e7d4      	b.n	8006a16 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a6c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	b123      	cbz	r3, 8006a7e <USBD_GetDescriptor+0xb2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a74:	f10d 0106 	add.w	r1, sp, #6
 8006a78:	7c00      	ldrb	r0, [r0, #16]
 8006a7a:	4798      	blx	r3
  if (err != 0U)
 8006a7c:	e7c0      	b.n	8006a00 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006a7e:	4621      	mov	r1, r4
 8006a80:	f7ff ff9a 	bl	80069b8 <USBD_CtlError>
  if (err != 0U)
 8006a84:	e7c7      	b.n	8006a16 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a86:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	b123      	cbz	r3, 8006a98 <USBD_GetDescriptor+0xcc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a8e:	f10d 0106 	add.w	r1, sp, #6
 8006a92:	7c00      	ldrb	r0, [r0, #16]
 8006a94:	4798      	blx	r3
  if (err != 0U)
 8006a96:	e7b3      	b.n	8006a00 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006a98:	4621      	mov	r1, r4
 8006a9a:	f7ff ff8d 	bl	80069b8 <USBD_CtlError>
  if (err != 0U)
 8006a9e:	e7ba      	b.n	8006a16 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006aa0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	b123      	cbz	r3, 8006ab2 <USBD_GetDescriptor+0xe6>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006aa8:	f10d 0106 	add.w	r1, sp, #6
 8006aac:	7c00      	ldrb	r0, [r0, #16]
 8006aae:	4798      	blx	r3
  if (err != 0U)
 8006ab0:	e7a6      	b.n	8006a00 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006ab2:	4621      	mov	r1, r4
 8006ab4:	f7ff ff80 	bl	80069b8 <USBD_CtlError>
  if (err != 0U)
 8006ab8:	e7ad      	b.n	8006a16 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006aba:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	b123      	cbz	r3, 8006acc <USBD_GetDescriptor+0x100>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ac2:	f10d 0106 	add.w	r1, sp, #6
 8006ac6:	7c00      	ldrb	r0, [r0, #16]
 8006ac8:	4798      	blx	r3
  if (err != 0U)
 8006aca:	e799      	b.n	8006a00 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006acc:	4621      	mov	r1, r4
 8006ace:	f7ff ff73 	bl	80069b8 <USBD_CtlError>
  if (err != 0U)
 8006ad2:	e7a0      	b.n	8006a16 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ad4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	b123      	cbz	r3, 8006ae6 <USBD_GetDescriptor+0x11a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006adc:	f10d 0106 	add.w	r1, sp, #6
 8006ae0:	7c00      	ldrb	r0, [r0, #16]
 8006ae2:	4798      	blx	r3
  if (err != 0U)
 8006ae4:	e78c      	b.n	8006a00 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	f7ff ff66 	bl	80069b8 <USBD_CtlError>
  if (err != 0U)
 8006aec:	e793      	b.n	8006a16 <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 8006aee:	4621      	mov	r1, r4
 8006af0:	f7ff ff62 	bl	80069b8 <USBD_CtlError>
  if (err != 0U)
 8006af4:	e78f      	b.n	8006a16 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006af6:	7c03      	ldrb	r3, [r0, #16]
 8006af8:	b933      	cbnz	r3, 8006b08 <USBD_GetDescriptor+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006afa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b00:	f10d 0006 	add.w	r0, sp, #6
 8006b04:	4798      	blx	r3
  if (err != 0U)
 8006b06:	e77b      	b.n	8006a00 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8006b08:	4621      	mov	r1, r4
 8006b0a:	f7ff ff55 	bl	80069b8 <USBD_CtlError>
  if (err != 0U)
 8006b0e:	e782      	b.n	8006a16 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b10:	7c03      	ldrb	r3, [r0, #16]
 8006b12:	b943      	cbnz	r3, 8006b26 <USBD_GetDescriptor+0x15a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006b14:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	f10d 0006 	add.w	r0, sp, #6
 8006b1e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b20:	2307      	movs	r3, #7
 8006b22:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006b24:	e76c      	b.n	8006a00 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8006b26:	4621      	mov	r1, r4
 8006b28:	f7ff ff46 	bl	80069b8 <USBD_CtlError>
  if (err != 0U)
 8006b2c:	e773      	b.n	8006a16 <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 8006b2e:	4621      	mov	r1, r4
 8006b30:	f7ff ff42 	bl	80069b8 <USBD_CtlError>
    return;
 8006b34:	e76f      	b.n	8006a16 <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 8006b36:	429a      	cmp	r2, r3
 8006b38:	bf28      	it	cs
 8006b3a:	461a      	movcs	r2, r3
 8006b3c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b40:	4601      	mov	r1, r0
 8006b42:	4628      	mov	r0, r5
 8006b44:	f000 fa44 	bl	8006fd0 <USBD_CtlSendData>
 8006b48:	e761      	b.n	8006a0e <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	f000 fa6c 	bl	8007028 <USBD_CtlSendStatus>
 8006b50:	e761      	b.n	8006a16 <USBD_GetDescriptor+0x4a>

08006b52 <USBD_SetAddress>:
{
 8006b52:	b538      	push	{r3, r4, r5, lr}
 8006b54:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b56:	888b      	ldrh	r3, [r1, #4]
 8006b58:	b9f3      	cbnz	r3, 8006b98 <USBD_SetAddress+0x46>
 8006b5a:	88cb      	ldrh	r3, [r1, #6]
 8006b5c:	b9e3      	cbnz	r3, 8006b98 <USBD_SetAddress+0x46>
 8006b5e:	884b      	ldrh	r3, [r1, #2]
 8006b60:	2b7f      	cmp	r3, #127	; 0x7f
 8006b62:	d819      	bhi.n	8006b98 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b64:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b68:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d00c      	beq.n	8006b8a <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8006b70:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b74:	4629      	mov	r1, r5
 8006b76:	f000 fc7e 	bl	8007476 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f000 fa54 	bl	8007028 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006b80:	b135      	cbz	r5, 8006b90 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b82:	2302      	movs	r3, #2
 8006b84:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006b88:	e009      	b.n	8006b9e <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8006b8a:	f7ff ff15 	bl	80069b8 <USBD_CtlError>
 8006b8e:	e006      	b.n	8006b9e <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b90:	2301      	movs	r3, #1
 8006b92:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006b96:	e002      	b.n	8006b9e <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f7ff ff0d 	bl	80069b8 <USBD_CtlError>
}
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}

08006ba0 <USBD_SetConfig>:
{
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 8006ba6:	7889      	ldrb	r1, [r1, #2]
 8006ba8:	4b28      	ldr	r3, [pc, #160]	; (8006c4c <USBD_SetConfig+0xac>)
 8006baa:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bac:	2901      	cmp	r1, #1
 8006bae:	d80e      	bhi.n	8006bce <USBD_SetConfig+0x2e>
    switch (pdev->dev_state)
 8006bb0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d00e      	beq.n	8006bd6 <USBD_SetConfig+0x36>
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	d021      	beq.n	8006c00 <USBD_SetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	f7ff fefb 	bl	80069b8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006bc2:	4b22      	ldr	r3, [pc, #136]	; (8006c4c <USBD_SetConfig+0xac>)
 8006bc4:	7819      	ldrb	r1, [r3, #0]
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f7ff fd9f 	bl	800670a <USBD_ClrClassConfig>
        break;
 8006bcc:	e002      	b.n	8006bd4 <USBD_SetConfig+0x34>
    USBD_CtlError(pdev, req);
 8006bce:	4629      	mov	r1, r5
 8006bd0:	f7ff fef2 	bl	80069b8 <USBD_CtlError>
}
 8006bd4:	bd38      	pop	{r3, r4, r5, pc}
        if (cfgidx)
 8006bd6:	b181      	cbz	r1, 8006bfa <USBD_SetConfig+0x5a>
          pdev->dev_config = cfgidx;
 8006bd8:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006be0:	f7ff fd87 	bl	80066f2 <USBD_SetClassConfig>
 8006be4:	2802      	cmp	r0, #2
 8006be6:	d003      	beq.n	8006bf0 <USBD_SetConfig+0x50>
          USBD_CtlSendStatus(pdev);
 8006be8:	4620      	mov	r0, r4
 8006bea:	f000 fa1d 	bl	8007028 <USBD_CtlSendStatus>
 8006bee:	e7f1      	b.n	8006bd4 <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f7ff fee0 	bl	80069b8 <USBD_CtlError>
            return;
 8006bf8:	e7ec      	b.n	8006bd4 <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 8006bfa:	f000 fa15 	bl	8007028 <USBD_CtlSendStatus>
 8006bfe:	e7e9      	b.n	8006bd4 <USBD_SetConfig+0x34>
        if (cfgidx == 0U)
 8006c00:	b189      	cbz	r1, 8006c26 <USBD_SetConfig+0x86>
        else if (cfgidx != pdev->dev_config)
 8006c02:	6843      	ldr	r3, [r0, #4]
 8006c04:	4299      	cmp	r1, r3
 8006c06:	d01d      	beq.n	8006c44 <USBD_SetConfig+0xa4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c08:	b2d9      	uxtb	r1, r3
 8006c0a:	f7ff fd7e 	bl	800670a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006c0e:	4b0f      	ldr	r3, [pc, #60]	; (8006c4c <USBD_SetConfig+0xac>)
 8006c10:	7819      	ldrb	r1, [r3, #0]
 8006c12:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c14:	4620      	mov	r0, r4
 8006c16:	f7ff fd6c 	bl	80066f2 <USBD_SetClassConfig>
 8006c1a:	2802      	cmp	r0, #2
 8006c1c:	d00d      	beq.n	8006c3a <USBD_SetConfig+0x9a>
          USBD_CtlSendStatus(pdev);
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f000 fa02 	bl	8007028 <USBD_CtlSendStatus>
 8006c24:	e7d6      	b.n	8006bd4 <USBD_SetConfig+0x34>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c26:	2302      	movs	r3, #2
 8006c28:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006c2c:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006c2e:	f7ff fd6c 	bl	800670a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006c32:	4620      	mov	r0, r4
 8006c34:	f000 f9f8 	bl	8007028 <USBD_CtlSendStatus>
 8006c38:	e7cc      	b.n	8006bd4 <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f7ff febb 	bl	80069b8 <USBD_CtlError>
            return;
 8006c42:	e7c7      	b.n	8006bd4 <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 8006c44:	f000 f9f0 	bl	8007028 <USBD_CtlSendStatus>
 8006c48:	e7c4      	b.n	8006bd4 <USBD_SetConfig+0x34>
 8006c4a:	bf00      	nop
 8006c4c:	200005b0 	.word	0x200005b0

08006c50 <USBD_GetConfig>:
{
 8006c50:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8006c52:	88cb      	ldrh	r3, [r1, #6]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d10a      	bne.n	8006c6e <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 8006c58:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d909      	bls.n	8006c74 <USBD_GetConfig+0x24>
 8006c60:	2b03      	cmp	r3, #3
 8006c62:	d109      	bne.n	8006c78 <USBD_GetConfig+0x28>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006c64:	2201      	movs	r2, #1
 8006c66:	1d01      	adds	r1, r0, #4
 8006c68:	f000 f9b2 	bl	8006fd0 <USBD_CtlSendData>
        break;
 8006c6c:	e001      	b.n	8006c72 <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 8006c6e:	f7ff fea3 	bl	80069b8 <USBD_CtlError>
}
 8006c72:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8006c74:	b25b      	sxtb	r3, r3
 8006c76:	b913      	cbnz	r3, 8006c7e <USBD_GetConfig+0x2e>
        USBD_CtlError(pdev, req);
 8006c78:	f7ff fe9e 	bl	80069b8 <USBD_CtlError>
}
 8006c7c:	e7f9      	b.n	8006c72 <USBD_GetConfig+0x22>
        pdev->dev_default_config = 0U;
 8006c7e:	4601      	mov	r1, r0
 8006c80:	2300      	movs	r3, #0
 8006c82:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006c86:	2201      	movs	r2, #1
 8006c88:	f000 f9a2 	bl	8006fd0 <USBD_CtlSendData>
        break;
 8006c8c:	e7f1      	b.n	8006c72 <USBD_GetConfig+0x22>

08006c8e <USBD_GetStatus>:
{
 8006c8e:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8006c90:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006c94:	3b01      	subs	r3, #1
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d812      	bhi.n	8006cc0 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8006c9a:	88cb      	ldrh	r3, [r1, #6]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d10c      	bne.n	8006cba <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8006ca4:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8006ca8:	b10b      	cbz	r3, 8006cae <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006caa:	2303      	movs	r3, #3
 8006cac:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f100 010c 	add.w	r1, r0, #12
 8006cb4:	f000 f98c 	bl	8006fd0 <USBD_CtlSendData>
}
 8006cb8:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8006cba:	f7ff fe7d 	bl	80069b8 <USBD_CtlError>
        break;
 8006cbe:	e7fb      	b.n	8006cb8 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8006cc0:	f7ff fe7a 	bl	80069b8 <USBD_CtlError>
}
 8006cc4:	e7f8      	b.n	8006cb8 <USBD_GetStatus+0x2a>

08006cc6 <USBD_ClrFeature>:
{
 8006cc6:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8006cc8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d809      	bhi.n	8006ce6 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cd2:	884b      	ldrh	r3, [r1, #2]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d000      	beq.n	8006cda <USBD_ClrFeature+0x14>
}
 8006cd8:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006ce0:	f000 f9a2 	bl	8007028 <USBD_CtlSendStatus>
 8006ce4:	e7f8      	b.n	8006cd8 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8006ce6:	f7ff fe67 	bl	80069b8 <USBD_CtlError>
}
 8006cea:	e7f5      	b.n	8006cd8 <USBD_ClrFeature+0x12>

08006cec <USBD_StdDevReq>:
{
 8006cec:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cee:	780b      	ldrb	r3, [r1, #0]
 8006cf0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cf4:	2b20      	cmp	r3, #32
 8006cf6:	d005      	beq.n	8006d04 <USBD_StdDevReq+0x18>
 8006cf8:	2b40      	cmp	r3, #64	; 0x40
 8006cfa:	d003      	beq.n	8006d04 <USBD_StdDevReq+0x18>
 8006cfc:	b143      	cbz	r3, 8006d10 <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 8006cfe:	f7ff fe5b 	bl	80069b8 <USBD_CtlError>
      break;
 8006d02:	e003      	b.n	8006d0c <USBD_StdDevReq+0x20>
      pdev->pClass->Setup(pdev, req);
 8006d04:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	4798      	blx	r3
}
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	bd08      	pop	{r3, pc}
      switch (req->bRequest)
 8006d10:	784b      	ldrb	r3, [r1, #1]
 8006d12:	2b09      	cmp	r3, #9
 8006d14:	d81b      	bhi.n	8006d4e <USBD_StdDevReq+0x62>
 8006d16:	e8df f003 	tbb	[pc, r3]
 8006d1a:	1711      	.short	0x1711
 8006d1c:	081a141a 	.word	0x081a141a
 8006d20:	0b0e1a05 	.word	0x0b0e1a05
          USBD_GetDescriptor(pdev, req);
 8006d24:	f7ff fe52 	bl	80069cc <USBD_GetDescriptor>
          break;
 8006d28:	e7f0      	b.n	8006d0c <USBD_StdDevReq+0x20>
          USBD_SetAddress(pdev, req);
 8006d2a:	f7ff ff12 	bl	8006b52 <USBD_SetAddress>
          break;
 8006d2e:	e7ed      	b.n	8006d0c <USBD_StdDevReq+0x20>
          USBD_SetConfig(pdev, req);
 8006d30:	f7ff ff36 	bl	8006ba0 <USBD_SetConfig>
          break;
 8006d34:	e7ea      	b.n	8006d0c <USBD_StdDevReq+0x20>
          USBD_GetConfig(pdev, req);
 8006d36:	f7ff ff8b 	bl	8006c50 <USBD_GetConfig>
          break;
 8006d3a:	e7e7      	b.n	8006d0c <USBD_StdDevReq+0x20>
          USBD_GetStatus(pdev, req);
 8006d3c:	f7ff ffa7 	bl	8006c8e <USBD_GetStatus>
          break;
 8006d40:	e7e4      	b.n	8006d0c <USBD_StdDevReq+0x20>
          USBD_SetFeature(pdev, req);
 8006d42:	f7ff fe1b 	bl	800697c <USBD_SetFeature>
          break;
 8006d46:	e7e1      	b.n	8006d0c <USBD_StdDevReq+0x20>
          USBD_ClrFeature(pdev, req);
 8006d48:	f7ff ffbd 	bl	8006cc6 <USBD_ClrFeature>
          break;
 8006d4c:	e7de      	b.n	8006d0c <USBD_StdDevReq+0x20>
          USBD_CtlError(pdev, req);
 8006d4e:	f7ff fe33 	bl	80069b8 <USBD_CtlError>
          break;
 8006d52:	e7db      	b.n	8006d0c <USBD_StdDevReq+0x20>

08006d54 <USBD_StdItfReq>:
{
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4605      	mov	r5, r0
 8006d58:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d5a:	780b      	ldrb	r3, [r1, #0]
 8006d5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	d006      	beq.n	8006d72 <USBD_StdItfReq+0x1e>
 8006d64:	2b40      	cmp	r3, #64	; 0x40
 8006d66:	d004      	beq.n	8006d72 <USBD_StdItfReq+0x1e>
 8006d68:	b11b      	cbz	r3, 8006d72 <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 8006d6a:	f7ff fe25 	bl	80069b8 <USBD_CtlError>
}
 8006d6e:	2000      	movs	r0, #0
 8006d70:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8006d72:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8006d76:	3b01      	subs	r3, #1
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d816      	bhi.n	8006daa <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d7c:	7923      	ldrb	r3, [r4, #4]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d80e      	bhi.n	8006da0 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d82:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	4621      	mov	r1, r4
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d8e:	88e3      	ldrh	r3, [r4, #6]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1ec      	bne.n	8006d6e <USBD_StdItfReq+0x1a>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d1ea      	bne.n	8006d6e <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8006d98:	4628      	mov	r0, r5
 8006d9a:	f000 f945 	bl	8007028 <USBD_CtlSendStatus>
 8006d9e:	e7e6      	b.n	8006d6e <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8006da0:	4621      	mov	r1, r4
 8006da2:	4628      	mov	r0, r5
 8006da4:	f7ff fe08 	bl	80069b8 <USBD_CtlError>
 8006da8:	e7e1      	b.n	8006d6e <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8006daa:	4621      	mov	r1, r4
 8006dac:	4628      	mov	r0, r5
 8006dae:	f7ff fe03 	bl	80069b8 <USBD_CtlError>
          break;
 8006db2:	e7dc      	b.n	8006d6e <USBD_StdItfReq+0x1a>

08006db4 <USBD_StdEPReq>:
{
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	4605      	mov	r5, r0
  ep_addr  = LOBYTE(req->wIndex);
 8006db8:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dba:	780c      	ldrb	r4, [r1, #0]
 8006dbc:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8006dc0:	2c20      	cmp	r4, #32
 8006dc2:	d007      	beq.n	8006dd4 <USBD_StdEPReq+0x20>
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	2c40      	cmp	r4, #64	; 0x40
 8006dc8:	d004      	beq.n	8006dd4 <USBD_StdEPReq+0x20>
 8006dca:	b15c      	cbz	r4, 8006de4 <USBD_StdEPReq+0x30>
      USBD_CtlError(pdev, req);
 8006dcc:	f7ff fdf4 	bl	80069b8 <USBD_CtlError>
  return ret;
 8006dd0:	2400      	movs	r4, #0
      break;
 8006dd2:	e005      	b.n	8006de0 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 8006dd4:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	4628      	mov	r0, r5
 8006ddc:	4798      	blx	r3
  return ret;
 8006dde:	2400      	movs	r4, #0
}
 8006de0:	4620      	mov	r0, r4
 8006de2:	bd70      	pop	{r4, r5, r6, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006de4:	2c20      	cmp	r4, #32
 8006de6:	d009      	beq.n	8006dfc <USBD_StdEPReq+0x48>
      switch (req->bRequest)
 8006de8:	784e      	ldrb	r6, [r1, #1]
 8006dea:	2e01      	cmp	r6, #1
 8006dec:	d033      	beq.n	8006e56 <USBD_StdEPReq+0xa2>
 8006dee:	2e03      	cmp	r6, #3
 8006df0:	d00a      	beq.n	8006e08 <USBD_StdEPReq+0x54>
 8006df2:	2e00      	cmp	r6, #0
 8006df4:	d055      	beq.n	8006ea2 <USBD_StdEPReq+0xee>
          USBD_CtlError(pdev, req);
 8006df6:	f7ff fddf 	bl	80069b8 <USBD_CtlError>
          break;
 8006dfa:	e7f1      	b.n	8006de0 <USBD_StdEPReq+0x2c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006dfc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	4798      	blx	r3
 8006e04:	4604      	mov	r4, r0
        return ret;
 8006e06:	e7eb      	b.n	8006de0 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8006e08:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d004      	beq.n	8006e1a <USBD_StdEPReq+0x66>
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d011      	beq.n	8006e38 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8006e14:	f7ff fdd0 	bl	80069b8 <USBD_CtlError>
              break;
 8006e18:	e7e2      	b.n	8006de0 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e1a:	b10a      	cbz	r2, 8006e20 <USBD_StdEPReq+0x6c>
 8006e1c:	2a80      	cmp	r2, #128	; 0x80
 8006e1e:	d103      	bne.n	8006e28 <USBD_StdEPReq+0x74>
                USBD_CtlError(pdev, req);
 8006e20:	4628      	mov	r0, r5
 8006e22:	f7ff fdc9 	bl	80069b8 <USBD_CtlError>
 8006e26:	e7db      	b.n	8006de0 <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 8006e28:	4611      	mov	r1, r2
 8006e2a:	f000 fafe 	bl	800742a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006e2e:	2180      	movs	r1, #128	; 0x80
 8006e30:	4628      	mov	r0, r5
 8006e32:	f000 fafa 	bl	800742a <USBD_LL_StallEP>
 8006e36:	e7d3      	b.n	8006de0 <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e38:	884b      	ldrh	r3, [r1, #2]
 8006e3a:	b923      	cbnz	r3, 8006e46 <USBD_StdEPReq+0x92>
                if ((ep_addr != 0x00U) &&
 8006e3c:	b11a      	cbz	r2, 8006e46 <USBD_StdEPReq+0x92>
 8006e3e:	2a80      	cmp	r2, #128	; 0x80
 8006e40:	d001      	beq.n	8006e46 <USBD_StdEPReq+0x92>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e42:	88cb      	ldrh	r3, [r1, #6]
 8006e44:	b11b      	cbz	r3, 8006e4e <USBD_StdEPReq+0x9a>
              USBD_CtlSendStatus(pdev);
 8006e46:	4628      	mov	r0, r5
 8006e48:	f000 f8ee 	bl	8007028 <USBD_CtlSendStatus>
              break;
 8006e4c:	e7c8      	b.n	8006de0 <USBD_StdEPReq+0x2c>
                  USBD_LL_StallEP(pdev, ep_addr);
 8006e4e:	4611      	mov	r1, r2
 8006e50:	f000 faeb 	bl	800742a <USBD_LL_StallEP>
 8006e54:	e7f7      	b.n	8006e46 <USBD_StdEPReq+0x92>
          switch (pdev->dev_state)
 8006e56:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d004      	beq.n	8006e68 <USBD_StdEPReq+0xb4>
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d011      	beq.n	8006e86 <USBD_StdEPReq+0xd2>
              USBD_CtlError(pdev, req);
 8006e62:	f7ff fda9 	bl	80069b8 <USBD_CtlError>
              break;
 8006e66:	e7bb      	b.n	8006de0 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e68:	b10a      	cbz	r2, 8006e6e <USBD_StdEPReq+0xba>
 8006e6a:	2a80      	cmp	r2, #128	; 0x80
 8006e6c:	d103      	bne.n	8006e76 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 8006e6e:	4628      	mov	r0, r5
 8006e70:	f7ff fda2 	bl	80069b8 <USBD_CtlError>
 8006e74:	e7b4      	b.n	8006de0 <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 8006e76:	4611      	mov	r1, r2
 8006e78:	f000 fad7 	bl	800742a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006e7c:	2180      	movs	r1, #128	; 0x80
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f000 fad3 	bl	800742a <USBD_LL_StallEP>
 8006e84:	e7ac      	b.n	8006de0 <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e86:	884b      	ldrh	r3, [r1, #2]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1a9      	bne.n	8006de0 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e8c:	f012 0f7f 	tst.w	r2, #127	; 0x7f
 8006e90:	d103      	bne.n	8006e9a <USBD_StdEPReq+0xe6>
                USBD_CtlSendStatus(pdev);
 8006e92:	4628      	mov	r0, r5
 8006e94:	f000 f8c8 	bl	8007028 <USBD_CtlSendStatus>
 8006e98:	e7a2      	b.n	8006de0 <USBD_StdEPReq+0x2c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	f000 facd 	bl	800743a <USBD_LL_ClearStallEP>
 8006ea0:	e7f7      	b.n	8006e92 <USBD_StdEPReq+0xde>
          switch (pdev->dev_state)
 8006ea2:	f890 029c 	ldrb.w	r0, [r0, #668]	; 0x29c
 8006ea6:	2802      	cmp	r0, #2
 8006ea8:	d006      	beq.n	8006eb8 <USBD_StdEPReq+0x104>
 8006eaa:	2803      	cmp	r0, #3
 8006eac:	d029      	beq.n	8006f02 <USBD_StdEPReq+0x14e>
              USBD_CtlError(pdev, req);
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f7ff fd82 	bl	80069b8 <USBD_CtlError>
  return ret;
 8006eb4:	4634      	mov	r4, r6
              break;
 8006eb6:	e793      	b.n	8006de0 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006eb8:	b10a      	cbz	r2, 8006ebe <USBD_StdEPReq+0x10a>
 8006eba:	2a80      	cmp	r2, #128	; 0x80
 8006ebc:	d113      	bne.n	8006ee6 <USBD_StdEPReq+0x132>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ebe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ec2:	d115      	bne.n	8006ef0 <USBD_StdEPReq+0x13c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ec4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ec8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006ecc:	0091      	lsls	r1, r2, #2
 8006ece:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8006ed2:	4429      	add	r1, r5
 8006ed4:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006eda:	2202      	movs	r2, #2
 8006edc:	4628      	mov	r0, r5
 8006ede:	f000 f877 	bl	8006fd0 <USBD_CtlSendData>
  return ret;
 8006ee2:	4634      	mov	r4, r6
              break;
 8006ee4:	e77c      	b.n	8006de0 <USBD_StdEPReq+0x2c>
                USBD_CtlError(pdev, req);
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f7ff fd66 	bl	80069b8 <USBD_CtlError>
  return ret;
 8006eec:	4634      	mov	r4, r6
                break;
 8006eee:	e777      	b.n	8006de0 <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ef0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ef4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006ef8:	0091      	lsls	r1, r2, #2
 8006efa:	3110      	adds	r1, #16
 8006efc:	4429      	add	r1, r5
 8006efe:	3104      	adds	r1, #4
 8006f00:	e7e9      	b.n	8006ed6 <USBD_StdEPReq+0x122>
              if ((ep_addr & 0x80U) == 0x80U)
 8006f02:	b25b      	sxtb	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	db1f      	blt.n	8006f48 <USBD_StdEPReq+0x194>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f08:	f002 000f 	and.w	r0, r2, #15
 8006f0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f10:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8006f14:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8006f18:	b320      	cbz	r0, 8006f64 <USBD_StdEPReq+0x1b0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	db27      	blt.n	8006f6e <USBD_StdEPReq+0x1ba>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f1e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006f26:	009c      	lsls	r4, r3, #2
 8006f28:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8006f2c:	442c      	add	r4, r5
 8006f2e:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f30:	b10a      	cbz	r2, 8006f36 <USBD_StdEPReq+0x182>
 8006f32:	2a80      	cmp	r2, #128	; 0x80
 8006f34:	d124      	bne.n	8006f80 <USBD_StdEPReq+0x1cc>
                pep->status = 0x0000U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	6023      	str	r3, [r4, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f000 f846 	bl	8006fd0 <USBD_CtlSendData>
  return ret;
 8006f44:	4634      	mov	r4, r6
              break;
 8006f46:	e74b      	b.n	8006de0 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f48:	f002 000f 	and.w	r0, r2, #15
 8006f4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f50:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8006f54:	6980      	ldr	r0, [r0, #24]
 8006f56:	2800      	cmp	r0, #0
 8006f58:	d1df      	bne.n	8006f1a <USBD_StdEPReq+0x166>
                  USBD_CtlError(pdev, req);
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f7ff fd2c 	bl	80069b8 <USBD_CtlError>
  return ret;
 8006f60:	4634      	mov	r4, r6
                  break;
 8006f62:	e73d      	b.n	8006de0 <USBD_StdEPReq+0x2c>
                  USBD_CtlError(pdev, req);
 8006f64:	4628      	mov	r0, r5
 8006f66:	f7ff fd27 	bl	80069b8 <USBD_CtlError>
  return ret;
 8006f6a:	4634      	mov	r4, r6
                  break;
 8006f6c:	e738      	b.n	8006de0 <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f6e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8006f72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006f76:	009c      	lsls	r4, r3, #2
 8006f78:	3410      	adds	r4, #16
 8006f7a:	442c      	add	r4, r5
 8006f7c:	3404      	adds	r4, #4
 8006f7e:	e7d7      	b.n	8006f30 <USBD_StdEPReq+0x17c>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006f80:	4611      	mov	r1, r2
 8006f82:	4628      	mov	r0, r5
 8006f84:	f000 fa61 	bl	800744a <USBD_LL_IsStallEP>
 8006f88:	b110      	cbz	r0, 8006f90 <USBD_StdEPReq+0x1dc>
                pep->status = 0x0001U;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	e7d4      	b.n	8006f3a <USBD_StdEPReq+0x186>
                pep->status = 0x0000U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	6023      	str	r3, [r4, #0]
 8006f94:	e7d1      	b.n	8006f3a <USBD_StdEPReq+0x186>

08006f96 <USBD_GetString>:
  if (desc != NULL)
 8006f96:	b1d0      	cbz	r0, 8006fce <USBD_GetString+0x38>
{
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	460d      	mov	r5, r1
 8006f9c:	4616      	mov	r6, r2
 8006f9e:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006fa0:	f7ff fce2 	bl	8006968 <USBD_GetLen>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006fac:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	706b      	strb	r3, [r5, #1]
 8006fb2:	2302      	movs	r3, #2
    while (*desc != '\0')
 8006fb4:	e007      	b.n	8006fc6 <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 8006fb6:	3401      	adds	r4, #1
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	54e8      	strb	r0, [r5, r3]
      unicode[idx++] =  0U;
 8006fbe:	3302      	adds	r3, #2
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 8006fc6:	7820      	ldrb	r0, [r4, #0]
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	d1f4      	bne.n	8006fb6 <USBD_GetString+0x20>
}
 8006fcc:	bd70      	pop	{r4, r5, r6, pc}
 8006fce:	4770      	bx	lr

08006fd0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006fd0:	b508      	push	{r3, lr}
 8006fd2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006fda:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8006fdc:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fde:	460a      	mov	r2, r1
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	f000 fa50 	bl	8007486 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	bd08      	pop	{r3, pc}

08006fea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006fea:	b508      	push	{r3, lr}
 8006fec:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fee:	460a      	mov	r2, r1
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	f000 fa48 	bl	8007486 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	bd08      	pop	{r3, pc}

08006ffa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006ffa:	b508      	push	{r3, lr}
 8006ffc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ffe:	2203      	movs	r2, #3
 8007000:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007004:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007008:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800700c:	460a      	mov	r2, r1
 800700e:	2100      	movs	r1, #0
 8007010:	f000 fa41 	bl	8007496 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007014:	2000      	movs	r0, #0
 8007016:	bd08      	pop	{r3, pc}

08007018 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007018:	b508      	push	{r3, lr}
 800701a:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800701c:	460a      	mov	r2, r1
 800701e:	2100      	movs	r1, #0
 8007020:	f000 fa39 	bl	8007496 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007024:	2000      	movs	r0, #0
 8007026:	bd08      	pop	{r3, pc}

08007028 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007028:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800702a:	2304      	movs	r3, #4
 800702c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007030:	2300      	movs	r3, #0
 8007032:	461a      	mov	r2, r3
 8007034:	4619      	mov	r1, r3
 8007036:	f000 fa26 	bl	8007486 <USBD_LL_Transmit>

  return USBD_OK;
}
 800703a:	2000      	movs	r0, #0
 800703c:	bd08      	pop	{r3, pc}

0800703e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800703e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007040:	2305      	movs	r3, #5
 8007042:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007046:	2300      	movs	r3, #0
 8007048:	461a      	mov	r2, r3
 800704a:	4619      	mov	r1, r3
 800704c:	f000 fa23 	bl	8007496 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007050:	2000      	movs	r0, #0
 8007052:	bd08      	pop	{r3, pc}

08007054 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007054:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007056:	2200      	movs	r2, #0
 8007058:	490f      	ldr	r1, [pc, #60]	; (8007098 <MX_USB_DEVICE_Init+0x44>)
 800705a:	4810      	ldr	r0, [pc, #64]	; (800709c <MX_USB_DEVICE_Init+0x48>)
 800705c:	f7ff fb26 	bl	80066ac <USBD_Init>
 8007060:	b970      	cbnz	r0, 8007080 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007062:	490f      	ldr	r1, [pc, #60]	; (80070a0 <MX_USB_DEVICE_Init+0x4c>)
 8007064:	480d      	ldr	r0, [pc, #52]	; (800709c <MX_USB_DEVICE_Init+0x48>)
 8007066:	f7ff fb38 	bl	80066da <USBD_RegisterClass>
 800706a:	b960      	cbnz	r0, 8007086 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800706c:	490d      	ldr	r1, [pc, #52]	; (80070a4 <MX_USB_DEVICE_Init+0x50>)
 800706e:	480b      	ldr	r0, [pc, #44]	; (800709c <MX_USB_DEVICE_Init+0x48>)
 8007070:	f7ff fad5 	bl	800661e <USBD_CDC_RegisterInterface>
 8007074:	b950      	cbnz	r0, 800708c <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007076:	4809      	ldr	r0, [pc, #36]	; (800709c <MX_USB_DEVICE_Init+0x48>)
 8007078:	f7ff fb36 	bl	80066e8 <USBD_Start>
 800707c:	b948      	cbnz	r0, 8007092 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800707e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007080:	f7f9 fcb2 	bl	80009e8 <Error_Handler>
 8007084:	e7ed      	b.n	8007062 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8007086:	f7f9 fcaf 	bl	80009e8 <Error_Handler>
 800708a:	e7ef      	b.n	800706c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800708c:	f7f9 fcac 	bl	80009e8 <Error_Handler>
 8007090:	e7f1      	b.n	8007076 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8007092:	f7f9 fca9 	bl	80009e8 <Error_Handler>
}
 8007096:	e7f2      	b.n	800707e <MX_USB_DEVICE_Init+0x2a>
 8007098:	2000012c 	.word	0x2000012c
 800709c:	200005b4 	.word	0x200005b4
 80070a0:	2000000c 	.word	0x2000000c
 80070a4:	2000011c 	.word	0x2000011c

080070a8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80070a8:	2000      	movs	r0, #0
 80070aa:	4770      	bx	lr

080070ac <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80070ac:	2000      	movs	r0, #0
 80070ae:	4770      	bx	lr

080070b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80070b0:	b510      	push	{r4, lr}
 80070b2:	4601      	mov	r1, r0
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80070b4:	4c04      	ldr	r4, [pc, #16]	; (80070c8 <CDC_Receive_FS+0x18>)
 80070b6:	4620      	mov	r0, r4
 80070b8:	f7ff fac0 	bl	800663c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80070bc:	4620      	mov	r0, r4
 80070be:	f7ff fadd 	bl	800667c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80070c2:	2000      	movs	r0, #0
 80070c4:	bd10      	pop	{r4, pc}
 80070c6:	bf00      	nop
 80070c8:	200005b4 	.word	0x200005b4

080070cc <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80070cc:	4b09      	ldr	r3, [pc, #36]	; (80070f4 <CDC_Transmit_FS+0x28>)
 80070ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 80070d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070d6:	b10b      	cbz	r3, 80070dc <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 80070d8:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 80070da:	4770      	bx	lr
{
 80070dc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80070de:	4c05      	ldr	r4, [pc, #20]	; (80070f4 <CDC_Transmit_FS+0x28>)
 80070e0:	460a      	mov	r2, r1
 80070e2:	4601      	mov	r1, r0
 80070e4:	4620      	mov	r0, r4
 80070e6:	f7ff faa1 	bl	800662c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80070ea:	4620      	mov	r0, r4
 80070ec:	f7ff faac 	bl	8006648 <USBD_CDC_TransmitPacket>
}
 80070f0:	bd10      	pop	{r4, pc}
 80070f2:	bf00      	nop
 80070f4:	200005b4 	.word	0x200005b4

080070f8 <CDC_Init_FS>:
{
 80070f8:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80070fa:	4d0d      	ldr	r5, [pc, #52]	; (8007130 <CDC_Init_FS+0x38>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	490d      	ldr	r1, [pc, #52]	; (8007134 <CDC_Init_FS+0x3c>)
 8007100:	4628      	mov	r0, r5
 8007102:	f7ff fa93 	bl	800662c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007106:	4c0c      	ldr	r4, [pc, #48]	; (8007138 <CDC_Init_FS+0x40>)
 8007108:	4621      	mov	r1, r4
 800710a:	4628      	mov	r0, r5
 800710c:	f7ff fa96 	bl	800663c <USBD_CDC_SetRxBuffer>
  CDC_Transmit_FS(UserRxBufferFS, strlen((const char*)UserRxBufferFS)-1);
 8007110:	4620      	mov	r0, r4
 8007112:	f7f9 f81b 	bl	800014c <strlen>
 8007116:	1e41      	subs	r1, r0, #1
 8007118:	b289      	uxth	r1, r1
 800711a:	4620      	mov	r0, r4
 800711c:	f7ff ffd6 	bl	80070cc <CDC_Transmit_FS>
  memset(UserRxBufferFS, 0, APP_RX_DATA_SIZE);
 8007120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007124:	2100      	movs	r1, #0
 8007126:	4620      	mov	r0, r4
 8007128:	f002 f9f0 	bl	800950c <memset>
}
 800712c:	2000      	movs	r0, #0
 800712e:	bd38      	pop	{r3, r4, r5, pc}
 8007130:	200005b4 	.word	0x200005b4
 8007134:	20000a78 	.word	0x20000a78
 8007138:	20000878 	.word	0x20000878

0800713c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800713c:	2312      	movs	r3, #18
 800713e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8007140:	4800      	ldr	r0, [pc, #0]	; (8007144 <USBD_FS_DeviceDescriptor+0x8>)
 8007142:	4770      	bx	lr
 8007144:	20000148 	.word	0x20000148

08007148 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007148:	2304      	movs	r3, #4
 800714a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800714c:	4800      	ldr	r0, [pc, #0]	; (8007150 <USBD_FS_LangIDStrDescriptor+0x8>)
 800714e:	4770      	bx	lr
 8007150:	2000015c 	.word	0x2000015c

08007154 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8007154:	2300      	movs	r3, #0
 8007156:	4293      	cmp	r3, r2
 8007158:	d21e      	bcs.n	8007198 <IntToUnicode+0x44>
{
 800715a:	b500      	push	{lr}
 800715c:	e010      	b.n	8007180 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800715e:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 8007162:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8007166:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8007168:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800716c:	f10c 0c01 	add.w	ip, ip, #1
 8007170:	f04f 0e00 	mov.w	lr, #0
 8007174:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8007178:	3301      	adds	r3, #1
 800717a:	b2db      	uxtb	r3, r3
 800717c:	4293      	cmp	r3, r2
 800717e:	d209      	bcs.n	8007194 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8007180:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8007184:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8007188:	d2e9      	bcs.n	800715e <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800718a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800718e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8007192:	e7e8      	b.n	8007166 <IntToUnicode+0x12>
  }
}
 8007194:	f85d fb04 	ldr.w	pc, [sp], #4
 8007198:	4770      	bx	lr
	...

0800719c <Get_SerialNum>:
{
 800719c:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800719e:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <Get_SerialNum+0x30>)
 80071a0:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80071a4:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80071a8:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 80071ac:	18c0      	adds	r0, r0, r3
 80071ae:	d100      	bne.n	80071b2 <Get_SerialNum+0x16>
}
 80071b0:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80071b2:	4d07      	ldr	r5, [pc, #28]	; (80071d0 <Get_SerialNum+0x34>)
 80071b4:	2208      	movs	r2, #8
 80071b6:	1ca9      	adds	r1, r5, #2
 80071b8:	f7ff ffcc 	bl	8007154 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80071bc:	2204      	movs	r2, #4
 80071be:	f105 0112 	add.w	r1, r5, #18
 80071c2:	4620      	mov	r0, r4
 80071c4:	f7ff ffc6 	bl	8007154 <IntToUnicode>
}
 80071c8:	e7f2      	b.n	80071b0 <Get_SerialNum+0x14>
 80071ca:	bf00      	nop
 80071cc:	1ffff000 	.word	0x1ffff000
 80071d0:	20000160 	.word	0x20000160

080071d4 <USBD_FS_SerialStrDescriptor>:
{
 80071d4:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80071d6:	231a      	movs	r3, #26
 80071d8:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 80071da:	f7ff ffdf 	bl	800719c <Get_SerialNum>
}
 80071de:	4801      	ldr	r0, [pc, #4]	; (80071e4 <USBD_FS_SerialStrDescriptor+0x10>)
 80071e0:	bd08      	pop	{r3, pc}
 80071e2:	bf00      	nop
 80071e4:	20000160 	.word	0x20000160

080071e8 <USBD_FS_ProductStrDescriptor>:
{
 80071e8:	b508      	push	{r3, lr}
 80071ea:	460a      	mov	r2, r1
  if(speed == 0)
 80071ec:	b928      	cbnz	r0, 80071fa <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071ee:	4905      	ldr	r1, [pc, #20]	; (8007204 <USBD_FS_ProductStrDescriptor+0x1c>)
 80071f0:	4805      	ldr	r0, [pc, #20]	; (8007208 <USBD_FS_ProductStrDescriptor+0x20>)
 80071f2:	f7ff fed0 	bl	8006f96 <USBD_GetString>
}
 80071f6:	4803      	ldr	r0, [pc, #12]	; (8007204 <USBD_FS_ProductStrDescriptor+0x1c>)
 80071f8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071fa:	4902      	ldr	r1, [pc, #8]	; (8007204 <USBD_FS_ProductStrDescriptor+0x1c>)
 80071fc:	4802      	ldr	r0, [pc, #8]	; (8007208 <USBD_FS_ProductStrDescriptor+0x20>)
 80071fe:	f7ff feca 	bl	8006f96 <USBD_GetString>
 8007202:	e7f8      	b.n	80071f6 <USBD_FS_ProductStrDescriptor+0xe>
 8007204:	20000c78 	.word	0x20000c78
 8007208:	08009d6c 	.word	0x08009d6c

0800720c <USBD_FS_ManufacturerStrDescriptor>:
{
 800720c:	b510      	push	{r4, lr}
 800720e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007210:	4c03      	ldr	r4, [pc, #12]	; (8007220 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8007212:	4621      	mov	r1, r4
 8007214:	4803      	ldr	r0, [pc, #12]	; (8007224 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8007216:	f7ff febe 	bl	8006f96 <USBD_GetString>
}
 800721a:	4620      	mov	r0, r4
 800721c:	bd10      	pop	{r4, pc}
 800721e:	bf00      	nop
 8007220:	20000c78 	.word	0x20000c78
 8007224:	08009d84 	.word	0x08009d84

08007228 <USBD_FS_ConfigStrDescriptor>:
{
 8007228:	b508      	push	{r3, lr}
 800722a:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800722c:	b928      	cbnz	r0, 800723a <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800722e:	4905      	ldr	r1, [pc, #20]	; (8007244 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8007230:	4805      	ldr	r0, [pc, #20]	; (8007248 <USBD_FS_ConfigStrDescriptor+0x20>)
 8007232:	f7ff feb0 	bl	8006f96 <USBD_GetString>
}
 8007236:	4803      	ldr	r0, [pc, #12]	; (8007244 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8007238:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800723a:	4902      	ldr	r1, [pc, #8]	; (8007244 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800723c:	4802      	ldr	r0, [pc, #8]	; (8007248 <USBD_FS_ConfigStrDescriptor+0x20>)
 800723e:	f7ff feaa 	bl	8006f96 <USBD_GetString>
 8007242:	e7f8      	b.n	8007236 <USBD_FS_ConfigStrDescriptor+0xe>
 8007244:	20000c78 	.word	0x20000c78
 8007248:	08009d98 	.word	0x08009d98

0800724c <USBD_FS_InterfaceStrDescriptor>:
{
 800724c:	b508      	push	{r3, lr}
 800724e:	460a      	mov	r2, r1
  if(speed == 0)
 8007250:	b928      	cbnz	r0, 800725e <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007252:	4905      	ldr	r1, [pc, #20]	; (8007268 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8007254:	4805      	ldr	r0, [pc, #20]	; (800726c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8007256:	f7ff fe9e 	bl	8006f96 <USBD_GetString>
}
 800725a:	4803      	ldr	r0, [pc, #12]	; (8007268 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800725c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800725e:	4902      	ldr	r1, [pc, #8]	; (8007268 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8007260:	4802      	ldr	r0, [pc, #8]	; (800726c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8007262:	f7ff fe98 	bl	8006f96 <USBD_GetString>
 8007266:	e7f8      	b.n	800725a <USBD_FS_InterfaceStrDescriptor+0xe>
 8007268:	20000c78 	.word	0x20000c78
 800726c:	08009da4 	.word	0x08009da4

08007270 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8007270:	2802      	cmp	r0, #2
 8007272:	d805      	bhi.n	8007280 <USBD_Get_USB_Status+0x10>
 8007274:	e8df f000 	tbb	[pc, r0]
 8007278:	0405      	.short	0x0405
 800727a:	02          	.byte	0x02
 800727b:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800727c:	2001      	movs	r0, #1
    break;
 800727e:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8007280:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8007282:	4770      	bx	lr

08007284 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8007284:	6802      	ldr	r2, [r0, #0]
 8007286:	4b12      	ldr	r3, [pc, #72]	; (80072d0 <HAL_PCD_MspInit+0x4c>)
 8007288:	429a      	cmp	r2, r3
 800728a:	d000      	beq.n	800728e <HAL_PCD_MspInit+0xa>
 800728c:	4770      	bx	lr
{
 800728e:	b500      	push	{lr}
 8007290:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 8007292:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8007296:	69da      	ldr	r2, [r3, #28]
 8007298:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800729c:	61da      	str	r2, [r3, #28]
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072a4:	9301      	str	r3, [sp, #4]
 80072a6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80072a8:	2200      	movs	r2, #0
 80072aa:	4611      	mov	r1, r2
 80072ac:	2013      	movs	r0, #19
 80072ae:	f7fa f8ed 	bl	800148c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80072b2:	2013      	movs	r0, #19
 80072b4:	f7fa f922 	bl	80014fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80072b8:	2200      	movs	r2, #0
 80072ba:	4611      	mov	r1, r2
 80072bc:	2014      	movs	r0, #20
 80072be:	f7fa f8e5 	bl	800148c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80072c2:	2014      	movs	r0, #20
 80072c4:	f7fa f91a 	bl	80014fc <HAL_NVIC_EnableIRQ>
}
 80072c8:	b003      	add	sp, #12
 80072ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80072ce:	bf00      	nop
 80072d0:	40005c00 	.word	0x40005c00

080072d4 <HAL_PCD_SetupStageCallback>:
{
 80072d4:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072d6:	f500 7126 	add.w	r1, r0, #664	; 0x298
 80072da:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
 80072de:	f7ff fa1b 	bl	8006718 <USBD_LL_SetupStage>
}
 80072e2:	bd08      	pop	{r3, pc}

080072e4 <HAL_PCD_DataOutStageCallback>:
{
 80072e4:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072e6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80072ea:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80072ee:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 80072f2:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
 80072f6:	f7ff fa3c 	bl	8006772 <USBD_LL_DataOutStage>
}
 80072fa:	bd08      	pop	{r3, pc}

080072fc <HAL_PCD_DataInStageCallback>:
{
 80072fc:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80072fe:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8007302:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8007306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007308:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
 800730c:	f7ff fa77 	bl	80067fe <USBD_LL_DataInStage>
}
 8007310:	bd08      	pop	{r3, pc}

08007312 <HAL_PCD_SOFCallback>:
{
 8007312:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007314:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
 8007318:	f7ff fb18 	bl	800694c <USBD_LL_SOF>
}
 800731c:	bd08      	pop	{r3, pc}

0800731e <HAL_PCD_ResetCallback>:
{
 800731e:	b510      	push	{r4, lr}
 8007320:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007322:	7983      	ldrb	r3, [r0, #6]
 8007324:	2b02      	cmp	r3, #2
 8007326:	d109      	bne.n	800733c <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007328:	2101      	movs	r1, #1
 800732a:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
 800732e:	f7ff faf6 	bl	800691e <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007332:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
 8007336:	f7ff faca 	bl	80068ce <USBD_LL_Reset>
}
 800733a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800733c:	f7f9 fb54 	bl	80009e8 <Error_Handler>
 8007340:	e7f2      	b.n	8007328 <HAL_PCD_ResetCallback+0xa>
	...

08007344 <HAL_PCD_SuspendCallback>:
{
 8007344:	b510      	push	{r4, lr}
 8007346:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007348:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
 800734c:	f7ff faea 	bl	8006924 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8007350:	7aa3      	ldrb	r3, [r4, #10]
 8007352:	b123      	cbz	r3, 800735e <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007354:	4a02      	ldr	r2, [pc, #8]	; (8007360 <HAL_PCD_SuspendCallback+0x1c>)
 8007356:	6913      	ldr	r3, [r2, #16]
 8007358:	f043 0306 	orr.w	r3, r3, #6
 800735c:	6113      	str	r3, [r2, #16]
}
 800735e:	bd10      	pop	{r4, pc}
 8007360:	e000ed00 	.word	0xe000ed00

08007364 <HAL_PCD_ResumeCallback>:
{
 8007364:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007366:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
 800736a:	f7ff fae4 	bl	8006936 <USBD_LL_Resume>
}
 800736e:	bd08      	pop	{r3, pc}

08007370 <USBD_LL_Init>:
{
 8007370:	b510      	push	{r4, lr}
 8007372:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8007374:	481d      	ldr	r0, [pc, #116]	; (80073ec <USBD_LL_Init+0x7c>)
 8007376:	f8c0 42d4 	str.w	r4, [r0, #724]	; 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800737a:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 800737e:	4b1c      	ldr	r3, [pc, #112]	; (80073f0 <USBD_LL_Init+0x80>)
 8007380:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007382:	2308      	movs	r3, #8
 8007384:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007386:	2302      	movs	r3, #2
 8007388:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800738a:	2300      	movs	r3, #0
 800738c:	7283      	strb	r3, [r0, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800738e:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007390:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007392:	f7fb fbee 	bl	8002b72 <HAL_PCD_Init>
 8007396:	bb30      	cbnz	r0, 80073e6 <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007398:	2318      	movs	r3, #24
 800739a:	2200      	movs	r2, #0
 800739c:	4611      	mov	r1, r2
 800739e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80073a2:	f7fc fb59 	bl	8003a58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80073a6:	2358      	movs	r3, #88	; 0x58
 80073a8:	2200      	movs	r2, #0
 80073aa:	2180      	movs	r1, #128	; 0x80
 80073ac:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80073b0:	f7fc fb52 	bl	8003a58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80073b4:	23c0      	movs	r3, #192	; 0xc0
 80073b6:	2200      	movs	r2, #0
 80073b8:	2181      	movs	r1, #129	; 0x81
 80073ba:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80073be:	f7fc fb4b 	bl	8003a58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80073c2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80073c6:	2200      	movs	r2, #0
 80073c8:	2101      	movs	r1, #1
 80073ca:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80073ce:	f7fc fb43 	bl	8003a58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80073d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073d6:	2200      	movs	r2, #0
 80073d8:	2182      	movs	r1, #130	; 0x82
 80073da:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80073de:	f7fc fb3b 	bl	8003a58 <HAL_PCDEx_PMAConfig>
}
 80073e2:	2000      	movs	r0, #0
 80073e4:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80073e6:	f7f9 faff 	bl	80009e8 <Error_Handler>
 80073ea:	e7d5      	b.n	8007398 <USBD_LL_Init+0x28>
 80073ec:	20000e78 	.word	0x20000e78
 80073f0:	40005c00 	.word	0x40005c00

080073f4 <USBD_LL_Start>:
{
 80073f4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80073f6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80073fa:	f7fb fc2e 	bl	8002c5a <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80073fe:	f7ff ff37 	bl	8007270 <USBD_Get_USB_Status>
}
 8007402:	bd08      	pop	{r3, pc}

08007404 <USBD_LL_OpenEP>:
{
 8007404:	b508      	push	{r3, lr}
 8007406:	4694      	mov	ip, r2
 8007408:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800740a:	4663      	mov	r3, ip
 800740c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007410:	f7fc f9df 	bl	80037d2 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007414:	f7ff ff2c 	bl	8007270 <USBD_Get_USB_Status>
}
 8007418:	bd08      	pop	{r3, pc}

0800741a <USBD_LL_CloseEP>:
{
 800741a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800741c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007420:	f7fc fa19 	bl	8003856 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007424:	f7ff ff24 	bl	8007270 <USBD_Get_USB_Status>
}
 8007428:	bd08      	pop	{r3, pc}

0800742a <USBD_LL_StallEP>:
{
 800742a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800742c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007430:	f7fc fa93 	bl	800395a <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007434:	f7ff ff1c 	bl	8007270 <USBD_Get_USB_Status>
}
 8007438:	bd08      	pop	{r3, pc}

0800743a <USBD_LL_ClearStallEP>:
{
 800743a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800743c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007440:	f7fc facb 	bl	80039da <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007444:	f7ff ff14 	bl	8007270 <USBD_Get_USB_Status>
}
 8007448:	bd08      	pop	{r3, pc}

0800744a <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800744a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 800744e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007452:	d108      	bne.n	8007466 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007454:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007458:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800745c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007460:	f893 0152 	ldrb.w	r0, [r3, #338]	; 0x152
}
 8007464:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007466:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800746a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800746e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007472:	7c98      	ldrb	r0, [r3, #18]
 8007474:	4770      	bx	lr

08007476 <USBD_LL_SetUSBAddress>:
{
 8007476:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007478:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800747c:	f7fc f8be 	bl	80035fc <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007480:	f7ff fef6 	bl	8007270 <USBD_Get_USB_Status>
}
 8007484:	bd08      	pop	{r3, pc}

08007486 <USBD_LL_Transmit>:
{
 8007486:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007488:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800748c:	f7fc fa3f 	bl	800390e <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007490:	f7ff feee 	bl	8007270 <USBD_Get_USB_Status>
}
 8007494:	bd08      	pop	{r3, pc}

08007496 <USBD_LL_PrepareReceive>:
{
 8007496:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007498:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800749c:	f7fc fa11 	bl	80038c2 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80074a0:	f7ff fee6 	bl	8007270 <USBD_Get_USB_Status>
}
 80074a4:	bd08      	pop	{r3, pc}

080074a6 <USBD_LL_GetRxDataSize>:
{
 80074a6:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80074a8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80074ac:	f7fc fa26 	bl	80038fc <HAL_PCD_EP_GetRxCount>
}
 80074b0:	bd08      	pop	{r3, pc}
	...

080074b4 <USBD_static_malloc>:
}
 80074b4:	4800      	ldr	r0, [pc, #0]	; (80074b8 <USBD_static_malloc+0x4>)
 80074b6:	4770      	bx	lr
 80074b8:	20001150 	.word	0x20001150

080074bc <USBD_static_free>:
}
 80074bc:	4770      	bx	lr

080074be <HAL_PCDEx_SetConnectionState>:
}
 80074be:	4770      	bx	lr

080074c0 <newLoRa>:
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80074c0:	f240 12b1 	movw	r2, #433	; 0x1b1
 80074c4:	6202      	str	r2, [r0, #32]
	new_LoRa.spredingFactor        = SF_7      ;
 80074c6:	2207      	movs	r2, #7
 80074c8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
	new_LoRa.bandWidth			   = BW_125KHz ;
 80074cc:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
	new_LoRa.crcRate               = CR_4_5    ;
 80074d0:	2201      	movs	r2, #1
 80074d2:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
	new_LoRa.power				   = POWER_20db;
 80074d6:	22ff      	movs	r2, #255	; 0xff
 80074d8:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
	new_LoRa.overCurrentProtection = 100       ;
 80074dc:	2264      	movs	r2, #100	; 0x64
 80074de:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
	new_LoRa.preamble			   = 8         ;
 80074e2:	2208      	movs	r2, #8
 80074e4:	8502      	strh	r2, [r0, #40]	; 0x28

	return new_LoRa;
}
 80074e6:	4770      	bx	lr

080074e8 <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 80074e8:	b510      	push	{r4, lr}
 80074ea:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 80074ec:	2200      	movs	r2, #0
 80074ee:	8981      	ldrh	r1, [r0, #12]
 80074f0:	6880      	ldr	r0, [r0, #8]
 80074f2:	f7fa f9ab 	bl	800184c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80074f6:	2001      	movs	r0, #1
 80074f8:	f7f9 fe52 	bl	80011a0 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 80074fc:	2201      	movs	r2, #1
 80074fe:	89a1      	ldrh	r1, [r4, #12]
 8007500:	68a0      	ldr	r0, [r4, #8]
 8007502:	f7fa f9a3 	bl	800184c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8007506:	2064      	movs	r0, #100	; 0x64
 8007508:	f7f9 fe4a 	bl	80011a0 <HAL_Delay>
}
 800750c:	bd10      	pop	{r4, pc}

0800750e <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800750e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007510:	4604      	mov	r4, r0
 8007512:	460e      	mov	r6, r1
 8007514:	4617      	mov	r7, r2
 8007516:	461d      	mov	r5, r3
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8007518:	2200      	movs	r2, #0
 800751a:	8881      	ldrh	r1, [r0, #4]
 800751c:	6800      	ldr	r0, [r0, #0]
 800751e:	f7fa f995 	bl	800184c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8007522:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007526:	463a      	mov	r2, r7
 8007528:	4631      	mov	r1, r6
 800752a:	69a0      	ldr	r0, [r4, #24]
 800752c:	f7fc ff7f 	bl	800442e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8007530:	69a0      	ldr	r0, [r4, #24]
 8007532:	f7fd fad5 	bl	8004ae0 <HAL_SPI_GetState>
 8007536:	2801      	cmp	r0, #1
 8007538:	d1fa      	bne.n	8007530 <LoRa_readReg+0x22>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800753a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800753e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8007542:	4629      	mov	r1, r5
 8007544:	69a0      	ldr	r0, [r4, #24]
 8007546:	f7fd f97e 	bl	8004846 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800754a:	69a0      	ldr	r0, [r4, #24]
 800754c:	f7fd fac8 	bl	8004ae0 <HAL_SPI_GetState>
 8007550:	2801      	cmp	r0, #1
 8007552:	d1fa      	bne.n	800754a <LoRa_readReg+0x3c>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8007554:	2201      	movs	r2, #1
 8007556:	88a1      	ldrh	r1, [r4, #4]
 8007558:	6820      	ldr	r0, [r4, #0]
 800755a:	f7fa f977 	bl	800184c <HAL_GPIO_WritePin>
}
 800755e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007560 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8007560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007562:	4604      	mov	r4, r0
 8007564:	460e      	mov	r6, r1
 8007566:	4617      	mov	r7, r2
 8007568:	461d      	mov	r5, r3
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800756a:	2200      	movs	r2, #0
 800756c:	8881      	ldrh	r1, [r0, #4]
 800756e:	6800      	ldr	r0, [r0, #0]
 8007570:	f7fa f96c 	bl	800184c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8007574:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007578:	463a      	mov	r2, r7
 800757a:	4631      	mov	r1, r6
 800757c:	69a0      	ldr	r0, [r4, #24]
 800757e:	f7fc ff56 	bl	800442e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8007582:	69a0      	ldr	r0, [r4, #24]
 8007584:	f7fd faac 	bl	8004ae0 <HAL_SPI_GetState>
 8007588:	2801      	cmp	r0, #1
 800758a:	d1fa      	bne.n	8007582 <LoRa_writeReg+0x22>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 800758c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007590:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8007594:	4629      	mov	r1, r5
 8007596:	69a0      	ldr	r0, [r4, #24]
 8007598:	f7fc ff49 	bl	800442e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800759c:	69a0      	ldr	r0, [r4, #24]
 800759e:	f7fd fa9f 	bl	8004ae0 <HAL_SPI_GetState>
 80075a2:	2801      	cmp	r0, #1
 80075a4:	d1fa      	bne.n	800759c <LoRa_writeReg+0x3c>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80075a6:	2201      	movs	r2, #1
 80075a8:	88a1      	ldrh	r1, [r4, #4]
 80075aa:	6820      	ldr	r0, [r4, #0]
 80075ac:	f7fa f94e 	bl	800184c <HAL_GPIO_WritePin>
}
 80075b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075b2 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80075b2:	b500      	push	{lr}
 80075b4:	b085      	sub	sp, #20
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80075b6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80075ba:	f88d 100e 	strb.w	r1, [sp, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80075be:	2201      	movs	r2, #1
 80075c0:	9200      	str	r2, [sp, #0]
 80075c2:	f10d 030f 	add.w	r3, sp, #15
 80075c6:	f10d 010e 	add.w	r1, sp, #14
 80075ca:	f7ff ffa0 	bl	800750e <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
}
 80075ce:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80075d2:	b005      	add	sp, #20
 80075d4:	f85d fb04 	ldr.w	pc, [sp], #4

080075d8 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80075d8:	b500      	push	{lr}
 80075da:	b085      	sub	sp, #20
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80075dc:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80075e0:	f88d 100e 	strb.w	r1, [sp, #14]
	data = value;
 80075e4:	f88d 200f 	strb.w	r2, [sp, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80075e8:	2201      	movs	r2, #1
 80075ea:	9200      	str	r2, [sp, #0]
 80075ec:	f10d 030f 	add.w	r3, sp, #15
 80075f0:	f10d 010e 	add.w	r1, sp, #14
 80075f4:	f7ff ffb4 	bl	8007560 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80075f8:	b005      	add	sp, #20
 80075fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007600 <LoRa_gotoMode>:
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8007600:	b538      	push	{r3, r4, r5, lr}
 8007602:	4604      	mov	r4, r0
 8007604:	460d      	mov	r5, r1
	read = LoRa_read(_LoRa, RegOpMode);
 8007606:	2101      	movs	r1, #1
 8007608:	f7ff ffd3 	bl	80075b2 <LoRa_read>
 800760c:	4602      	mov	r2, r0
	if(mode == SLEEP_MODE){
 800760e:	b945      	cbnz	r5, 8007622 <LoRa_gotoMode+0x22>
		data = (read & 0xF8) | 0x00;
 8007610:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
		_LoRa->current_mode = SLEEP_MODE;
 8007614:	2300      	movs	r3, #0
 8007616:	61e3      	str	r3, [r4, #28]
	LoRa_write(_LoRa, RegOpMode, data);
 8007618:	2101      	movs	r1, #1
 800761a:	4620      	mov	r0, r4
 800761c:	f7ff ffdc 	bl	80075d8 <LoRa_write>
}
 8007620:	bd38      	pop	{r3, r4, r5, pc}
	}else if (mode == STNBY_MODE){
 8007622:	3d01      	subs	r5, #1
 8007624:	2d05      	cmp	r5, #5
 8007626:	d8f7      	bhi.n	8007618 <LoRa_gotoMode+0x18>
 8007628:	a301      	add	r3, pc, #4	; (adr r3, 8007630 <LoRa_gotoMode+0x30>)
 800762a:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 800762e:	bf00      	nop
 8007630:	08007649 	.word	0x08007649
 8007634:	08007619 	.word	0x08007619
 8007638:	0800765b 	.word	0x0800765b
 800763c:	08007619 	.word	0x08007619
 8007640:	0800766d 	.word	0x0800766d
 8007644:	0800767f 	.word	0x0800767f
		data = (read & 0xF8) | 0x01;
 8007648:	f020 0207 	bic.w	r2, r0, #7
 800764c:	b252      	sxtb	r2, r2
 800764e:	f042 0201 	orr.w	r2, r2, #1
 8007652:	b2d2      	uxtb	r2, r2
		_LoRa->current_mode = STNBY_MODE;
 8007654:	2301      	movs	r3, #1
 8007656:	61e3      	str	r3, [r4, #28]
 8007658:	e7de      	b.n	8007618 <LoRa_gotoMode+0x18>
		data = (read & 0xF8) | 0x03;
 800765a:	f020 0207 	bic.w	r2, r0, #7
 800765e:	b252      	sxtb	r2, r2
 8007660:	f042 0203 	orr.w	r2, r2, #3
 8007664:	b2d2      	uxtb	r2, r2
		_LoRa->current_mode = TRANSMIT_MODE;
 8007666:	2303      	movs	r3, #3
 8007668:	61e3      	str	r3, [r4, #28]
 800766a:	e7d5      	b.n	8007618 <LoRa_gotoMode+0x18>
		data = (read & 0xF8) | 0x05;
 800766c:	f020 0207 	bic.w	r2, r0, #7
 8007670:	b252      	sxtb	r2, r2
 8007672:	f042 0205 	orr.w	r2, r2, #5
 8007676:	b2d2      	uxtb	r2, r2
		_LoRa->current_mode = RXCONTIN_MODE;
 8007678:	2305      	movs	r3, #5
 800767a:	61e3      	str	r3, [r4, #28]
 800767c:	e7cc      	b.n	8007618 <LoRa_gotoMode+0x18>
		data = (read & 0xF8) | 0x06;
 800767e:	f020 0207 	bic.w	r2, r0, #7
 8007682:	b252      	sxtb	r2, r2
 8007684:	f042 0206 	orr.w	r2, r2, #6
 8007688:	b2d2      	uxtb	r2, r2
		_LoRa->current_mode = RXSINGLE_MODE;
 800768a:	2306      	movs	r3, #6
 800768c:	61e3      	str	r3, [r4, #28]
 800768e:	e7c3      	b.n	8007618 <LoRa_gotoMode+0x18>

08007690 <LoRa_setLowDaraRateOptimization>:
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	4604      	mov	r4, r0
 8007694:	460d      	mov	r5, r1
	read = LoRa_read(_LoRa, RegModemConfig3);
 8007696:	2126      	movs	r1, #38	; 0x26
 8007698:	f7ff ff8b 	bl	80075b2 <LoRa_read>
	if(value)
 800769c:	b155      	cbz	r5, 80076b4 <LoRa_setLowDaraRateOptimization+0x24>
		data = read | 0x08;
 800769e:	f040 0208 	orr.w	r2, r0, #8
 80076a2:	b2d2      	uxtb	r2, r2
	LoRa_write(_LoRa, RegModemConfig3, data);
 80076a4:	2126      	movs	r1, #38	; 0x26
 80076a6:	4620      	mov	r0, r4
 80076a8:	f7ff ff96 	bl	80075d8 <LoRa_write>
	HAL_Delay(10);
 80076ac:	200a      	movs	r0, #10
 80076ae:	f7f9 fd77 	bl	80011a0 <HAL_Delay>
}
 80076b2:	bd38      	pop	{r3, r4, r5, pc}
		data = read & 0xF7;
 80076b4:	f000 02f7 	and.w	r2, r0, #247	; 0xf7
 80076b8:	e7f4      	b.n	80076a4 <LoRa_setLowDaraRateOptimization+0x14>
	...

080076bc <LoRa_setAutoLDO>:
void LoRa_setAutoLDO(LoRa* _LoRa){
 80076bc:	b5d0      	push	{r4, r6, r7, lr}
 80076be:	b094      	sub	sp, #80	; 0x50
 80076c0:	4604      	mov	r4, r0
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 80076c2:	2250      	movs	r2, #80	; 0x50
 80076c4:	490f      	ldr	r1, [pc, #60]	; (8007704 <LoRa_setAutoLDO+0x48>)
 80076c6:	4668      	mov	r0, sp
 80076c8:	f001 ff64 	bl	8009594 <memcpy>
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 80076cc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80076d0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80076d4:	a914      	add	r1, sp, #80	; 0x50
 80076d6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80076da:	e953 6714 	ldrd	r6, r7, [r3, #-80]	; 0x50
 80076de:	2001      	movs	r0, #1
 80076e0:	4090      	lsls	r0, r2
 80076e2:	f7f8 fe8d 	bl	8000400 <__aeabi_i2d>
 80076e6:	4632      	mov	r2, r6
 80076e8:	463b      	mov	r3, r7
 80076ea:	f7f9 f81d 	bl	8000728 <__aeabi_ddiv>
 80076ee:	f7f9 f903 	bl	80008f8 <__aeabi_d2iz>
 80076f2:	2810      	cmp	r0, #16
 80076f4:	bfd4      	ite	le
 80076f6:	2100      	movle	r1, #0
 80076f8:	2101      	movgt	r1, #1
 80076fa:	4620      	mov	r0, r4
 80076fc:	f7ff ffc8 	bl	8007690 <LoRa_setLowDaraRateOptimization>
}
 8007700:	b014      	add	sp, #80	; 0x50
 8007702:	bdd0      	pop	{r4, r6, r7, pc}
 8007704:	08009cf0 	.word	0x08009cf0

08007708 <LoRa_setFrequency>:
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	4604      	mov	r4, r0
	F = (freq * 524288)>>5;
 800770c:	04ca      	lsls	r2, r1, #19
 800770e:	1155      	asrs	r5, r2, #5
	LoRa_write(_LoRa, RegFrMsb, data);
 8007710:	f3c2 5247 	ubfx	r2, r2, #21, #8
 8007714:	2106      	movs	r1, #6
 8007716:	f7ff ff5f 	bl	80075d8 <LoRa_write>
	HAL_Delay(5);
 800771a:	2005      	movs	r0, #5
 800771c:	f7f9 fd40 	bl	80011a0 <HAL_Delay>
	data = F >> 8;
 8007720:	0a2a      	lsrs	r2, r5, #8
	LoRa_write(_LoRa, RegFrMid, data);
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	2107      	movs	r1, #7
 8007726:	4620      	mov	r0, r4
 8007728:	f7ff ff56 	bl	80075d8 <LoRa_write>
	HAL_Delay(5);
 800772c:	2005      	movs	r0, #5
 800772e:	f7f9 fd37 	bl	80011a0 <HAL_Delay>
	LoRa_write(_LoRa, RegFrLsb, data);
 8007732:	2200      	movs	r2, #0
 8007734:	2108      	movs	r1, #8
 8007736:	4620      	mov	r0, r4
 8007738:	f7ff ff4e 	bl	80075d8 <LoRa_write>
	HAL_Delay(5);
 800773c:	2005      	movs	r0, #5
 800773e:	f7f9 fd2f 	bl	80011a0 <HAL_Delay>
}
 8007742:	bd38      	pop	{r3, r4, r5, pc}

08007744 <LoRa_setSpreadingFactor>:
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8007744:	b570      	push	{r4, r5, r6, lr}
 8007746:	4605      	mov	r5, r0
	if(SF>12)
 8007748:	290c      	cmp	r1, #12
 800774a:	dc04      	bgt.n	8007756 <LoRa_setSpreadingFactor+0x12>
 800774c:	460c      	mov	r4, r1
	if(SF<7)
 800774e:	2906      	cmp	r1, #6
 8007750:	dc02      	bgt.n	8007758 <LoRa_setSpreadingFactor+0x14>
		SF = 7;
 8007752:	2407      	movs	r4, #7
 8007754:	e000      	b.n	8007758 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8007756:	240c      	movs	r4, #12
	read = LoRa_read(_LoRa, RegModemConfig2);
 8007758:	211e      	movs	r1, #30
 800775a:	4628      	mov	r0, r5
 800775c:	f7ff ff29 	bl	80075b2 <LoRa_read>
 8007760:	4606      	mov	r6, r0
	HAL_Delay(10);
 8007762:	200a      	movs	r0, #10
 8007764:	f7f9 fd1c 	bl	80011a0 <HAL_Delay>
	data = (SF << 4) + (read & 0x0F);
 8007768:	0122      	lsls	r2, r4, #4
 800776a:	b2d2      	uxtb	r2, r2
 800776c:	f006 060f 	and.w	r6, r6, #15
 8007770:	4432      	add	r2, r6
	LoRa_write(_LoRa, RegModemConfig2, data);
 8007772:	b2d2      	uxtb	r2, r2
 8007774:	211e      	movs	r1, #30
 8007776:	4628      	mov	r0, r5
 8007778:	f7ff ff2e 	bl	80075d8 <LoRa_write>
	HAL_Delay(10);
 800777c:	200a      	movs	r0, #10
 800777e:	f7f9 fd0f 	bl	80011a0 <HAL_Delay>
	LoRa_setAutoLDO(_LoRa);
 8007782:	4628      	mov	r0, r5
 8007784:	f7ff ff9a 	bl	80076bc <LoRa_setAutoLDO>
}
 8007788:	bd70      	pop	{r4, r5, r6, pc}

0800778a <LoRa_setPower>:
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800778a:	b508      	push	{r3, lr}
 800778c:	460a      	mov	r2, r1
	LoRa_write(_LoRa, RegPaConfig, power);
 800778e:	2109      	movs	r1, #9
 8007790:	f7ff ff22 	bl	80075d8 <LoRa_write>
	HAL_Delay(10);
 8007794:	200a      	movs	r0, #10
 8007796:	f7f9 fd03 	bl	80011a0 <HAL_Delay>
}
 800779a:	bd08      	pop	{r3, pc}

0800779c <LoRa_setOCP>:
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 800779c:	b508      	push	{r3, lr}
	if(current<45)
 800779e:	292c      	cmp	r1, #44	; 0x2c
 80077a0:	d90d      	bls.n	80077be <LoRa_setOCP+0x22>
	if(current>240)
 80077a2:	29f0      	cmp	r1, #240	; 0xf0
 80077a4:	d90c      	bls.n	80077c0 <LoRa_setOCP+0x24>
		current = 240;
 80077a6:	21f0      	movs	r1, #240	; 0xf0
	else if(current <= 240)
 80077a8:	29f0      	cmp	r1, #240	; 0xf0
 80077aa:	d81c      	bhi.n	80077e6 <LoRa_setOCP+0x4a>
		OcpTrim = (current + 30)/10;
 80077ac:	311e      	adds	r1, #30
 80077ae:	4b0f      	ldr	r3, [pc, #60]	; (80077ec <LoRa_setOCP+0x50>)
 80077b0:	fb83 2301 	smull	r2, r3, r3, r1
 80077b4:	17ca      	asrs	r2, r1, #31
 80077b6:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 80077ba:	b2d2      	uxtb	r2, r2
 80077bc:	e00a      	b.n	80077d4 <LoRa_setOCP+0x38>
		current = 45;
 80077be:	212d      	movs	r1, #45	; 0x2d
	if(current <= 120)
 80077c0:	2978      	cmp	r1, #120	; 0x78
 80077c2:	d8f1      	bhi.n	80077a8 <LoRa_setOCP+0xc>
		OcpTrim = (current - 45)/5;
 80077c4:	392d      	subs	r1, #45	; 0x2d
 80077c6:	4b09      	ldr	r3, [pc, #36]	; (80077ec <LoRa_setOCP+0x50>)
 80077c8:	fb83 2301 	smull	r2, r3, r3, r1
 80077cc:	17ca      	asrs	r2, r1, #31
 80077ce:	ebc2 0263 	rsb	r2, r2, r3, asr #1
 80077d2:	b2d2      	uxtb	r2, r2
	OcpTrim = OcpTrim + (1 << 5);
 80077d4:	3220      	adds	r2, #32
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80077d6:	b2d2      	uxtb	r2, r2
 80077d8:	210b      	movs	r1, #11
 80077da:	f7ff fefd 	bl	80075d8 <LoRa_write>
	HAL_Delay(10);
 80077de:	200a      	movs	r0, #10
 80077e0:	f7f9 fcde 	bl	80011a0 <HAL_Delay>
}
 80077e4:	bd08      	pop	{r3, pc}
	uint8_t	OcpTrim = 0;
 80077e6:	2200      	movs	r2, #0
 80077e8:	e7f4      	b.n	80077d4 <LoRa_setOCP+0x38>
 80077ea:	bf00      	nop
 80077ec:	66666667 	.word	0x66666667

080077f0 <LoRa_setTOMsb_setCRCon>:
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80077f0:	b510      	push	{r4, lr}
 80077f2:	4604      	mov	r4, r0
	read = LoRa_read(_LoRa, RegModemConfig2);
 80077f4:	211e      	movs	r1, #30
 80077f6:	f7ff fedc 	bl	80075b2 <LoRa_read>
	data = read | 0x07;
 80077fa:	f040 0207 	orr.w	r2, r0, #7
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80077fe:	b2d2      	uxtb	r2, r2
 8007800:	211e      	movs	r1, #30
 8007802:	4620      	mov	r0, r4
 8007804:	f7ff fee8 	bl	80075d8 <LoRa_write>
	HAL_Delay(10);
 8007808:	200a      	movs	r0, #10
 800780a:	f7f9 fcc9 	bl	80011a0 <HAL_Delay>
}
 800780e:	bd10      	pop	{r4, pc}

08007810 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8007810:	b570      	push	{r4, r5, r6, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	4604      	mov	r4, r0
 8007816:	4615      	mov	r5, r2
 8007818:	461e      	mov	r6, r3
	uint8_t addr;
	addr = address | 0x80;
 800781a:	f061 017f 	orn	r1, r1, #127	; 0x7f
 800781e:	f88d 1007 	strb.w	r1, [sp, #7]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8007822:	2200      	movs	r2, #0
 8007824:	8881      	ldrh	r1, [r0, #4]
 8007826:	6800      	ldr	r0, [r0, #0]
 8007828:	f7fa f810 	bl	800184c <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800782c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007830:	2201      	movs	r2, #1
 8007832:	f10d 0107 	add.w	r1, sp, #7
 8007836:	69a0      	ldr	r0, [r4, #24]
 8007838:	f7fc fdf9 	bl	800442e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800783c:	69a0      	ldr	r0, [r4, #24]
 800783e:	f7fd f94f 	bl	8004ae0 <HAL_SPI_GetState>
 8007842:	2801      	cmp	r0, #1
 8007844:	d1fa      	bne.n	800783c <LoRa_BurstWrite+0x2c>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8007846:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800784a:	4632      	mov	r2, r6
 800784c:	4629      	mov	r1, r5
 800784e:	69a0      	ldr	r0, [r4, #24]
 8007850:	f7fc fded 	bl	800442e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8007854:	69a0      	ldr	r0, [r4, #24]
 8007856:	f7fd f943 	bl	8004ae0 <HAL_SPI_GetState>
 800785a:	2801      	cmp	r0, #1
 800785c:	d1fa      	bne.n	8007854 <LoRa_BurstWrite+0x44>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800785e:	2201      	movs	r2, #1
 8007860:	88a1      	ldrh	r1, [r4, #4]
 8007862:	6820      	ldr	r0, [r4, #0]
 8007864:	f7f9 fff2 	bl	800184c <HAL_GPIO_WritePin>
}
 8007868:	b002      	add	sp, #8
 800786a:	bd70      	pop	{r4, r5, r6, pc}

0800786c <LoRa_isvalid>:
		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){

	return 1;
}
 800786c:	2001      	movs	r0, #1
 800786e:	4770      	bx	lr

08007870 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8007870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007874:	4606      	mov	r6, r0
 8007876:	460f      	mov	r7, r1
 8007878:	4615      	mov	r5, r2
 800787a:	461c      	mov	r4, r3
	uint8_t read;

	int mode = _LoRa->current_mode;
 800787c:	f8d0 801c 	ldr.w	r8, [r0, #28]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8007880:	2101      	movs	r1, #1
 8007882:	f7ff febd 	bl	8007600 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8007886:	210e      	movs	r1, #14
 8007888:	4630      	mov	r0, r6
 800788a:	f7ff fe92 	bl	80075b2 <LoRa_read>
 800788e:	4602      	mov	r2, r0
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8007890:	210d      	movs	r1, #13
 8007892:	4630      	mov	r0, r6
 8007894:	f7ff fea0 	bl	80075d8 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8007898:	462a      	mov	r2, r5
 800789a:	2122      	movs	r1, #34	; 0x22
 800789c:	4630      	mov	r0, r6
 800789e:	f7ff fe9b 	bl	80075d8 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80078a2:	462b      	mov	r3, r5
 80078a4:	463a      	mov	r2, r7
 80078a6:	2100      	movs	r1, #0
 80078a8:	4630      	mov	r0, r6
 80078aa:	f7ff ffb1 	bl	8007810 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80078ae:	2103      	movs	r1, #3
 80078b0:	4630      	mov	r0, r6
 80078b2:	f7ff fea5 	bl	8007600 <LoRa_gotoMode>
 80078b6:	e00f      	b.n	80078d8 <LoRa_transmit+0x68>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
		if((read & 0x08)!=0){
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80078b8:	22ff      	movs	r2, #255	; 0xff
 80078ba:	2112      	movs	r1, #18
 80078bc:	4630      	mov	r0, r6
 80078be:	f7ff fe8b 	bl	80075d8 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80078c2:	4641      	mov	r1, r8
 80078c4:	4630      	mov	r0, r6
 80078c6:	f7ff fe9b 	bl	8007600 <LoRa_gotoMode>
			return 1;
 80078ca:	2501      	movs	r5, #1
				return 0;
			}
		}
		HAL_Delay(1);
	}
}
 80078cc:	4628      	mov	r0, r5
 80078ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_Delay(1);
 80078d2:	2001      	movs	r0, #1
 80078d4:	f7f9 fc64 	bl	80011a0 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80078d8:	2112      	movs	r1, #18
 80078da:	4630      	mov	r0, r6
 80078dc:	f7ff fe69 	bl	80075b2 <LoRa_read>
		if((read & 0x08)!=0){
 80078e0:	f010 0508 	ands.w	r5, r0, #8
 80078e4:	d1e8      	bne.n	80078b8 <LoRa_transmit+0x48>
			if(--timeout==0){
 80078e6:	3c01      	subs	r4, #1
 80078e8:	b2a4      	uxth	r4, r4
 80078ea:	2c00      	cmp	r4, #0
 80078ec:	d1f1      	bne.n	80078d2 <LoRa_transmit+0x62>
				LoRa_gotoMode(_LoRa, mode);
 80078ee:	4641      	mov	r1, r8
 80078f0:	4630      	mov	r0, r6
 80078f2:	f7ff fe85 	bl	8007600 <LoRa_gotoMode>
				return 0;
 80078f6:	e7e9      	b.n	80078cc <LoRa_transmit+0x5c>

080078f8 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80078f8:	b508      	push	{r3, lr}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80078fa:	2105      	movs	r1, #5
 80078fc:	f7ff fe80 	bl	8007600 <LoRa_gotoMode>
}
 8007900:	bd08      	pop	{r3, pc}

08007902 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8007902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007904:	4606      	mov	r6, r0
 8007906:	460c      	mov	r4, r1
 8007908:	4615      	mov	r5, r2
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;

	for(int i=0; i<length; i++)
 800790a:	2300      	movs	r3, #0
 800790c:	e004      	b.n	8007918 <LoRa_receive+0x16>
		data[i]=0;
 800790e:	f04f 0c00 	mov.w	ip, #0
 8007912:	f804 c003 	strb.w	ip, [r4, r3]
	for(int i=0; i<length; i++)
 8007916:	3301      	adds	r3, #1
 8007918:	429d      	cmp	r5, r3
 800791a:	dcf8      	bgt.n	800790e <LoRa_receive+0xc>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800791c:	2101      	movs	r1, #1
 800791e:	4630      	mov	r0, r6
 8007920:	f7ff fe6e 	bl	8007600 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8007924:	2112      	movs	r1, #18
 8007926:	4630      	mov	r0, r6
 8007928:	f7ff fe43 	bl	80075b2 <LoRa_read>
	if((read & 0x40) != 0){
 800792c:	f010 0740 	ands.w	r7, r0, #64	; 0x40
 8007930:	d105      	bne.n	800793e <LoRa_receive+0x3c>
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
		min = length >= number_of_bytes ? number_of_bytes : length;
		for(int i=0; i<min; i++)
			data[i] = LoRa_read(_LoRa, RegFiFo);
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8007932:	2105      	movs	r1, #5
 8007934:	4630      	mov	r0, r6
 8007936:	f7ff fe63 	bl	8007600 <LoRa_gotoMode>
    return min;
}
 800793a:	4638      	mov	r0, r7
 800793c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800793e:	22ff      	movs	r2, #255	; 0xff
 8007940:	2112      	movs	r1, #18
 8007942:	4630      	mov	r0, r6
 8007944:	f7ff fe48 	bl	80075d8 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8007948:	2113      	movs	r1, #19
 800794a:	4630      	mov	r0, r6
 800794c:	f7ff fe31 	bl	80075b2 <LoRa_read>
 8007950:	4607      	mov	r7, r0
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8007952:	2110      	movs	r1, #16
 8007954:	4630      	mov	r0, r6
 8007956:	f7ff fe2c 	bl	80075b2 <LoRa_read>
 800795a:	4602      	mov	r2, r0
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800795c:	210d      	movs	r1, #13
 800795e:	4630      	mov	r0, r6
 8007960:	f7ff fe3a 	bl	80075d8 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8007964:	42bd      	cmp	r5, r7
 8007966:	bf28      	it	cs
 8007968:	463d      	movcs	r5, r7
 800796a:	b2ef      	uxtb	r7, r5
		for(int i=0; i<min; i++)
 800796c:	2500      	movs	r5, #0
 800796e:	e005      	b.n	800797c <LoRa_receive+0x7a>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8007970:	2100      	movs	r1, #0
 8007972:	4630      	mov	r0, r6
 8007974:	f7ff fe1d 	bl	80075b2 <LoRa_read>
 8007978:	5560      	strb	r0, [r4, r5]
		for(int i=0; i<min; i++)
 800797a:	3501      	adds	r5, #1
 800797c:	42af      	cmp	r7, r5
 800797e:	dcf7      	bgt.n	8007970 <LoRa_receive+0x6e>
 8007980:	e7d7      	b.n	8007932 <LoRa_receive+0x30>

08007982 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8007982:	b538      	push	{r3, r4, r5, lr}
 8007984:	4604      	mov	r4, r0
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8007986:	f7ff ff71 	bl	800786c <LoRa_isvalid>
 800798a:	b910      	cbnz	r0, 8007992 <LoRa_init+0x10>
				return LORA_OK;
			else
				return LORA_NOT_FOUND;
	}
	else {
		return LORA_UNAVAILABLE;
 800798c:	f240 10f7 	movw	r0, #503	; 0x1f7
	}
}
 8007990:	bd38      	pop	{r3, r4, r5, pc}
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8007992:	2100      	movs	r1, #0
 8007994:	4620      	mov	r0, r4
 8007996:	f7ff fe33 	bl	8007600 <LoRa_gotoMode>
			HAL_Delay(10);
 800799a:	200a      	movs	r0, #10
 800799c:	f7f9 fc00 	bl	80011a0 <HAL_Delay>
			read = LoRa_read(_LoRa, RegOpMode);
 80079a0:	2101      	movs	r1, #1
 80079a2:	4620      	mov	r0, r4
 80079a4:	f7ff fe05 	bl	80075b2 <LoRa_read>
 80079a8:	4605      	mov	r5, r0
			HAL_Delay(10);
 80079aa:	200a      	movs	r0, #10
 80079ac:	f7f9 fbf8 	bl	80011a0 <HAL_Delay>
			data = read | 0x80;
 80079b0:	f065 027f 	orn	r2, r5, #127	; 0x7f
			LoRa_write(_LoRa, RegOpMode, data);
 80079b4:	b2d2      	uxtb	r2, r2
 80079b6:	2101      	movs	r1, #1
 80079b8:	4620      	mov	r0, r4
 80079ba:	f7ff fe0d 	bl	80075d8 <LoRa_write>
			HAL_Delay(100);
 80079be:	2064      	movs	r0, #100	; 0x64
 80079c0:	f7f9 fbee 	bl	80011a0 <HAL_Delay>
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80079c4:	6a21      	ldr	r1, [r4, #32]
 80079c6:	4620      	mov	r0, r4
 80079c8:	f7ff fe9e 	bl	8007708 <LoRa_setFrequency>
			LoRa_setPower(_LoRa, _LoRa->power);
 80079cc:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 80079d0:	4620      	mov	r0, r4
 80079d2:	f7ff feda 	bl	800778a <LoRa_setPower>
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80079d6:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 80079da:	4620      	mov	r0, r4
 80079dc:	f7ff fede 	bl	800779c <LoRa_setOCP>
			LoRa_write(_LoRa, RegLna, 0x23);
 80079e0:	2223      	movs	r2, #35	; 0x23
 80079e2:	210c      	movs	r1, #12
 80079e4:	4620      	mov	r0, r4
 80079e6:	f7ff fdf7 	bl	80075d8 <LoRa_write>
			LoRa_setTOMsb_setCRCon(_LoRa);
 80079ea:	4620      	mov	r0, r4
 80079ec:	f7ff ff00 	bl	80077f0 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80079f0:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80079f4:	4620      	mov	r0, r4
 80079f6:	f7ff fea5 	bl	8007744 <LoRa_setSpreadingFactor>
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80079fa:	22ff      	movs	r2, #255	; 0xff
 80079fc:	211f      	movs	r1, #31
 80079fe:	4620      	mov	r0, r4
 8007a00:	f7ff fdea 	bl	80075d8 <LoRa_write>
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8007a04:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8007a08:	0112      	lsls	r2, r2, #4
 8007a0a:	b2d2      	uxtb	r2, r2
 8007a0c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	441a      	add	r2, r3
			LoRa_write(_LoRa, RegModemConfig1, data);
 8007a16:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a1a:	211d      	movs	r1, #29
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f7ff fddb 	bl	80075d8 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8007a22:	4620      	mov	r0, r4
 8007a24:	f7ff fe4a 	bl	80076bc <LoRa_setAutoLDO>
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8007a28:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007a2a:	0a12      	lsrs	r2, r2, #8
 8007a2c:	2120      	movs	r1, #32
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f7ff fdd2 	bl	80075d8 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8007a34:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8007a38:	2121      	movs	r1, #33	; 0x21
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f7ff fdcc 	bl	80075d8 <LoRa_write>
			read = LoRa_read(_LoRa, RegDioMapping1);
 8007a40:	2140      	movs	r1, #64	; 0x40
 8007a42:	4620      	mov	r0, r4
 8007a44:	f7ff fdb5 	bl	80075b2 <LoRa_read>
			data = read | 0x3F;
 8007a48:	f040 023f 	orr.w	r2, r0, #63	; 0x3f
			LoRa_write(_LoRa, RegDioMapping1, data);
 8007a4c:	b2d2      	uxtb	r2, r2
 8007a4e:	2140      	movs	r1, #64	; 0x40
 8007a50:	4620      	mov	r0, r4
 8007a52:	f7ff fdc1 	bl	80075d8 <LoRa_write>
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8007a56:	2101      	movs	r1, #1
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f7ff fdd1 	bl	8007600 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	61e3      	str	r3, [r4, #28]
			HAL_Delay(10);
 8007a62:	200a      	movs	r0, #10
 8007a64:	f7f9 fb9c 	bl	80011a0 <HAL_Delay>
			read = LoRa_read(_LoRa, RegVersion);
 8007a68:	2142      	movs	r1, #66	; 0x42
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f7ff fda1 	bl	80075b2 <LoRa_read>
			if(read == 0x12)
 8007a70:	2812      	cmp	r0, #18
 8007a72:	d002      	beq.n	8007a7a <LoRa_init+0xf8>
				return LORA_NOT_FOUND;
 8007a74:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8007a78:	e78a      	b.n	8007990 <LoRa_init+0xe>
				return LORA_OK;
 8007a7a:	20c8      	movs	r0, #200	; 0xc8
 8007a7c:	e788      	b.n	8007990 <LoRa_init+0xe>

08007a7e <get_1>:
#else
#define NMBS_DEBUG_PRINT(...) (void) (0)
#endif


static uint8_t get_1(nmbs_t* nmbs) {
 8007a7e:	4603      	mov	r3, r0
    uint8_t result = nmbs->msg.buf[nmbs->msg.buf_idx];
 8007a80:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8007a84:	5c80      	ldrb	r0, [r0, r2]
    nmbs->msg.buf_idx++;
 8007a86:	3201      	adds	r2, #1
 8007a88:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return result;
}
 8007a8c:	4770      	bx	lr

08007a8e <put_1>:


static void put_1(nmbs_t* nmbs, uint8_t data) {
    nmbs->msg.buf[nmbs->msg.buf_idx] = data;
 8007a8e:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
 8007a92:	54c1      	strb	r1, [r0, r3]
    nmbs->msg.buf_idx++;
 8007a94:	3301      	adds	r3, #1
 8007a96:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 8007a9a:	4770      	bx	lr

08007a9c <discard_1>:


static void discard_1(nmbs_t* nmbs) {
    nmbs->msg.buf_idx++;
 8007a9c:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 8007aa6:	4770      	bx	lr

08007aa8 <discard_n>:


static void discard_n(nmbs_t* nmbs, uint16_t n) {
    nmbs->msg.buf_idx += n;
 8007aa8:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
 8007aac:	4419      	add	r1, r3
 8007aae:	f8a0 1104 	strh.w	r1, [r0, #260]	; 0x104
}
 8007ab2:	4770      	bx	lr

08007ab4 <get_2>:
	/*if(nmbs->msg.buf_idx >= 260){
		nmbs->msg.buf_idx = 0;
		return 0;
	}*/
    uint16_t result =
            ((uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx]) << 8 | (uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx + 1];
 8007ab4:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
 8007ab8:	5cc1      	ldrb	r1, [r0, r3]
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	5c82      	ldrb	r2, [r0, r2]
    nmbs->msg.buf_idx += 2;
 8007abe:	3302      	adds	r3, #2
 8007ac0:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
    return result;
}
 8007ac4:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
 8007ac8:	4770      	bx	lr

08007aca <put_2>:


static void put_2(nmbs_t* nmbs, uint16_t data) {
    nmbs->msg.buf[nmbs->msg.buf_idx] = (uint8_t) ((data >> 8) & 0xFFU);
 8007aca:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
 8007ace:	0a0a      	lsrs	r2, r1, #8
 8007ad0:	54c2      	strb	r2, [r0, r3]
    nmbs->msg.buf[nmbs->msg.buf_idx + 1] = (uint8_t) data;
 8007ad2:	1c5a      	adds	r2, r3, #1
 8007ad4:	5481      	strb	r1, [r0, r2]
    nmbs->msg.buf_idx += 2;
 8007ad6:	3302      	adds	r3, #2
 8007ad8:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 8007adc:	4770      	bx	lr

08007ade <get_n>:


static uint8_t* get_n(nmbs_t* nmbs, uint16_t n) {
    uint8_t* msg_buf_ptr = nmbs->msg.buf + nmbs->msg.buf_idx;
 8007ade:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
    nmbs->msg.buf_idx += n;
 8007ae2:	4419      	add	r1, r3
 8007ae4:	f8a0 1104 	strh.w	r1, [r0, #260]	; 0x104
    return msg_buf_ptr;
}
 8007ae8:	4418      	add	r0, r3
 8007aea:	4770      	bx	lr

08007aec <get_regs>:


static uint16_t* get_regs(nmbs_t* nmbs, uint16_t n) {
 8007aec:	4603      	mov	r3, r0
    uint16_t* msg_buf_ptr = (uint16_t*) (nmbs->msg.buf + nmbs->msg.buf_idx);
 8007aee:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8007af2:	4410      	add	r0, r2
    nmbs->msg.buf_idx += n * 2;
 8007af4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8007af8:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    while (n--) {
 8007afc:	e007      	b.n	8007b0e <get_regs+0x22>
        msg_buf_ptr[n] = (msg_buf_ptr[n] << 8) | ((msg_buf_ptr[n] >> 8) & 0xFF);
 8007afe:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8007b02:	0a0a      	lsrs	r2, r1, #8
 8007b04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007b08:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    while (n--) {
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	1e4b      	subs	r3, r1, #1
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2900      	cmp	r1, #0
 8007b14:	d1f3      	bne.n	8007afe <get_regs+0x12>
    }
    return msg_buf_ptr;
}
 8007b16:	4770      	bx	lr

08007b18 <swap_regs>:
    }
}


static void swap_regs(uint16_t* data, uint16_t n) {
    while (n--) {
 8007b18:	e007      	b.n	8007b2a <swap_regs+0x12>
        data[n] = (data[n] << 8) | ((data[n] >> 8) & 0xFF);
 8007b1a:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8007b1e:	0a0a      	lsrs	r2, r1, #8
 8007b20:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007b24:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    while (n--) {
 8007b28:	4619      	mov	r1, r3
 8007b2a:	1e4b      	subs	r3, r1, #1
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2900      	cmp	r1, #0
 8007b30:	d1f3      	bne.n	8007b1a <swap_regs+0x2>
    }
}
 8007b32:	4770      	bx	lr

08007b34 <msg_buf_reset>:


static void msg_buf_reset(nmbs_t* nmbs) {
    nmbs->msg.buf_idx = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 8007b3a:	4770      	bx	lr

08007b3c <msg_state_reset>:


static void msg_state_reset(nmbs_t* nmbs) {
 8007b3c:	b510      	push	{r4, lr}
 8007b3e:	4604      	mov	r4, r0
    msg_buf_reset(nmbs);
 8007b40:	f7ff fff8 	bl	8007b34 <msg_buf_reset>
    nmbs->msg.unit_id = 0;
 8007b44:	2300      	movs	r3, #0
 8007b46:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
    nmbs->msg.fc = 0;
 8007b4a:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
    nmbs->msg.transaction_id = 0;
 8007b4e:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
    nmbs->msg.broadcast = false;
 8007b52:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
    nmbs->msg.ignored = false;
 8007b56:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
}
 8007b5a:	bd10      	pop	{r4, pc}

08007b5c <recv>:

    return (uint16_t) (crc << 8) | (uint16_t) (crc >> 8);
}


static nmbs_error recv(nmbs_t* nmbs, uint16_t count) {
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	460c      	mov	r4, r1
    int32_t ret =
            nmbs->platform.read(nmbs->msg.buf + nmbs->msg.buf_idx, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 8007b60:	f8d0 5144 	ldr.w	r5, [r0, #324]	; 0x144
 8007b64:	f8b0 c104 	ldrh.w	ip, [r0, #260]	; 0x104
 8007b68:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8007b6c:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
 8007b70:	4460      	add	r0, ip
 8007b72:	47a8      	blx	r5

    if (ret == count)
 8007b74:	4284      	cmp	r4, r0
 8007b76:	d008      	beq.n	8007b8a <recv+0x2e>
        return NMBS_ERROR_NONE;

    if (ret < count) {
 8007b78:	dd09      	ble.n	8007b8e <recv+0x32>
        if (ret < 0)
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	db02      	blt.n	8007b84 <recv+0x28>
            return NMBS_ERROR_TRANSPORT;

        return NMBS_ERROR_TIMEOUT;
 8007b7e:	f06f 0002 	mvn.w	r0, #2
    }

    return NMBS_ERROR_TRANSPORT;
}
 8007b82:	bd38      	pop	{r3, r4, r5, pc}
            return NMBS_ERROR_TRANSPORT;
 8007b84:	f06f 0003 	mvn.w	r0, #3
 8007b88:	e7fb      	b.n	8007b82 <recv+0x26>
        return NMBS_ERROR_NONE;
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	e7f9      	b.n	8007b82 <recv+0x26>
    return NMBS_ERROR_TRANSPORT;
 8007b8e:	f06f 0003 	mvn.w	r0, #3
 8007b92:	e7f6      	b.n	8007b82 <recv+0x26>

08007b94 <send>:


static nmbs_error send(nmbs_t* nmbs, uint16_t count) {
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	460c      	mov	r4, r1
    int32_t ret = nmbs->platform.write(nmbs->msg.buf, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 8007b98:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
 8007b9c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8007ba0:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
 8007ba4:	47a8      	blx	r5

    if (ret == count)
 8007ba6:	4284      	cmp	r4, r0
 8007ba8:	d008      	beq.n	8007bbc <send+0x28>
        return NMBS_ERROR_NONE;

    if (ret < count) {
 8007baa:	dd09      	ble.n	8007bc0 <send+0x2c>
        if (ret < 0)
 8007bac:	2800      	cmp	r0, #0
 8007bae:	db02      	blt.n	8007bb6 <send+0x22>
            return NMBS_ERROR_TRANSPORT;

        return NMBS_ERROR_TIMEOUT;
 8007bb0:	f06f 0002 	mvn.w	r0, #2
    }

    return NMBS_ERROR_TRANSPORT;
}
 8007bb4:	bd38      	pop	{r3, r4, r5, pc}
            return NMBS_ERROR_TRANSPORT;
 8007bb6:	f06f 0003 	mvn.w	r0, #3
 8007bba:	e7fb      	b.n	8007bb4 <send+0x20>
        return NMBS_ERROR_NONE;
 8007bbc:	2000      	movs	r0, #0
 8007bbe:	e7f9      	b.n	8007bb4 <send+0x20>
    return NMBS_ERROR_TRANSPORT;
 8007bc0:	f06f 0003 	mvn.w	r0, #3
 8007bc4:	e7f6      	b.n	8007bb4 <send+0x20>

08007bc6 <recv_msg_header>:

    return NMBS_ERROR_NONE;
}


static nmbs_error recv_msg_header(nmbs_t* nmbs, bool* first_byte_received) {
 8007bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc8:	4604      	mov	r4, r0
 8007bca:	460d      	mov	r5, r1
    // We wait for the read timeout here, just for the first message byte
    int32_t old_byte_timeout = nmbs->byte_timeout_ms;
 8007bcc:	f8d0 6138 	ldr.w	r6, [r0, #312]	; 0x138
    nmbs->byte_timeout_ms = nmbs->read_timeout_ms;
 8007bd0:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
 8007bd4:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138

    msg_state_reset(nmbs);
 8007bd8:	f7ff ffb0 	bl	8007b3c <msg_state_reset>

    *first_byte_received = false;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	702b      	strb	r3, [r5, #0]

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8007be0:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d004      	beq.n	8007bf2 <recv_msg_header+0x2c>

        nmbs->msg.fc = get_1(nmbs);

        NMBS_DEBUG_PRINT("id: %d, fc: 0x%02X\n", nmbs->msg.unit_id, nmbs->msg.fc);
    }
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d01f      	beq.n	8007c2c <recv_msg_header+0x66>

        if (length > 255)
            return NMBS_ERROR_INVALID_TCP_MBAP;
    }

    return NMBS_ERROR_NONE;
 8007bec:	2600      	movs	r6, #0
}
 8007bee:	4630      	mov	r0, r6
 8007bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nmbs_error err = recv(nmbs, 1);
 8007bf2:	2101      	movs	r1, #1
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f7ff ffb1 	bl	8007b5c <recv>
        nmbs->byte_timeout_ms = old_byte_timeout;
 8007bfa:	f8c4 6138 	str.w	r6, [r4, #312]	; 0x138
        if (err != NMBS_ERROR_NONE)
 8007bfe:	4606      	mov	r6, r0
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d1f4      	bne.n	8007bee <recv_msg_header+0x28>
        *first_byte_received = true;
 8007c04:	2601      	movs	r6, #1
 8007c06:	702e      	strb	r6, [r5, #0]
        nmbs->msg.unit_id = get_1(nmbs);
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f7ff ff38 	bl	8007a7e <get_1>
 8007c0e:	f884 0106 	strb.w	r0, [r4, #262]	; 0x106
        err = recv(nmbs, 1);
 8007c12:	4631      	mov	r1, r6
 8007c14:	4620      	mov	r0, r4
 8007c16:	f7ff ffa1 	bl	8007b5c <recv>
        if (err != NMBS_ERROR_NONE)
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d1e6      	bne.n	8007bee <recv_msg_header+0x28>
        nmbs->msg.fc = get_1(nmbs);
 8007c20:	4620      	mov	r0, r4
 8007c22:	f7ff ff2c 	bl	8007a7e <get_1>
 8007c26:	f884 0107 	strb.w	r0, [r4, #263]	; 0x107
        NMBS_DEBUG_PRINT("id: %d, fc: 0x%02X\n", nmbs->msg.unit_id, nmbs->msg.fc);
 8007c2a:	e7e0      	b.n	8007bee <recv_msg_header+0x28>
        nmbs_error err = recv(nmbs, 1);
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f7ff ff94 	bl	8007b5c <recv>
        nmbs->byte_timeout_ms = old_byte_timeout;
 8007c34:	f8c4 6138 	str.w	r6, [r4, #312]	; 0x138
        if (err != NMBS_ERROR_NONE)
 8007c38:	4606      	mov	r6, r0
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d1d7      	bne.n	8007bee <recv_msg_header+0x28>
        *first_byte_received = true;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	702b      	strb	r3, [r5, #0]
        discard_1(nmbs);
 8007c42:	4620      	mov	r0, r4
 8007c44:	f7ff ff2a 	bl	8007a9c <discard_1>
        err = recv(nmbs, 7);
 8007c48:	2107      	movs	r1, #7
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f7ff ff86 	bl	8007b5c <recv>
        if (err != NMBS_ERROR_NONE)
 8007c50:	4606      	mov	r6, r0
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d1cb      	bne.n	8007bee <recv_msg_header+0x28>
        msg_buf_reset(nmbs);
 8007c56:	4620      	mov	r0, r4
 8007c58:	f7ff ff6c 	bl	8007b34 <msg_buf_reset>
        nmbs->msg.transaction_id = get_2(nmbs);
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	f7ff ff29 	bl	8007ab4 <get_2>
 8007c62:	f8a4 0108 	strh.w	r0, [r4, #264]	; 0x108
        uint16_t protocol_id = get_2(nmbs);
 8007c66:	4620      	mov	r0, r4
 8007c68:	f7ff ff24 	bl	8007ab4 <get_2>
 8007c6c:	4607      	mov	r7, r0
        uint16_t length = get_2(nmbs);    // We should actually check the length of the request against this value
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f7ff ff20 	bl	8007ab4 <get_2>
 8007c74:	4605      	mov	r5, r0
        nmbs->msg.unit_id = get_1(nmbs);
 8007c76:	4620      	mov	r0, r4
 8007c78:	f7ff ff01 	bl	8007a7e <get_1>
 8007c7c:	f884 0106 	strb.w	r0, [r4, #262]	; 0x106
        nmbs->msg.fc = get_1(nmbs);
 8007c80:	4620      	mov	r0, r4
 8007c82:	f7ff fefc 	bl	8007a7e <get_1>
 8007c86:	f884 0107 	strb.w	r0, [r4, #263]	; 0x107
        if (protocol_id != 0)
 8007c8a:	b927      	cbnz	r7, 8007c96 <recv_msg_header+0xd0>
        if (length > 255)
 8007c8c:	2dff      	cmp	r5, #255	; 0xff
 8007c8e:	d9ae      	bls.n	8007bee <recv_msg_header+0x28>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8007c90:	f06f 0605 	mvn.w	r6, #5
 8007c94:	e7ab      	b.n	8007bee <recv_msg_header+0x28>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8007c96:	f06f 0605 	mvn.w	r6, #5
 8007c9a:	e7a8      	b.n	8007bee <recv_msg_header+0x28>

08007c9c <put_msg_header>:


static void put_msg_header(nmbs_t* nmbs, uint16_t data_length) {
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	460d      	mov	r5, r1
    msg_buf_reset(nmbs);
 8007ca2:	f7ff ff47 	bl	8007b34 <msg_buf_reset>

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8007ca6:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d007      	beq.n	8007cbe <put_msg_header+0x22>
        put_1(nmbs, nmbs->msg.unit_id);
    }
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d00b      	beq.n	8007cca <put_msg_header+0x2e>
        put_2(nmbs, 0);
        put_2(nmbs, (uint16_t) (1 + 1 + data_length));
        put_1(nmbs, nmbs->msg.unit_id);
    }

    put_1(nmbs, nmbs->msg.fc);
 8007cb2:	f894 1107 	ldrb.w	r1, [r4, #263]	; 0x107
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f7ff fee9 	bl	8007a8e <put_1>
}
 8007cbc:	bd38      	pop	{r3, r4, r5, pc}
        put_1(nmbs, nmbs->msg.unit_id);
 8007cbe:	f894 1106 	ldrb.w	r1, [r4, #262]	; 0x106
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f7ff fee3 	bl	8007a8e <put_1>
 8007cc8:	e7f3      	b.n	8007cb2 <put_msg_header+0x16>
        put_2(nmbs, nmbs->msg.transaction_id);
 8007cca:	f8b4 1108 	ldrh.w	r1, [r4, #264]	; 0x108
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f7ff fefb 	bl	8007aca <put_2>
        put_2(nmbs, 0);
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f7ff fef7 	bl	8007aca <put_2>
        put_2(nmbs, (uint16_t) (1 + 1 + data_length));
 8007cdc:	1ca9      	adds	r1, r5, #2
 8007cde:	b289      	uxth	r1, r1
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f7ff fef2 	bl	8007aca <put_2>
        put_1(nmbs, nmbs->msg.unit_id);
 8007ce6:	f894 1106 	ldrb.w	r1, [r4, #262]	; 0x106
 8007cea:	4620      	mov	r0, r4
 8007cec:	f7ff fecf 	bl	8007a8e <put_1>
 8007cf0:	e7df      	b.n	8007cb2 <put_msg_header+0x16>

08007cf2 <recv_req_header>:
    return err;
}


#ifndef NMBS_SERVER_DISABLED
static nmbs_error recv_req_header(nmbs_t* nmbs, bool* first_byte_received) {
 8007cf2:	b510      	push	{r4, lr}
 8007cf4:	4604      	mov	r4, r0
    nmbs_error err = recv_msg_header(nmbs, first_byte_received);
 8007cf6:	f7ff ff66 	bl	8007bc6 <recv_msg_header>
    if (err != NMBS_ERROR_NONE)
 8007cfa:	b918      	cbnz	r0, 8007d04 <recv_req_header+0x12>
        return err;

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8007cfc:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d000      	beq.n	8007d06 <recv_req_header+0x14>
        else
            nmbs->msg.ignored = false;
    }

    return NMBS_ERROR_NONE;
}
 8007d04:	bd10      	pop	{r4, pc}
        else */if (nmbs->msg.unit_id != nmbs->address_rtu)
 8007d06:	f894 2106 	ldrb.w	r2, [r4, #262]	; 0x106
 8007d0a:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d003      	beq.n	8007d1a <recv_req_header+0x28>
            nmbs->msg.ignored = true;
 8007d12:	2301      	movs	r3, #1
 8007d14:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
 8007d18:	e7f4      	b.n	8007d04 <recv_req_header+0x12>
            nmbs->msg.ignored = false;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
 8007d20:	e7f0      	b.n	8007d04 <recv_req_header+0x12>

08007d22 <put_res_header>:


static void put_res_header(nmbs_t* nmbs, uint16_t data_length) {
 8007d22:	b508      	push	{r3, lr}
    put_msg_header(nmbs, data_length);
 8007d24:	f7ff ffba 	bl	8007c9c <put_msg_header>
    NMBS_DEBUG_PRINT("%d NMBS res -> address_rtu %d\tfc %d\t", nmbs->address_rtu, nmbs->address_rtu, nmbs->msg.fc);
}
 8007d28:	bd08      	pop	{r3, pc}

08007d2a <nmbs_create>:
    if (!nmbs)
 8007d2a:	b1f8      	cbz	r0, 8007d6c <nmbs_create+0x42>
nmbs_error nmbs_create(nmbs_t* nmbs, const nmbs_platform_conf* platform_conf) {
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	460c      	mov	r4, r1
 8007d30:	4605      	mov	r5, r0
    memset(nmbs, 0, sizeof(nmbs_t));
 8007d32:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8007d36:	2100      	movs	r1, #0
 8007d38:	f001 fbe8 	bl	800950c <memset>
    nmbs->byte_timeout_ms = -1;
 8007d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d40:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
    nmbs->read_timeout_ms = -1;
 8007d44:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
    if (!platform_conf)
 8007d48:	b19c      	cbz	r4, 8007d72 <nmbs_create+0x48>
    if (platform_conf->transport != NMBS_TRANSPORT_RTU && platform_conf->transport != NMBS_TRANSPORT_TCP)
 8007d4a:	7823      	ldrb	r3, [r4, #0]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d811      	bhi.n	8007d78 <nmbs_create+0x4e>
    if (!platform_conf->read || !platform_conf->write)
 8007d54:	6863      	ldr	r3, [r4, #4]
 8007d56:	b193      	cbz	r3, 8007d7e <nmbs_create+0x54>
 8007d58:	68a3      	ldr	r3, [r4, #8]
 8007d5a:	b19b      	cbz	r3, 8007d84 <nmbs_create+0x5a>
    nmbs->platform = *platform_conf;
 8007d5c:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8007d60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007d64:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    return NMBS_ERROR_NONE;
 8007d68:	2000      	movs	r0, #0
}
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
        return NMBS_ERROR_INVALID_ARGUMENT;
 8007d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007d70:	4770      	bx	lr
        return NMBS_ERROR_INVALID_ARGUMENT;
 8007d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d76:	e7f8      	b.n	8007d6a <nmbs_create+0x40>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d7c:	e7f5      	b.n	8007d6a <nmbs_create+0x40>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8007d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d82:	e7f2      	b.n	8007d6a <nmbs_create+0x40>
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d88:	e7ef      	b.n	8007d6a <nmbs_create+0x40>

08007d8a <nmbs_set_read_timeout>:
    nmbs->read_timeout_ms = timeout_ms;
 8007d8a:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
}
 8007d8e:	4770      	bx	lr

08007d90 <nmbs_set_byte_timeout>:
    nmbs->byte_timeout_ms = timeout_ms;
 8007d90:	f8c0 1138 	str.w	r1, [r0, #312]	; 0x138
}
 8007d94:	4770      	bx	lr

08007d96 <nmbs_crc_calc>:
uint16_t nmbs_crc_calc(const uint8_t* data, uint32_t length) {
 8007d96:	b500      	push	{lr}
    for (uint32_t i = 0; i < length; i++) {
 8007d98:	f04f 0e00 	mov.w	lr, #0
    uint16_t crc = 0xFFFF;
 8007d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    for (uint32_t i = 0; i < length; i++) {
 8007da0:	e00c      	b.n	8007dbc <nmbs_crc_calc+0x26>
                crc >>= 1;
 8007da2:	085b      	lsrs	r3, r3, #1
        for (int j = 8; j != 0; j--) {
 8007da4:	3a01      	subs	r2, #1
 8007da6:	b13a      	cbz	r2, 8007db8 <nmbs_crc_calc+0x22>
            if ((crc & 0x0001) != 0) {
 8007da8:	f013 0f01 	tst.w	r3, #1
 8007dac:	d0f9      	beq.n	8007da2 <nmbs_crc_calc+0xc>
                crc ^= 0xA001;
 8007dae:	f24a 0c01 	movw	ip, #40961	; 0xa001
 8007db2:	ea8c 0353 	eor.w	r3, ip, r3, lsr #1
 8007db6:	e7f5      	b.n	8007da4 <nmbs_crc_calc+0xe>
    for (uint32_t i = 0; i < length; i++) {
 8007db8:	f10e 0e01 	add.w	lr, lr, #1
 8007dbc:	458e      	cmp	lr, r1
 8007dbe:	d204      	bcs.n	8007dca <nmbs_crc_calc+0x34>
        crc ^= (uint16_t) data[i];
 8007dc0:	f810 200e 	ldrb.w	r2, [r0, lr]
 8007dc4:	4053      	eors	r3, r2
        for (int j = 8; j != 0; j--) {
 8007dc6:	2208      	movs	r2, #8
 8007dc8:	e7ed      	b.n	8007da6 <nmbs_crc_calc+0x10>
    return (uint16_t) (crc << 8) | (uint16_t) (crc >> 8);
 8007dca:	ba5b      	rev16	r3, r3
}
 8007dcc:	b298      	uxth	r0, r3
 8007dce:	f85d fb04 	ldr.w	pc, [sp], #4

08007dd2 <recv_msg_footer>:
static nmbs_error recv_msg_footer(nmbs_t* nmbs) {
 8007dd2:	b570      	push	{r4, r5, r6, lr}
    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8007dd4:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d002      	beq.n	8007de2 <recv_msg_footer+0x10>
    return NMBS_ERROR_NONE;
 8007ddc:	2500      	movs	r5, #0
}
 8007dde:	4628      	mov	r0, r5
 8007de0:	bd70      	pop	{r4, r5, r6, pc}
 8007de2:	4604      	mov	r4, r0
        uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx);
 8007de4:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
 8007de8:	f7ff ffd5 	bl	8007d96 <nmbs_crc_calc>
 8007dec:	4606      	mov	r6, r0
        nmbs_error err = recv(nmbs, 2);
 8007dee:	2102      	movs	r1, #2
 8007df0:	4620      	mov	r0, r4
 8007df2:	f7ff feb3 	bl	8007b5c <recv>
        if (err != NMBS_ERROR_NONE)
 8007df6:	4605      	mov	r5, r0
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	d1f0      	bne.n	8007dde <recv_msg_footer+0xc>
        uint16_t recv_crc = get_2(nmbs);
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f7ff fe59 	bl	8007ab4 <get_2>
        if (recv_crc != crc)
 8007e02:	4286      	cmp	r6, r0
 8007e04:	d0eb      	beq.n	8007dde <recv_msg_footer+0xc>
            return NMBS_ERROR_CRC;
 8007e06:	f06f 0504 	mvn.w	r5, #4
 8007e0a:	e7e8      	b.n	8007dde <recv_msg_footer+0xc>

08007e0c <recv_res_header>:
    return send_msg(nmbs);
}
#endif


static nmbs_error recv_res_header(nmbs_t* nmbs) {
 8007e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	4604      	mov	r4, r0
    uint16_t req_transaction_id = nmbs->msg.transaction_id;
 8007e12:	f8b0 6108 	ldrh.w	r6, [r0, #264]	; 0x108
    uint8_t req_unit_id = nmbs->msg.unit_id;
 8007e16:	f890 7106 	ldrb.w	r7, [r0, #262]	; 0x106
    uint8_t req_fc = nmbs->msg.fc;
 8007e1a:	f890 5107 	ldrb.w	r5, [r0, #263]	; 0x107

    bool first_byte_received;
    nmbs_error err = recv_msg_header(nmbs, &first_byte_received);
 8007e1e:	f10d 0107 	add.w	r1, sp, #7
 8007e22:	f7ff fed0 	bl	8007bc6 <recv_msg_header>
    if (err != NMBS_ERROR_NONE)
 8007e26:	b988      	cbnz	r0, 8007e4c <recv_res_header+0x40>
        return err;

    if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8007e28:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d00f      	beq.n	8007e50 <recv_res_header+0x44>
        if (nmbs->msg.transaction_id != req_transaction_id)
            return NMBS_ERROR_INVALID_TCP_MBAP;
    }

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && nmbs->msg.unit_id != req_unit_id)
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d014      	beq.n	8007e5e <recv_res_header+0x52>
        return NMBS_ERROR_INVALID_UNIT_ID;

    if (nmbs->msg.fc != req_fc) {
 8007e34:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 8007e38:	42ab      	cmp	r3, r5
 8007e3a:	d007      	beq.n	8007e4c <recv_res_header+0x40>
        if (nmbs->msg.fc - 0x80 == req_fc) {
 8007e3c:	3b80      	subs	r3, #128	; 0x80
 8007e3e:	42ab      	cmp	r3, r5
 8007e40:	d123      	bne.n	8007e8a <recv_res_header+0x7e>
            err = recv(nmbs, 1);
 8007e42:	2101      	movs	r1, #1
 8007e44:	4620      	mov	r0, r4
 8007e46:	f7ff fe89 	bl	8007b5c <recv>
            if (err != NMBS_ERROR_NONE)
 8007e4a:	b178      	cbz	r0, 8007e6c <recv_res_header+0x60>
    }

    NMBS_DEBUG_PRINT("%d NMBS res <- address_rtu %d\tfc %d\t", nmbs->address_rtu, nmbs->msg.unit_id, nmbs->msg.fc);

    return NMBS_ERROR_NONE;
}
 8007e4c:	b003      	add	sp, #12
 8007e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (nmbs->msg.transaction_id != req_transaction_id)
 8007e50:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
 8007e54:	42b2      	cmp	r2, r6
 8007e56:	d0eb      	beq.n	8007e30 <recv_res_header+0x24>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8007e58:	f06f 0005 	mvn.w	r0, #5
 8007e5c:	e7f6      	b.n	8007e4c <recv_res_header+0x40>
    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && nmbs->msg.unit_id != req_unit_id)
 8007e5e:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
 8007e62:	42bb      	cmp	r3, r7
 8007e64:	d0e6      	beq.n	8007e34 <recv_res_header+0x28>
        return NMBS_ERROR_INVALID_UNIT_ID;
 8007e66:	f06f 0006 	mvn.w	r0, #6
 8007e6a:	e7ef      	b.n	8007e4c <recv_res_header+0x40>
            uint8_t exception = get_1(nmbs);
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	f7ff fe06 	bl	8007a7e <get_1>
 8007e72:	4605      	mov	r5, r0
            err = recv_msg_footer(nmbs);
 8007e74:	4620      	mov	r0, r4
 8007e76:	f7ff ffac 	bl	8007dd2 <recv_msg_footer>
            if (err != NMBS_ERROR_NONE)
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d1e6      	bne.n	8007e4c <recv_res_header+0x40>
            if (exception < 1 || exception > 4)
 8007e7e:	1e6b      	subs	r3, r5, #1
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d804      	bhi.n	8007e90 <recv_res_header+0x84>
            return (nmbs_error) exception;
 8007e86:	b268      	sxtb	r0, r5
 8007e88:	e7e0      	b.n	8007e4c <recv_res_header+0x40>
        return NMBS_ERROR_INVALID_RESPONSE;
 8007e8a:	f06f 0001 	mvn.w	r0, #1
 8007e8e:	e7dd      	b.n	8007e4c <recv_res_header+0x40>
                return NMBS_ERROR_INVALID_RESPONSE;
 8007e90:	f06f 0001 	mvn.w	r0, #1
 8007e94:	e7da      	b.n	8007e4c <recv_res_header+0x40>

08007e96 <recv_read_discrete_res>:
#endif
}
#endif


static nmbs_error recv_read_discrete_res(nmbs_t* nmbs, nmbs_bitfield values) {
 8007e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e98:	4604      	mov	r4, r0
 8007e9a:	460d      	mov	r5, r1
    nmbs_error err = recv_res_header(nmbs);
 8007e9c:	f7ff ffb6 	bl	8007e0c <recv_res_header>
    if (err != NMBS_ERROR_NONE)
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	b108      	cbz	r0, 8007ea8 <recv_read_discrete_res+0x12>
    err = recv_msg_footer(nmbs);
    if (err != NMBS_ERROR_NONE)
        return err;

    return NMBS_ERROR_NONE;
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = recv(nmbs, 1);
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f7ff fe56 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d1f6      	bne.n	8007ea4 <recv_read_discrete_res+0xe>
    uint8_t coils_bytes = get_1(nmbs);
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f7ff fde1 	bl	8007a7e <get_1>
 8007ebc:	4607      	mov	r7, r0
    err = recv(nmbs, coils_bytes);
 8007ebe:	b281      	uxth	r1, r0
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f7ff fe4b 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d1eb      	bne.n	8007ea4 <recv_read_discrete_res+0xe>
    for (int i = 0; i < coils_bytes; i++) {
 8007ecc:	2600      	movs	r6, #0
 8007ece:	e000      	b.n	8007ed2 <recv_read_discrete_res+0x3c>
 8007ed0:	3601      	adds	r6, #1
 8007ed2:	42b7      	cmp	r7, r6
 8007ed4:	dd06      	ble.n	8007ee4 <recv_read_discrete_res+0x4e>
        uint8_t coil = get_1(nmbs);
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f7ff fdd1 	bl	8007a7e <get_1>
        if (values)
 8007edc:	2d00      	cmp	r5, #0
 8007ede:	d0f7      	beq.n	8007ed0 <recv_read_discrete_res+0x3a>
            values[i] = coil;
 8007ee0:	55a8      	strb	r0, [r5, r6]
 8007ee2:	e7f5      	b.n	8007ed0 <recv_read_discrete_res+0x3a>
    err = recv_msg_footer(nmbs);
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f7ff ff74 	bl	8007dd2 <recv_msg_footer>
 8007eea:	4603      	mov	r3, r0
    if (err != NMBS_ERROR_NONE)
 8007eec:	e7da      	b.n	8007ea4 <recv_read_discrete_res+0xe>

08007eee <recv_read_registers_res>:


static nmbs_error recv_read_registers_res(nmbs_t* nmbs, uint16_t quantity, uint16_t* registers) {
 8007eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	460f      	mov	r7, r1
 8007ef6:	4615      	mov	r5, r2
    nmbs_error err = recv_res_header(nmbs);
 8007ef8:	f7ff ff88 	bl	8007e0c <recv_res_header>
    if (err != NMBS_ERROR_NONE)
 8007efc:	b108      	cbz	r0, 8007f02 <recv_read_registers_res+0x14>

    if (registers_bytes != quantity * 2)
        return NMBS_ERROR_INVALID_RESPONSE;

    return NMBS_ERROR_NONE;
}
 8007efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = recv(nmbs, 1);
 8007f02:	2101      	movs	r1, #1
 8007f04:	4620      	mov	r0, r4
 8007f06:	f7ff fe29 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d1f7      	bne.n	8007efe <recv_read_registers_res+0x10>
    uint8_t registers_bytes = get_1(nmbs);
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f7ff fdb5 	bl	8007a7e <get_1>
 8007f14:	4680      	mov	r8, r0
    err = recv(nmbs, registers_bytes);
 8007f16:	b281      	uxth	r1, r0
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f7ff fe1f 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d1ed      	bne.n	8007efe <recv_read_registers_res+0x10>
    for (int i = 0; i < registers_bytes / 2; i++) {
 8007f22:	2600      	movs	r6, #0
 8007f24:	e000      	b.n	8007f28 <recv_read_registers_res+0x3a>
 8007f26:	3601      	adds	r6, #1
 8007f28:	f3c8 0347 	ubfx	r3, r8, #1, #8
 8007f2c:	42b3      	cmp	r3, r6
 8007f2e:	dd07      	ble.n	8007f40 <recv_read_registers_res+0x52>
        uint16_t reg = get_2(nmbs);
 8007f30:	4620      	mov	r0, r4
 8007f32:	f7ff fdbf 	bl	8007ab4 <get_2>
        if (registers)
 8007f36:	2d00      	cmp	r5, #0
 8007f38:	d0f5      	beq.n	8007f26 <recv_read_registers_res+0x38>
            registers[i] = reg;
 8007f3a:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
 8007f3e:	e7f2      	b.n	8007f26 <recv_read_registers_res+0x38>
    err = recv_msg_footer(nmbs);
 8007f40:	4620      	mov	r0, r4
 8007f42:	f7ff ff46 	bl	8007dd2 <recv_msg_footer>
    if (err != NMBS_ERROR_NONE)
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d1d9      	bne.n	8007efe <recv_read_registers_res+0x10>
    if (registers_bytes != quantity * 2)
 8007f4a:	ebb8 0f47 	cmp.w	r8, r7, lsl #1
 8007f4e:	d0d6      	beq.n	8007efe <recv_read_registers_res+0x10>
        return NMBS_ERROR_INVALID_RESPONSE;
 8007f50:	f06f 0001 	mvn.w	r0, #1
 8007f54:	e7d3      	b.n	8007efe <recv_read_registers_res+0x10>

08007f56 <send_msg>:
static nmbs_error send_msg(nmbs_t* nmbs) {
 8007f56:	b510      	push	{r4, lr}
 8007f58:	4604      	mov	r4, r0
    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8007f5a:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d005      	beq.n	8007f6e <send_msg+0x18>
    nmbs_error err = send(nmbs, nmbs->msg.buf_idx);
 8007f62:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
 8007f66:	4620      	mov	r0, r4
 8007f68:	f7ff fe14 	bl	8007b94 <send>
}
 8007f6c:	bd10      	pop	{r4, pc}
        uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx);
 8007f6e:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
 8007f72:	f7ff ff10 	bl	8007d96 <nmbs_crc_calc>
 8007f76:	4601      	mov	r1, r0
        put_2(nmbs, crc);
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f7ff fda6 	bl	8007aca <put_2>
 8007f7e:	e7f0      	b.n	8007f62 <send_msg+0xc>

08007f80 <send_exception_msg>:
static nmbs_error send_exception_msg(nmbs_t* nmbs, uint8_t exception) {
 8007f80:	b538      	push	{r3, r4, r5, lr}
 8007f82:	4604      	mov	r4, r0
 8007f84:	460d      	mov	r5, r1
    nmbs->msg.fc += 0x80;
 8007f86:	f890 3107 	ldrb.w	r3, [r0, #263]	; 0x107
 8007f8a:	3b80      	subs	r3, #128	; 0x80
 8007f8c:	f880 3107 	strb.w	r3, [r0, #263]	; 0x107
    put_msg_header(nmbs, 1);
 8007f90:	2101      	movs	r1, #1
 8007f92:	f7ff fe83 	bl	8007c9c <put_msg_header>
    put_1(nmbs, exception);
 8007f96:	4629      	mov	r1, r5
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f7ff fd78 	bl	8007a8e <put_1>
    return send_msg(nmbs);
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f7ff ffd9 	bl	8007f56 <send_msg>
}
 8007fa4:	bd38      	pop	{r3, r4, r5, pc}

08007fa6 <handle_read_discrete>:


#ifndef NMBS_SERVER_DISABLED
#if !defined(NMBS_SERVER_READ_COILS_DISABLED) || !defined(NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED)
static nmbs_error handle_read_discrete(nmbs_t* nmbs,
                                       nmbs_error (*callback)(uint16_t, uint16_t, nmbs_bitfield, uint8_t, void*)) {
 8007fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007faa:	b0c2      	sub	sp, #264	; 0x108
 8007fac:	4604      	mov	r4, r0
 8007fae:	460f      	mov	r7, r1
    nmbs_error err = recv(nmbs, 4);
 8007fb0:	2104      	movs	r1, #4
 8007fb2:	f7ff fdd3 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	b118      	cbz	r0, 8007fc2 <handle_read_discrete+0x1c>
    else {
        return recv_read_discrete_res(nmbs, NULL);
    }

    return NMBS_ERROR_NONE;
}
 8007fba:	4628      	mov	r0, r5
 8007fbc:	b042      	add	sp, #264	; 0x108
 8007fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t address = get_2(nmbs);
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f7ff fd76 	bl	8007ab4 <get_2>
 8007fc8:	4680      	mov	r8, r0
    uint16_t quantity = get_2(nmbs);
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f7ff fd72 	bl	8007ab4 <get_2>
 8007fd0:	4606      	mov	r6, r0
    err = recv_msg_footer(nmbs);
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f7ff fefd 	bl	8007dd2 <recv_msg_footer>
    if (err != NMBS_ERROR_NONE)
 8007fd8:	4605      	mov	r5, r0
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d1ed      	bne.n	8007fba <handle_read_discrete+0x14>
    if (!nmbs->msg.ignored) {
 8007fde:	f894 310b 	ldrb.w	r3, [r4, #267]	; 0x10b
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d166      	bne.n	80080b4 <handle_read_discrete+0x10e>
        if (quantity < 1 || quantity > 2000)
 8007fe6:	1e73      	subs	r3, r6, #1
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007fee:	d221      	bcs.n	8008034 <handle_read_discrete+0x8e>
        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8007ff0:	eb08 0306 	add.w	r3, r8, r6
 8007ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ff8:	d822      	bhi.n	8008040 <handle_read_discrete+0x9a>
        if (callback) {
 8007ffa:	2f00      	cmp	r7, #0
 8007ffc:	d054      	beq.n	80080a8 <handle_read_discrete+0x102>
            nmbs_bitfield bitfield = {0};
 8007ffe:	2100      	movs	r1, #0
 8008000:	9103      	str	r1, [sp, #12]
 8008002:	22f6      	movs	r2, #246	; 0xf6
 8008004:	a804      	add	r0, sp, #16
 8008006:	f001 fa81 	bl	800950c <memset>
            err = callback(address, quantity, bitfield, nmbs->msg.unit_id, nmbs->platform.arg);
 800800a:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
 8008014:	aa03      	add	r2, sp, #12
 8008016:	4631      	mov	r1, r6
 8008018:	4640      	mov	r0, r8
 800801a:	47b8      	blx	r7
            if (err != NMBS_ERROR_NONE) {
 800801c:	4605      	mov	r5, r0
 800801e:	b1d8      	cbz	r0, 8008058 <handle_read_discrete+0xb2>
                if (nmbs_error_is_exception(err))
 8008020:	b2c1      	uxtb	r1, r0
 8008022:	1e4b      	subs	r3, r1, #1
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b03      	cmp	r3, #3
 8008028:	d810      	bhi.n	800804c <handle_read_discrete+0xa6>
                    return send_exception_msg(nmbs, err);
 800802a:	4620      	mov	r0, r4
 800802c:	f7ff ffa8 	bl	8007f80 <send_exception_msg>
 8008030:	4605      	mov	r5, r0
 8008032:	e7c2      	b.n	8007fba <handle_read_discrete+0x14>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8008034:	2103      	movs	r1, #3
 8008036:	4620      	mov	r0, r4
 8008038:	f7ff ffa2 	bl	8007f80 <send_exception_msg>
 800803c:	4605      	mov	r5, r0
 800803e:	e7bc      	b.n	8007fba <handle_read_discrete+0x14>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8008040:	2102      	movs	r1, #2
 8008042:	4620      	mov	r0, r4
 8008044:	f7ff ff9c 	bl	8007f80 <send_exception_msg>
 8008048:	4605      	mov	r5, r0
 800804a:	e7b6      	b.n	8007fba <handle_read_discrete+0x14>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 800804c:	2104      	movs	r1, #4
 800804e:	4620      	mov	r0, r4
 8008050:	f7ff ff96 	bl	8007f80 <send_exception_msg>
 8008054:	4605      	mov	r5, r0
 8008056:	e7b0      	b.n	8007fba <handle_read_discrete+0x14>
            if (!nmbs->msg.broadcast) {
 8008058:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1ac      	bne.n	8007fba <handle_read_discrete+0x14>
                uint8_t discrete_bytes = (quantity + 7) / 8;
 8008060:	3607      	adds	r6, #7
 8008062:	d40c      	bmi.n	800807e <handle_read_discrete+0xd8>
 8008064:	10f7      	asrs	r7, r6, #3
 8008066:	f3c6 06c7 	ubfx	r6, r6, #3, #8
                put_res_header(nmbs, 1 + discrete_bytes);
 800806a:	1c71      	adds	r1, r6, #1
 800806c:	4620      	mov	r0, r4
 800806e:	f7ff fe58 	bl	8007d22 <put_res_header>
                put_1(nmbs, discrete_bytes);
 8008072:	4631      	mov	r1, r6
 8008074:	4620      	mov	r0, r4
 8008076:	f7ff fd0a 	bl	8007a8e <put_1>
                for (int i = 0; i < discrete_bytes; i++) {
 800807a:	2600      	movs	r6, #0
 800807c:	e00a      	b.n	8008094 <handle_read_discrete+0xee>
                uint8_t discrete_bytes = (quantity + 7) / 8;
 800807e:	3607      	adds	r6, #7
 8008080:	e7f0      	b.n	8008064 <handle_read_discrete+0xbe>
                    put_1(nmbs, bitfield[i]);
 8008082:	f506 7384 	add.w	r3, r6, #264	; 0x108
 8008086:	446b      	add	r3, sp
 8008088:	f813 1cfc 	ldrb.w	r1, [r3, #-252]
 800808c:	4620      	mov	r0, r4
 800808e:	f7ff fcfe 	bl	8007a8e <put_1>
                for (int i = 0; i < discrete_bytes; i++) {
 8008092:	3601      	adds	r6, #1
 8008094:	b2fb      	uxtb	r3, r7
 8008096:	429e      	cmp	r6, r3
 8008098:	dbf3      	blt.n	8008082 <handle_read_discrete+0xdc>
                err = send_msg(nmbs);
 800809a:	4620      	mov	r0, r4
 800809c:	f7ff ff5b 	bl	8007f56 <send_msg>
                if (err != NMBS_ERROR_NONE)
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d08a      	beq.n	8007fba <handle_read_discrete+0x14>
                    return err;
 80080a4:	4605      	mov	r5, r0
 80080a6:	e788      	b.n	8007fba <handle_read_discrete+0x14>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 80080a8:	2101      	movs	r1, #1
 80080aa:	4620      	mov	r0, r4
 80080ac:	f7ff ff68 	bl	8007f80 <send_exception_msg>
 80080b0:	4605      	mov	r5, r0
 80080b2:	e782      	b.n	8007fba <handle_read_discrete+0x14>
        return recv_read_discrete_res(nmbs, NULL);
 80080b4:	2100      	movs	r1, #0
 80080b6:	4620      	mov	r0, r4
 80080b8:	f7ff feed 	bl	8007e96 <recv_read_discrete_res>
 80080bc:	4605      	mov	r5, r0
 80080be:	e77c      	b.n	8007fba <handle_read_discrete+0x14>

080080c0 <handle_read_coils>:
}
#endif


#ifndef NMBS_SERVER_READ_COILS_DISABLED
static nmbs_error handle_read_coils(nmbs_t* nmbs) {
 80080c0:	b508      	push	{r3, lr}
    return handle_read_discrete(nmbs, nmbs->callbacks.read_coils);
 80080c2:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 80080c6:	f7ff ff6e 	bl	8007fa6 <handle_read_discrete>
}
 80080ca:	bd08      	pop	{r3, pc}

080080cc <handle_read_discrete_inputs>:
#endif


#ifndef NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED
static nmbs_error handle_read_discrete_inputs(nmbs_t* nmbs) {
 80080cc:	b508      	push	{r3, lr}
    return handle_read_discrete(nmbs, nmbs->callbacks.read_discrete_inputs);
 80080ce:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
 80080d2:	f7ff ff68 	bl	8007fa6 <handle_read_discrete>
}
 80080d6:	bd08      	pop	{r3, pc}

080080d8 <handle_read_registers>:
                                        nmbs_error (*callback)(uint16_t, uint16_t, uint16_t*, uint8_t, void*)) {
 80080d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080dc:	b0c2      	sub	sp, #264	; 0x108
 80080de:	4604      	mov	r4, r0
 80080e0:	460f      	mov	r7, r1
    nmbs_error err = recv(nmbs, 4);
 80080e2:	2104      	movs	r1, #4
 80080e4:	f7ff fd3a 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 80080e8:	4605      	mov	r5, r0
 80080ea:	b118      	cbz	r0, 80080f4 <handle_read_registers+0x1c>
}
 80080ec:	4628      	mov	r0, r5
 80080ee:	b042      	add	sp, #264	; 0x108
 80080f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t address = get_2(nmbs);
 80080f4:	4620      	mov	r0, r4
 80080f6:	f7ff fcdd 	bl	8007ab4 <get_2>
 80080fa:	4680      	mov	r8, r0
    uint16_t quantity = get_2(nmbs);
 80080fc:	4620      	mov	r0, r4
 80080fe:	f7ff fcd9 	bl	8007ab4 <get_2>
 8008102:	4606      	mov	r6, r0
    err = recv_msg_footer(nmbs);
 8008104:	4620      	mov	r0, r4
 8008106:	f7ff fe64 	bl	8007dd2 <recv_msg_footer>
    if (err != NMBS_ERROR_NONE)
 800810a:	4605      	mov	r5, r0
 800810c:	2800      	cmp	r0, #0
 800810e:	d1ed      	bne.n	80080ec <handle_read_registers+0x14>
    if (!nmbs->msg.ignored) {
 8008110:	f894 310b 	ldrb.w	r3, [r4, #267]	; 0x10b
 8008114:	2b00      	cmp	r3, #0
 8008116:	d15e      	bne.n	80081d6 <handle_read_registers+0xfe>
        if (quantity < 1 || quantity > 125)
 8008118:	1e73      	subs	r3, r6, #1
 800811a:	b29b      	uxth	r3, r3
 800811c:	2b7c      	cmp	r3, #124	; 0x7c
 800811e:	d820      	bhi.n	8008162 <handle_read_registers+0x8a>
        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8008120:	eb08 0306 	add.w	r3, r8, r6
 8008124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008128:	d821      	bhi.n	800816e <handle_read_registers+0x96>
        if (callback) {
 800812a:	2f00      	cmp	r7, #0
 800812c:	d04d      	beq.n	80081ca <handle_read_registers+0xf2>
            uint16_t regs[125] = {0};
 800812e:	22fa      	movs	r2, #250	; 0xfa
 8008130:	2100      	movs	r1, #0
 8008132:	a803      	add	r0, sp, #12
 8008134:	f001 f9ea 	bl	800950c <memset>
            err = callback(address, quantity, regs, nmbs->msg.unit_id, nmbs->platform.arg);
 8008138:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
 8008142:	aa03      	add	r2, sp, #12
 8008144:	4631      	mov	r1, r6
 8008146:	4640      	mov	r0, r8
 8008148:	47b8      	blx	r7
            if (err != NMBS_ERROR_NONE) {
 800814a:	4605      	mov	r5, r0
 800814c:	b1d8      	cbz	r0, 8008186 <handle_read_registers+0xae>
                if (nmbs_error_is_exception(err))
 800814e:	b2c1      	uxtb	r1, r0
 8008150:	1e4b      	subs	r3, r1, #1
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b03      	cmp	r3, #3
 8008156:	d810      	bhi.n	800817a <handle_read_registers+0xa2>
                    return send_exception_msg(nmbs, err);
 8008158:	4620      	mov	r0, r4
 800815a:	f7ff ff11 	bl	8007f80 <send_exception_msg>
 800815e:	4605      	mov	r5, r0
 8008160:	e7c4      	b.n	80080ec <handle_read_registers+0x14>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8008162:	2103      	movs	r1, #3
 8008164:	4620      	mov	r0, r4
 8008166:	f7ff ff0b 	bl	8007f80 <send_exception_msg>
 800816a:	4605      	mov	r5, r0
 800816c:	e7be      	b.n	80080ec <handle_read_registers+0x14>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 800816e:	2102      	movs	r1, #2
 8008170:	4620      	mov	r0, r4
 8008172:	f7ff ff05 	bl	8007f80 <send_exception_msg>
 8008176:	4605      	mov	r5, r0
 8008178:	e7b8      	b.n	80080ec <handle_read_registers+0x14>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 800817a:	2104      	movs	r1, #4
 800817c:	4620      	mov	r0, r4
 800817e:	f7ff feff 	bl	8007f80 <send_exception_msg>
 8008182:	4605      	mov	r5, r0
 8008184:	e7b2      	b.n	80080ec <handle_read_registers+0x14>
            if (!nmbs->msg.broadcast) {
 8008186:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1ae      	bne.n	80080ec <handle_read_registers+0x14>
                uint8_t regs_bytes = quantity * 2;
 800818e:	0077      	lsls	r7, r6, #1
 8008190:	b2ff      	uxtb	r7, r7
                put_res_header(nmbs, 1 + regs_bytes);
 8008192:	1c79      	adds	r1, r7, #1
 8008194:	4620      	mov	r0, r4
 8008196:	f7ff fdc4 	bl	8007d22 <put_res_header>
                put_1(nmbs, regs_bytes);
 800819a:	4639      	mov	r1, r7
 800819c:	4620      	mov	r0, r4
 800819e:	f7ff fc76 	bl	8007a8e <put_1>
                for (int i = 0; i < quantity; i++) {
 80081a2:	2700      	movs	r7, #0
 80081a4:	e008      	b.n	80081b8 <handle_read_registers+0xe0>
                    put_2(nmbs, regs[i]);
 80081a6:	ab42      	add	r3, sp, #264	; 0x108
 80081a8:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80081ac:	f833 1cfc 	ldrh.w	r1, [r3, #-252]
 80081b0:	4620      	mov	r0, r4
 80081b2:	f7ff fc8a 	bl	8007aca <put_2>
                for (int i = 0; i < quantity; i++) {
 80081b6:	3701      	adds	r7, #1
 80081b8:	42be      	cmp	r6, r7
 80081ba:	dcf4      	bgt.n	80081a6 <handle_read_registers+0xce>
                err = send_msg(nmbs);
 80081bc:	4620      	mov	r0, r4
 80081be:	f7ff feca 	bl	8007f56 <send_msg>
                if (err != NMBS_ERROR_NONE)
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d092      	beq.n	80080ec <handle_read_registers+0x14>
                    return err;
 80081c6:	4605      	mov	r5, r0
 80081c8:	e790      	b.n	80080ec <handle_read_registers+0x14>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 80081ca:	2101      	movs	r1, #1
 80081cc:	4620      	mov	r0, r4
 80081ce:	f7ff fed7 	bl	8007f80 <send_exception_msg>
 80081d2:	4605      	mov	r5, r0
 80081d4:	e78a      	b.n	80080ec <handle_read_registers+0x14>
        return recv_read_registers_res(nmbs, quantity, NULL);
 80081d6:	2200      	movs	r2, #0
 80081d8:	4631      	mov	r1, r6
 80081da:	4620      	mov	r0, r4
 80081dc:	f7ff fe87 	bl	8007eee <recv_read_registers_res>
 80081e0:	4605      	mov	r5, r0
 80081e2:	e783      	b.n	80080ec <handle_read_registers+0x14>

080081e4 <handle_read_holding_registers>:
#endif


#ifndef NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED
static nmbs_error handle_read_holding_registers(nmbs_t* nmbs) {
 80081e4:	b508      	push	{r3, lr}
    return handle_read_registers(nmbs, nmbs->callbacks.read_holding_registers);
 80081e6:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
 80081ea:	f7ff ff75 	bl	80080d8 <handle_read_registers>
}
 80081ee:	bd08      	pop	{r3, pc}

080081f0 <handle_read_input_registers>:
#endif


#ifndef NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED
static nmbs_error handle_read_input_registers(nmbs_t* nmbs) {
 80081f0:	b508      	push	{r3, lr}
    return handle_read_registers(nmbs, nmbs->callbacks.read_input_registers);
 80081f2:	f8d0 1118 	ldr.w	r1, [r0, #280]	; 0x118
 80081f6:	f7ff ff6f 	bl	80080d8 <handle_read_registers>
}
 80081fa:	bd08      	pop	{r3, pc}

080081fc <recv_write_single_coil_res>:
nmbs_error recv_write_single_coil_res(nmbs_t* nmbs, uint16_t address, uint16_t value_req) {
 80081fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008200:	4604      	mov	r4, r0
 8008202:	460e      	mov	r6, r1
 8008204:	4615      	mov	r5, r2
    nmbs_error err = recv_res_header(nmbs);
 8008206:	f7ff fe01 	bl	8007e0c <recv_res_header>
    if (err != NMBS_ERROR_NONE)
 800820a:	b108      	cbz	r0, 8008210 <recv_write_single_coil_res+0x14>
}
 800820c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = recv(nmbs, 4);
 8008210:	2104      	movs	r1, #4
 8008212:	4620      	mov	r0, r4
 8008214:	f7ff fca2 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 8008218:	2800      	cmp	r0, #0
 800821a:	d1f7      	bne.n	800820c <recv_write_single_coil_res+0x10>
    uint16_t address_res = get_2(nmbs);
 800821c:	4620      	mov	r0, r4
 800821e:	f7ff fc49 	bl	8007ab4 <get_2>
 8008222:	4607      	mov	r7, r0
    uint16_t value_res = get_2(nmbs);
 8008224:	4620      	mov	r0, r4
 8008226:	f7ff fc45 	bl	8007ab4 <get_2>
 800822a:	4680      	mov	r8, r0
    err = recv_msg_footer(nmbs);
 800822c:	4620      	mov	r0, r4
 800822e:	f7ff fdd0 	bl	8007dd2 <recv_msg_footer>
    if (err != NMBS_ERROR_NONE)
 8008232:	2800      	cmp	r0, #0
 8008234:	d1ea      	bne.n	800820c <recv_write_single_coil_res+0x10>
    if (address_res != address)
 8008236:	42b7      	cmp	r7, r6
 8008238:	d104      	bne.n	8008244 <recv_write_single_coil_res+0x48>
    if (value_res != value_req)
 800823a:	45a8      	cmp	r8, r5
 800823c:	d0e6      	beq.n	800820c <recv_write_single_coil_res+0x10>
        return NMBS_ERROR_INVALID_RESPONSE;
 800823e:	f06f 0001 	mvn.w	r0, #1
 8008242:	e7e3      	b.n	800820c <recv_write_single_coil_res+0x10>
        return NMBS_ERROR_INVALID_RESPONSE;
 8008244:	f06f 0001 	mvn.w	r0, #1
 8008248:	e7e0      	b.n	800820c <recv_write_single_coil_res+0x10>

0800824a <handle_write_single_coil>:
#endif


#ifndef NMBS_SERVER_WRITE_SINGLE_COIL_DISABLED
static nmbs_error handle_write_single_coil(nmbs_t* nmbs) {
 800824a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824c:	4604      	mov	r4, r0
    nmbs_error err = recv(nmbs, 4);
 800824e:	2104      	movs	r1, #4
 8008250:	f7ff fc84 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 8008254:	4601      	mov	r1, r0
 8008256:	b108      	cbz	r0, 800825c <handle_write_single_coil+0x12>
    else {
        return recv_write_single_coil_res(nmbs, address, value);
    }

    return NMBS_ERROR_NONE;
}
 8008258:	4608      	mov	r0, r1
 800825a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t address = get_2(nmbs);
 800825c:	4620      	mov	r0, r4
 800825e:	f7ff fc29 	bl	8007ab4 <get_2>
 8008262:	4606      	mov	r6, r0
    uint16_t value = get_2(nmbs);
 8008264:	4620      	mov	r0, r4
 8008266:	f7ff fc25 	bl	8007ab4 <get_2>
 800826a:	4605      	mov	r5, r0
    err = recv_msg_footer(nmbs);
 800826c:	4620      	mov	r0, r4
 800826e:	f7ff fdb0 	bl	8007dd2 <recv_msg_footer>
    if (err != NMBS_ERROR_NONE)
 8008272:	4601      	mov	r1, r0
 8008274:	2800      	cmp	r0, #0
 8008276:	d1ef      	bne.n	8008258 <handle_write_single_coil+0xe>
    if (!nmbs->msg.ignored) {
 8008278:	f894 310b 	ldrb.w	r3, [r4, #267]	; 0x10b
 800827c:	2b00      	cmp	r3, #0
 800827e:	d143      	bne.n	8008308 <handle_write_single_coil+0xbe>
        if (nmbs->callbacks.write_single_coil) {
 8008280:	f8d4 711c 	ldr.w	r7, [r4, #284]	; 0x11c
 8008284:	2f00      	cmp	r7, #0
 8008286:	d039      	beq.n	80082fc <handle_write_single_coil+0xb2>
            if (value != 0 && value != 0xFF00)
 8008288:	b115      	cbz	r5, 8008290 <handle_write_single_coil+0x46>
 800828a:	f5b5 4f7f 	cmp.w	r5, #65280	; 0xff00
 800828e:	d114      	bne.n	80082ba <handle_write_single_coil+0x70>
            err = nmbs->callbacks.write_single_coil(address, value == 0 ? false : true, nmbs->msg.unit_id,
 8008290:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 8008294:	f894 2106 	ldrb.w	r2, [r4, #262]	; 0x106
 8008298:	1e29      	subs	r1, r5, #0
 800829a:	bf18      	it	ne
 800829c:	2101      	movne	r1, #1
 800829e:	4630      	mov	r0, r6
 80082a0:	47b8      	blx	r7
            if (err != NMBS_ERROR_NONE) {
 80082a2:	4601      	mov	r1, r0
 80082a4:	b1a8      	cbz	r0, 80082d2 <handle_write_single_coil+0x88>
                if (nmbs_error_is_exception(err))
 80082a6:	b2c1      	uxtb	r1, r0
 80082a8:	1e4b      	subs	r3, r1, #1
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	2b03      	cmp	r3, #3
 80082ae:	d80a      	bhi.n	80082c6 <handle_write_single_coil+0x7c>
                    return send_exception_msg(nmbs, err);
 80082b0:	4620      	mov	r0, r4
 80082b2:	f7ff fe65 	bl	8007f80 <send_exception_msg>
 80082b6:	4601      	mov	r1, r0
 80082b8:	e7ce      	b.n	8008258 <handle_write_single_coil+0xe>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80082ba:	2103      	movs	r1, #3
 80082bc:	4620      	mov	r0, r4
 80082be:	f7ff fe5f 	bl	8007f80 <send_exception_msg>
 80082c2:	4601      	mov	r1, r0
 80082c4:	e7c8      	b.n	8008258 <handle_write_single_coil+0xe>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80082c6:	2104      	movs	r1, #4
 80082c8:	4620      	mov	r0, r4
 80082ca:	f7ff fe59 	bl	8007f80 <send_exception_msg>
 80082ce:	4601      	mov	r1, r0
 80082d0:	e7c2      	b.n	8008258 <handle_write_single_coil+0xe>
            if (!nmbs->msg.broadcast) {
 80082d2:	f894 210a 	ldrb.w	r2, [r4, #266]	; 0x10a
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	d1be      	bne.n	8008258 <handle_write_single_coil+0xe>
                put_res_header(nmbs, 4);
 80082da:	2104      	movs	r1, #4
 80082dc:	4620      	mov	r0, r4
 80082de:	f7ff fd20 	bl	8007d22 <put_res_header>
                put_2(nmbs, address);
 80082e2:	4631      	mov	r1, r6
 80082e4:	4620      	mov	r0, r4
 80082e6:	f7ff fbf0 	bl	8007aca <put_2>
                put_2(nmbs, value);
 80082ea:	4629      	mov	r1, r5
 80082ec:	4620      	mov	r0, r4
 80082ee:	f7ff fbec 	bl	8007aca <put_2>
                err = send_msg(nmbs);
 80082f2:	4620      	mov	r0, r4
 80082f4:	f7ff fe2f 	bl	8007f56 <send_msg>
 80082f8:	4601      	mov	r1, r0
                if (err != NMBS_ERROR_NONE)
 80082fa:	e7ad      	b.n	8008258 <handle_write_single_coil+0xe>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 80082fc:	2101      	movs	r1, #1
 80082fe:	4620      	mov	r0, r4
 8008300:	f7ff fe3e 	bl	8007f80 <send_exception_msg>
 8008304:	4601      	mov	r1, r0
 8008306:	e7a7      	b.n	8008258 <handle_write_single_coil+0xe>
        return recv_write_single_coil_res(nmbs, address, value);
 8008308:	462a      	mov	r2, r5
 800830a:	4631      	mov	r1, r6
 800830c:	4620      	mov	r0, r4
 800830e:	f7ff ff75 	bl	80081fc <recv_write_single_coil_res>
 8008312:	4601      	mov	r1, r0
 8008314:	e7a0      	b.n	8008258 <handle_write_single_coil+0xe>

08008316 <recv_write_single_register_res>:
nmbs_error recv_write_single_register_res(nmbs_t* nmbs, uint16_t address, uint16_t value_req) {
 8008316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800831a:	4604      	mov	r4, r0
 800831c:	460e      	mov	r6, r1
 800831e:	4615      	mov	r5, r2
    nmbs_error err = recv_res_header(nmbs);
 8008320:	f7ff fd74 	bl	8007e0c <recv_res_header>
    if (err != NMBS_ERROR_NONE)
 8008324:	b108      	cbz	r0, 800832a <recv_write_single_register_res+0x14>
}
 8008326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = recv(nmbs, 4);
 800832a:	2104      	movs	r1, #4
 800832c:	4620      	mov	r0, r4
 800832e:	f7ff fc15 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 8008332:	2800      	cmp	r0, #0
 8008334:	d1f7      	bne.n	8008326 <recv_write_single_register_res+0x10>
    uint16_t address_res = get_2(nmbs);
 8008336:	4620      	mov	r0, r4
 8008338:	f7ff fbbc 	bl	8007ab4 <get_2>
 800833c:	4607      	mov	r7, r0
    uint16_t value_res = get_2(nmbs);
 800833e:	4620      	mov	r0, r4
 8008340:	f7ff fbb8 	bl	8007ab4 <get_2>
 8008344:	4680      	mov	r8, r0
    err = recv_msg_footer(nmbs);
 8008346:	4620      	mov	r0, r4
 8008348:	f7ff fd43 	bl	8007dd2 <recv_msg_footer>
    if (err != NMBS_ERROR_NONE)
 800834c:	2800      	cmp	r0, #0
 800834e:	d1ea      	bne.n	8008326 <recv_write_single_register_res+0x10>
    if (address_res != address)
 8008350:	42b7      	cmp	r7, r6
 8008352:	d104      	bne.n	800835e <recv_write_single_register_res+0x48>
    if (value_res != value_req)
 8008354:	45a8      	cmp	r8, r5
 8008356:	d0e6      	beq.n	8008326 <recv_write_single_register_res+0x10>
        return NMBS_ERROR_INVALID_RESPONSE;
 8008358:	f06f 0001 	mvn.w	r0, #1
 800835c:	e7e3      	b.n	8008326 <recv_write_single_register_res+0x10>
        return NMBS_ERROR_INVALID_RESPONSE;
 800835e:	f06f 0001 	mvn.w	r0, #1
 8008362:	e7e0      	b.n	8008326 <recv_write_single_register_res+0x10>

08008364 <handle_write_single_register>:
#endif


#ifndef NMBS_SERVER_WRITE_SINGLE_REGISTER_DISABLED
static nmbs_error handle_write_single_register(nmbs_t* nmbs) {
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	4604      	mov	r4, r0
    nmbs_error err = recv(nmbs, 4);
 8008368:	2104      	movs	r1, #4
 800836a:	f7ff fbf7 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 800836e:	4601      	mov	r1, r0
 8008370:	b108      	cbz	r0, 8008376 <handle_write_single_register+0x12>
    else {
        return recv_write_single_register_res(nmbs, address, value);
    }

    return NMBS_ERROR_NONE;
}
 8008372:	4608      	mov	r0, r1
 8008374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t address = get_2(nmbs);
 8008376:	4620      	mov	r0, r4
 8008378:	f7ff fb9c 	bl	8007ab4 <get_2>
 800837c:	4606      	mov	r6, r0
    uint16_t value = get_2(nmbs);
 800837e:	4620      	mov	r0, r4
 8008380:	f7ff fb98 	bl	8007ab4 <get_2>
 8008384:	4605      	mov	r5, r0
    err = recv_msg_footer(nmbs);
 8008386:	4620      	mov	r0, r4
 8008388:	f7ff fd23 	bl	8007dd2 <recv_msg_footer>
    if (err != NMBS_ERROR_NONE)
 800838c:	4601      	mov	r1, r0
 800838e:	2800      	cmp	r0, #0
 8008390:	d1ef      	bne.n	8008372 <handle_write_single_register+0xe>
    if (!nmbs->msg.ignored) {
 8008392:	f894 310b 	ldrb.w	r3, [r4, #267]	; 0x10b
 8008396:	bbb3      	cbnz	r3, 8008406 <handle_write_single_register+0xa2>
        if (nmbs->callbacks.write_single_register) {
 8008398:	f8d4 7120 	ldr.w	r7, [r4, #288]	; 0x120
 800839c:	b36f      	cbz	r7, 80083fa <handle_write_single_register+0x96>
            err = nmbs->callbacks.write_single_register(address, value, nmbs->msg.unit_id, nmbs->platform.arg);
 800839e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 80083a2:	f894 2106 	ldrb.w	r2, [r4, #262]	; 0x106
 80083a6:	4629      	mov	r1, r5
 80083a8:	4630      	mov	r0, r6
 80083aa:	47b8      	blx	r7
            if (err != NMBS_ERROR_NONE) {
 80083ac:	4601      	mov	r1, r0
 80083ae:	b178      	cbz	r0, 80083d0 <handle_write_single_register+0x6c>
                if (nmbs_error_is_exception(err))
 80083b0:	b2c1      	uxtb	r1, r0
 80083b2:	1e4b      	subs	r3, r1, #1
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b03      	cmp	r3, #3
 80083b8:	d804      	bhi.n	80083c4 <handle_write_single_register+0x60>
                    return send_exception_msg(nmbs, err);
 80083ba:	4620      	mov	r0, r4
 80083bc:	f7ff fde0 	bl	8007f80 <send_exception_msg>
 80083c0:	4601      	mov	r1, r0
 80083c2:	e7d6      	b.n	8008372 <handle_write_single_register+0xe>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80083c4:	2104      	movs	r1, #4
 80083c6:	4620      	mov	r0, r4
 80083c8:	f7ff fdda 	bl	8007f80 <send_exception_msg>
 80083cc:	4601      	mov	r1, r0
 80083ce:	e7d0      	b.n	8008372 <handle_write_single_register+0xe>
            if (!nmbs->msg.broadcast) {
 80083d0:	f894 210a 	ldrb.w	r2, [r4, #266]	; 0x10a
 80083d4:	2a00      	cmp	r2, #0
 80083d6:	d1cc      	bne.n	8008372 <handle_write_single_register+0xe>
                put_res_header(nmbs, 4);
 80083d8:	2104      	movs	r1, #4
 80083da:	4620      	mov	r0, r4
 80083dc:	f7ff fca1 	bl	8007d22 <put_res_header>
                put_2(nmbs, address);
 80083e0:	4631      	mov	r1, r6
 80083e2:	4620      	mov	r0, r4
 80083e4:	f7ff fb71 	bl	8007aca <put_2>
                put_2(nmbs, value);
 80083e8:	4629      	mov	r1, r5
 80083ea:	4620      	mov	r0, r4
 80083ec:	f7ff fb6d 	bl	8007aca <put_2>
                err = send_msg(nmbs);
 80083f0:	4620      	mov	r0, r4
 80083f2:	f7ff fdb0 	bl	8007f56 <send_msg>
 80083f6:	4601      	mov	r1, r0
                if (err != NMBS_ERROR_NONE)
 80083f8:	e7bb      	b.n	8008372 <handle_write_single_register+0xe>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 80083fa:	2101      	movs	r1, #1
 80083fc:	4620      	mov	r0, r4
 80083fe:	f7ff fdbf 	bl	8007f80 <send_exception_msg>
 8008402:	4601      	mov	r1, r0
 8008404:	e7b5      	b.n	8008372 <handle_write_single_register+0xe>
        return recv_write_single_register_res(nmbs, address, value);
 8008406:	462a      	mov	r2, r5
 8008408:	4631      	mov	r1, r6
 800840a:	4620      	mov	r0, r4
 800840c:	f7ff ff83 	bl	8008316 <recv_write_single_register_res>
 8008410:	4601      	mov	r1, r0
 8008412:	e7ae      	b.n	8008372 <handle_write_single_register+0xe>

08008414 <recv_write_multiple_coils_res>:
nmbs_error recv_write_multiple_coils_res(nmbs_t* nmbs, uint16_t address, uint16_t quantity) {
 8008414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008418:	4604      	mov	r4, r0
 800841a:	460e      	mov	r6, r1
 800841c:	4615      	mov	r5, r2
    nmbs_error err = recv_res_header(nmbs);
 800841e:	f7ff fcf5 	bl	8007e0c <recv_res_header>
    if (err != NMBS_ERROR_NONE)
 8008422:	b108      	cbz	r0, 8008428 <recv_write_multiple_coils_res+0x14>
}
 8008424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = recv(nmbs, 4);
 8008428:	2104      	movs	r1, #4
 800842a:	4620      	mov	r0, r4
 800842c:	f7ff fb96 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 8008430:	2800      	cmp	r0, #0
 8008432:	d1f7      	bne.n	8008424 <recv_write_multiple_coils_res+0x10>
    uint16_t address_res = get_2(nmbs);
 8008434:	4620      	mov	r0, r4
 8008436:	f7ff fb3d 	bl	8007ab4 <get_2>
 800843a:	4607      	mov	r7, r0
    uint16_t quantity_res = get_2(nmbs);
 800843c:	4620      	mov	r0, r4
 800843e:	f7ff fb39 	bl	8007ab4 <get_2>
 8008442:	4680      	mov	r8, r0
    err = recv_msg_footer(nmbs);
 8008444:	4620      	mov	r0, r4
 8008446:	f7ff fcc4 	bl	8007dd2 <recv_msg_footer>
    if (err != NMBS_ERROR_NONE)
 800844a:	2800      	cmp	r0, #0
 800844c:	d1ea      	bne.n	8008424 <recv_write_multiple_coils_res+0x10>
    if (address_res != address)
 800844e:	42b7      	cmp	r7, r6
 8008450:	d104      	bne.n	800845c <recv_write_multiple_coils_res+0x48>
    if (quantity_res != quantity)
 8008452:	45a8      	cmp	r8, r5
 8008454:	d0e6      	beq.n	8008424 <recv_write_multiple_coils_res+0x10>
        return NMBS_ERROR_INVALID_RESPONSE;
 8008456:	f06f 0001 	mvn.w	r0, #1
 800845a:	e7e3      	b.n	8008424 <recv_write_multiple_coils_res+0x10>
        return NMBS_ERROR_INVALID_RESPONSE;
 800845c:	f06f 0001 	mvn.w	r0, #1
 8008460:	e7e0      	b.n	8008424 <recv_write_multiple_coils_res+0x10>

08008462 <handle_write_multiple_coils>:
#endif


#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
static nmbs_error handle_write_multiple_coils(nmbs_t* nmbs) {
 8008462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008466:	b0c2      	sub	sp, #264	; 0x108
 8008468:	4605      	mov	r5, r0
    nmbs_error err = recv(nmbs, 5);
 800846a:	2105      	movs	r1, #5
 800846c:	f7ff fb76 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 8008470:	4601      	mov	r1, r0
 8008472:	b118      	cbz	r0, 800847c <handle_write_multiple_coils+0x1a>
    else {
        return recv_write_multiple_coils_res(nmbs, address, quantity);
    }

    return NMBS_ERROR_NONE;
}
 8008474:	4608      	mov	r0, r1
 8008476:	b042      	add	sp, #264	; 0x108
 8008478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t address = get_2(nmbs);
 800847c:	4628      	mov	r0, r5
 800847e:	f7ff fb19 	bl	8007ab4 <get_2>
 8008482:	4680      	mov	r8, r0
    uint16_t quantity = get_2(nmbs);
 8008484:	4628      	mov	r0, r5
 8008486:	f7ff fb15 	bl	8007ab4 <get_2>
 800848a:	4607      	mov	r7, r0
    uint8_t coils_bytes = get_1(nmbs);
 800848c:	4628      	mov	r0, r5
 800848e:	f7ff faf6 	bl	8007a7e <get_1>
 8008492:	4606      	mov	r6, r0
    err = recv(nmbs, coils_bytes);
 8008494:	b281      	uxth	r1, r0
 8008496:	4628      	mov	r0, r5
 8008498:	f7ff fb60 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 800849c:	4601      	mov	r1, r0
 800849e:	2800      	cmp	r0, #0
 80084a0:	d1e8      	bne.n	8008474 <handle_write_multiple_coils+0x12>
    nmbs_bitfield coils = {0};
 80084a2:	2400      	movs	r4, #0
 80084a4:	9403      	str	r4, [sp, #12]
 80084a6:	22f6      	movs	r2, #246	; 0xf6
 80084a8:	4621      	mov	r1, r4
 80084aa:	a804      	add	r0, sp, #16
 80084ac:	f001 f82e 	bl	800950c <memset>
    for (int i = 0; i < coils_bytes; i++) {
 80084b0:	e008      	b.n	80084c4 <handle_write_multiple_coils+0x62>
        coils[i] = get_1(nmbs);
 80084b2:	4628      	mov	r0, r5
 80084b4:	f7ff fae3 	bl	8007a7e <get_1>
 80084b8:	f504 7384 	add.w	r3, r4, #264	; 0x108
 80084bc:	446b      	add	r3, sp
 80084be:	f803 0cfc 	strb.w	r0, [r3, #-252]
    for (int i = 0; i < coils_bytes; i++) {
 80084c2:	3401      	adds	r4, #1
 80084c4:	42a6      	cmp	r6, r4
 80084c6:	dcf4      	bgt.n	80084b2 <handle_write_multiple_coils+0x50>
    err = recv_msg_footer(nmbs);
 80084c8:	4628      	mov	r0, r5
 80084ca:	f7ff fc82 	bl	8007dd2 <recv_msg_footer>
    if (err != NMBS_ERROR_NONE)
 80084ce:	4601      	mov	r1, r0
 80084d0:	2800      	cmp	r0, #0
 80084d2:	d1cf      	bne.n	8008474 <handle_write_multiple_coils+0x12>
    if (!nmbs->msg.ignored) {
 80084d4:	f895 310b 	ldrb.w	r3, [r5, #267]	; 0x10b
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d164      	bne.n	80085a6 <handle_write_multiple_coils+0x144>
        if (quantity < 1 || quantity > 0x07B0)
 80084dc:	1e7b      	subs	r3, r7, #1
 80084de:	b29b      	uxth	r3, r3
 80084e0:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 80084e4:	d223      	bcs.n	800852e <handle_write_multiple_coils+0xcc>
        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 80084e6:	eb08 0307 	add.w	r3, r8, r7
 80084ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084ee:	d824      	bhi.n	800853a <handle_write_multiple_coils+0xd8>
        if (coils_bytes == 0)
 80084f0:	b34e      	cbz	r6, 8008546 <handle_write_multiple_coils+0xe4>
        if ((quantity + 7) / 8 != coils_bytes)
 80084f2:	1dfb      	adds	r3, r7, #7
 80084f4:	d42d      	bmi.n	8008552 <handle_write_multiple_coils+0xf0>
 80084f6:	ebb6 0fe3 	cmp.w	r6, r3, asr #3
 80084fa:	d12c      	bne.n	8008556 <handle_write_multiple_coils+0xf4>
        if (nmbs->callbacks.write_multiple_coils) {
 80084fc:	f8d5 4124 	ldr.w	r4, [r5, #292]	; 0x124
 8008500:	2c00      	cmp	r4, #0
 8008502:	d04a      	beq.n	800859a <handle_write_multiple_coils+0x138>
            err = nmbs->callbacks.write_multiple_coils(address, quantity, coils, nmbs->msg.unit_id, nmbs->platform.arg);
 8008504:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	f895 3106 	ldrb.w	r3, [r5, #262]	; 0x106
 800850e:	aa03      	add	r2, sp, #12
 8008510:	4639      	mov	r1, r7
 8008512:	4640      	mov	r0, r8
 8008514:	47a0      	blx	r4
            if (err != NMBS_ERROR_NONE) {
 8008516:	4601      	mov	r1, r0
 8008518:	b348      	cbz	r0, 800856e <handle_write_multiple_coils+0x10c>
                if (nmbs_error_is_exception(err))
 800851a:	b2c1      	uxtb	r1, r0
 800851c:	1e4b      	subs	r3, r1, #1
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b03      	cmp	r3, #3
 8008522:	d81e      	bhi.n	8008562 <handle_write_multiple_coils+0x100>
                    return send_exception_msg(nmbs, err);
 8008524:	4628      	mov	r0, r5
 8008526:	f7ff fd2b 	bl	8007f80 <send_exception_msg>
 800852a:	4601      	mov	r1, r0
 800852c:	e7a2      	b.n	8008474 <handle_write_multiple_coils+0x12>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 800852e:	2103      	movs	r1, #3
 8008530:	4628      	mov	r0, r5
 8008532:	f7ff fd25 	bl	8007f80 <send_exception_msg>
 8008536:	4601      	mov	r1, r0
 8008538:	e79c      	b.n	8008474 <handle_write_multiple_coils+0x12>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 800853a:	2102      	movs	r1, #2
 800853c:	4628      	mov	r0, r5
 800853e:	f7ff fd1f 	bl	8007f80 <send_exception_msg>
 8008542:	4601      	mov	r1, r0
 8008544:	e796      	b.n	8008474 <handle_write_multiple_coils+0x12>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8008546:	2103      	movs	r1, #3
 8008548:	4628      	mov	r0, r5
 800854a:	f7ff fd19 	bl	8007f80 <send_exception_msg>
 800854e:	4601      	mov	r1, r0
 8008550:	e790      	b.n	8008474 <handle_write_multiple_coils+0x12>
        if ((quantity + 7) / 8 != coils_bytes)
 8008552:	3307      	adds	r3, #7
 8008554:	e7cf      	b.n	80084f6 <handle_write_multiple_coils+0x94>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8008556:	2103      	movs	r1, #3
 8008558:	4628      	mov	r0, r5
 800855a:	f7ff fd11 	bl	8007f80 <send_exception_msg>
 800855e:	4601      	mov	r1, r0
 8008560:	e788      	b.n	8008474 <handle_write_multiple_coils+0x12>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8008562:	2104      	movs	r1, #4
 8008564:	4628      	mov	r0, r5
 8008566:	f7ff fd0b 	bl	8007f80 <send_exception_msg>
 800856a:	4601      	mov	r1, r0
 800856c:	e782      	b.n	8008474 <handle_write_multiple_coils+0x12>
            if (!nmbs->msg.broadcast) {
 800856e:	f895 210a 	ldrb.w	r2, [r5, #266]	; 0x10a
 8008572:	2a00      	cmp	r2, #0
 8008574:	f47f af7e 	bne.w	8008474 <handle_write_multiple_coils+0x12>
                put_res_header(nmbs, 4);
 8008578:	2104      	movs	r1, #4
 800857a:	4628      	mov	r0, r5
 800857c:	f7ff fbd1 	bl	8007d22 <put_res_header>
                put_2(nmbs, address);
 8008580:	4641      	mov	r1, r8
 8008582:	4628      	mov	r0, r5
 8008584:	f7ff faa1 	bl	8007aca <put_2>
                put_2(nmbs, quantity);
 8008588:	4639      	mov	r1, r7
 800858a:	4628      	mov	r0, r5
 800858c:	f7ff fa9d 	bl	8007aca <put_2>
                err = send_msg(nmbs);
 8008590:	4628      	mov	r0, r5
 8008592:	f7ff fce0 	bl	8007f56 <send_msg>
 8008596:	4601      	mov	r1, r0
                if (err != NMBS_ERROR_NONE)
 8008598:	e76c      	b.n	8008474 <handle_write_multiple_coils+0x12>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 800859a:	2101      	movs	r1, #1
 800859c:	4628      	mov	r0, r5
 800859e:	f7ff fcef 	bl	8007f80 <send_exception_msg>
 80085a2:	4601      	mov	r1, r0
 80085a4:	e766      	b.n	8008474 <handle_write_multiple_coils+0x12>
        return recv_write_multiple_coils_res(nmbs, address, quantity);
 80085a6:	463a      	mov	r2, r7
 80085a8:	4641      	mov	r1, r8
 80085aa:	4628      	mov	r0, r5
 80085ac:	f7ff ff32 	bl	8008414 <recv_write_multiple_coils_res>
 80085b0:	4601      	mov	r1, r0
 80085b2:	e75f      	b.n	8008474 <handle_write_multiple_coils+0x12>

080085b4 <recv_write_multiple_registers_res>:
nmbs_error recv_write_multiple_registers_res(nmbs_t* nmbs, uint16_t address, uint16_t quantity) {
 80085b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b8:	4604      	mov	r4, r0
 80085ba:	460e      	mov	r6, r1
 80085bc:	4615      	mov	r5, r2
    nmbs_error err = recv_res_header(nmbs);
 80085be:	f7ff fc25 	bl	8007e0c <recv_res_header>
    if (err != NMBS_ERROR_NONE)
 80085c2:	b108      	cbz	r0, 80085c8 <recv_write_multiple_registers_res+0x14>
}
 80085c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = recv(nmbs, 4);
 80085c8:	2104      	movs	r1, #4
 80085ca:	4620      	mov	r0, r4
 80085cc:	f7ff fac6 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 80085d0:	2800      	cmp	r0, #0
 80085d2:	d1f7      	bne.n	80085c4 <recv_write_multiple_registers_res+0x10>
    uint16_t address_res = get_2(nmbs);
 80085d4:	4620      	mov	r0, r4
 80085d6:	f7ff fa6d 	bl	8007ab4 <get_2>
 80085da:	4607      	mov	r7, r0
    uint16_t quantity_res = get_2(nmbs);
 80085dc:	4620      	mov	r0, r4
 80085de:	f7ff fa69 	bl	8007ab4 <get_2>
 80085e2:	4680      	mov	r8, r0
    err = recv_msg_footer(nmbs);
 80085e4:	4620      	mov	r0, r4
 80085e6:	f7ff fbf4 	bl	8007dd2 <recv_msg_footer>
    if (err != NMBS_ERROR_NONE)
 80085ea:	2800      	cmp	r0, #0
 80085ec:	d1ea      	bne.n	80085c4 <recv_write_multiple_registers_res+0x10>
    if (address_res != address)
 80085ee:	42b7      	cmp	r7, r6
 80085f0:	d104      	bne.n	80085fc <recv_write_multiple_registers_res+0x48>
    if (quantity_res != quantity)
 80085f2:	45a8      	cmp	r8, r5
 80085f4:	d0e6      	beq.n	80085c4 <recv_write_multiple_registers_res+0x10>
        return NMBS_ERROR_INVALID_RESPONSE;
 80085f6:	f06f 0001 	mvn.w	r0, #1
 80085fa:	e7e3      	b.n	80085c4 <recv_write_multiple_registers_res+0x10>
        return NMBS_ERROR_INVALID_RESPONSE;
 80085fc:	f06f 0001 	mvn.w	r0, #1
 8008600:	e7e0      	b.n	80085c4 <recv_write_multiple_registers_res+0x10>

08008602 <handle_write_multiple_registers>:
#endif


#ifndef NMBS_SERVER_WRITE_MULTIPLE_REGISTERS_DISABLED
static nmbs_error handle_write_multiple_registers(nmbs_t* nmbs) {
 8008602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008606:	b0c0      	sub	sp, #256	; 0x100
 8008608:	4605      	mov	r5, r0
    nmbs_error err = recv(nmbs, 5);
 800860a:	2105      	movs	r1, #5
 800860c:	f7ff faa6 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 8008610:	4601      	mov	r1, r0
 8008612:	b118      	cbz	r0, 800861c <handle_write_multiple_registers+0x1a>
    else {
        return recv_write_multiple_registers_res(nmbs, address, quantity);
    }

    return NMBS_ERROR_NONE;
}
 8008614:	4608      	mov	r0, r1
 8008616:	b040      	add	sp, #256	; 0x100
 8008618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t address = get_2(nmbs);
 800861c:	4628      	mov	r0, r5
 800861e:	f7ff fa49 	bl	8007ab4 <get_2>
 8008622:	4680      	mov	r8, r0
    uint16_t quantity = get_2(nmbs);
 8008624:	4628      	mov	r0, r5
 8008626:	f7ff fa45 	bl	8007ab4 <get_2>
 800862a:	4607      	mov	r7, r0
    uint8_t registers_bytes = get_1(nmbs);
 800862c:	4628      	mov	r0, r5
 800862e:	f7ff fa26 	bl	8007a7e <get_1>
 8008632:	4606      	mov	r6, r0
    err = recv(nmbs, registers_bytes);
 8008634:	b281      	uxth	r1, r0
 8008636:	4628      	mov	r0, r5
 8008638:	f7ff fa90 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 800863c:	4601      	mov	r1, r0
 800863e:	2800      	cmp	r0, #0
 8008640:	d1e8      	bne.n	8008614 <handle_write_multiple_registers+0x12>
    for (int i = 0; i < registers_bytes / 2; i++) {
 8008642:	2400      	movs	r4, #0
 8008644:	e008      	b.n	8008658 <handle_write_multiple_registers+0x56>
        registers[i] = get_2(nmbs);
 8008646:	4628      	mov	r0, r5
 8008648:	f7ff fa34 	bl	8007ab4 <get_2>
 800864c:	ab40      	add	r3, sp, #256	; 0x100
 800864e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8008652:	f823 0cf8 	strh.w	r0, [r3, #-248]
    for (int i = 0; i < registers_bytes / 2; i++) {
 8008656:	3401      	adds	r4, #1
 8008658:	f3c6 0347 	ubfx	r3, r6, #1, #8
 800865c:	42a3      	cmp	r3, r4
 800865e:	dcf2      	bgt.n	8008646 <handle_write_multiple_registers+0x44>
    err = recv_msg_footer(nmbs);
 8008660:	4628      	mov	r0, r5
 8008662:	f7ff fbb6 	bl	8007dd2 <recv_msg_footer>
    if (err != NMBS_ERROR_NONE)
 8008666:	4601      	mov	r1, r0
 8008668:	2800      	cmp	r0, #0
 800866a:	d1d3      	bne.n	8008614 <handle_write_multiple_registers+0x12>
    if (!nmbs->msg.ignored) {
 800866c:	f895 310b 	ldrb.w	r3, [r5, #267]	; 0x10b
 8008670:	2b00      	cmp	r3, #0
 8008672:	d15e      	bne.n	8008732 <handle_write_multiple_registers+0x130>
        if (quantity < 1 || quantity > 0x007B)
 8008674:	1e7b      	subs	r3, r7, #1
 8008676:	b29b      	uxth	r3, r3
 8008678:	2b7a      	cmp	r3, #122	; 0x7a
 800867a:	d821      	bhi.n	80086c0 <handle_write_multiple_registers+0xbe>
        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 800867c:	eb08 0307 	add.w	r3, r8, r7
 8008680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008684:	d822      	bhi.n	80086cc <handle_write_multiple_registers+0xca>
        if (registers_bytes == 0)
 8008686:	b33e      	cbz	r6, 80086d8 <handle_write_multiple_registers+0xd6>
        if (registers_bytes != quantity * 2)
 8008688:	ebb6 0f47 	cmp.w	r6, r7, lsl #1
 800868c:	d12a      	bne.n	80086e4 <handle_write_multiple_registers+0xe2>
        if (nmbs->callbacks.write_multiple_registers) {
 800868e:	f8d5 4128 	ldr.w	r4, [r5, #296]	; 0x128
 8008692:	2c00      	cmp	r4, #0
 8008694:	d047      	beq.n	8008726 <handle_write_multiple_registers+0x124>
            err = nmbs->callbacks.write_multiple_registers(address, quantity, registers, nmbs->msg.unit_id,
 8008696:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	f895 3106 	ldrb.w	r3, [r5, #262]	; 0x106
 80086a0:	aa02      	add	r2, sp, #8
 80086a2:	4639      	mov	r1, r7
 80086a4:	4640      	mov	r0, r8
 80086a6:	47a0      	blx	r4
            if (err != NMBS_ERROR_NONE) {
 80086a8:	4601      	mov	r1, r0
 80086aa:	b338      	cbz	r0, 80086fc <handle_write_multiple_registers+0xfa>
                if (nmbs_error_is_exception(err))
 80086ac:	b2c1      	uxtb	r1, r0
 80086ae:	1e4b      	subs	r3, r1, #1
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	d81c      	bhi.n	80086f0 <handle_write_multiple_registers+0xee>
                    return send_exception_msg(nmbs, err);
 80086b6:	4628      	mov	r0, r5
 80086b8:	f7ff fc62 	bl	8007f80 <send_exception_msg>
 80086bc:	4601      	mov	r1, r0
 80086be:	e7a9      	b.n	8008614 <handle_write_multiple_registers+0x12>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80086c0:	2103      	movs	r1, #3
 80086c2:	4628      	mov	r0, r5
 80086c4:	f7ff fc5c 	bl	8007f80 <send_exception_msg>
 80086c8:	4601      	mov	r1, r0
 80086ca:	e7a3      	b.n	8008614 <handle_write_multiple_registers+0x12>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 80086cc:	2102      	movs	r1, #2
 80086ce:	4628      	mov	r0, r5
 80086d0:	f7ff fc56 	bl	8007f80 <send_exception_msg>
 80086d4:	4601      	mov	r1, r0
 80086d6:	e79d      	b.n	8008614 <handle_write_multiple_registers+0x12>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80086d8:	2103      	movs	r1, #3
 80086da:	4628      	mov	r0, r5
 80086dc:	f7ff fc50 	bl	8007f80 <send_exception_msg>
 80086e0:	4601      	mov	r1, r0
 80086e2:	e797      	b.n	8008614 <handle_write_multiple_registers+0x12>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80086e4:	2103      	movs	r1, #3
 80086e6:	4628      	mov	r0, r5
 80086e8:	f7ff fc4a 	bl	8007f80 <send_exception_msg>
 80086ec:	4601      	mov	r1, r0
 80086ee:	e791      	b.n	8008614 <handle_write_multiple_registers+0x12>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80086f0:	2104      	movs	r1, #4
 80086f2:	4628      	mov	r0, r5
 80086f4:	f7ff fc44 	bl	8007f80 <send_exception_msg>
 80086f8:	4601      	mov	r1, r0
 80086fa:	e78b      	b.n	8008614 <handle_write_multiple_registers+0x12>
            if (!nmbs->msg.broadcast) {
 80086fc:	f895 210a 	ldrb.w	r2, [r5, #266]	; 0x10a
 8008700:	2a00      	cmp	r2, #0
 8008702:	d187      	bne.n	8008614 <handle_write_multiple_registers+0x12>
                put_res_header(nmbs, 4);
 8008704:	2104      	movs	r1, #4
 8008706:	4628      	mov	r0, r5
 8008708:	f7ff fb0b 	bl	8007d22 <put_res_header>
                put_2(nmbs, address);
 800870c:	4641      	mov	r1, r8
 800870e:	4628      	mov	r0, r5
 8008710:	f7ff f9db 	bl	8007aca <put_2>
                put_2(nmbs, quantity);
 8008714:	4639      	mov	r1, r7
 8008716:	4628      	mov	r0, r5
 8008718:	f7ff f9d7 	bl	8007aca <put_2>
                err = send_msg(nmbs);
 800871c:	4628      	mov	r0, r5
 800871e:	f7ff fc1a 	bl	8007f56 <send_msg>
 8008722:	4601      	mov	r1, r0
                if (err != NMBS_ERROR_NONE)
 8008724:	e776      	b.n	8008614 <handle_write_multiple_registers+0x12>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8008726:	2101      	movs	r1, #1
 8008728:	4628      	mov	r0, r5
 800872a:	f7ff fc29 	bl	8007f80 <send_exception_msg>
 800872e:	4601      	mov	r1, r0
 8008730:	e770      	b.n	8008614 <handle_write_multiple_registers+0x12>
        return recv_write_multiple_registers_res(nmbs, address, quantity);
 8008732:	463a      	mov	r2, r7
 8008734:	4641      	mov	r1, r8
 8008736:	4628      	mov	r0, r5
 8008738:	f7ff ff3c 	bl	80085b4 <recv_write_multiple_registers_res>
 800873c:	4601      	mov	r1, r0
 800873e:	e769      	b.n	8008614 <handle_write_multiple_registers+0x12>

08008740 <recv_read_file_record_res>:
nmbs_error recv_read_file_record_res(nmbs_t* nmbs, uint16_t* registers, uint16_t count) {
 8008740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008744:	4604      	mov	r4, r0
 8008746:	460f      	mov	r7, r1
 8008748:	4616      	mov	r6, r2
    nmbs_error err = recv_res_header(nmbs);
 800874a:	f7ff fb5f 	bl	8007e0c <recv_res_header>
    if (err != NMBS_ERROR_NONE)
 800874e:	4605      	mov	r5, r0
 8008750:	b110      	cbz	r0, 8008758 <recv_read_file_record_res+0x18>
}
 8008752:	4628      	mov	r0, r5
 8008754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    err = recv(nmbs, 1);
 8008758:	2101      	movs	r1, #1
 800875a:	4620      	mov	r0, r4
 800875c:	f7ff f9fe 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 8008760:	4605      	mov	r5, r0
 8008762:	2800      	cmp	r0, #0
 8008764:	d1f5      	bne.n	8008752 <recv_read_file_record_res+0x12>
    uint8_t response_size = get_1(nmbs);
 8008766:	4620      	mov	r0, r4
 8008768:	f7ff f989 	bl	8007a7e <get_1>
    err = recv(nmbs, response_size);
 800876c:	b281      	uxth	r1, r0
 800876e:	4620      	mov	r0, r4
 8008770:	f7ff f9f4 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 8008774:	4605      	mov	r5, r0
 8008776:	2800      	cmp	r0, #0
 8008778:	d1eb      	bne.n	8008752 <recv_read_file_record_res+0x12>
    uint8_t subreq_data_size = get_1(nmbs) - 1;
 800877a:	4620      	mov	r0, r4
 800877c:	f7ff f97f 	bl	8007a7e <get_1>
 8008780:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8008784:	fa5f f888 	uxtb.w	r8, r8
    uint8_t subreq_reference_type = get_1(nmbs);
 8008788:	4620      	mov	r0, r4
 800878a:	f7ff f978 	bl	8007a7e <get_1>
 800878e:	4681      	mov	r9, r0
    uint16_t* subreq_record_data = (uint16_t*) get_n(nmbs, subreq_data_size);
 8008790:	4641      	mov	r1, r8
 8008792:	4620      	mov	r0, r4
 8008794:	f7ff f9a3 	bl	8007ade <get_n>
 8008798:	4682      	mov	sl, r0
    err = recv_msg_footer(nmbs);
 800879a:	4620      	mov	r0, r4
 800879c:	f7ff fb19 	bl	8007dd2 <recv_msg_footer>
    if (err != NMBS_ERROR_NONE)
 80087a0:	4605      	mov	r5, r0
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d1d5      	bne.n	8008752 <recv_read_file_record_res+0x12>
    if (registers) {
 80087a6:	2f00      	cmp	r7, #0
 80087a8:	d0d3      	beq.n	8008752 <recv_read_file_record_res+0x12>
        if (subreq_reference_type != 6)
 80087aa:	f1b9 0f06 	cmp.w	r9, #6
 80087ae:	d10d      	bne.n	80087cc <recv_read_file_record_res+0x8c>
        if (count != (subreq_data_size / 2))
 80087b0:	ea4f 0158 	mov.w	r1, r8, lsr #1
 80087b4:	ebb6 0f58 	cmp.w	r6, r8, lsr #1
 80087b8:	d10b      	bne.n	80087d2 <recv_read_file_record_res+0x92>
        swap_regs(subreq_record_data, subreq_data_size / 2);
 80087ba:	4650      	mov	r0, sl
 80087bc:	f7ff f9ac 	bl	8007b18 <swap_regs>
        memcpy(registers, subreq_record_data, subreq_data_size);
 80087c0:	4642      	mov	r2, r8
 80087c2:	4651      	mov	r1, sl
 80087c4:	4638      	mov	r0, r7
 80087c6:	f000 fee5 	bl	8009594 <memcpy>
 80087ca:	e7c2      	b.n	8008752 <recv_read_file_record_res+0x12>
            return NMBS_ERROR_INVALID_RESPONSE;
 80087cc:	f06f 0501 	mvn.w	r5, #1
 80087d0:	e7bf      	b.n	8008752 <recv_read_file_record_res+0x12>
            return NMBS_ERROR_INVALID_RESPONSE;
 80087d2:	f06f 0501 	mvn.w	r5, #1
 80087d6:	e7bc      	b.n	8008752 <recv_read_file_record_res+0x12>

080087d8 <handle_read_file_record>:
#endif

#ifndef NMBS_SERVER_READ_FILE_RECORD_DISABLED
static nmbs_error handle_read_file_record(nmbs_t* nmbs) {
 80087d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087dc:	b083      	sub	sp, #12
 80087de:	af02      	add	r7, sp, #8
 80087e0:	4604      	mov	r4, r0
    nmbs_error err = recv(nmbs, 1);
 80087e2:	2101      	movs	r1, #1
 80087e4:	f7ff f9ba 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 80087e8:	4680      	mov	r8, r0
 80087ea:	b120      	cbz	r0, 80087f6 <handle_read_file_record+0x1e>
    else {
        return recv_read_file_record_res(nmbs, NULL, 0);
    }

    return NMBS_ERROR_NONE;
}
 80087ec:	4640      	mov	r0, r8
 80087ee:	3704      	adds	r7, #4
 80087f0:	46bd      	mov	sp, r7
 80087f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t request_size = get_1(nmbs);
 80087f6:	4620      	mov	r0, r4
 80087f8:	f7ff f941 	bl	8007a7e <get_1>
 80087fc:	4683      	mov	fp, r0
    err = recv(nmbs, request_size);
 80087fe:	b281      	uxth	r1, r0
 8008800:	4620      	mov	r0, r4
 8008802:	f7ff f9ab 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 8008806:	4680      	mov	r8, r0
 8008808:	2800      	cmp	r0, #0
 800880a:	d1ef      	bne.n	80087ec <handle_read_file_record+0x14>
    const uint8_t subreq_count = request_size / subreq_header_size;
 800880c:	4e80      	ldr	r6, [pc, #512]	; (8008a10 <handle_read_file_record+0x238>)
 800880e:	fba6 360b 	umull	r3, r6, r6, fp
 8008812:	ebab 0306 	sub.w	r3, fp, r6
 8008816:	eb06 0653 	add.w	r6, r6, r3, lsr #1
 800881a:	f3c6 0687 	ubfx	r6, r6, #2, #8
    subreq[subreq_count];
 800881e:	466b      	mov	r3, sp
 8008820:	eba3 03c6 	sub.w	r3, r3, r6, lsl #3
 8008824:	469d      	mov	sp, r3
 8008826:	ad02      	add	r5, sp, #8
    for (uint8_t i = 0; i < subreq_count; i++) {
 8008828:	f04f 0800 	mov.w	r8, #0
    uint8_t response_data_size = 0;
 800882c:	46c2      	mov	sl, r8
    for (uint8_t i = 0; i < subreq_count; i++) {
 800882e:	e01e      	b.n	800886e <handle_read_file_record+0x96>
        subreq[i].reference_type = get_1(nmbs);
 8008830:	4620      	mov	r0, r4
 8008832:	f7ff f924 	bl	8007a7e <get_1>
 8008836:	f805 0038 	strb.w	r0, [r5, r8, lsl #3]
        subreq[i].file_number = get_2(nmbs);
 800883a:	4620      	mov	r0, r4
 800883c:	f7ff f93a 	bl	8007ab4 <get_2>
 8008840:	eb05 09c8 	add.w	r9, r5, r8, lsl #3
 8008844:	f8a9 0002 	strh.w	r0, [r9, #2]
        subreq[i].record_number = get_2(nmbs);
 8008848:	4620      	mov	r0, r4
 800884a:	f7ff f933 	bl	8007ab4 <get_2>
 800884e:	f8a9 0004 	strh.w	r0, [r9, #4]
        subreq[i].record_length = get_2(nmbs);
 8008852:	4620      	mov	r0, r4
 8008854:	f7ff f92e 	bl	8007ab4 <get_2>
 8008858:	f8a9 0006 	strh.w	r0, [r9, #6]
        response_data_size += 2 + subreq[i].record_length * 2;
 800885c:	3001      	adds	r0, #1
 800885e:	eb0a 0040 	add.w	r0, sl, r0, lsl #1
 8008862:	fa5f fa80 	uxtb.w	sl, r0
    for (uint8_t i = 0; i < subreq_count; i++) {
 8008866:	f108 0801 	add.w	r8, r8, #1
 800886a:	fa5f f888 	uxtb.w	r8, r8
 800886e:	45b0      	cmp	r8, r6
 8008870:	d3de      	bcc.n	8008830 <handle_read_file_record+0x58>
    discard_n(nmbs, request_size % subreq_header_size);
 8008872:	4967      	ldr	r1, [pc, #412]	; (8008a10 <handle_read_file_record+0x238>)
 8008874:	fba1 310b 	umull	r3, r1, r1, fp
 8008878:	ebab 0301 	sub.w	r3, fp, r1
 800887c:	eb01 0153 	add.w	r1, r1, r3, lsr #1
 8008880:	0889      	lsrs	r1, r1, #2
 8008882:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8008886:	ebab 0101 	sub.w	r1, fp, r1
 800888a:	fa5f f981 	uxtb.w	r9, r1
 800888e:	4649      	mov	r1, r9
 8008890:	4620      	mov	r0, r4
 8008892:	f7ff f909 	bl	8007aa8 <discard_n>
    err = recv_msg_footer(nmbs);
 8008896:	4620      	mov	r0, r4
 8008898:	f7ff fa9b 	bl	8007dd2 <recv_msg_footer>
    if (err != NMBS_ERROR_NONE)
 800889c:	4680      	mov	r8, r0
 800889e:	2800      	cmp	r0, #0
 80088a0:	d1a4      	bne.n	80087ec <handle_read_file_record+0x14>
    if (!nmbs->msg.ignored) {
 80088a2:	f894 310b 	ldrb.w	r3, [r4, #267]	; 0x10b
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f040 80aa 	bne.w	8008a00 <handle_read_file_record+0x228>
        if (request_size % subreq_header_size)
 80088ac:	f1b9 0f00 	cmp.w	r9, #0
 80088b0:	d108      	bne.n	80088c4 <handle_read_file_record+0xec>
        if (request_size < 0x07 || request_size > 0xF5)
 80088b2:	f1ab 0b07 	sub.w	fp, fp, #7
 80088b6:	fa5f fb8b 	uxtb.w	fp, fp
 80088ba:	f1bb 0fee 	cmp.w	fp, #238	; 0xee
 80088be:	d807      	bhi.n	80088d0 <handle_read_file_record+0xf8>
        for (uint8_t i = 0; i < subreq_count; i++) {
 80088c0:	464b      	mov	r3, r9
 80088c2:	e01f      	b.n	8008904 <handle_read_file_record+0x12c>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80088c4:	2103      	movs	r1, #3
 80088c6:	4620      	mov	r0, r4
 80088c8:	f7ff fb5a 	bl	8007f80 <send_exception_msg>
 80088cc:	4680      	mov	r8, r0
 80088ce:	e78d      	b.n	80087ec <handle_read_file_record+0x14>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80088d0:	2103      	movs	r1, #3
 80088d2:	4620      	mov	r0, r4
 80088d4:	f7ff fb54 	bl	8007f80 <send_exception_msg>
 80088d8:	4680      	mov	r8, r0
 80088da:	e787      	b.n	80087ec <handle_read_file_record+0x14>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 80088dc:	2102      	movs	r1, #2
 80088de:	4620      	mov	r0, r4
 80088e0:	f7ff fb4e 	bl	8007f80 <send_exception_msg>
 80088e4:	4680      	mov	r8, r0
 80088e6:	e781      	b.n	80087ec <handle_read_file_record+0x14>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 80088e8:	2102      	movs	r1, #2
 80088ea:	4620      	mov	r0, r4
 80088ec:	f7ff fb48 	bl	8007f80 <send_exception_msg>
 80088f0:	4680      	mov	r8, r0
 80088f2:	e77b      	b.n	80087ec <handle_read_file_record+0x14>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 80088f4:	2102      	movs	r1, #2
 80088f6:	4620      	mov	r0, r4
 80088f8:	f7ff fb42 	bl	8007f80 <send_exception_msg>
 80088fc:	4680      	mov	r8, r0
 80088fe:	e775      	b.n	80087ec <handle_read_file_record+0x14>
        for (uint8_t i = 0; i < subreq_count; i++) {
 8008900:	3301      	adds	r3, #1
 8008902:	b2db      	uxtb	r3, r3
 8008904:	42b3      	cmp	r3, r6
 8008906:	d21a      	bcs.n	800893e <handle_read_file_record+0x166>
            if (subreq[i].reference_type != 0x06)
 8008908:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 800890c:	2906      	cmp	r1, #6
 800890e:	d1e5      	bne.n	80088dc <handle_read_file_record+0x104>
            if (subreq[i].file_number == 0x0000)
 8008910:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8008914:	8849      	ldrh	r1, [r1, #2]
 8008916:	2900      	cmp	r1, #0
 8008918:	d0e6      	beq.n	80088e8 <handle_read_file_record+0x110>
            if (subreq[i].record_number > 0x270F)
 800891a:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 800891e:	8888      	ldrh	r0, [r1, #4]
 8008920:	f242 710f 	movw	r1, #9999	; 0x270f
 8008924:	4288      	cmp	r0, r1
 8008926:	d8e5      	bhi.n	80088f4 <handle_read_file_record+0x11c>
            if (subreq[i].record_length > 124)
 8008928:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800892c:	88d2      	ldrh	r2, [r2, #6]
 800892e:	2a7c      	cmp	r2, #124	; 0x7c
 8008930:	d9e6      	bls.n	8008900 <handle_read_file_record+0x128>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8008932:	2102      	movs	r1, #2
 8008934:	4620      	mov	r0, r4
 8008936:	f7ff fb23 	bl	8007f80 <send_exception_msg>
 800893a:	4680      	mov	r8, r0
 800893c:	e756      	b.n	80087ec <handle_read_file_record+0x14>
        put_res_header(nmbs, response_data_size);
 800893e:	4651      	mov	r1, sl
 8008940:	4620      	mov	r0, r4
 8008942:	f7ff f9ee 	bl	8007d22 <put_res_header>
        put_1(nmbs, response_data_size);
 8008946:	4651      	mov	r1, sl
 8008948:	4620      	mov	r0, r4
 800894a:	f7ff f8a0 	bl	8007a8e <put_1>
        if (nmbs->callbacks.read_file_record) {
 800894e:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8008952:	2b00      	cmp	r3, #0
 8008954:	d044      	beq.n	80089e0 <handle_read_file_record+0x208>
            for (uint8_t i = 0; i < subreq_count; i++) {
 8008956:	45b1      	cmp	r9, r6
 8008958:	d248      	bcs.n	80089ec <handle_read_file_record+0x214>
                uint16_t subreq_data_size = subreq[i].record_length * 2;
 800895a:	eb05 0ac9 	add.w	sl, r5, r9, lsl #3
 800895e:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8008962:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8008966:	fa1f fb8b 	uxth.w	fp, fp
                put_1(nmbs, subreq_data_size + 1);
 800896a:	f10b 0101 	add.w	r1, fp, #1
 800896e:	b2c9      	uxtb	r1, r1
 8008970:	4620      	mov	r0, r4
 8008972:	f7ff f88c 	bl	8007a8e <put_1>
                put_1(nmbs, 0x06);    // add Reference Type const
 8008976:	2106      	movs	r1, #6
 8008978:	4620      	mov	r0, r4
 800897a:	f7ff f888 	bl	8007a8e <put_1>
                uint16_t* subreq_data = (uint16_t*) get_n(nmbs, subreq_data_size);
 800897e:	4659      	mov	r1, fp
 8008980:	4620      	mov	r0, r4
 8008982:	f7ff f8ac 	bl	8007ade <get_n>
 8008986:	4683      	mov	fp, r0
                err = nmbs->callbacks.read_file_record(subreq[i].file_number, subreq[i].record_number, subreq_data,
 8008988:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800898c:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8008990:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8008994:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 8008998:	9201      	str	r2, [sp, #4]
 800899a:	f894 2106 	ldrb.w	r2, [r4, #262]	; 0x106
 800899e:	9200      	str	r2, [sp, #0]
 80089a0:	465a      	mov	r2, fp
 80089a2:	f8d4 c12c 	ldr.w	ip, [r4, #300]	; 0x12c
 80089a6:	47e0      	blx	ip
                if (err != NMBS_ERROR_NONE) {
 80089a8:	b950      	cbnz	r0, 80089c0 <handle_read_file_record+0x1e8>
                swap_regs(subreq_data, subreq[i].record_length);
 80089aa:	eb05 03c9 	add.w	r3, r5, r9, lsl #3
 80089ae:	88d9      	ldrh	r1, [r3, #6]
 80089b0:	4658      	mov	r0, fp
 80089b2:	f7ff f8b1 	bl	8007b18 <swap_regs>
            for (uint8_t i = 0; i < subreq_count; i++) {
 80089b6:	f109 0901 	add.w	r9, r9, #1
 80089ba:	fa5f f989 	uxtb.w	r9, r9
 80089be:	e7ca      	b.n	8008956 <handle_read_file_record+0x17e>
                    if (nmbs_error_is_exception(err))
 80089c0:	b2c1      	uxtb	r1, r0
 80089c2:	1e4b      	subs	r3, r1, #1
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b03      	cmp	r3, #3
 80089c8:	d804      	bhi.n	80089d4 <handle_read_file_record+0x1fc>
                        return send_exception_msg(nmbs, err);
 80089ca:	4620      	mov	r0, r4
 80089cc:	f7ff fad8 	bl	8007f80 <send_exception_msg>
 80089d0:	4680      	mov	r8, r0
 80089d2:	e70b      	b.n	80087ec <handle_read_file_record+0x14>
                    return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80089d4:	2104      	movs	r1, #4
 80089d6:	4620      	mov	r0, r4
 80089d8:	f7ff fad2 	bl	8007f80 <send_exception_msg>
 80089dc:	4680      	mov	r8, r0
 80089de:	e705      	b.n	80087ec <handle_read_file_record+0x14>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 80089e0:	2101      	movs	r1, #1
 80089e2:	4620      	mov	r0, r4
 80089e4:	f7ff facc 	bl	8007f80 <send_exception_msg>
 80089e8:	4680      	mov	r8, r0
 80089ea:	e6ff      	b.n	80087ec <handle_read_file_record+0x14>
        if (!nmbs->msg.broadcast) {
 80089ec:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f47f aefb 	bne.w	80087ec <handle_read_file_record+0x14>
            err = send_msg(nmbs);
 80089f6:	4620      	mov	r0, r4
 80089f8:	f7ff faad 	bl	8007f56 <send_msg>
 80089fc:	4680      	mov	r8, r0
            if (err != NMBS_ERROR_NONE)
 80089fe:	e6f5      	b.n	80087ec <handle_read_file_record+0x14>
        return recv_read_file_record_res(nmbs, NULL, 0);
 8008a00:	2200      	movs	r2, #0
 8008a02:	4611      	mov	r1, r2
 8008a04:	4620      	mov	r0, r4
 8008a06:	f7ff fe9b 	bl	8008740 <recv_read_file_record_res>
 8008a0a:	4680      	mov	r8, r0
 8008a0c:	e6ee      	b.n	80087ec <handle_read_file_record+0x14>
 8008a0e:	bf00      	nop
 8008a10:	24924925 	.word	0x24924925

08008a14 <recv_write_file_record_res>:
                                      const uint16_t* registers, uint16_t count) {
 8008a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a18:	b085      	sub	sp, #20
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	460e      	mov	r6, r1
 8008a1e:	4617      	mov	r7, r2
 8008a20:	461d      	mov	r5, r3
    nmbs_error err = recv_res_header(nmbs);
 8008a22:	f7ff f9f3 	bl	8007e0c <recv_res_header>
    if (err != NMBS_ERROR_NONE)
 8008a26:	4680      	mov	r8, r0
 8008a28:	b118      	cbz	r0, 8008a32 <recv_write_file_record_res+0x1e>
}
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	b005      	add	sp, #20
 8008a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = recv(nmbs, 1);
 8008a32:	2101      	movs	r1, #1
 8008a34:	4620      	mov	r0, r4
 8008a36:	f7ff f891 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 8008a3a:	4680      	mov	r8, r0
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	d1f4      	bne.n	8008a2a <recv_write_file_record_res+0x16>
    uint8_t response_size = get_1(nmbs);
 8008a40:	4620      	mov	r0, r4
 8008a42:	f7ff f81c 	bl	8007a7e <get_1>
    err = recv(nmbs, response_size);
 8008a46:	b281      	uxth	r1, r0
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f7ff f887 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 8008a4e:	4680      	mov	r8, r0
 8008a50:	2800      	cmp	r0, #0
 8008a52:	d1ea      	bne.n	8008a2a <recv_write_file_record_res+0x16>
    uint8_t subreq_reference_type = get_1(nmbs);
 8008a54:	4620      	mov	r0, r4
 8008a56:	f7ff f812 	bl	8007a7e <get_1>
 8008a5a:	9001      	str	r0, [sp, #4]
    uint16_t subreq_file_number = get_2(nmbs);
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f7ff f829 	bl	8007ab4 <get_2>
 8008a62:	9002      	str	r0, [sp, #8]
    uint16_t subreq_record_number = get_2(nmbs);
 8008a64:	4620      	mov	r0, r4
 8008a66:	f7ff f825 	bl	8007ab4 <get_2>
 8008a6a:	9003      	str	r0, [sp, #12]
    uint16_t subreq_record_length = get_2(nmbs);
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f7ff f821 	bl	8007ab4 <get_2>
 8008a72:	4681      	mov	r9, r0
    uint16_t subreq_data_size = subreq_record_length * 2;
 8008a74:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 8008a78:	fa1f fa8a 	uxth.w	sl, sl
    uint16_t* subreq_record_data = (uint16_t*) get_n(nmbs, subreq_data_size);
 8008a7c:	4651      	mov	r1, sl
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f7ff f82d 	bl	8007ade <get_n>
 8008a84:	4683      	mov	fp, r0
    err = recv_msg_footer(nmbs);
 8008a86:	4620      	mov	r0, r4
 8008a88:	f7ff f9a3 	bl	8007dd2 <recv_msg_footer>
    if (err != NMBS_ERROR_NONE)
 8008a8c:	4680      	mov	r8, r0
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	d1cb      	bne.n	8008a2a <recv_write_file_record_res+0x16>
    if (registers) {
 8008a92:	2d00      	cmp	r5, #0
 8008a94:	d0c9      	beq.n	8008a2a <recv_write_file_record_res+0x16>
        if (subreq_reference_type != 6)
 8008a96:	9b01      	ldr	r3, [sp, #4]
 8008a98:	2b06      	cmp	r3, #6
 8008a9a:	d117      	bne.n	8008acc <recv_write_file_record_res+0xb8>
        if (subreq_file_number != file_number)
 8008a9c:	9b02      	ldr	r3, [sp, #8]
 8008a9e:	42b3      	cmp	r3, r6
 8008aa0:	d117      	bne.n	8008ad2 <recv_write_file_record_res+0xbe>
        if (subreq_record_number != record_number)
 8008aa2:	9b03      	ldr	r3, [sp, #12]
 8008aa4:	42bb      	cmp	r3, r7
 8008aa6:	d117      	bne.n	8008ad8 <recv_write_file_record_res+0xc4>
        if (subreq_record_length != count)
 8008aa8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8008aac:	4599      	cmp	r9, r3
 8008aae:	d116      	bne.n	8008ade <recv_write_file_record_res+0xca>
        swap_regs(subreq_record_data, subreq_record_length);
 8008ab0:	4649      	mov	r1, r9
 8008ab2:	4658      	mov	r0, fp
 8008ab4:	f7ff f830 	bl	8007b18 <swap_regs>
        if (memcmp(registers, subreq_record_data, subreq_data_size) != 0)
 8008ab8:	4652      	mov	r2, sl
 8008aba:	4659      	mov	r1, fp
 8008abc:	4628      	mov	r0, r5
 8008abe:	f000 fd15 	bl	80094ec <memcmp>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d0b1      	beq.n	8008a2a <recv_write_file_record_res+0x16>
            return NMBS_ERROR_INVALID_RESPONSE;
 8008ac6:	f06f 0801 	mvn.w	r8, #1
 8008aca:	e7ae      	b.n	8008a2a <recv_write_file_record_res+0x16>
            return NMBS_ERROR_INVALID_RESPONSE;
 8008acc:	f06f 0801 	mvn.w	r8, #1
 8008ad0:	e7ab      	b.n	8008a2a <recv_write_file_record_res+0x16>
            return NMBS_ERROR_INVALID_RESPONSE;
 8008ad2:	f06f 0801 	mvn.w	r8, #1
 8008ad6:	e7a8      	b.n	8008a2a <recv_write_file_record_res+0x16>
            return NMBS_ERROR_INVALID_RESPONSE;
 8008ad8:	f06f 0801 	mvn.w	r8, #1
 8008adc:	e7a5      	b.n	8008a2a <recv_write_file_record_res+0x16>
            return NMBS_ERROR_INVALID_RESPONSE;
 8008ade:	f06f 0801 	mvn.w	r8, #1
 8008ae2:	e7a2      	b.n	8008a2a <recv_write_file_record_res+0x16>

08008ae4 <handle_write_file_record>:
#endif

#ifndef NMBS_SERVER_WRITE_FILE_RECORD_DISABLED
static nmbs_error handle_write_file_record(nmbs_t* nmbs) {
 8008ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae8:	b085      	sub	sp, #20
 8008aea:	4604      	mov	r4, r0
    nmbs_error err = recv(nmbs, 1);
 8008aec:	2101      	movs	r1, #1
 8008aee:	f7ff f835 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 8008af2:	4607      	mov	r7, r0
 8008af4:	b118      	cbz	r0, 8008afe <handle_write_file_record+0x1a>
    else {
        return recv_write_file_record_res(nmbs, 0, 0, NULL, 0);
    }

    return NMBS_ERROR_NONE;
}
 8008af6:	4638      	mov	r0, r7
 8008af8:	b005      	add	sp, #20
 8008afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t request_size = get_1(nmbs);
 8008afe:	4620      	mov	r0, r4
 8008b00:	f7fe ffbd 	bl	8007a7e <get_1>
 8008b04:	4605      	mov	r5, r0
    err = recv(nmbs, request_size);
 8008b06:	fa1f fb80 	uxth.w	fp, r0
 8008b0a:	4659      	mov	r1, fp
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f7ff f825 	bl	8007b5c <recv>
    if (err != NMBS_ERROR_NONE)
 8008b12:	4607      	mov	r7, r0
 8008b14:	2800      	cmp	r0, #0
 8008b16:	d1ee      	bne.n	8008af6 <handle_write_file_record+0x12>
    uint16_t msg_buf_idx = nmbs->msg.buf_idx;
 8008b18:	f8b4 6104 	ldrh.w	r6, [r4, #260]	; 0x104
 8008b1c:	9603      	str	r6, [sp, #12]
    discard_n(nmbs, request_size);
 8008b1e:	4659      	mov	r1, fp
 8008b20:	4620      	mov	r0, r4
 8008b22:	f7fe ffc1 	bl	8007aa8 <discard_n>
    err = recv_msg_footer(nmbs);
 8008b26:	4620      	mov	r0, r4
 8008b28:	f7ff f953 	bl	8007dd2 <recv_msg_footer>
    if (err != NMBS_ERROR_NONE)
 8008b2c:	4607      	mov	r7, r0
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	d1e1      	bne.n	8008af6 <handle_write_file_record+0x12>
    if (!nmbs->msg.ignored) {
 8008b32:	f894 310b 	ldrb.w	r3, [r4, #267]	; 0x10b
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f040 80b7 	bne.w	8008caa <handle_write_file_record+0x1c6>
        nmbs->msg.buf_idx = msg_buf_idx;    // restore context
 8008b3c:	f8a4 6104 	strh.w	r6, [r4, #260]	; 0x104
        if (request_size < 0x07 || request_size > 0xFB)
 8008b40:	3d07      	subs	r5, #7
 8008b42:	b2ed      	uxtb	r5, r5
 8008b44:	2df4      	cmp	r5, #244	; 0xf4
 8008b46:	d876      	bhi.n	8008c36 <handle_write_file_record+0x152>
        uint16_t size = request_size;
 8008b48:	46da      	mov	sl, fp
            uint8_t subreq_reference_type = get_1(nmbs);
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f7fe ff97 	bl	8007a7e <get_1>
 8008b50:	4607      	mov	r7, r0
            uint16_t subreq_file_number_c = get_2(nmbs);
 8008b52:	4620      	mov	r0, r4
 8008b54:	f7fe ffae 	bl	8007ab4 <get_2>
 8008b58:	4680      	mov	r8, r0
            uint16_t subreq_record_number_c = get_2(nmbs);
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f7fe ffaa 	bl	8007ab4 <get_2>
 8008b60:	4681      	mov	r9, r0
            uint16_t subreq_record_length_c = get_2(nmbs);
 8008b62:	4620      	mov	r0, r4
 8008b64:	f7fe ffa6 	bl	8007ab4 <get_2>
 8008b68:	4606      	mov	r6, r0
            discard_n(nmbs, subreq_record_length_c * 2);
 8008b6a:	0045      	lsls	r5, r0, #1
 8008b6c:	b2ad      	uxth	r5, r5
 8008b6e:	4629      	mov	r1, r5
 8008b70:	4620      	mov	r0, r4
 8008b72:	f7fe ff99 	bl	8007aa8 <discard_n>
            if (subreq_reference_type != 0x06)
 8008b76:	2f06      	cmp	r7, #6
 8008b78:	d163      	bne.n	8008c42 <handle_write_file_record+0x15e>
            if (subreq_file_number_c == 0x0000)
 8008b7a:	f1b8 0f00 	cmp.w	r8, #0
 8008b7e:	d066      	beq.n	8008c4e <handle_write_file_record+0x16a>
            if (subreq_record_number_c > 0x270F)
 8008b80:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b84:	4599      	cmp	r9, r3
 8008b86:	d868      	bhi.n	8008c5a <handle_write_file_record+0x176>
            if (subreq_record_length_c > 122)
 8008b88:	2e7a      	cmp	r6, #122	; 0x7a
 8008b8a:	d86c      	bhi.n	8008c66 <handle_write_file_record+0x182>
            size -= (subreq_header_size + subreq_record_length_c * 2);
 8008b8c:	ebaa 0505 	sub.w	r5, sl, r5
 8008b90:	b2ad      	uxth	r5, r5
 8008b92:	3d07      	subs	r5, #7
 8008b94:	fa1f fa85 	uxth.w	sl, r5
        } while (size >= subreq_header_size);
 8008b98:	f1ba 0f06 	cmp.w	sl, #6
 8008b9c:	d8d5      	bhi.n	8008b4a <handle_write_file_record+0x66>
        if (size)
 8008b9e:	f1ba 0f00 	cmp.w	sl, #0
 8008ba2:	d166      	bne.n	8008c72 <handle_write_file_record+0x18e>
        nmbs->msg.buf_idx = msg_buf_idx;    // restore context
 8008ba4:	9b03      	ldr	r3, [sp, #12]
 8008ba6:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
        size = request_size;
 8008baa:	46d9      	mov	r9, fp
            discard_1(nmbs);
 8008bac:	4620      	mov	r0, r4
 8008bae:	f7fe ff75 	bl	8007a9c <discard_1>
            uint16_t subreq_file_number = get_2(nmbs);
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f7fe ff7e 	bl	8007ab4 <get_2>
 8008bb8:	4682      	mov	sl, r0
            uint16_t subreq_record_number = get_2(nmbs);
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f7fe ff7a 	bl	8007ab4 <get_2>
 8008bc0:	4607      	mov	r7, r0
            uint16_t subreq_record_length = get_2(nmbs);
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f7fe ff76 	bl	8007ab4 <get_2>
 8008bc8:	4605      	mov	r5, r0
            uint16_t* subreq_data = get_regs(nmbs, subreq_record_length);
 8008bca:	4601      	mov	r1, r0
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f7fe ff8d 	bl	8007aec <get_regs>
 8008bd2:	4606      	mov	r6, r0
            if (nmbs->callbacks.write_file_record) {
 8008bd4:	f8d4 8130 	ldr.w	r8, [r4, #304]	; 0x130
 8008bd8:	f1b8 0f00 	cmp.w	r8, #0
 8008bdc:	d05f      	beq.n	8008c9e <handle_write_file_record+0x1ba>
                err = nmbs->callbacks.write_file_record(subreq_file_number, subreq_record_number, subreq_data,
 8008bde:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 8008be2:	9301      	str	r3, [sp, #4]
 8008be4:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	462b      	mov	r3, r5
 8008bec:	4602      	mov	r2, r0
 8008bee:	4639      	mov	r1, r7
 8008bf0:	4650      	mov	r0, sl
 8008bf2:	47c0      	blx	r8
                if (err != NMBS_ERROR_NONE) {
 8008bf4:	4607      	mov	r7, r0
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d141      	bne.n	8008c7e <handle_write_file_record+0x19a>
                swap_regs(subreq_data, subreq_record_length);    // restore swapping
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f7fe ff8b 	bl	8007b18 <swap_regs>
            size -= (subreq_header_size + subreq_record_length * 2);
 8008c02:	eba9 0545 	sub.w	r5, r9, r5, lsl #1
 8008c06:	b2ad      	uxth	r5, r5
 8008c08:	3d07      	subs	r5, #7
 8008c0a:	fa1f f985 	uxth.w	r9, r5
        } while (size >= subreq_header_size);
 8008c0e:	f1b9 0f06 	cmp.w	r9, #6
 8008c12:	d8cb      	bhi.n	8008bac <handle_write_file_record+0xc8>
        if (!nmbs->msg.broadcast) {
 8008c14:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f47f af6c 	bne.w	8008af6 <handle_write_file_record+0x12>
            nmbs->msg.buf_idx = msg_buf_idx;
 8008c1e:	9b03      	ldr	r3, [sp, #12]
 8008c20:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
            discard_n(nmbs, request_size);
 8008c24:	4659      	mov	r1, fp
 8008c26:	4620      	mov	r0, r4
 8008c28:	f7fe ff3e 	bl	8007aa8 <discard_n>
            err = send_msg(nmbs);
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f7ff f992 	bl	8007f56 <send_msg>
 8008c32:	4607      	mov	r7, r0
            if (err != NMBS_ERROR_NONE)
 8008c34:	e75f      	b.n	8008af6 <handle_write_file_record+0x12>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8008c36:	2103      	movs	r1, #3
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f7ff f9a1 	bl	8007f80 <send_exception_msg>
 8008c3e:	4607      	mov	r7, r0
 8008c40:	e759      	b.n	8008af6 <handle_write_file_record+0x12>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8008c42:	2102      	movs	r1, #2
 8008c44:	4620      	mov	r0, r4
 8008c46:	f7ff f99b 	bl	8007f80 <send_exception_msg>
 8008c4a:	4607      	mov	r7, r0
 8008c4c:	e753      	b.n	8008af6 <handle_write_file_record+0x12>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8008c4e:	2102      	movs	r1, #2
 8008c50:	4620      	mov	r0, r4
 8008c52:	f7ff f995 	bl	8007f80 <send_exception_msg>
 8008c56:	4607      	mov	r7, r0
 8008c58:	e74d      	b.n	8008af6 <handle_write_file_record+0x12>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8008c5a:	2102      	movs	r1, #2
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f7ff f98f 	bl	8007f80 <send_exception_msg>
 8008c62:	4607      	mov	r7, r0
 8008c64:	e747      	b.n	8008af6 <handle_write_file_record+0x12>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8008c66:	2102      	movs	r1, #2
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f7ff f989 	bl	8007f80 <send_exception_msg>
 8008c6e:	4607      	mov	r7, r0
 8008c70:	e741      	b.n	8008af6 <handle_write_file_record+0x12>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8008c72:	2103      	movs	r1, #3
 8008c74:	4620      	mov	r0, r4
 8008c76:	f7ff f983 	bl	8007f80 <send_exception_msg>
 8008c7a:	4607      	mov	r7, r0
 8008c7c:	e73b      	b.n	8008af6 <handle_write_file_record+0x12>
                    if (nmbs_error_is_exception(err))
 8008c7e:	b2c1      	uxtb	r1, r0
 8008c80:	1e4b      	subs	r3, r1, #1
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d804      	bhi.n	8008c92 <handle_write_file_record+0x1ae>
                        return send_exception_msg(nmbs, err);
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f7ff f979 	bl	8007f80 <send_exception_msg>
 8008c8e:	4607      	mov	r7, r0
 8008c90:	e731      	b.n	8008af6 <handle_write_file_record+0x12>
                    return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8008c92:	2104      	movs	r1, #4
 8008c94:	4620      	mov	r0, r4
 8008c96:	f7ff f973 	bl	8007f80 <send_exception_msg>
 8008c9a:	4607      	mov	r7, r0
 8008c9c:	e72b      	b.n	8008af6 <handle_write_file_record+0x12>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f7ff f96d 	bl	8007f80 <send_exception_msg>
 8008ca6:	4607      	mov	r7, r0
 8008ca8:	e725      	b.n	8008af6 <handle_write_file_record+0x12>
        return recv_write_file_record_res(nmbs, 0, 0, NULL, 0);
 8008caa:	2100      	movs	r1, #0
 8008cac:	9100      	str	r1, [sp, #0]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	460a      	mov	r2, r1
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f7ff feae 	bl	8008a14 <recv_write_file_record_res>
 8008cb8:	4607      	mov	r7, r0
 8008cba:	e71c      	b.n	8008af6 <handle_write_file_record+0x12>

08008cbc <handle_req_fc>:
#endif

static nmbs_error handle_req_fc(nmbs_t* nmbs) {
 8008cbc:	b508      	push	{r3, lr}
    NMBS_DEBUG_PRINT("fc %d\t", nmbs->msg.fc);

    nmbs_error err;
    switch (nmbs->msg.fc) {
 8008cbe:	f890 3107 	ldrb.w	r3, [r0, #263]	; 0x107
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	2b14      	cmp	r3, #20
 8008cc6:	d82a      	bhi.n	8008d1e <handle_req_fc+0x62>
 8008cc8:	e8df f003 	tbb	[pc, r3]
 8008ccc:	14110e0b 	.word	0x14110e0b
 8008cd0:	29291a17 	.word	0x29291a17
 8008cd4:	29292929 	.word	0x29292929
 8008cd8:	201d2929 	.word	0x201d2929
 8008cdc:	23292929 	.word	0x23292929
 8008ce0:	26          	.byte	0x26
 8008ce1:	00          	.byte	0x00
#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
        case 1:
            err = handle_read_coils(nmbs);
 8008ce2:	f7ff f9ed 	bl	80080c0 <handle_read_coils>
            break;
 8008ce6:	e01b      	b.n	8008d20 <handle_req_fc+0x64>
#endif

#ifndef NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED
        case 2:
            err = handle_read_discrete_inputs(nmbs);
 8008ce8:	f7ff f9f0 	bl	80080cc <handle_read_discrete_inputs>
            break;
 8008cec:	e018      	b.n	8008d20 <handle_req_fc+0x64>
#endif

#ifndef NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED
        case 3:
            err = handle_read_holding_registers(nmbs);
 8008cee:	f7ff fa79 	bl	80081e4 <handle_read_holding_registers>
            break;
 8008cf2:	e015      	b.n	8008d20 <handle_req_fc+0x64>
#endif

#ifndef NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED
        case 4:
            err = handle_read_input_registers(nmbs);
 8008cf4:	f7ff fa7c 	bl	80081f0 <handle_read_input_registers>
            break;
 8008cf8:	e012      	b.n	8008d20 <handle_req_fc+0x64>
#endif

#ifndef NMBS_SERVER_WRITE_SINGLE_COIL_DISABLED
        case 5:
            err = handle_write_single_coil(nmbs);
 8008cfa:	f7ff faa6 	bl	800824a <handle_write_single_coil>
            break;
 8008cfe:	e00f      	b.n	8008d20 <handle_req_fc+0x64>
#endif

#ifndef NMBS_SERVER_WRITE_SINGLE_REGISTER_DISABLED
        case 6:
            err = handle_write_single_register(nmbs);
 8008d00:	f7ff fb30 	bl	8008364 <handle_write_single_register>
            break;
 8008d04:	e00c      	b.n	8008d20 <handle_req_fc+0x64>
#endif

#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
        case 15:
            err = handle_write_multiple_coils(nmbs);
 8008d06:	f7ff fbac 	bl	8008462 <handle_write_multiple_coils>
            break;
 8008d0a:	e009      	b.n	8008d20 <handle_req_fc+0x64>
#endif

#ifndef NMBS_SERVER_WRITE_MULTIPLE_REGISTERS_DISABLED
        case 16:
            err = handle_write_multiple_registers(nmbs);
 8008d0c:	f7ff fc79 	bl	8008602 <handle_write_multiple_registers>
            break;
 8008d10:	e006      	b.n	8008d20 <handle_req_fc+0x64>
#endif

#ifndef NMBS_SERVER_READ_FILE_RECORD_DISABLED
        case 20:
            err = handle_read_file_record(nmbs);
 8008d12:	f7ff fd61 	bl	80087d8 <handle_read_file_record>
            break;
 8008d16:	e003      	b.n	8008d20 <handle_req_fc+0x64>
#endif

#ifndef NMBS_SERVER_WRITE_FILE_RECORD_DISABLED
        case 21:
            err = handle_write_file_record(nmbs);
 8008d18:	f7ff fee4 	bl	8008ae4 <handle_write_file_record>
            break;
 8008d1c:	e000      	b.n	8008d20 <handle_req_fc+0x64>
    switch (nmbs->msg.fc) {
 8008d1e:	2001      	movs	r0, #1
        default:
            err = NMBS_EXCEPTION_ILLEGAL_FUNCTION;
    }

    return err;
}
 8008d20:	bd08      	pop	{r3, pc}

08008d22 <nmbs_server_create>:


nmbs_error nmbs_server_create(nmbs_t* nmbs, uint8_t address_rtu, const nmbs_platform_conf* platform_conf,
                              const nmbs_callbacks* callbacks) {
 8008d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d24:	4605      	mov	r5, r0
 8008d26:	460e      	mov	r6, r1
 8008d28:	4611      	mov	r1, r2
 8008d2a:	461c      	mov	r4, r3
    if (platform_conf->transport == NMBS_TRANSPORT_RTU && address_rtu == 0)
 8008d2c:	7813      	ldrb	r3, [r2, #0]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d100      	bne.n	8008d34 <nmbs_server_create+0x12>
 8008d32:	b1be      	cbz	r6, 8008d64 <nmbs_server_create+0x42>
        return NMBS_ERROR_INVALID_ARGUMENT;

    nmbs_error ret = nmbs_create(nmbs, platform_conf);
 8008d34:	4628      	mov	r0, r5
 8008d36:	f7fe fff8 	bl	8007d2a <nmbs_create>
    if (ret != NMBS_ERROR_NONE)
 8008d3a:	4607      	mov	r7, r0
 8008d3c:	b980      	cbnz	r0, 8008d60 <nmbs_server_create+0x3e>
        return ret;

    nmbs->address_rtu = address_rtu;
 8008d3e:	f885 6150 	strb.w	r6, [r5, #336]	; 0x150
    nmbs->callbacks = *callbacks;
 8008d42:	f505 7e86 	add.w	lr, r5, #268	; 0x10c
 8008d46:	46a4      	mov	ip, r4
 8008d48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008d4c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008d50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008d54:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008d58:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8008d5c:	e88e 0007 	stmia.w	lr, {r0, r1, r2}

    return NMBS_ERROR_NONE;
}
 8008d60:	4638      	mov	r0, r7
 8008d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NMBS_ERROR_INVALID_ARGUMENT;
 8008d64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008d68:	e7fa      	b.n	8008d60 <nmbs_server_create+0x3e>

08008d6a <nmbs_server_poll>:


nmbs_error nmbs_server_poll(nmbs_t* nmbs) {
 8008d6a:	b570      	push	{r4, r5, r6, lr}
 8008d6c:	b082      	sub	sp, #8
 8008d6e:	4604      	mov	r4, r0
    msg_state_reset(nmbs);
 8008d70:	f7fe fee4 	bl	8007b3c <msg_state_reset>

    bool first_byte_received = false;
 8008d74:	2300      	movs	r3, #0
 8008d76:	f88d 3007 	strb.w	r3, [sp, #7]
    nmbs_error err = recv_req_header(nmbs, &first_byte_received);
 8008d7a:	f10d 0107 	add.w	r1, sp, #7
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f7fe ffb7 	bl	8007cf2 <recv_req_header>
    if (err != NMBS_ERROR_NONE || nmbs->msg.ignored) {
 8008d84:	4605      	mov	r5, r0
 8008d86:	b910      	cbnz	r0, 8008d8e <nmbs_server_poll+0x24>
 8008d88:	f894 310b 	ldrb.w	r3, [r4, #267]	; 0x10b
 8008d8c:	b143      	cbz	r3, 8008da0 <nmbs_server_poll+0x36>
        if (!first_byte_received && err == NMBS_ERROR_TIMEOUT)
 8008d8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008d92:	b913      	cbnz	r3, 8008d9a <nmbs_server_poll+0x30>
 8008d94:	f115 0f03 	cmn.w	r5, #3
 8008d98:	d020      	beq.n	8008ddc <nmbs_server_poll+0x72>

        return err;
    }

    return NMBS_ERROR_NONE;
}
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	b002      	add	sp, #8
 8008d9e:	bd70      	pop	{r4, r5, r6, pc}
    err = handle_req_fc(nmbs);
 8008da0:	4620      	mov	r0, r4
 8008da2:	f7ff ff8b 	bl	8008cbc <handle_req_fc>
 8008da6:	4606      	mov	r6, r0
    if (err != NMBS_ERROR_NONE && !nmbs_error_is_exception(err)) {
 8008da8:	b2c3      	uxtb	r3, r0
 8008daa:	2b04      	cmp	r3, #4
 8008dac:	d9f5      	bls.n	8008d9a <nmbs_server_poll+0x30>
        if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && err != NMBS_ERROR_TIMEOUT && nmbs->msg.ignored) {
 8008dae:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d001      	beq.n	8008dba <nmbs_server_poll+0x50>
        return err;
 8008db6:	4635      	mov	r5, r6
 8008db8:	e7ef      	b.n	8008d9a <nmbs_server_poll+0x30>
        if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && err != NMBS_ERROR_TIMEOUT && nmbs->msg.ignored) {
 8008dba:	f110 0f03 	cmn.w	r0, #3
 8008dbe:	d0fa      	beq.n	8008db6 <nmbs_server_poll+0x4c>
 8008dc0:	f894 310b 	ldrb.w	r3, [r4, #267]	; 0x10b
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d0f6      	beq.n	8008db6 <nmbs_server_poll+0x4c>
            nmbs->platform.read(nmbs->msg.buf, sizeof(nmbs->msg.buf), 0, nmbs->platform.arg);
 8008dc8:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
 8008dcc:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	47a8      	blx	r5
 8008dda:	e7ec      	b.n	8008db6 <nmbs_server_poll+0x4c>
            return NMBS_ERROR_NONE;
 8008ddc:	2500      	movs	r5, #0
 8008dde:	e7dc      	b.n	8008d9a <nmbs_server_poll+0x30>

08008de0 <mb_slv_send_if>:

void log_put(const char* _log){
	HAL_UART_Transmit(&huart1, (uint8_t*)_log, strlen(_log), 100);
}

int32_t mb_slv_send_if(uint8_t _addr, const uint8_t* _data, uint16_t _len, int32_t _timeout, void* _arg){
 8008de0:	b508      	push	{r3, lr}
 8008de2:	4608      	mov	r0, r1
 8008de4:	4611      	mov	r1, r2
    return 	sv_lora_send_bytes((uint8_t*)_data, _len, _timeout);
 8008de6:	461a      	mov	r2, r3
 8008de8:	f000 f966 	bl	80090b8 <sv_lora_send_bytes>
}
 8008dec:	bd08      	pop	{r3, pc}

08008dee <mb_slv_rcv_if>:

int32_t mb_slv_rcv_if(uint8_t _addr, uint8_t *_buf, uint16_t _max_len, int32_t _timeout, void *_arg) {
 8008dee:	b508      	push	{r3, lr}
 8008df0:	4608      	mov	r0, r1
 8008df2:	4611      	mov	r1, r2
    return sv_lora_get_bytes(_buf, _max_len, _timeout);
 8008df4:	461a      	mov	r2, r3
 8008df6:	b2c9      	uxtb	r1, r1
 8008df8:	f000 f9de 	bl	80091b8 <sv_lora_get_bytes>
}
 8008dfc:	bd08      	pop	{r3, pc}
	...

08008e00 <modbus_cb_write_single_register_cb>:
MODBUS_ERROR_CODE modbus_cb_write_single_register_cb(uint16_t _address,
                                                     uint16_t _value,
                                                     uint8_t _unit_id,
                                                     void* _arg){
//    LOG_DBG(TAG, "Master write single reg %d, value 0x%x", _address, _value);
    if(_address == MODBUS_HOLDING_REG_CONTROL_LIGHT_INDEX){
 8008e00:	b108      	cbz	r0, 8008e06 <modbus_cb_write_single_register_cb+0x6>
        LOG_INF(TAG, "Slave %d change light color to %s", id, getLightColorString(color));
        g_slave_info[id].m_current_light = color;
    }

    return MODBUS_ERROR_NONE;
}
 8008e02:	2000      	movs	r0, #0
 8008e04:	4770      	bx	lr
                                                     void* _arg){
 8008e06:	b530      	push	{r4, r5, lr}
 8008e08:	b083      	sub	sp, #12
        uint16_t id = _value>>8;
 8008e0a:	0a0d      	lsrs	r5, r1, #8
        LOG_INF(TAG, "Slave %d change light color to %s", id, getLightColorString(color));
 8008e0c:	b2cc      	uxtb	r4, r1
#define CYN   "\x1B[36m"
#define WHT   "\x1B[37m"
#define RESET "\x1B[0m"

static inline const char* getLightColorString(uint8_t _color) {
    switch (_color) {
 8008e0e:	2c03      	cmp	r4, #3
 8008e10:	d818      	bhi.n	8008e44 <modbus_cb_write_single_register_cb+0x44>
 8008e12:	e8df f004 	tbb	[pc, r4]
 8008e16:	1902      	.short	0x1902
 8008e18:	1513      	.short	0x1513
 8008e1a:	4b0c      	ldr	r3, [pc, #48]	; (8008e4c <modbus_cb_write_single_register_cb+0x4c>)
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	462b      	mov	r3, r5
 8008e20:	4a0b      	ldr	r2, [pc, #44]	; (8008e50 <modbus_cb_write_single_register_cb+0x50>)
 8008e22:	490c      	ldr	r1, [pc, #48]	; (8008e54 <modbus_cb_write_single_register_cb+0x54>)
 8008e24:	2002      	movs	r0, #2
 8008e26:	f000 f9fd 	bl	8009224 <sm_logger_show>
        g_slave_info[id].m_current_light = color;
 8008e2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e2e:	4b0a      	ldr	r3, [pc, #40]	; (8008e58 <modbus_cb_write_single_register_cb+0x58>)
 8008e30:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008e34:	709c      	strb	r4, [r3, #2]
}
 8008e36:	2000      	movs	r0, #0
 8008e38:	b003      	add	sp, #12
 8008e3a:	bd30      	pop	{r4, r5, pc}
        case LIGHT_GREEN:
            return GRN "GREEN" WHT;
        case LIGHT_RED:
            return RED "RED" WHT;
        case LIGHT_YELLOW:
            return YEL "YELLOW" WHT;
 8008e3c:	4b07      	ldr	r3, [pc, #28]	; (8008e5c <modbus_cb_write_single_register_cb+0x5c>)
 8008e3e:	e7ed      	b.n	8008e1c <modbus_cb_write_single_register_cb+0x1c>
        case LIGHT_NONE_COLOR:
            return WHT "NONE" WHT;
 8008e40:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <modbus_cb_write_single_register_cb+0x60>)
 8008e42:	e7eb      	b.n	8008e1c <modbus_cb_write_single_register_cb+0x1c>
        default:
            return "INVALID";
 8008e44:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <modbus_cb_write_single_register_cb+0x64>)
 8008e46:	e7e9      	b.n	8008e1c <modbus_cb_write_single_register_cb+0x1c>
            return RED "RED" WHT;
 8008e48:	4b07      	ldr	r3, [pc, #28]	; (8008e68 <modbus_cb_write_single_register_cb+0x68>)
 8008e4a:	e7e7      	b.n	8008e1c <modbus_cb_write_single_register_cb+0x1c>
 8008e4c:	08009db4 	.word	0x08009db4
 8008e50:	08009e00 	.word	0x08009e00
 8008e54:	08009e24 	.word	0x08009e24
 8008e58:	20001374 	.word	0x20001374
 8008e5c:	08009dd4 	.word	0x08009dd4
 8008e60:	08009de8 	.word	0x08009de8
 8008e64:	08009df8 	.word	0x08009df8
 8008e68:	08009dc4 	.word	0x08009dc4

08008e6c <modbus_cb_write_multiple_registers_cb>:
MODBUS_ERROR_CODE modbus_cb_write_multiple_registers_cb(uint16_t _address,
                                                        uint16_t _quantity,
                                                        const uint16_t* _registers,
                                                        uint8_t _unit_id,
                                                        void* _arg){
 8008e6c:	b500      	push	{lr}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	4603      	mov	r3, r0
    LOG_DBG(TAG, "Master write multi reg %d quantity %d", _address, _quantity);
 8008e72:	9100      	str	r1, [sp, #0]
 8008e74:	4a04      	ldr	r2, [pc, #16]	; (8008e88 <modbus_cb_write_multiple_registers_cb+0x1c>)
 8008e76:	4905      	ldr	r1, [pc, #20]	; (8008e8c <modbus_cb_write_multiple_registers_cb+0x20>)
 8008e78:	2003      	movs	r0, #3
 8008e7a:	f000 f9d3 	bl	8009224 <sm_logger_show>

    return MODBUS_ERROR_NONE;
}
 8008e7e:	2000      	movs	r0, #0
 8008e80:	b003      	add	sp, #12
 8008e82:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e86:	bf00      	nop
 8008e88:	08009e2c 	.word	0x08009e2c
 8008e8c:	08009e24 	.word	0x08009e24

08008e90 <modbus_cb_read_holding_registers>:

MODBUS_ERROR_CODE modbus_cb_read_holding_registers(uint16_t _address,
                                                   uint16_t _quantity,
                                                   uint16_t *_registers_out,
                                                   uint8_t _unit_id,
                                                   void *_arg) {
 8008e90:	b500      	push	{lr}
 8008e92:	b083      	sub	sp, #12
 8008e94:	4603      	mov	r3, r0
    LOG_DBG(TAG, "Master read holding reg %d quantity %d", _address, _quantity);
 8008e96:	9100      	str	r1, [sp, #0]
 8008e98:	4a04      	ldr	r2, [pc, #16]	; (8008eac <modbus_cb_read_holding_registers+0x1c>)
 8008e9a:	4905      	ldr	r1, [pc, #20]	; (8008eb0 <modbus_cb_read_holding_registers+0x20>)
 8008e9c:	2003      	movs	r0, #3
 8008e9e:	f000 f9c1 	bl	8009224 <sm_logger_show>

    return MODBUS_ERROR_NONE;
}
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	b003      	add	sp, #12
 8008ea6:	f85d fb04 	ldr.w	pc, [sp], #4
 8008eaa:	bf00      	nop
 8008eac:	08009e54 	.word	0x08009e54
 8008eb0:	08009e24 	.word	0x08009e24

08008eb4 <modbus_cb_read_input_registers>:
                                                                void* _arg){
 8008eb4:	b570      	push	{r4, r5, r6, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	4604      	mov	r4, r0
 8008eba:	460d      	mov	r5, r1
 8008ebc:	4616      	mov	r6, r2
    LOG_DBG(TAG, "Master read input reg %d quantity %d", _address, _quantity);
 8008ebe:	9100      	str	r1, [sp, #0]
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	4a0f      	ldr	r2, [pc, #60]	; (8008f00 <modbus_cb_read_input_registers+0x4c>)
 8008ec4:	490f      	ldr	r1, [pc, #60]	; (8008f04 <modbus_cb_read_input_registers+0x50>)
 8008ec6:	2003      	movs	r0, #3
 8008ec8:	f000 f9ac 	bl	8009224 <sm_logger_show>
    if(_quantity != MODBUS_INPUT_REG_SYNC_DATA_REG_NUM)
 8008ecc:	2d14      	cmp	r5, #20
 8008ece:	d002      	beq.n	8008ed6 <modbus_cb_read_input_registers+0x22>
        return MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE;
 8008ed0:	2003      	movs	r0, #3
}
 8008ed2:	b002      	add	sp, #8
 8008ed4:	bd70      	pop	{r4, r5, r6, pc}
    LOG_INF(TAG, "Sync slave %d", testID);
 8008ed6:	4623      	mov	r3, r4
 8008ed8:	4a0b      	ldr	r2, [pc, #44]	; (8008f08 <modbus_cb_read_input_registers+0x54>)
 8008eda:	490a      	ldr	r1, [pc, #40]	; (8008f04 <modbus_cb_read_input_registers+0x50>)
 8008edc:	2002      	movs	r0, #2
 8008ede:	f000 f9a1 	bl	8009224 <sm_logger_show>
    memcpy((uint8_t*)_registers_out, &g_slave_info[testID], sizeof(light_slv_info_t));
 8008ee2:	4a0a      	ldr	r2, [pc, #40]	; (8008f0c <modbus_cb_read_input_registers+0x58>)
 8008ee4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8008ee8:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8008eec:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	6031      	str	r1, [r6, #0]
 8008ef6:	6072      	str	r2, [r6, #4]
 8008ef8:	60b3      	str	r3, [r6, #8]
    return MODBUS_ERROR_NONE;
 8008efa:	2000      	movs	r0, #0
 8008efc:	e7e9      	b.n	8008ed2 <modbus_cb_read_input_registers+0x1e>
 8008efe:	bf00      	nop
 8008f00:	08009e7c 	.word	0x08009e7c
 8008f04:	08009e24 	.word	0x08009e24
 8008f08:	08009ea4 	.word	0x08009ea4
 8008f0c:	20001374 	.word	0x20001374

08008f10 <get_tick_count>:
int64_t get_tick_count(){
 8008f10:	b508      	push	{r3, lr}
	return HAL_GetTick();
 8008f12:	f7f8 f93f 	bl	8001194 <HAL_GetTick>
}
 8008f16:	2100      	movs	r1, #0
 8008f18:	bd08      	pop	{r3, pc}
	...

08008f1c <main_app>:
        .read_holding_registers = modbus_cb_read_holding_registers,
        .write_single_register = modbus_cb_write_single_register_cb,
        .write_multiple_registers = modbus_cb_write_multiple_registers_cb,
};

void main_app(){
 8008f1c:	b508      	push	{r3, lr}

	sv_lora_init();
 8008f1e:	f000 f8db 	bl	80090d8 <sv_lora_init>

    g_mb_slave = sm_mb_slave_create_default(1, mb_slv_send_if, mb_slv_rcv_if, NULL);
 8008f22:	2300      	movs	r3, #0
 8008f24:	4a0e      	ldr	r2, [pc, #56]	; (8008f60 <main_app+0x44>)
 8008f26:	490f      	ldr	r1, [pc, #60]	; (8008f64 <main_app+0x48>)
 8008f28:	2001      	movs	r0, #1
 8008f2a:	f000 f8ab 	bl	8009084 <sm_mb_slave_create_default>
 8008f2e:	4b0e      	ldr	r3, [pc, #56]	; (8008f68 <main_app+0x4c>)
 8008f30:	6018      	str	r0, [r3, #0]
    if(!g_mb_slave){
 8008f32:	b180      	cbz	r0, 8008f56 <main_app+0x3a>
        LOG_ERR(TAG, "Create modbus server FAILED");
        return;
    }

    g_mb_slave->m_proc->init(g_mb_slave);
 8008f34:	6803      	ldr	r3, [r0, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4798      	blx	r3
    g_mb_slave->m_proc->reg_function_cb(g_mb_slave, &g_mb_slave_callback);
 8008f3a:	4b0b      	ldr	r3, [pc, #44]	; (8008f68 <main_app+0x4c>)
 8008f3c:	6818      	ldr	r0, [r3, #0]
 8008f3e:	6803      	ldr	r3, [r0, #0]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	490a      	ldr	r1, [pc, #40]	; (8008f6c <main_app+0x50>)
 8008f44:	4798      	blx	r3

	while(1){
        g_mb_slave->m_proc->polling(g_mb_slave);
 8008f46:	4b08      	ldr	r3, [pc, #32]	; (8008f68 <main_app+0x4c>)
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	6803      	ldr	r3, [r0, #0]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	4798      	blx	r3

		sv_lora_polling_bytes();
 8008f50:	f000 f908 	bl	8009164 <sv_lora_polling_bytes>
	while(1){
 8008f54:	e7f7      	b.n	8008f46 <main_app+0x2a>
        LOG_ERR(TAG, "Create modbus server FAILED");
 8008f56:	4a06      	ldr	r2, [pc, #24]	; (8008f70 <main_app+0x54>)
 8008f58:	4906      	ldr	r1, [pc, #24]	; (8008f74 <main_app+0x58>)
 8008f5a:	f000 f963 	bl	8009224 <sm_logger_show>

	}
}
 8008f5e:	bd08      	pop	{r3, pc}
 8008f60:	08008def 	.word	0x08008def
 8008f64:	08008de1 	.word	0x08008de1
 8008f68:	20001370 	.word	0x20001370
 8008f6c:	08009ed0 	.word	0x08009ed0
 8008f70:	08009eb4 	.word	0x08009eb4
 8008f74:	08009e24 	.word	0x08009e24

08008f78 <sm_mb_slave_free>:

    return 0;
}

int32_t sm_mb_slave_free(sm_mb_slave_t* _this){
    if(!_this){
 8008f78:	b108      	cbz	r0, 8008f7e <sm_mb_slave_free+0x6>
        return -1;
    }
    return 0;
 8008f7a:	2000      	movs	r0, #0
 8008f7c:	4770      	bx	lr
        return -1;
 8008f7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008f82:	4770      	bx	lr

08008f84 <sm_mb_slave_set_addr>:

int32_t sm_mb_slave_set_addr(sm_mb_slave_t* _this, uint8_t _addr){
    if(!_this){
 8008f84:	b110      	cbz	r0, 8008f8c <sm_mb_slave_set_addr+0x8>
        return -1;
    }
    _impl(_this)->m_addr = _addr;
 8008f86:	7301      	strb	r1, [r0, #12]
    return 0;
 8008f88:	2000      	movs	r0, #0
 8008f8a:	4770      	bx	lr
        return -1;
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008f90:	4770      	bx	lr

08008f92 <sm_mb_slave_reg_function_cb>:

int32_t sm_mb_slave_reg_function_cb(sm_mb_slave_t* _this, const sm_mb_slave_cb_t* _cb){
    if(!_this){
 8008f92:	b300      	cbz	r0, 8008fd6 <sm_mb_slave_reg_function_cb+0x44>
int32_t sm_mb_slave_reg_function_cb(sm_mb_slave_t* _this, const sm_mb_slave_cb_t* _cb){
 8008f94:	b500      	push	{lr}
        return -1;
    }
    _impl(_this)->m_cb = _cb;
 8008f96:	6041      	str	r1, [r0, #4]

    _impl(_this)->m_nmbs_cb.write_single_register = (nmbs_error (*)(uint16_t, uint16_t, uint8_t, void *))_cb->write_single_register;
 8008f98:	694b      	ldr	r3, [r1, #20]
 8008f9a:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
    _impl(_this)->m_nmbs_cb.write_multiple_registers = (nmbs_error (*)(uint16_t, uint16_t, const uint16_t*, uint8_t, void*))_cb->write_multiple_registers;
 8008f9e:	69cb      	ldr	r3, [r1, #28]
 8008fa0:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198

#ifndef NMBS_SERVER_WRITE_SINGLE_COIL_DISABLED
    _impl(_this)->m_nmbs_cb.write_single_coil = (nmbs_error (*)(uint16_t address, bool value, uint8_t unit_id, void* arg)) _cb->write_single_coil;
#endif

    _impl(_this)->m_nmbs_cb.read_input_registers = (nmbs_error (*)(uint16_t, uint16_t, uint16_t*, uint8_t, void* )) _cb->read_input_registers;
 8008fa4:	68cb      	ldr	r3, [r1, #12]
 8008fa6:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
    _impl(_this)->m_nmbs_cb.read_holding_registers = (nmbs_error (*)(uint16_t, uint16_t, uint16_t*, uint8_t,void*)) _cb->read_holding_registers;
 8008faa:	688b      	ldr	r3, [r1, #8]
 8008fac:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184

#ifndef NMBS_SERVER_READ_COILS_DISABLED
    _impl(_this)->m_nmbs_cb.read_coils = (nmbs_error (*)(uint16_t, uint16_t, uint8_t*, uint8_t,void*)) _cb->read_coils;
#endif

    _impl(_this)->m_nmbs_instance.callbacks = _impl(_this)->m_nmbs_cb;
 8008fb0:	f500 7e92 	add.w	lr, r0, #292	; 0x124
 8008fb4:	f500 7cbe 	add.w	ip, r0, #380	; 0x17c
 8008fb8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008fbc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008fc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008fc4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008fc8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8008fcc:	e88e 0007 	stmia.w	lr, {r0, r1, r2}

    return 0;
 8008fd0:	2000      	movs	r0, #0
}
 8008fd2:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
 8008fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008fda:	4770      	bx	lr

08008fdc <nmbs_read_fn>:
        .m_addr = 0,
};

int32_t nmbs_read_fn(uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg){
    sm_mb_slave_impl_t* this = _impl(arg);
    if(this == NULL) return -1;
 8008fdc:	b15b      	cbz	r3, 8008ff6 <nmbs_read_fn+0x1a>
int32_t nmbs_read_fn(uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg){
 8008fde:	b530      	push	{r4, r5, lr}
 8008fe0:	b083      	sub	sp, #12
 8008fe2:	461c      	mov	r4, r3
    return this->m_recv_fn_t(_impl(arg)->m_addr, buf, count, byte_timeout_ms, arg);
 8008fe4:	695d      	ldr	r5, [r3, #20]
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	460a      	mov	r2, r1
 8008fec:	4601      	mov	r1, r0
 8008fee:	7b20      	ldrb	r0, [r4, #12]
 8008ff0:	47a8      	blx	r5
}
 8008ff2:	b003      	add	sp, #12
 8008ff4:	bd30      	pop	{r4, r5, pc}
    if(this == NULL) return -1;
 8008ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008ffa:	4770      	bx	lr

08008ffc <nmbs_write_fn>:

int32_t nmbs_write_fn(const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg){
    sm_mb_slave_impl_t* this = _impl(arg);
    if(this == NULL) return -1;
 8008ffc:	b15b      	cbz	r3, 8009016 <nmbs_write_fn+0x1a>
int32_t nmbs_write_fn(const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg){
 8008ffe:	b530      	push	{r4, r5, lr}
 8009000:	b083      	sub	sp, #12
 8009002:	461c      	mov	r4, r3
    return this->m_send_fn_t(_impl(arg)->m_addr, buf, count, byte_timeout_ms, arg);
 8009004:	691d      	ldr	r5, [r3, #16]
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	4613      	mov	r3, r2
 800900a:	460a      	mov	r2, r1
 800900c:	4601      	mov	r1, r0
 800900e:	7b20      	ldrb	r0, [r4, #12]
 8009010:	47a8      	blx	r5
}
 8009012:	b003      	add	sp, #12
 8009014:	bd30      	pop	{r4, r5, pc}
    if(this == NULL) return -1;
 8009016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800901a:	4770      	bx	lr

0800901c <sm_mb_slave_init>:
    if(!_this){
 800901c:	b308      	cbz	r0, 8009062 <sm_mb_slave_init+0x46>
int32_t sm_mb_slave_init(sm_mb_slave_t* _this){
 800901e:	b510      	push	{r4, lr}
    _impl(_this)->m_nmbs_if.read = nmbs_read_fn;
 8009020:	4b11      	ldr	r3, [pc, #68]	; (8009068 <sm_mb_slave_init+0x4c>)
 8009022:	f8c0 3170 	str.w	r3, [r0, #368]	; 0x170
    _impl(_this)->m_nmbs_if.write = nmbs_write_fn;
 8009026:	4b11      	ldr	r3, [pc, #68]	; (800906c <sm_mb_slave_init+0x50>)
 8009028:	f8c0 3174 	str.w	r3, [r0, #372]	; 0x174
    _impl(_this)->m_nmbs_if.arg = _this;
 800902c:	f8c0 0178 	str.w	r0, [r0, #376]	; 0x178
    _impl(_this)->m_nmbs_if.transport = NMBS_TRANSPORT_RTU;
 8009030:	2301      	movs	r3, #1
 8009032:	f880 316c 	strb.w	r3, [r0, #364]	; 0x16c
    nmbs_error err = nmbs_server_create(&_impl(_this)->m_nmbs_instance,
 8009036:	f100 0418 	add.w	r4, r0, #24
 800903a:	f500 73be 	add.w	r3, r0, #380	; 0x17c
 800903e:	f500 72b6 	add.w	r2, r0, #364	; 0x16c
 8009042:	7b01      	ldrb	r1, [r0, #12]
 8009044:	4620      	mov	r0, r4
 8009046:	f7ff fe6c 	bl	8008d22 <nmbs_server_create>
    if(err != NMBS_ERROR_NONE){
 800904a:	b100      	cbz	r0, 800904e <sm_mb_slave_init+0x32>
}
 800904c:	bd10      	pop	{r4, pc}
    nmbs_set_byte_timeout(&_impl(_this)->m_nmbs_instance, 50);
 800904e:	2132      	movs	r1, #50	; 0x32
 8009050:	4620      	mov	r0, r4
 8009052:	f7fe fe9d 	bl	8007d90 <nmbs_set_byte_timeout>
    nmbs_set_read_timeout(&_impl(_this)->m_nmbs_instance, 50);
 8009056:	2132      	movs	r1, #50	; 0x32
 8009058:	4620      	mov	r0, r4
 800905a:	f7fe fe96 	bl	8007d8a <nmbs_set_read_timeout>
    return 0;
 800905e:	2000      	movs	r0, #0
 8009060:	e7f4      	b.n	800904c <sm_mb_slave_init+0x30>
        return -1;
 8009062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009066:	4770      	bx	lr
 8009068:	08008fdd 	.word	0x08008fdd
 800906c:	08008ffd 	.word	0x08008ffd

08009070 <sm_mb_slave_polling>:
    if(!_this){
 8009070:	b120      	cbz	r0, 800907c <sm_mb_slave_polling+0xc>
int32_t sm_mb_slave_polling(sm_mb_slave_t* _this){
 8009072:	b508      	push	{r3, lr}
    return nmbs_server_poll(&_impl(_this)->m_nmbs_instance);
 8009074:	3018      	adds	r0, #24
 8009076:	f7ff fe78 	bl	8008d6a <nmbs_server_poll>
}
 800907a:	bd08      	pop	{r3, pc}
        return -1;
 800907c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009080:	4770      	bx	lr
	...

08009084 <sm_mb_slave_create_default>:


sm_mb_slave_t* sm_mb_slave_create_default(uint8_t _addr,
                                          sm_mb_send_if _send_fn,
                                          sm_mb_recv_if _recv_fn,
                                          void* _arg){
 8009084:	4684      	mov	ip, r0
    g_mb_slave.m_addr = _addr;
 8009086:	4803      	ldr	r0, [pc, #12]	; (8009094 <sm_mb_slave_create_default+0x10>)
 8009088:	f880 c00c 	strb.w	ip, [r0, #12]
    g_mb_slave.m_arg = _arg;
 800908c:	6083      	str	r3, [r0, #8]
    g_mb_slave.m_send_fn_t = _send_fn;
 800908e:	6101      	str	r1, [r0, #16]
    g_mb_slave.m_recv_fn_t = _recv_fn;
 8009090:	6142      	str	r2, [r0, #20]
    
    return &g_mb_slave.m_base;
}
 8009092:	4770      	bx	lr
 8009094:	20000190 	.word	0x20000190

08009098 <sv_lora_get_bytes_availabe>:
LoRa g_lora;
uint8_t g_queue_buff[BUFF_SIZE];
uint32_t g_head = 0, g_tail = 0;

static int sv_lora_get_bytes_availabe(){
	return (g_head >= g_tail) ? g_head - g_tail : BUFF_SIZE - g_tail + g_head;
 8009098:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <sv_lora_get_bytes_availabe+0x18>)
 800909a:	6818      	ldr	r0, [r3, #0]
 800909c:	4b05      	ldr	r3, [pc, #20]	; (80090b4 <sv_lora_get_bytes_availabe+0x1c>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4298      	cmp	r0, r3
 80090a2:	d301      	bcc.n	80090a8 <sv_lora_get_bytes_availabe+0x10>
 80090a4:	1ac0      	subs	r0, r0, r3
 80090a6:	4770      	bx	lr
 80090a8:	1ac0      	subs	r0, r0, r3
 80090aa:	f500 7000 	add.w	r0, r0, #512	; 0x200
}
 80090ae:	4770      	bx	lr
 80090b0:	20001398 	.word	0x20001398
 80090b4:	200015c8 	.word	0x200015c8

080090b8 <sv_lora_send_bytes>:

int sv_lora_send_bytes(uint8_t* _data, uint16_t _len, int32_t _timeout){
 80090b8:	b510      	push	{r4, lr}
 80090ba:	460c      	mov	r4, r1
	if(LoRa_transmit(&g_lora, _data, _len, _timeout) > 0){
 80090bc:	b293      	uxth	r3, r2
 80090be:	b2ca      	uxtb	r2, r1
 80090c0:	4601      	mov	r1, r0
 80090c2:	4804      	ldr	r0, [pc, #16]	; (80090d4 <sv_lora_send_bytes+0x1c>)
 80090c4:	f7fe fbd4 	bl	8007870 <LoRa_transmit>
 80090c8:	b908      	cbnz	r0, 80090ce <sv_lora_send_bytes+0x16>
		return -1;
	}
	return _len;
 80090ca:	4620      	mov	r0, r4
}
 80090cc:	bd10      	pop	{r4, pc}
		return -1;
 80090ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090d2:	e7fb      	b.n	80090cc <sv_lora_send_bytes+0x14>
 80090d4:	2000139c 	.word	0x2000139c

080090d8 <sv_lora_init>:
	}
	while(elapsed_timer_get_remain(&timeout));
	return 0;
}

int sv_lora_init(){
 80090d8:	b510      	push	{r4, lr}
 80090da:	b08c      	sub	sp, #48	; 0x30
	g_lora = newLoRa();
 80090dc:	4c1d      	ldr	r4, [pc, #116]	; (8009154 <sv_lora_init+0x7c>)
 80090de:	4668      	mov	r0, sp
 80090e0:	f7fe f9ee 	bl	80074c0 <newLoRa>
 80090e4:	46a6      	mov	lr, r4
 80090e6:	46ec      	mov	ip, sp
 80090e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80090ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80090f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80090f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80090f8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80090fc:	e88e 0007 	stmia.w	lr, {r0, r1, r2}

	g_lora.hSPIx                 = &hspi1;
 8009100:	4b15      	ldr	r3, [pc, #84]	; (8009158 <sv_lora_init+0x80>)
 8009102:	61a3      	str	r3, [r4, #24]
	g_lora.CS_port               = SPI1_SS_GPIO_Port;
 8009104:	4b15      	ldr	r3, [pc, #84]	; (800915c <sv_lora_init+0x84>)
 8009106:	6023      	str	r3, [r4, #0]
	g_lora.CS_pin                = SPI1_SS_Pin;
 8009108:	2310      	movs	r3, #16
 800910a:	80a3      	strh	r3, [r4, #4]
	g_lora.reset_port            = LORA_RST_GPIO_Port;
 800910c:	4b14      	ldr	r3, [pc, #80]	; (8009160 <sv_lora_init+0x88>)
 800910e:	60a3      	str	r3, [r4, #8]
	g_lora.reset_pin             = LORA_RST_Pin;
 8009110:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009114:	81a3      	strh	r3, [r4, #12]
	g_lora.frequency             = 433;						// default = 433 MHz
 8009116:	f240 13b1 	movw	r3, #433	; 0x1b1
 800911a:	6223      	str	r3, [r4, #32]
	g_lora.spredingFactor        = SF_7;					// default = SF_7
 800911c:	2307      	movs	r3, #7
 800911e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	g_lora.bandWidth			 = BW_125KHz;				// default = BW_125KHz
 8009122:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	g_lora.crcRate				 = CR_4_5;					// default = CR_4_5
 8009126:	2301      	movs	r3, #1
 8009128:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	g_lora.power				 = POWER_20db;				// default = 20db
 800912c:	23ff      	movs	r3, #255	; 0xff
 800912e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	g_lora.overCurrentProtection = 120; 					// default = 100 mA
 8009132:	2378      	movs	r3, #120	; 0x78
 8009134:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	g_lora.preamble				 = 10;		  				// default = 8;
 8009138:	230a      	movs	r3, #10
 800913a:	8523      	strh	r3, [r4, #40]	; 0x28

	LoRa_reset(&g_lora);
 800913c:	4620      	mov	r0, r4
 800913e:	f7fe f9d3 	bl	80074e8 <LoRa_reset>
	LoRa_init(&g_lora);
 8009142:	4620      	mov	r0, r4
 8009144:	f7fe fc1d 	bl	8007982 <LoRa_init>

	LoRa_startReceiving(&g_lora);
 8009148:	4620      	mov	r0, r4
 800914a:	f7fe fbd5 	bl	80078f8 <LoRa_startReceiving>

	return 0;
}
 800914e:	2000      	movs	r0, #0
 8009150:	b00c      	add	sp, #48	; 0x30
 8009152:	bd10      	pop	{r4, pc}
 8009154:	2000139c 	.word	0x2000139c
 8009158:	20000430 	.word	0x20000430
 800915c:	40010800 	.word	0x40010800
 8009160:	40010c00 	.word	0x40010c00

08009164 <sv_lora_polling_bytes>:

void sv_lora_polling_bytes(){
 8009164:	b510      	push	{r4, lr}
 8009166:	b0a0      	sub	sp, #128	; 0x80
	uint8_t read_buff[128];

	int byte = LoRa_receive(&g_lora, read_buff, 128);
 8009168:	2280      	movs	r2, #128	; 0x80
 800916a:	4669      	mov	r1, sp
 800916c:	480e      	ldr	r0, [pc, #56]	; (80091a8 <sv_lora_polling_bytes+0x44>)
 800916e:	f7fe fbc8 	bl	8007902 <LoRa_receive>
	for(int i = 0; i < byte; i++){
 8009172:	2200      	movs	r2, #0
 8009174:	e000      	b.n	8009178 <sv_lora_polling_bytes+0x14>
 8009176:	3201      	adds	r2, #1
 8009178:	4282      	cmp	r2, r0
 800917a:	da12      	bge.n	80091a2 <sv_lora_polling_bytes+0x3e>
		g_queue_buff[g_head] = read_buff[i];
 800917c:	490b      	ldr	r1, [pc, #44]	; (80091ac <sv_lora_polling_bytes+0x48>)
 800917e:	680b      	ldr	r3, [r1, #0]
 8009180:	f102 0480 	add.w	r4, r2, #128	; 0x80
 8009184:	446c      	add	r4, sp
 8009186:	f814 cc80 	ldrb.w	ip, [r4, #-128]
 800918a:	4c09      	ldr	r4, [pc, #36]	; (80091b0 <sv_lora_polling_bytes+0x4c>)
 800918c:	f804 c003 	strb.w	ip, [r4, r3]
		g_head++;
 8009190:	3301      	adds	r3, #1
 8009192:	600b      	str	r3, [r1, #0]
		if(g_head >= BUFF_SIZE){
 8009194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009198:	d3ed      	bcc.n	8009176 <sv_lora_polling_bytes+0x12>
			g_tail = 0;
 800919a:	4b06      	ldr	r3, [pc, #24]	; (80091b4 <sv_lora_polling_bytes+0x50>)
 800919c:	2100      	movs	r1, #0
 800919e:	6019      	str	r1, [r3, #0]
 80091a0:	e7e9      	b.n	8009176 <sv_lora_polling_bytes+0x12>
		}
	}
}
 80091a2:	b020      	add	sp, #128	; 0x80
 80091a4:	bd10      	pop	{r4, pc}
 80091a6:	bf00      	nop
 80091a8:	2000139c 	.word	0x2000139c
 80091ac:	20001398 	.word	0x20001398
 80091b0:	200013c8 	.word	0x200013c8
 80091b4:	200015c8 	.word	0x200015c8

080091b8 <sv_lora_get_bytes>:
int sv_lora_get_bytes(uint8_t* _buff, uint8_t _len, uint32_t _timeout){
 80091b8:	b530      	push	{r4, r5, lr}
 80091ba:	b083      	sub	sp, #12
 80091bc:	4605      	mov	r5, r0
 80091be:	460c      	mov	r4, r1
 * @brief
 * @param _self
 * @param _duration
 */
static inline void elapsed_timer_resetz(elapsed_timer_t* _self, int32_t _duration){
    _self->m_duration = _duration;
 80091c0:	9200      	str	r2, [sp, #0]
    _self->m_start_time = get_tick_count();
 80091c2:	f7ff fea5 	bl	8008f10 <get_tick_count>
 80091c6:	9001      	str	r0, [sp, #4]
}
 80091c8:	e015      	b.n	80091f6 <sv_lora_get_bytes+0x3e>
			for(int i = 0; i < _len; i++){
 80091ca:	3101      	adds	r1, #1
 80091cc:	428b      	cmp	r3, r1
 80091ce:	dd22      	ble.n	8009216 <sv_lora_get_bytes+0x5e>
				_buff[i] = g_queue_buff[g_tail];
 80091d0:	4812      	ldr	r0, [pc, #72]	; (800921c <sv_lora_get_bytes+0x64>)
 80091d2:	6802      	ldr	r2, [r0, #0]
 80091d4:	4c12      	ldr	r4, [pc, #72]	; (8009220 <sv_lora_get_bytes+0x68>)
 80091d6:	5ca2      	ldrb	r2, [r4, r2]
 80091d8:	546a      	strb	r2, [r5, r1]
				g_tail++;
 80091da:	6802      	ldr	r2, [r0, #0]
 80091dc:	3201      	adds	r2, #1
 80091de:	6002      	str	r2, [r0, #0]
				if(g_tail >= BUFF_SIZE){
 80091e0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80091e4:	d3f1      	bcc.n	80091ca <sv_lora_get_bytes+0x12>
					g_tail = 0;
 80091e6:	4602      	mov	r2, r0
 80091e8:	2000      	movs	r0, #0
 80091ea:	6010      	str	r0, [r2, #0]
 80091ec:	e7ed      	b.n	80091ca <sv_lora_get_bytes+0x12>
			for(int i = 0; i < _len; i++){
 80091ee:	2100      	movs	r1, #0
 80091f0:	e7ec      	b.n	80091cc <sv_lora_get_bytes+0x14>
 * @return
 */
static inline int32_t elapsed_timer_get_remain(elapsed_timer_t* _self){
    int32_t remain_time = get_tick_count() - _self->m_start_time;
    if(remain_time >= _self->m_duration){
        return 0;
 80091f2:	2300      	movs	r3, #0
	while(elapsed_timer_get_remain(&timeout));
 80091f4:	b17b      	cbz	r3, 8009216 <sv_lora_get_bytes+0x5e>
		if(sv_lora_get_bytes_availabe() >= _len){
 80091f6:	f7ff ff4f 	bl	8009098 <sv_lora_get_bytes_availabe>
 80091fa:	4623      	mov	r3, r4
 80091fc:	42a0      	cmp	r0, r4
 80091fe:	daf6      	bge.n	80091ee <sv_lora_get_bytes+0x36>
		sv_lora_polling_bytes();
 8009200:	f7ff ffb0 	bl	8009164 <sv_lora_polling_bytes>
    int32_t remain_time = get_tick_count() - _self->m_start_time;
 8009204:	f7ff fe84 	bl	8008f10 <get_tick_count>
 8009208:	9b01      	ldr	r3, [sp, #4]
 800920a:	1ac0      	subs	r0, r0, r3
    if(remain_time >= _self->m_duration){
 800920c:	9b00      	ldr	r3, [sp, #0]
 800920e:	4298      	cmp	r0, r3
 8009210:	daef      	bge.n	80091f2 <sv_lora_get_bytes+0x3a>
    }else{
        return _self->m_duration - remain_time;
 8009212:	1a1b      	subs	r3, r3, r0
 8009214:	e7ee      	b.n	80091f4 <sv_lora_get_bytes+0x3c>
}
 8009216:	4618      	mov	r0, r3
 8009218:	b003      	add	sp, #12
 800921a:	bd30      	pop	{r4, r5, pc}
 800921c:	200015c8 	.word	0x200015c8
 8009220:	200013c8 	.word	0x200013c8

08009224 <sm_logger_show>:
 *
 * @param _level
 * @param _tag
 * @param _log
 */
void sm_logger_show(LOG_LEVEL _level, const char* _tag, const char* _log, ...){
 8009224:	b40c      	push	{r2, r3}
 8009226:	b530      	push	{r4, r5, lr}
 8009228:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 800922c:	4604      	mov	r4, r0
 800922e:	460d      	mov	r5, r1
    int len = 0;
    char buf[LOG_BUFFER_SIZE + 2] = {0};
 8009230:	2100      	movs	r1, #0
 8009232:	9103      	str	r1, [sp, #12]
 8009234:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8009238:	a804      	add	r0, sp, #16
 800923a:	f000 f967 	bl	800950c <memset>
    va_list args;

    if(_level > g_logger.m_level){
 800923e:	4b1a      	ldr	r3, [pc, #104]	; (80092a8 <sm_logger_show+0x84>)
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	42a3      	cmp	r3, r4
 8009244:	d205      	bcs.n	8009252 <sm_logger_show+0x2e>
    if(g_logger.m_output_fn)
        g_logger.m_output_fn(buf);
    else{
        logger_put (buf);
    }
}
 8009246:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
 800924a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800924e:	b002      	add	sp, #8
 8009250:	4770      	bx	lr
    va_start(args, _log);
 8009252:	f20d 4324 	addw	r3, sp, #1060	; 0x424
 8009256:	9302      	str	r3, [sp, #8]
    len = snprintf(buf, LOG_BUFFER_SIZE, "%s#%s: %s: ",log_level_colors[_level], log_level_names[_level], _tag);
 8009258:	9501      	str	r5, [sp, #4]
 800925a:	4b14      	ldr	r3, [pc, #80]	; (80092ac <sm_logger_show+0x88>)
 800925c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	4b13      	ldr	r3, [pc, #76]	; (80092b0 <sm_logger_show+0x8c>)
 8009264:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009268:	4a12      	ldr	r2, [pc, #72]	; (80092b4 <sm_logger_show+0x90>)
 800926a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800926e:	a803      	add	r0, sp, #12
 8009270:	f000 f8ce 	bl	8009410 <sniprintf>
 8009274:	4604      	mov	r4, r0
    len += vsnprintf(buf + len, LOG_BUFFER_SIZE - len, _log, args);
 8009276:	9b02      	ldr	r3, [sp, #8]
 8009278:	f8dd 2420 	ldr.w	r2, [sp, #1056]	; 0x420
 800927c:	f5c0 6180 	rsb	r1, r0, #1024	; 0x400
 8009280:	a803      	add	r0, sp, #12
 8009282:	4420      	add	r0, r4
 8009284:	f000 f924 	bl	80094d0 <vsniprintf>
 8009288:	4404      	add	r4, r0
    if(len > LOG_BUFFER_SIZE){
 800928a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800928e:	dd01      	ble.n	8009294 <sm_logger_show+0x70>
        len = LOG_BUFFER_SIZE;
 8009290:	f44f 6480 	mov.w	r4, #1024	; 0x400
    buf[len] = '\0';
 8009294:	ab03      	add	r3, sp, #12
 8009296:	2200      	movs	r2, #0
 8009298:	551a      	strb	r2, [r3, r4]
    if(g_logger.m_output_fn)
 800929a:	4b03      	ldr	r3, [pc, #12]	; (80092a8 <sm_logger_show+0x84>)
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d0d1      	beq.n	8009246 <sm_logger_show+0x22>
        g_logger.m_output_fn(buf);
 80092a2:	a803      	add	r0, sp, #12
 80092a4:	4798      	blx	r3
 80092a6:	e7ce      	b.n	8009246 <sm_logger_show+0x22>
 80092a8:	20000338 	.word	0x20000338
 80092ac:	08009f58 	.word	0x08009f58
 80092b0:	08009f44 	.word	0x08009f44
 80092b4:	08009ef0 	.word	0x08009ef0

080092b8 <sbrk_aligned>:
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	4e0e      	ldr	r6, [pc, #56]	; (80092f4 <sbrk_aligned+0x3c>)
 80092bc:	460c      	mov	r4, r1
 80092be:	6831      	ldr	r1, [r6, #0]
 80092c0:	4605      	mov	r5, r0
 80092c2:	b911      	cbnz	r1, 80092ca <sbrk_aligned+0x12>
 80092c4:	f000 f92a 	bl	800951c <_sbrk_r>
 80092c8:	6030      	str	r0, [r6, #0]
 80092ca:	4621      	mov	r1, r4
 80092cc:	4628      	mov	r0, r5
 80092ce:	f000 f925 	bl	800951c <_sbrk_r>
 80092d2:	1c43      	adds	r3, r0, #1
 80092d4:	d00a      	beq.n	80092ec <sbrk_aligned+0x34>
 80092d6:	1cc4      	adds	r4, r0, #3
 80092d8:	f024 0403 	bic.w	r4, r4, #3
 80092dc:	42a0      	cmp	r0, r4
 80092de:	d007      	beq.n	80092f0 <sbrk_aligned+0x38>
 80092e0:	1a21      	subs	r1, r4, r0
 80092e2:	4628      	mov	r0, r5
 80092e4:	f000 f91a 	bl	800951c <_sbrk_r>
 80092e8:	3001      	adds	r0, #1
 80092ea:	d101      	bne.n	80092f0 <sbrk_aligned+0x38>
 80092ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80092f0:	4620      	mov	r0, r4
 80092f2:	bd70      	pop	{r4, r5, r6, pc}
 80092f4:	200015d0 	.word	0x200015d0

080092f8 <_malloc_r>:
 80092f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092fc:	1ccd      	adds	r5, r1, #3
 80092fe:	f025 0503 	bic.w	r5, r5, #3
 8009302:	3508      	adds	r5, #8
 8009304:	2d0c      	cmp	r5, #12
 8009306:	bf38      	it	cc
 8009308:	250c      	movcc	r5, #12
 800930a:	2d00      	cmp	r5, #0
 800930c:	4607      	mov	r7, r0
 800930e:	db01      	blt.n	8009314 <_malloc_r+0x1c>
 8009310:	42a9      	cmp	r1, r5
 8009312:	d905      	bls.n	8009320 <_malloc_r+0x28>
 8009314:	230c      	movs	r3, #12
 8009316:	2600      	movs	r6, #0
 8009318:	603b      	str	r3, [r7, #0]
 800931a:	4630      	mov	r0, r6
 800931c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009320:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80093f4 <_malloc_r+0xfc>
 8009324:	f000 f868 	bl	80093f8 <__malloc_lock>
 8009328:	f8d8 3000 	ldr.w	r3, [r8]
 800932c:	461c      	mov	r4, r3
 800932e:	bb5c      	cbnz	r4, 8009388 <_malloc_r+0x90>
 8009330:	4629      	mov	r1, r5
 8009332:	4638      	mov	r0, r7
 8009334:	f7ff ffc0 	bl	80092b8 <sbrk_aligned>
 8009338:	1c43      	adds	r3, r0, #1
 800933a:	4604      	mov	r4, r0
 800933c:	d155      	bne.n	80093ea <_malloc_r+0xf2>
 800933e:	f8d8 4000 	ldr.w	r4, [r8]
 8009342:	4626      	mov	r6, r4
 8009344:	2e00      	cmp	r6, #0
 8009346:	d145      	bne.n	80093d4 <_malloc_r+0xdc>
 8009348:	2c00      	cmp	r4, #0
 800934a:	d048      	beq.n	80093de <_malloc_r+0xe6>
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	4631      	mov	r1, r6
 8009350:	4638      	mov	r0, r7
 8009352:	eb04 0903 	add.w	r9, r4, r3
 8009356:	f000 f8e1 	bl	800951c <_sbrk_r>
 800935a:	4581      	cmp	r9, r0
 800935c:	d13f      	bne.n	80093de <_malloc_r+0xe6>
 800935e:	6821      	ldr	r1, [r4, #0]
 8009360:	4638      	mov	r0, r7
 8009362:	1a6d      	subs	r5, r5, r1
 8009364:	4629      	mov	r1, r5
 8009366:	f7ff ffa7 	bl	80092b8 <sbrk_aligned>
 800936a:	3001      	adds	r0, #1
 800936c:	d037      	beq.n	80093de <_malloc_r+0xe6>
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	442b      	add	r3, r5
 8009372:	6023      	str	r3, [r4, #0]
 8009374:	f8d8 3000 	ldr.w	r3, [r8]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d038      	beq.n	80093ee <_malloc_r+0xf6>
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	42a2      	cmp	r2, r4
 8009380:	d12b      	bne.n	80093da <_malloc_r+0xe2>
 8009382:	2200      	movs	r2, #0
 8009384:	605a      	str	r2, [r3, #4]
 8009386:	e00f      	b.n	80093a8 <_malloc_r+0xb0>
 8009388:	6822      	ldr	r2, [r4, #0]
 800938a:	1b52      	subs	r2, r2, r5
 800938c:	d41f      	bmi.n	80093ce <_malloc_r+0xd6>
 800938e:	2a0b      	cmp	r2, #11
 8009390:	d917      	bls.n	80093c2 <_malloc_r+0xca>
 8009392:	1961      	adds	r1, r4, r5
 8009394:	42a3      	cmp	r3, r4
 8009396:	6025      	str	r5, [r4, #0]
 8009398:	bf18      	it	ne
 800939a:	6059      	strne	r1, [r3, #4]
 800939c:	6863      	ldr	r3, [r4, #4]
 800939e:	bf08      	it	eq
 80093a0:	f8c8 1000 	streq.w	r1, [r8]
 80093a4:	5162      	str	r2, [r4, r5]
 80093a6:	604b      	str	r3, [r1, #4]
 80093a8:	4638      	mov	r0, r7
 80093aa:	f104 060b 	add.w	r6, r4, #11
 80093ae:	f000 f829 	bl	8009404 <__malloc_unlock>
 80093b2:	f026 0607 	bic.w	r6, r6, #7
 80093b6:	1d23      	adds	r3, r4, #4
 80093b8:	1af2      	subs	r2, r6, r3
 80093ba:	d0ae      	beq.n	800931a <_malloc_r+0x22>
 80093bc:	1b9b      	subs	r3, r3, r6
 80093be:	50a3      	str	r3, [r4, r2]
 80093c0:	e7ab      	b.n	800931a <_malloc_r+0x22>
 80093c2:	42a3      	cmp	r3, r4
 80093c4:	6862      	ldr	r2, [r4, #4]
 80093c6:	d1dd      	bne.n	8009384 <_malloc_r+0x8c>
 80093c8:	f8c8 2000 	str.w	r2, [r8]
 80093cc:	e7ec      	b.n	80093a8 <_malloc_r+0xb0>
 80093ce:	4623      	mov	r3, r4
 80093d0:	6864      	ldr	r4, [r4, #4]
 80093d2:	e7ac      	b.n	800932e <_malloc_r+0x36>
 80093d4:	4634      	mov	r4, r6
 80093d6:	6876      	ldr	r6, [r6, #4]
 80093d8:	e7b4      	b.n	8009344 <_malloc_r+0x4c>
 80093da:	4613      	mov	r3, r2
 80093dc:	e7cc      	b.n	8009378 <_malloc_r+0x80>
 80093de:	230c      	movs	r3, #12
 80093e0:	4638      	mov	r0, r7
 80093e2:	603b      	str	r3, [r7, #0]
 80093e4:	f000 f80e 	bl	8009404 <__malloc_unlock>
 80093e8:	e797      	b.n	800931a <_malloc_r+0x22>
 80093ea:	6025      	str	r5, [r4, #0]
 80093ec:	e7dc      	b.n	80093a8 <_malloc_r+0xb0>
 80093ee:	605b      	str	r3, [r3, #4]
 80093f0:	deff      	udf	#255	; 0xff
 80093f2:	bf00      	nop
 80093f4:	200015cc 	.word	0x200015cc

080093f8 <__malloc_lock>:
 80093f8:	4801      	ldr	r0, [pc, #4]	; (8009400 <__malloc_lock+0x8>)
 80093fa:	f000 b8c9 	b.w	8009590 <__retarget_lock_acquire_recursive>
 80093fe:	bf00      	nop
 8009400:	20001710 	.word	0x20001710

08009404 <__malloc_unlock>:
 8009404:	4801      	ldr	r0, [pc, #4]	; (800940c <__malloc_unlock+0x8>)
 8009406:	f000 b8c4 	b.w	8009592 <__retarget_lock_release_recursive>
 800940a:	bf00      	nop
 800940c:	20001710 	.word	0x20001710

08009410 <sniprintf>:
 8009410:	b40c      	push	{r2, r3}
 8009412:	b530      	push	{r4, r5, lr}
 8009414:	4b17      	ldr	r3, [pc, #92]	; (8009474 <sniprintf+0x64>)
 8009416:	1e0c      	subs	r4, r1, #0
 8009418:	681d      	ldr	r5, [r3, #0]
 800941a:	b09d      	sub	sp, #116	; 0x74
 800941c:	da08      	bge.n	8009430 <sniprintf+0x20>
 800941e:	238b      	movs	r3, #139	; 0x8b
 8009420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009424:	602b      	str	r3, [r5, #0]
 8009426:	b01d      	add	sp, #116	; 0x74
 8009428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800942c:	b002      	add	sp, #8
 800942e:	4770      	bx	lr
 8009430:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009434:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009438:	bf0c      	ite	eq
 800943a:	4623      	moveq	r3, r4
 800943c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009440:	9304      	str	r3, [sp, #16]
 8009442:	9307      	str	r3, [sp, #28]
 8009444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009448:	9002      	str	r0, [sp, #8]
 800944a:	9006      	str	r0, [sp, #24]
 800944c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009450:	4628      	mov	r0, r5
 8009452:	ab21      	add	r3, sp, #132	; 0x84
 8009454:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009456:	a902      	add	r1, sp, #8
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	f000 f94b 	bl	80096f4 <_svfiprintf_r>
 800945e:	1c43      	adds	r3, r0, #1
 8009460:	bfbc      	itt	lt
 8009462:	238b      	movlt	r3, #139	; 0x8b
 8009464:	602b      	strlt	r3, [r5, #0]
 8009466:	2c00      	cmp	r4, #0
 8009468:	d0dd      	beq.n	8009426 <sniprintf+0x16>
 800946a:	2200      	movs	r2, #0
 800946c:	9b02      	ldr	r3, [sp, #8]
 800946e:	701a      	strb	r2, [r3, #0]
 8009470:	e7d9      	b.n	8009426 <sniprintf+0x16>
 8009472:	bf00      	nop
 8009474:	2000038c 	.word	0x2000038c

08009478 <_vsniprintf_r>:
 8009478:	b530      	push	{r4, r5, lr}
 800947a:	4614      	mov	r4, r2
 800947c:	2c00      	cmp	r4, #0
 800947e:	4605      	mov	r5, r0
 8009480:	461a      	mov	r2, r3
 8009482:	b09b      	sub	sp, #108	; 0x6c
 8009484:	da05      	bge.n	8009492 <_vsniprintf_r+0x1a>
 8009486:	238b      	movs	r3, #139	; 0x8b
 8009488:	6003      	str	r3, [r0, #0]
 800948a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800948e:	b01b      	add	sp, #108	; 0x6c
 8009490:	bd30      	pop	{r4, r5, pc}
 8009492:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009496:	f8ad 300c 	strh.w	r3, [sp, #12]
 800949a:	bf0c      	ite	eq
 800949c:	4623      	moveq	r3, r4
 800949e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80094a2:	9302      	str	r3, [sp, #8]
 80094a4:	9305      	str	r3, [sp, #20]
 80094a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094aa:	9100      	str	r1, [sp, #0]
 80094ac:	9104      	str	r1, [sp, #16]
 80094ae:	f8ad 300e 	strh.w	r3, [sp, #14]
 80094b2:	4669      	mov	r1, sp
 80094b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80094b6:	f000 f91d 	bl	80096f4 <_svfiprintf_r>
 80094ba:	1c43      	adds	r3, r0, #1
 80094bc:	bfbc      	itt	lt
 80094be:	238b      	movlt	r3, #139	; 0x8b
 80094c0:	602b      	strlt	r3, [r5, #0]
 80094c2:	2c00      	cmp	r4, #0
 80094c4:	d0e3      	beq.n	800948e <_vsniprintf_r+0x16>
 80094c6:	2200      	movs	r2, #0
 80094c8:	9b00      	ldr	r3, [sp, #0]
 80094ca:	701a      	strb	r2, [r3, #0]
 80094cc:	e7df      	b.n	800948e <_vsniprintf_r+0x16>
	...

080094d0 <vsniprintf>:
 80094d0:	b507      	push	{r0, r1, r2, lr}
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	4613      	mov	r3, r2
 80094d6:	460a      	mov	r2, r1
 80094d8:	4601      	mov	r1, r0
 80094da:	4803      	ldr	r0, [pc, #12]	; (80094e8 <vsniprintf+0x18>)
 80094dc:	6800      	ldr	r0, [r0, #0]
 80094de:	f7ff ffcb 	bl	8009478 <_vsniprintf_r>
 80094e2:	b003      	add	sp, #12
 80094e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80094e8:	2000038c 	.word	0x2000038c

080094ec <memcmp>:
 80094ec:	b510      	push	{r4, lr}
 80094ee:	3901      	subs	r1, #1
 80094f0:	4402      	add	r2, r0
 80094f2:	4290      	cmp	r0, r2
 80094f4:	d101      	bne.n	80094fa <memcmp+0xe>
 80094f6:	2000      	movs	r0, #0
 80094f8:	e005      	b.n	8009506 <memcmp+0x1a>
 80094fa:	7803      	ldrb	r3, [r0, #0]
 80094fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009500:	42a3      	cmp	r3, r4
 8009502:	d001      	beq.n	8009508 <memcmp+0x1c>
 8009504:	1b18      	subs	r0, r3, r4
 8009506:	bd10      	pop	{r4, pc}
 8009508:	3001      	adds	r0, #1
 800950a:	e7f2      	b.n	80094f2 <memcmp+0x6>

0800950c <memset>:
 800950c:	4603      	mov	r3, r0
 800950e:	4402      	add	r2, r0
 8009510:	4293      	cmp	r3, r2
 8009512:	d100      	bne.n	8009516 <memset+0xa>
 8009514:	4770      	bx	lr
 8009516:	f803 1b01 	strb.w	r1, [r3], #1
 800951a:	e7f9      	b.n	8009510 <memset+0x4>

0800951c <_sbrk_r>:
 800951c:	b538      	push	{r3, r4, r5, lr}
 800951e:	2300      	movs	r3, #0
 8009520:	4d05      	ldr	r5, [pc, #20]	; (8009538 <_sbrk_r+0x1c>)
 8009522:	4604      	mov	r4, r0
 8009524:	4608      	mov	r0, r1
 8009526:	602b      	str	r3, [r5, #0]
 8009528:	f7f7 fda4 	bl	8001074 <_sbrk>
 800952c:	1c43      	adds	r3, r0, #1
 800952e:	d102      	bne.n	8009536 <_sbrk_r+0x1a>
 8009530:	682b      	ldr	r3, [r5, #0]
 8009532:	b103      	cbz	r3, 8009536 <_sbrk_r+0x1a>
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	bd38      	pop	{r3, r4, r5, pc}
 8009538:	2000170c 	.word	0x2000170c

0800953c <__errno>:
 800953c:	4b01      	ldr	r3, [pc, #4]	; (8009544 <__errno+0x8>)
 800953e:	6818      	ldr	r0, [r3, #0]
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	2000038c 	.word	0x2000038c

08009548 <__libc_init_array>:
 8009548:	b570      	push	{r4, r5, r6, lr}
 800954a:	2600      	movs	r6, #0
 800954c:	4d0c      	ldr	r5, [pc, #48]	; (8009580 <__libc_init_array+0x38>)
 800954e:	4c0d      	ldr	r4, [pc, #52]	; (8009584 <__libc_init_array+0x3c>)
 8009550:	1b64      	subs	r4, r4, r5
 8009552:	10a4      	asrs	r4, r4, #2
 8009554:	42a6      	cmp	r6, r4
 8009556:	d109      	bne.n	800956c <__libc_init_array+0x24>
 8009558:	f000 fbbe 	bl	8009cd8 <_init>
 800955c:	2600      	movs	r6, #0
 800955e:	4d0a      	ldr	r5, [pc, #40]	; (8009588 <__libc_init_array+0x40>)
 8009560:	4c0a      	ldr	r4, [pc, #40]	; (800958c <__libc_init_array+0x44>)
 8009562:	1b64      	subs	r4, r4, r5
 8009564:	10a4      	asrs	r4, r4, #2
 8009566:	42a6      	cmp	r6, r4
 8009568:	d105      	bne.n	8009576 <__libc_init_array+0x2e>
 800956a:	bd70      	pop	{r4, r5, r6, pc}
 800956c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009570:	4798      	blx	r3
 8009572:	3601      	adds	r6, #1
 8009574:	e7ee      	b.n	8009554 <__libc_init_array+0xc>
 8009576:	f855 3b04 	ldr.w	r3, [r5], #4
 800957a:	4798      	blx	r3
 800957c:	3601      	adds	r6, #1
 800957e:	e7f2      	b.n	8009566 <__libc_init_array+0x1e>
 8009580:	08009fa0 	.word	0x08009fa0
 8009584:	08009fa0 	.word	0x08009fa0
 8009588:	08009fa0 	.word	0x08009fa0
 800958c:	08009fa4 	.word	0x08009fa4

08009590 <__retarget_lock_acquire_recursive>:
 8009590:	4770      	bx	lr

08009592 <__retarget_lock_release_recursive>:
 8009592:	4770      	bx	lr

08009594 <memcpy>:
 8009594:	440a      	add	r2, r1
 8009596:	4291      	cmp	r1, r2
 8009598:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800959c:	d100      	bne.n	80095a0 <memcpy+0xc>
 800959e:	4770      	bx	lr
 80095a0:	b510      	push	{r4, lr}
 80095a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095a6:	4291      	cmp	r1, r2
 80095a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095ac:	d1f9      	bne.n	80095a2 <memcpy+0xe>
 80095ae:	bd10      	pop	{r4, pc}

080095b0 <_free_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	4605      	mov	r5, r0
 80095b4:	2900      	cmp	r1, #0
 80095b6:	d040      	beq.n	800963a <_free_r+0x8a>
 80095b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095bc:	1f0c      	subs	r4, r1, #4
 80095be:	2b00      	cmp	r3, #0
 80095c0:	bfb8      	it	lt
 80095c2:	18e4      	addlt	r4, r4, r3
 80095c4:	f7ff ff18 	bl	80093f8 <__malloc_lock>
 80095c8:	4a1c      	ldr	r2, [pc, #112]	; (800963c <_free_r+0x8c>)
 80095ca:	6813      	ldr	r3, [r2, #0]
 80095cc:	b933      	cbnz	r3, 80095dc <_free_r+0x2c>
 80095ce:	6063      	str	r3, [r4, #4]
 80095d0:	6014      	str	r4, [r2, #0]
 80095d2:	4628      	mov	r0, r5
 80095d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095d8:	f7ff bf14 	b.w	8009404 <__malloc_unlock>
 80095dc:	42a3      	cmp	r3, r4
 80095de:	d908      	bls.n	80095f2 <_free_r+0x42>
 80095e0:	6820      	ldr	r0, [r4, #0]
 80095e2:	1821      	adds	r1, r4, r0
 80095e4:	428b      	cmp	r3, r1
 80095e6:	bf01      	itttt	eq
 80095e8:	6819      	ldreq	r1, [r3, #0]
 80095ea:	685b      	ldreq	r3, [r3, #4]
 80095ec:	1809      	addeq	r1, r1, r0
 80095ee:	6021      	streq	r1, [r4, #0]
 80095f0:	e7ed      	b.n	80095ce <_free_r+0x1e>
 80095f2:	461a      	mov	r2, r3
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	b10b      	cbz	r3, 80095fc <_free_r+0x4c>
 80095f8:	42a3      	cmp	r3, r4
 80095fa:	d9fa      	bls.n	80095f2 <_free_r+0x42>
 80095fc:	6811      	ldr	r1, [r2, #0]
 80095fe:	1850      	adds	r0, r2, r1
 8009600:	42a0      	cmp	r0, r4
 8009602:	d10b      	bne.n	800961c <_free_r+0x6c>
 8009604:	6820      	ldr	r0, [r4, #0]
 8009606:	4401      	add	r1, r0
 8009608:	1850      	adds	r0, r2, r1
 800960a:	4283      	cmp	r3, r0
 800960c:	6011      	str	r1, [r2, #0]
 800960e:	d1e0      	bne.n	80095d2 <_free_r+0x22>
 8009610:	6818      	ldr	r0, [r3, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	4408      	add	r0, r1
 8009616:	6010      	str	r0, [r2, #0]
 8009618:	6053      	str	r3, [r2, #4]
 800961a:	e7da      	b.n	80095d2 <_free_r+0x22>
 800961c:	d902      	bls.n	8009624 <_free_r+0x74>
 800961e:	230c      	movs	r3, #12
 8009620:	602b      	str	r3, [r5, #0]
 8009622:	e7d6      	b.n	80095d2 <_free_r+0x22>
 8009624:	6820      	ldr	r0, [r4, #0]
 8009626:	1821      	adds	r1, r4, r0
 8009628:	428b      	cmp	r3, r1
 800962a:	bf01      	itttt	eq
 800962c:	6819      	ldreq	r1, [r3, #0]
 800962e:	685b      	ldreq	r3, [r3, #4]
 8009630:	1809      	addeq	r1, r1, r0
 8009632:	6021      	streq	r1, [r4, #0]
 8009634:	6063      	str	r3, [r4, #4]
 8009636:	6054      	str	r4, [r2, #4]
 8009638:	e7cb      	b.n	80095d2 <_free_r+0x22>
 800963a:	bd38      	pop	{r3, r4, r5, pc}
 800963c:	200015cc 	.word	0x200015cc

08009640 <__ssputs_r>:
 8009640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009644:	461f      	mov	r7, r3
 8009646:	688e      	ldr	r6, [r1, #8]
 8009648:	4682      	mov	sl, r0
 800964a:	42be      	cmp	r6, r7
 800964c:	460c      	mov	r4, r1
 800964e:	4690      	mov	r8, r2
 8009650:	680b      	ldr	r3, [r1, #0]
 8009652:	d82c      	bhi.n	80096ae <__ssputs_r+0x6e>
 8009654:	898a      	ldrh	r2, [r1, #12]
 8009656:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800965a:	d026      	beq.n	80096aa <__ssputs_r+0x6a>
 800965c:	6965      	ldr	r5, [r4, #20]
 800965e:	6909      	ldr	r1, [r1, #16]
 8009660:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009664:	eba3 0901 	sub.w	r9, r3, r1
 8009668:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800966c:	1c7b      	adds	r3, r7, #1
 800966e:	444b      	add	r3, r9
 8009670:	106d      	asrs	r5, r5, #1
 8009672:	429d      	cmp	r5, r3
 8009674:	bf38      	it	cc
 8009676:	461d      	movcc	r5, r3
 8009678:	0553      	lsls	r3, r2, #21
 800967a:	d527      	bpl.n	80096cc <__ssputs_r+0x8c>
 800967c:	4629      	mov	r1, r5
 800967e:	f7ff fe3b 	bl	80092f8 <_malloc_r>
 8009682:	4606      	mov	r6, r0
 8009684:	b360      	cbz	r0, 80096e0 <__ssputs_r+0xa0>
 8009686:	464a      	mov	r2, r9
 8009688:	6921      	ldr	r1, [r4, #16]
 800968a:	f7ff ff83 	bl	8009594 <memcpy>
 800968e:	89a3      	ldrh	r3, [r4, #12]
 8009690:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009698:	81a3      	strh	r3, [r4, #12]
 800969a:	6126      	str	r6, [r4, #16]
 800969c:	444e      	add	r6, r9
 800969e:	6026      	str	r6, [r4, #0]
 80096a0:	463e      	mov	r6, r7
 80096a2:	6165      	str	r5, [r4, #20]
 80096a4:	eba5 0509 	sub.w	r5, r5, r9
 80096a8:	60a5      	str	r5, [r4, #8]
 80096aa:	42be      	cmp	r6, r7
 80096ac:	d900      	bls.n	80096b0 <__ssputs_r+0x70>
 80096ae:	463e      	mov	r6, r7
 80096b0:	4632      	mov	r2, r6
 80096b2:	4641      	mov	r1, r8
 80096b4:	6820      	ldr	r0, [r4, #0]
 80096b6:	f000 faaf 	bl	8009c18 <memmove>
 80096ba:	2000      	movs	r0, #0
 80096bc:	68a3      	ldr	r3, [r4, #8]
 80096be:	1b9b      	subs	r3, r3, r6
 80096c0:	60a3      	str	r3, [r4, #8]
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	4433      	add	r3, r6
 80096c6:	6023      	str	r3, [r4, #0]
 80096c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096cc:	462a      	mov	r2, r5
 80096ce:	f000 facb 	bl	8009c68 <_realloc_r>
 80096d2:	4606      	mov	r6, r0
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d1e0      	bne.n	800969a <__ssputs_r+0x5a>
 80096d8:	4650      	mov	r0, sl
 80096da:	6921      	ldr	r1, [r4, #16]
 80096dc:	f7ff ff68 	bl	80095b0 <_free_r>
 80096e0:	230c      	movs	r3, #12
 80096e2:	f8ca 3000 	str.w	r3, [sl]
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096f0:	81a3      	strh	r3, [r4, #12]
 80096f2:	e7e9      	b.n	80096c8 <__ssputs_r+0x88>

080096f4 <_svfiprintf_r>:
 80096f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f8:	4698      	mov	r8, r3
 80096fa:	898b      	ldrh	r3, [r1, #12]
 80096fc:	4607      	mov	r7, r0
 80096fe:	061b      	lsls	r3, r3, #24
 8009700:	460d      	mov	r5, r1
 8009702:	4614      	mov	r4, r2
 8009704:	b09d      	sub	sp, #116	; 0x74
 8009706:	d50e      	bpl.n	8009726 <_svfiprintf_r+0x32>
 8009708:	690b      	ldr	r3, [r1, #16]
 800970a:	b963      	cbnz	r3, 8009726 <_svfiprintf_r+0x32>
 800970c:	2140      	movs	r1, #64	; 0x40
 800970e:	f7ff fdf3 	bl	80092f8 <_malloc_r>
 8009712:	6028      	str	r0, [r5, #0]
 8009714:	6128      	str	r0, [r5, #16]
 8009716:	b920      	cbnz	r0, 8009722 <_svfiprintf_r+0x2e>
 8009718:	230c      	movs	r3, #12
 800971a:	603b      	str	r3, [r7, #0]
 800971c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009720:	e0d0      	b.n	80098c4 <_svfiprintf_r+0x1d0>
 8009722:	2340      	movs	r3, #64	; 0x40
 8009724:	616b      	str	r3, [r5, #20]
 8009726:	2300      	movs	r3, #0
 8009728:	9309      	str	r3, [sp, #36]	; 0x24
 800972a:	2320      	movs	r3, #32
 800972c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009730:	2330      	movs	r3, #48	; 0x30
 8009732:	f04f 0901 	mov.w	r9, #1
 8009736:	f8cd 800c 	str.w	r8, [sp, #12]
 800973a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80098dc <_svfiprintf_r+0x1e8>
 800973e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009742:	4623      	mov	r3, r4
 8009744:	469a      	mov	sl, r3
 8009746:	f813 2b01 	ldrb.w	r2, [r3], #1
 800974a:	b10a      	cbz	r2, 8009750 <_svfiprintf_r+0x5c>
 800974c:	2a25      	cmp	r2, #37	; 0x25
 800974e:	d1f9      	bne.n	8009744 <_svfiprintf_r+0x50>
 8009750:	ebba 0b04 	subs.w	fp, sl, r4
 8009754:	d00b      	beq.n	800976e <_svfiprintf_r+0x7a>
 8009756:	465b      	mov	r3, fp
 8009758:	4622      	mov	r2, r4
 800975a:	4629      	mov	r1, r5
 800975c:	4638      	mov	r0, r7
 800975e:	f7ff ff6f 	bl	8009640 <__ssputs_r>
 8009762:	3001      	adds	r0, #1
 8009764:	f000 80a9 	beq.w	80098ba <_svfiprintf_r+0x1c6>
 8009768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800976a:	445a      	add	r2, fp
 800976c:	9209      	str	r2, [sp, #36]	; 0x24
 800976e:	f89a 3000 	ldrb.w	r3, [sl]
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 80a1 	beq.w	80098ba <_svfiprintf_r+0x1c6>
 8009778:	2300      	movs	r3, #0
 800977a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800977e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009782:	f10a 0a01 	add.w	sl, sl, #1
 8009786:	9304      	str	r3, [sp, #16]
 8009788:	9307      	str	r3, [sp, #28]
 800978a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800978e:	931a      	str	r3, [sp, #104]	; 0x68
 8009790:	4654      	mov	r4, sl
 8009792:	2205      	movs	r2, #5
 8009794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009798:	4850      	ldr	r0, [pc, #320]	; (80098dc <_svfiprintf_r+0x1e8>)
 800979a:	f000 fa57 	bl	8009c4c <memchr>
 800979e:	9a04      	ldr	r2, [sp, #16]
 80097a0:	b9d8      	cbnz	r0, 80097da <_svfiprintf_r+0xe6>
 80097a2:	06d0      	lsls	r0, r2, #27
 80097a4:	bf44      	itt	mi
 80097a6:	2320      	movmi	r3, #32
 80097a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ac:	0711      	lsls	r1, r2, #28
 80097ae:	bf44      	itt	mi
 80097b0:	232b      	movmi	r3, #43	; 0x2b
 80097b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097b6:	f89a 3000 	ldrb.w	r3, [sl]
 80097ba:	2b2a      	cmp	r3, #42	; 0x2a
 80097bc:	d015      	beq.n	80097ea <_svfiprintf_r+0xf6>
 80097be:	4654      	mov	r4, sl
 80097c0:	2000      	movs	r0, #0
 80097c2:	f04f 0c0a 	mov.w	ip, #10
 80097c6:	9a07      	ldr	r2, [sp, #28]
 80097c8:	4621      	mov	r1, r4
 80097ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097ce:	3b30      	subs	r3, #48	; 0x30
 80097d0:	2b09      	cmp	r3, #9
 80097d2:	d94d      	bls.n	8009870 <_svfiprintf_r+0x17c>
 80097d4:	b1b0      	cbz	r0, 8009804 <_svfiprintf_r+0x110>
 80097d6:	9207      	str	r2, [sp, #28]
 80097d8:	e014      	b.n	8009804 <_svfiprintf_r+0x110>
 80097da:	eba0 0308 	sub.w	r3, r0, r8
 80097de:	fa09 f303 	lsl.w	r3, r9, r3
 80097e2:	4313      	orrs	r3, r2
 80097e4:	46a2      	mov	sl, r4
 80097e6:	9304      	str	r3, [sp, #16]
 80097e8:	e7d2      	b.n	8009790 <_svfiprintf_r+0x9c>
 80097ea:	9b03      	ldr	r3, [sp, #12]
 80097ec:	1d19      	adds	r1, r3, #4
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	9103      	str	r1, [sp, #12]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	bfbb      	ittet	lt
 80097f6:	425b      	neglt	r3, r3
 80097f8:	f042 0202 	orrlt.w	r2, r2, #2
 80097fc:	9307      	strge	r3, [sp, #28]
 80097fe:	9307      	strlt	r3, [sp, #28]
 8009800:	bfb8      	it	lt
 8009802:	9204      	strlt	r2, [sp, #16]
 8009804:	7823      	ldrb	r3, [r4, #0]
 8009806:	2b2e      	cmp	r3, #46	; 0x2e
 8009808:	d10c      	bne.n	8009824 <_svfiprintf_r+0x130>
 800980a:	7863      	ldrb	r3, [r4, #1]
 800980c:	2b2a      	cmp	r3, #42	; 0x2a
 800980e:	d134      	bne.n	800987a <_svfiprintf_r+0x186>
 8009810:	9b03      	ldr	r3, [sp, #12]
 8009812:	3402      	adds	r4, #2
 8009814:	1d1a      	adds	r2, r3, #4
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	9203      	str	r2, [sp, #12]
 800981a:	2b00      	cmp	r3, #0
 800981c:	bfb8      	it	lt
 800981e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009822:	9305      	str	r3, [sp, #20]
 8009824:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80098e0 <_svfiprintf_r+0x1ec>
 8009828:	2203      	movs	r2, #3
 800982a:	4650      	mov	r0, sl
 800982c:	7821      	ldrb	r1, [r4, #0]
 800982e:	f000 fa0d 	bl	8009c4c <memchr>
 8009832:	b138      	cbz	r0, 8009844 <_svfiprintf_r+0x150>
 8009834:	2240      	movs	r2, #64	; 0x40
 8009836:	9b04      	ldr	r3, [sp, #16]
 8009838:	eba0 000a 	sub.w	r0, r0, sl
 800983c:	4082      	lsls	r2, r0
 800983e:	4313      	orrs	r3, r2
 8009840:	3401      	adds	r4, #1
 8009842:	9304      	str	r3, [sp, #16]
 8009844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009848:	2206      	movs	r2, #6
 800984a:	4826      	ldr	r0, [pc, #152]	; (80098e4 <_svfiprintf_r+0x1f0>)
 800984c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009850:	f000 f9fc 	bl	8009c4c <memchr>
 8009854:	2800      	cmp	r0, #0
 8009856:	d038      	beq.n	80098ca <_svfiprintf_r+0x1d6>
 8009858:	4b23      	ldr	r3, [pc, #140]	; (80098e8 <_svfiprintf_r+0x1f4>)
 800985a:	bb1b      	cbnz	r3, 80098a4 <_svfiprintf_r+0x1b0>
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	3307      	adds	r3, #7
 8009860:	f023 0307 	bic.w	r3, r3, #7
 8009864:	3308      	adds	r3, #8
 8009866:	9303      	str	r3, [sp, #12]
 8009868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986a:	4433      	add	r3, r6
 800986c:	9309      	str	r3, [sp, #36]	; 0x24
 800986e:	e768      	b.n	8009742 <_svfiprintf_r+0x4e>
 8009870:	460c      	mov	r4, r1
 8009872:	2001      	movs	r0, #1
 8009874:	fb0c 3202 	mla	r2, ip, r2, r3
 8009878:	e7a6      	b.n	80097c8 <_svfiprintf_r+0xd4>
 800987a:	2300      	movs	r3, #0
 800987c:	f04f 0c0a 	mov.w	ip, #10
 8009880:	4619      	mov	r1, r3
 8009882:	3401      	adds	r4, #1
 8009884:	9305      	str	r3, [sp, #20]
 8009886:	4620      	mov	r0, r4
 8009888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800988c:	3a30      	subs	r2, #48	; 0x30
 800988e:	2a09      	cmp	r2, #9
 8009890:	d903      	bls.n	800989a <_svfiprintf_r+0x1a6>
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0c6      	beq.n	8009824 <_svfiprintf_r+0x130>
 8009896:	9105      	str	r1, [sp, #20]
 8009898:	e7c4      	b.n	8009824 <_svfiprintf_r+0x130>
 800989a:	4604      	mov	r4, r0
 800989c:	2301      	movs	r3, #1
 800989e:	fb0c 2101 	mla	r1, ip, r1, r2
 80098a2:	e7f0      	b.n	8009886 <_svfiprintf_r+0x192>
 80098a4:	ab03      	add	r3, sp, #12
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	462a      	mov	r2, r5
 80098aa:	4638      	mov	r0, r7
 80098ac:	4b0f      	ldr	r3, [pc, #60]	; (80098ec <_svfiprintf_r+0x1f8>)
 80098ae:	a904      	add	r1, sp, #16
 80098b0:	f3af 8000 	nop.w
 80098b4:	1c42      	adds	r2, r0, #1
 80098b6:	4606      	mov	r6, r0
 80098b8:	d1d6      	bne.n	8009868 <_svfiprintf_r+0x174>
 80098ba:	89ab      	ldrh	r3, [r5, #12]
 80098bc:	065b      	lsls	r3, r3, #25
 80098be:	f53f af2d 	bmi.w	800971c <_svfiprintf_r+0x28>
 80098c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098c4:	b01d      	add	sp, #116	; 0x74
 80098c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ca:	ab03      	add	r3, sp, #12
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	462a      	mov	r2, r5
 80098d0:	4638      	mov	r0, r7
 80098d2:	4b06      	ldr	r3, [pc, #24]	; (80098ec <_svfiprintf_r+0x1f8>)
 80098d4:	a904      	add	r1, sp, #16
 80098d6:	f000 f87d 	bl	80099d4 <_printf_i>
 80098da:	e7eb      	b.n	80098b4 <_svfiprintf_r+0x1c0>
 80098dc:	08009f6c 	.word	0x08009f6c
 80098e0:	08009f72 	.word	0x08009f72
 80098e4:	08009f76 	.word	0x08009f76
 80098e8:	00000000 	.word	0x00000000
 80098ec:	08009641 	.word	0x08009641

080098f0 <_printf_common>:
 80098f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f4:	4616      	mov	r6, r2
 80098f6:	4699      	mov	r9, r3
 80098f8:	688a      	ldr	r2, [r1, #8]
 80098fa:	690b      	ldr	r3, [r1, #16]
 80098fc:	4607      	mov	r7, r0
 80098fe:	4293      	cmp	r3, r2
 8009900:	bfb8      	it	lt
 8009902:	4613      	movlt	r3, r2
 8009904:	6033      	str	r3, [r6, #0]
 8009906:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800990a:	460c      	mov	r4, r1
 800990c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009910:	b10a      	cbz	r2, 8009916 <_printf_common+0x26>
 8009912:	3301      	adds	r3, #1
 8009914:	6033      	str	r3, [r6, #0]
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	0699      	lsls	r1, r3, #26
 800991a:	bf42      	ittt	mi
 800991c:	6833      	ldrmi	r3, [r6, #0]
 800991e:	3302      	addmi	r3, #2
 8009920:	6033      	strmi	r3, [r6, #0]
 8009922:	6825      	ldr	r5, [r4, #0]
 8009924:	f015 0506 	ands.w	r5, r5, #6
 8009928:	d106      	bne.n	8009938 <_printf_common+0x48>
 800992a:	f104 0a19 	add.w	sl, r4, #25
 800992e:	68e3      	ldr	r3, [r4, #12]
 8009930:	6832      	ldr	r2, [r6, #0]
 8009932:	1a9b      	subs	r3, r3, r2
 8009934:	42ab      	cmp	r3, r5
 8009936:	dc2b      	bgt.n	8009990 <_printf_common+0xa0>
 8009938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800993c:	1e13      	subs	r3, r2, #0
 800993e:	6822      	ldr	r2, [r4, #0]
 8009940:	bf18      	it	ne
 8009942:	2301      	movne	r3, #1
 8009944:	0692      	lsls	r2, r2, #26
 8009946:	d430      	bmi.n	80099aa <_printf_common+0xba>
 8009948:	4649      	mov	r1, r9
 800994a:	4638      	mov	r0, r7
 800994c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009950:	47c0      	blx	r8
 8009952:	3001      	adds	r0, #1
 8009954:	d023      	beq.n	800999e <_printf_common+0xae>
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	6922      	ldr	r2, [r4, #16]
 800995a:	f003 0306 	and.w	r3, r3, #6
 800995e:	2b04      	cmp	r3, #4
 8009960:	bf14      	ite	ne
 8009962:	2500      	movne	r5, #0
 8009964:	6833      	ldreq	r3, [r6, #0]
 8009966:	f04f 0600 	mov.w	r6, #0
 800996a:	bf08      	it	eq
 800996c:	68e5      	ldreq	r5, [r4, #12]
 800996e:	f104 041a 	add.w	r4, r4, #26
 8009972:	bf08      	it	eq
 8009974:	1aed      	subeq	r5, r5, r3
 8009976:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800997a:	bf08      	it	eq
 800997c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009980:	4293      	cmp	r3, r2
 8009982:	bfc4      	itt	gt
 8009984:	1a9b      	subgt	r3, r3, r2
 8009986:	18ed      	addgt	r5, r5, r3
 8009988:	42b5      	cmp	r5, r6
 800998a:	d11a      	bne.n	80099c2 <_printf_common+0xd2>
 800998c:	2000      	movs	r0, #0
 800998e:	e008      	b.n	80099a2 <_printf_common+0xb2>
 8009990:	2301      	movs	r3, #1
 8009992:	4652      	mov	r2, sl
 8009994:	4649      	mov	r1, r9
 8009996:	4638      	mov	r0, r7
 8009998:	47c0      	blx	r8
 800999a:	3001      	adds	r0, #1
 800999c:	d103      	bne.n	80099a6 <_printf_common+0xb6>
 800999e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099a6:	3501      	adds	r5, #1
 80099a8:	e7c1      	b.n	800992e <_printf_common+0x3e>
 80099aa:	2030      	movs	r0, #48	; 0x30
 80099ac:	18e1      	adds	r1, r4, r3
 80099ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099b2:	1c5a      	adds	r2, r3, #1
 80099b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099b8:	4422      	add	r2, r4
 80099ba:	3302      	adds	r3, #2
 80099bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099c0:	e7c2      	b.n	8009948 <_printf_common+0x58>
 80099c2:	2301      	movs	r3, #1
 80099c4:	4622      	mov	r2, r4
 80099c6:	4649      	mov	r1, r9
 80099c8:	4638      	mov	r0, r7
 80099ca:	47c0      	blx	r8
 80099cc:	3001      	adds	r0, #1
 80099ce:	d0e6      	beq.n	800999e <_printf_common+0xae>
 80099d0:	3601      	adds	r6, #1
 80099d2:	e7d9      	b.n	8009988 <_printf_common+0x98>

080099d4 <_printf_i>:
 80099d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099d8:	7e0f      	ldrb	r7, [r1, #24]
 80099da:	4691      	mov	r9, r2
 80099dc:	2f78      	cmp	r7, #120	; 0x78
 80099de:	4680      	mov	r8, r0
 80099e0:	460c      	mov	r4, r1
 80099e2:	469a      	mov	sl, r3
 80099e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099ea:	d807      	bhi.n	80099fc <_printf_i+0x28>
 80099ec:	2f62      	cmp	r7, #98	; 0x62
 80099ee:	d80a      	bhi.n	8009a06 <_printf_i+0x32>
 80099f0:	2f00      	cmp	r7, #0
 80099f2:	f000 80d5 	beq.w	8009ba0 <_printf_i+0x1cc>
 80099f6:	2f58      	cmp	r7, #88	; 0x58
 80099f8:	f000 80c1 	beq.w	8009b7e <_printf_i+0x1aa>
 80099fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a04:	e03a      	b.n	8009a7c <_printf_i+0xa8>
 8009a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a0a:	2b15      	cmp	r3, #21
 8009a0c:	d8f6      	bhi.n	80099fc <_printf_i+0x28>
 8009a0e:	a101      	add	r1, pc, #4	; (adr r1, 8009a14 <_printf_i+0x40>)
 8009a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a14:	08009a6d 	.word	0x08009a6d
 8009a18:	08009a81 	.word	0x08009a81
 8009a1c:	080099fd 	.word	0x080099fd
 8009a20:	080099fd 	.word	0x080099fd
 8009a24:	080099fd 	.word	0x080099fd
 8009a28:	080099fd 	.word	0x080099fd
 8009a2c:	08009a81 	.word	0x08009a81
 8009a30:	080099fd 	.word	0x080099fd
 8009a34:	080099fd 	.word	0x080099fd
 8009a38:	080099fd 	.word	0x080099fd
 8009a3c:	080099fd 	.word	0x080099fd
 8009a40:	08009b87 	.word	0x08009b87
 8009a44:	08009aad 	.word	0x08009aad
 8009a48:	08009b41 	.word	0x08009b41
 8009a4c:	080099fd 	.word	0x080099fd
 8009a50:	080099fd 	.word	0x080099fd
 8009a54:	08009ba9 	.word	0x08009ba9
 8009a58:	080099fd 	.word	0x080099fd
 8009a5c:	08009aad 	.word	0x08009aad
 8009a60:	080099fd 	.word	0x080099fd
 8009a64:	080099fd 	.word	0x080099fd
 8009a68:	08009b49 	.word	0x08009b49
 8009a6c:	682b      	ldr	r3, [r5, #0]
 8009a6e:	1d1a      	adds	r2, r3, #4
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	602a      	str	r2, [r5, #0]
 8009a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e0a0      	b.n	8009bc2 <_printf_i+0x1ee>
 8009a80:	6820      	ldr	r0, [r4, #0]
 8009a82:	682b      	ldr	r3, [r5, #0]
 8009a84:	0607      	lsls	r7, r0, #24
 8009a86:	f103 0104 	add.w	r1, r3, #4
 8009a8a:	6029      	str	r1, [r5, #0]
 8009a8c:	d501      	bpl.n	8009a92 <_printf_i+0xbe>
 8009a8e:	681e      	ldr	r6, [r3, #0]
 8009a90:	e003      	b.n	8009a9a <_printf_i+0xc6>
 8009a92:	0646      	lsls	r6, r0, #25
 8009a94:	d5fb      	bpl.n	8009a8e <_printf_i+0xba>
 8009a96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009a9a:	2e00      	cmp	r6, #0
 8009a9c:	da03      	bge.n	8009aa6 <_printf_i+0xd2>
 8009a9e:	232d      	movs	r3, #45	; 0x2d
 8009aa0:	4276      	negs	r6, r6
 8009aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aa6:	230a      	movs	r3, #10
 8009aa8:	4859      	ldr	r0, [pc, #356]	; (8009c10 <_printf_i+0x23c>)
 8009aaa:	e012      	b.n	8009ad2 <_printf_i+0xfe>
 8009aac:	682b      	ldr	r3, [r5, #0]
 8009aae:	6820      	ldr	r0, [r4, #0]
 8009ab0:	1d19      	adds	r1, r3, #4
 8009ab2:	6029      	str	r1, [r5, #0]
 8009ab4:	0605      	lsls	r5, r0, #24
 8009ab6:	d501      	bpl.n	8009abc <_printf_i+0xe8>
 8009ab8:	681e      	ldr	r6, [r3, #0]
 8009aba:	e002      	b.n	8009ac2 <_printf_i+0xee>
 8009abc:	0641      	lsls	r1, r0, #25
 8009abe:	d5fb      	bpl.n	8009ab8 <_printf_i+0xe4>
 8009ac0:	881e      	ldrh	r6, [r3, #0]
 8009ac2:	2f6f      	cmp	r7, #111	; 0x6f
 8009ac4:	bf0c      	ite	eq
 8009ac6:	2308      	moveq	r3, #8
 8009ac8:	230a      	movne	r3, #10
 8009aca:	4851      	ldr	r0, [pc, #324]	; (8009c10 <_printf_i+0x23c>)
 8009acc:	2100      	movs	r1, #0
 8009ace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ad2:	6865      	ldr	r5, [r4, #4]
 8009ad4:	2d00      	cmp	r5, #0
 8009ad6:	bfa8      	it	ge
 8009ad8:	6821      	ldrge	r1, [r4, #0]
 8009ada:	60a5      	str	r5, [r4, #8]
 8009adc:	bfa4      	itt	ge
 8009ade:	f021 0104 	bicge.w	r1, r1, #4
 8009ae2:	6021      	strge	r1, [r4, #0]
 8009ae4:	b90e      	cbnz	r6, 8009aea <_printf_i+0x116>
 8009ae6:	2d00      	cmp	r5, #0
 8009ae8:	d04b      	beq.n	8009b82 <_printf_i+0x1ae>
 8009aea:	4615      	mov	r5, r2
 8009aec:	fbb6 f1f3 	udiv	r1, r6, r3
 8009af0:	fb03 6711 	mls	r7, r3, r1, r6
 8009af4:	5dc7      	ldrb	r7, [r0, r7]
 8009af6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009afa:	4637      	mov	r7, r6
 8009afc:	42bb      	cmp	r3, r7
 8009afe:	460e      	mov	r6, r1
 8009b00:	d9f4      	bls.n	8009aec <_printf_i+0x118>
 8009b02:	2b08      	cmp	r3, #8
 8009b04:	d10b      	bne.n	8009b1e <_printf_i+0x14a>
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	07de      	lsls	r6, r3, #31
 8009b0a:	d508      	bpl.n	8009b1e <_printf_i+0x14a>
 8009b0c:	6923      	ldr	r3, [r4, #16]
 8009b0e:	6861      	ldr	r1, [r4, #4]
 8009b10:	4299      	cmp	r1, r3
 8009b12:	bfde      	ittt	le
 8009b14:	2330      	movle	r3, #48	; 0x30
 8009b16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b1a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009b1e:	1b52      	subs	r2, r2, r5
 8009b20:	6122      	str	r2, [r4, #16]
 8009b22:	464b      	mov	r3, r9
 8009b24:	4621      	mov	r1, r4
 8009b26:	4640      	mov	r0, r8
 8009b28:	f8cd a000 	str.w	sl, [sp]
 8009b2c:	aa03      	add	r2, sp, #12
 8009b2e:	f7ff fedf 	bl	80098f0 <_printf_common>
 8009b32:	3001      	adds	r0, #1
 8009b34:	d14a      	bne.n	8009bcc <_printf_i+0x1f8>
 8009b36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b3a:	b004      	add	sp, #16
 8009b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	f043 0320 	orr.w	r3, r3, #32
 8009b46:	6023      	str	r3, [r4, #0]
 8009b48:	2778      	movs	r7, #120	; 0x78
 8009b4a:	4832      	ldr	r0, [pc, #200]	; (8009c14 <_printf_i+0x240>)
 8009b4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b50:	6823      	ldr	r3, [r4, #0]
 8009b52:	6829      	ldr	r1, [r5, #0]
 8009b54:	061f      	lsls	r7, r3, #24
 8009b56:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b5a:	d402      	bmi.n	8009b62 <_printf_i+0x18e>
 8009b5c:	065f      	lsls	r7, r3, #25
 8009b5e:	bf48      	it	mi
 8009b60:	b2b6      	uxthmi	r6, r6
 8009b62:	07df      	lsls	r7, r3, #31
 8009b64:	bf48      	it	mi
 8009b66:	f043 0320 	orrmi.w	r3, r3, #32
 8009b6a:	6029      	str	r1, [r5, #0]
 8009b6c:	bf48      	it	mi
 8009b6e:	6023      	strmi	r3, [r4, #0]
 8009b70:	b91e      	cbnz	r6, 8009b7a <_printf_i+0x1a6>
 8009b72:	6823      	ldr	r3, [r4, #0]
 8009b74:	f023 0320 	bic.w	r3, r3, #32
 8009b78:	6023      	str	r3, [r4, #0]
 8009b7a:	2310      	movs	r3, #16
 8009b7c:	e7a6      	b.n	8009acc <_printf_i+0xf8>
 8009b7e:	4824      	ldr	r0, [pc, #144]	; (8009c10 <_printf_i+0x23c>)
 8009b80:	e7e4      	b.n	8009b4c <_printf_i+0x178>
 8009b82:	4615      	mov	r5, r2
 8009b84:	e7bd      	b.n	8009b02 <_printf_i+0x12e>
 8009b86:	682b      	ldr	r3, [r5, #0]
 8009b88:	6826      	ldr	r6, [r4, #0]
 8009b8a:	1d18      	adds	r0, r3, #4
 8009b8c:	6961      	ldr	r1, [r4, #20]
 8009b8e:	6028      	str	r0, [r5, #0]
 8009b90:	0635      	lsls	r5, r6, #24
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	d501      	bpl.n	8009b9a <_printf_i+0x1c6>
 8009b96:	6019      	str	r1, [r3, #0]
 8009b98:	e002      	b.n	8009ba0 <_printf_i+0x1cc>
 8009b9a:	0670      	lsls	r0, r6, #25
 8009b9c:	d5fb      	bpl.n	8009b96 <_printf_i+0x1c2>
 8009b9e:	8019      	strh	r1, [r3, #0]
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	4615      	mov	r5, r2
 8009ba4:	6123      	str	r3, [r4, #16]
 8009ba6:	e7bc      	b.n	8009b22 <_printf_i+0x14e>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	2100      	movs	r1, #0
 8009bac:	1d1a      	adds	r2, r3, #4
 8009bae:	602a      	str	r2, [r5, #0]
 8009bb0:	681d      	ldr	r5, [r3, #0]
 8009bb2:	6862      	ldr	r2, [r4, #4]
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	f000 f849 	bl	8009c4c <memchr>
 8009bba:	b108      	cbz	r0, 8009bc0 <_printf_i+0x1ec>
 8009bbc:	1b40      	subs	r0, r0, r5
 8009bbe:	6060      	str	r0, [r4, #4]
 8009bc0:	6863      	ldr	r3, [r4, #4]
 8009bc2:	6123      	str	r3, [r4, #16]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bca:	e7aa      	b.n	8009b22 <_printf_i+0x14e>
 8009bcc:	462a      	mov	r2, r5
 8009bce:	4649      	mov	r1, r9
 8009bd0:	4640      	mov	r0, r8
 8009bd2:	6923      	ldr	r3, [r4, #16]
 8009bd4:	47d0      	blx	sl
 8009bd6:	3001      	adds	r0, #1
 8009bd8:	d0ad      	beq.n	8009b36 <_printf_i+0x162>
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	079b      	lsls	r3, r3, #30
 8009bde:	d413      	bmi.n	8009c08 <_printf_i+0x234>
 8009be0:	68e0      	ldr	r0, [r4, #12]
 8009be2:	9b03      	ldr	r3, [sp, #12]
 8009be4:	4298      	cmp	r0, r3
 8009be6:	bfb8      	it	lt
 8009be8:	4618      	movlt	r0, r3
 8009bea:	e7a6      	b.n	8009b3a <_printf_i+0x166>
 8009bec:	2301      	movs	r3, #1
 8009bee:	4632      	mov	r2, r6
 8009bf0:	4649      	mov	r1, r9
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	47d0      	blx	sl
 8009bf6:	3001      	adds	r0, #1
 8009bf8:	d09d      	beq.n	8009b36 <_printf_i+0x162>
 8009bfa:	3501      	adds	r5, #1
 8009bfc:	68e3      	ldr	r3, [r4, #12]
 8009bfe:	9903      	ldr	r1, [sp, #12]
 8009c00:	1a5b      	subs	r3, r3, r1
 8009c02:	42ab      	cmp	r3, r5
 8009c04:	dcf2      	bgt.n	8009bec <_printf_i+0x218>
 8009c06:	e7eb      	b.n	8009be0 <_printf_i+0x20c>
 8009c08:	2500      	movs	r5, #0
 8009c0a:	f104 0619 	add.w	r6, r4, #25
 8009c0e:	e7f5      	b.n	8009bfc <_printf_i+0x228>
 8009c10:	08009f7d 	.word	0x08009f7d
 8009c14:	08009f8e 	.word	0x08009f8e

08009c18 <memmove>:
 8009c18:	4288      	cmp	r0, r1
 8009c1a:	b510      	push	{r4, lr}
 8009c1c:	eb01 0402 	add.w	r4, r1, r2
 8009c20:	d902      	bls.n	8009c28 <memmove+0x10>
 8009c22:	4284      	cmp	r4, r0
 8009c24:	4623      	mov	r3, r4
 8009c26:	d807      	bhi.n	8009c38 <memmove+0x20>
 8009c28:	1e43      	subs	r3, r0, #1
 8009c2a:	42a1      	cmp	r1, r4
 8009c2c:	d008      	beq.n	8009c40 <memmove+0x28>
 8009c2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c36:	e7f8      	b.n	8009c2a <memmove+0x12>
 8009c38:	4601      	mov	r1, r0
 8009c3a:	4402      	add	r2, r0
 8009c3c:	428a      	cmp	r2, r1
 8009c3e:	d100      	bne.n	8009c42 <memmove+0x2a>
 8009c40:	bd10      	pop	{r4, pc}
 8009c42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c4a:	e7f7      	b.n	8009c3c <memmove+0x24>

08009c4c <memchr>:
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	b510      	push	{r4, lr}
 8009c50:	b2c9      	uxtb	r1, r1
 8009c52:	4402      	add	r2, r0
 8009c54:	4293      	cmp	r3, r2
 8009c56:	4618      	mov	r0, r3
 8009c58:	d101      	bne.n	8009c5e <memchr+0x12>
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	e003      	b.n	8009c66 <memchr+0x1a>
 8009c5e:	7804      	ldrb	r4, [r0, #0]
 8009c60:	3301      	adds	r3, #1
 8009c62:	428c      	cmp	r4, r1
 8009c64:	d1f6      	bne.n	8009c54 <memchr+0x8>
 8009c66:	bd10      	pop	{r4, pc}

08009c68 <_realloc_r>:
 8009c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c6c:	4680      	mov	r8, r0
 8009c6e:	4614      	mov	r4, r2
 8009c70:	460e      	mov	r6, r1
 8009c72:	b921      	cbnz	r1, 8009c7e <_realloc_r+0x16>
 8009c74:	4611      	mov	r1, r2
 8009c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c7a:	f7ff bb3d 	b.w	80092f8 <_malloc_r>
 8009c7e:	b92a      	cbnz	r2, 8009c8c <_realloc_r+0x24>
 8009c80:	f7ff fc96 	bl	80095b0 <_free_r>
 8009c84:	4625      	mov	r5, r4
 8009c86:	4628      	mov	r0, r5
 8009c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c8c:	f000 f81b 	bl	8009cc6 <_malloc_usable_size_r>
 8009c90:	4284      	cmp	r4, r0
 8009c92:	4607      	mov	r7, r0
 8009c94:	d802      	bhi.n	8009c9c <_realloc_r+0x34>
 8009c96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c9a:	d812      	bhi.n	8009cc2 <_realloc_r+0x5a>
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	4640      	mov	r0, r8
 8009ca0:	f7ff fb2a 	bl	80092f8 <_malloc_r>
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	d0ed      	beq.n	8009c86 <_realloc_r+0x1e>
 8009caa:	42bc      	cmp	r4, r7
 8009cac:	4622      	mov	r2, r4
 8009cae:	4631      	mov	r1, r6
 8009cb0:	bf28      	it	cs
 8009cb2:	463a      	movcs	r2, r7
 8009cb4:	f7ff fc6e 	bl	8009594 <memcpy>
 8009cb8:	4631      	mov	r1, r6
 8009cba:	4640      	mov	r0, r8
 8009cbc:	f7ff fc78 	bl	80095b0 <_free_r>
 8009cc0:	e7e1      	b.n	8009c86 <_realloc_r+0x1e>
 8009cc2:	4635      	mov	r5, r6
 8009cc4:	e7df      	b.n	8009c86 <_realloc_r+0x1e>

08009cc6 <_malloc_usable_size_r>:
 8009cc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cca:	1f18      	subs	r0, r3, #4
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	bfbc      	itt	lt
 8009cd0:	580b      	ldrlt	r3, [r1, r0]
 8009cd2:	18c0      	addlt	r0, r0, r3
 8009cd4:	4770      	bx	lr
	...

08009cd8 <_init>:
 8009cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cda:	bf00      	nop
 8009cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cde:	bc08      	pop	{r3}
 8009ce0:	469e      	mov	lr, r3
 8009ce2:	4770      	bx	lr

08009ce4 <_fini>:
 8009ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce6:	bf00      	nop
 8009ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cea:	bc08      	pop	{r3}
 8009cec:	469e      	mov	lr, r3
 8009cee:	4770      	bx	lr
