
doAn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002adc  08002adc  00012adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b6c  08002b6c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002b6c  08002b6c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b6c  08002b6c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b6c  08002b6c  00012b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000084  08002bf8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08002bf8  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY
 13 .debug_info   000094b8  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cc1  00000000  00000000  000295a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  0002b270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000627  00000000  00000000  0002ba98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015711  00000000  00000000  0002c0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f2b  00000000  00000000  000417d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080f23  00000000  00000000  0004b6fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002840  00000000  00000000  000cc620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000cee60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000084 	.word	0x20000084
 8000158:	00000000 	.word	0x00000000
 800015c:	08002ac4 	.word	0x08002ac4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000088 	.word	0x20000088
 8000178:	08002ac4 	.word	0x08002ac4

0800017c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000184:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000188:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800018c:	f003 0301 	and.w	r3, r3, #1
 8000190:	2b00      	cmp	r3, #0
 8000192:	d013      	beq.n	80001bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000194:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000198:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800019c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d00b      	beq.n	80001bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001a4:	e000      	b.n	80001a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80001a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d0f9      	beq.n	80001a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80001b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001b6:	687a      	ldr	r2, [r7, #4]
 80001b8:	b2d2      	uxtb	r2, r2
 80001ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80001bc:	687b      	ldr	r3, [r7, #4]
}
 80001be:	4618      	mov	r0, r3
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr

080001c8 <_write>:
static void MX_GPIO_Init(void);
static void MX_SPI2_Init(void);
static void MX_TIM4_Init(void);
static void MX_USART2_UART_Init(void);

int _write(int file, char *ptr, int len) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80001d4:	2300      	movs	r3, #0
 80001d6:	617b      	str	r3, [r7, #20]
 80001d8:	e009      	b.n	80001ee <_write+0x26>
		ITM_SendChar(*ptr++);
 80001da:	68bb      	ldr	r3, [r7, #8]
 80001dc:	1c5a      	adds	r2, r3, #1
 80001de:	60ba      	str	r2, [r7, #8]
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	4618      	mov	r0, r3
 80001e4:	f7ff ffca 	bl	800017c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80001e8:	697b      	ldr	r3, [r7, #20]
 80001ea:	3301      	adds	r3, #1
 80001ec:	617b      	str	r3, [r7, #20]
 80001ee:	697a      	ldr	r2, [r7, #20]
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	dbf1      	blt.n	80001da <_write+0x12>
	}
	return len;
 80001f6:	687b      	ldr	r3, [r7, #4]
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	3718      	adds	r7, #24
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <board_init>:

TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart2;

void board_init() {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	HAL_Init();
 8000204:	f000 fa6a 	bl	80006dc <HAL_Init>
	MX_USART2_UART_Init();
 8000208:	f000 f802 	bl	8000210 <MX_USART2_UART_Init>
}
 800020c:	bf00      	nop
 800020e:	bd80      	pop	{r7, pc}

08000210 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000214:	4b11      	ldr	r3, [pc, #68]	; (800025c <MX_USART2_UART_Init+0x4c>)
 8000216:	4a12      	ldr	r2, [pc, #72]	; (8000260 <MX_USART2_UART_Init+0x50>)
 8000218:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800021a:	4b10      	ldr	r3, [pc, #64]	; (800025c <MX_USART2_UART_Init+0x4c>)
 800021c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000220:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <MX_USART2_UART_Init+0x4c>)
 8000224:	2200      	movs	r2, #0
 8000226:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_USART2_UART_Init+0x4c>)
 800022a:	2200      	movs	r2, #0
 800022c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <MX_USART2_UART_Init+0x4c>)
 8000230:	2200      	movs	r2, #0
 8000232:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000234:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_USART2_UART_Init+0x4c>)
 8000236:	220c      	movs	r2, #12
 8000238:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800023a:	4b08      	ldr	r3, [pc, #32]	; (800025c <MX_USART2_UART_Init+0x4c>)
 800023c:	2200      	movs	r2, #0
 800023e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <MX_USART2_UART_Init+0x4c>)
 8000242:	2200      	movs	r2, #0
 8000244:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000246:	4805      	ldr	r0, [pc, #20]	; (800025c <MX_USART2_UART_Init+0x4c>)
 8000248:	f000 fdea 	bl	8000e20 <HAL_UART_Init>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000252:	f000 f807 	bl	8000264 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	200000a0 	.word	0x200000a0
 8000260:	40004400 	.word	0x40004400

08000264 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000268:	b672      	cpsid	i
}
 800026a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800026c:	e7fe      	b.n	800026c <Error_Handler+0x8>

0800026e <log_put>:
#include "string.h"
#include "rc522.h"

#define TAG "main"

void log_put(const char* _log) {
 800026e:	b580      	push	{r7, lr}
 8000270:	b082      	sub	sp, #8
 8000272:	af00      	add	r7, sp, #0
 8000274:	6078      	str	r0, [r7, #4]
    printf("%s\n", _log);
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f001 fd7a 	bl	8001d70 <puts>
}
 800027c:	bf00      	nop
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <main>:
}app_t;
app_t app;


int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	board_init();
 8000288:	f7ff ffba 	bl	8000200 <board_init>
	sm_logger_init(log_put, LOG_LEVEL_DEBUG);
 800028c:	2103      	movs	r1, #3
 800028e:	4807      	ldr	r0, [pc, #28]	; (80002ac <main+0x28>)
 8000290:	f000 f97e 	bl	8000590 <sm_logger_init>
	LOG_INF(TAG, "Start slave light app");
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <main+0x2c>)
 8000296:	4907      	ldr	r1, [pc, #28]	; (80002b4 <main+0x30>)
 8000298:	2002      	movs	r0, #2
 800029a:	f000 f98d 	bl	80005b8 <sm_logger_show>

	HAL_UART_Receive_IT(&huart2, &app.m_rxBuffer, 1);
 800029e:	2201      	movs	r2, #1
 80002a0:	4905      	ldr	r1, [pc, #20]	; (80002b8 <main+0x34>)
 80002a2:	4806      	ldr	r0, [pc, #24]	; (80002bc <main+0x38>)
 80002a4:	f000 fe0c 	bl	8000ec0 <HAL_UART_Receive_IT>

  while (1)
 80002a8:	e7fe      	b.n	80002a8 <main+0x24>
 80002aa:	bf00      	nop
 80002ac:	0800026f 	.word	0x0800026f
 80002b0:	08002adc 	.word	0x08002adc
 80002b4:	08002af4 	.word	0x08002af4
 80002b8:	200000e8 	.word	0x200000e8
 80002bc:	200000a0 	.word	0x200000a0

080002c0 <USART2_IRQHandler>:

  }
}

void USART2_IRQHandler(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 80002c4:	4804      	ldr	r0, [pc, #16]	; (80002d8 <USART2_IRQHandler+0x18>)
 80002c6:	f000 fe21 	bl	8000f0c <HAL_UART_IRQHandler>
	HAL_UART_Receive_IT(&huart2, &app.m_rxBuffer, 1);
 80002ca:	2201      	movs	r2, #1
 80002cc:	4903      	ldr	r1, [pc, #12]	; (80002dc <USART2_IRQHandler+0x1c>)
 80002ce:	4802      	ldr	r0, [pc, #8]	; (80002d8 <USART2_IRQHandler+0x18>)
 80002d0:	f000 fdf6 	bl	8000ec0 <HAL_UART_Receive_IT>
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	200000a0 	.word	0x200000a0
 80002dc:	200000e8 	.word	0x200000e8

080002e0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80002e4:	f000 fa4c 	bl	8000780 <HAL_IncTick>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}

080002ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80002f2:	4b14      	ldr	r3, [pc, #80]	; (8000344 <HAL_MspInit+0x58>)
 80002f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002f6:	4a13      	ldr	r2, [pc, #76]	; (8000344 <HAL_MspInit+0x58>)
 80002f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002fc:	6253      	str	r3, [r2, #36]	; 0x24
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <HAL_MspInit+0x58>)
 8000300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000302:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <HAL_MspInit+0x58>)
 800030c:	6a1b      	ldr	r3, [r3, #32]
 800030e:	4a0d      	ldr	r2, [pc, #52]	; (8000344 <HAL_MspInit+0x58>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6213      	str	r3, [r2, #32]
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <HAL_MspInit+0x58>)
 8000318:	6a1b      	ldr	r3, [r3, #32]
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	60bb      	str	r3, [r7, #8]
 8000320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <HAL_MspInit+0x58>)
 8000324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000326:	4a07      	ldr	r2, [pc, #28]	; (8000344 <HAL_MspInit+0x58>)
 8000328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800032c:	6253      	str	r3, [r2, #36]	; 0x24
 800032e:	4b05      	ldr	r3, [pc, #20]	; (8000344 <HAL_MspInit+0x58>)
 8000330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800033a:	bf00      	nop
 800033c:	3714      	adds	r7, #20
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	40023800 	.word	0x40023800

08000348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b08a      	sub	sp, #40	; 0x28
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000350:	f107 0314 	add.w	r3, r7, #20
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	60da      	str	r2, [r3, #12]
 800035e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a1b      	ldr	r2, [pc, #108]	; (80003d4 <HAL_UART_MspInit+0x8c>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d12f      	bne.n	80003ca <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800036a:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <HAL_UART_MspInit+0x90>)
 800036c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800036e:	4a1a      	ldr	r2, [pc, #104]	; (80003d8 <HAL_UART_MspInit+0x90>)
 8000370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000374:	6253      	str	r3, [r2, #36]	; 0x24
 8000376:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <HAL_UART_MspInit+0x90>)
 8000378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800037a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800037e:	613b      	str	r3, [r7, #16]
 8000380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <HAL_UART_MspInit+0x90>)
 8000384:	69db      	ldr	r3, [r3, #28]
 8000386:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <HAL_UART_MspInit+0x90>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	61d3      	str	r3, [r2, #28]
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <HAL_UART_MspInit+0x90>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800039a:	230c      	movs	r3, #12
 800039c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800039e:	2302      	movs	r3, #2
 80003a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003a6:	2303      	movs	r3, #3
 80003a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80003aa:	2307      	movs	r3, #7
 80003ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	4619      	mov	r1, r3
 80003b4:	4809      	ldr	r0, [pc, #36]	; (80003dc <HAL_UART_MspInit+0x94>)
 80003b6:	f000 fb81 	bl	8000abc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2100      	movs	r1, #0
 80003be:	2026      	movs	r0, #38	; 0x26
 80003c0:	f000 fac7 	bl	8000952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80003c4:	2026      	movs	r0, #38	; 0x26
 80003c6:	f000 fae0 	bl	800098a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80003ca:	bf00      	nop
 80003cc:	3728      	adds	r7, #40	; 0x28
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40004400 	.word	0x40004400
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40020000 	.word	0x40020000

080003e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003e4:	e7fe      	b.n	80003e4 <NMI_Handler+0x4>

080003e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ea:	e7fe      	b.n	80003ea <HardFault_Handler+0x4>

080003ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <MemManage_Handler+0x4>

080003f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f6:	e7fe      	b.n	80003f6 <BusFault_Handler+0x4>

080003f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003fc:	e7fe      	b.n	80003fc <UsageFault_Handler+0x4>

080003fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr

0800040a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr

08000416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800041a:	bf00      	nop
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr

08000422 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b086      	sub	sp, #24
 8000426:	af00      	add	r7, sp, #0
 8000428:	60f8      	str	r0, [r7, #12]
 800042a:	60b9      	str	r1, [r7, #8]
 800042c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
 8000432:	e00a      	b.n	800044a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000434:	f3af 8000 	nop.w
 8000438:	4601      	mov	r1, r0
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	1c5a      	adds	r2, r3, #1
 800043e:	60ba      	str	r2, [r7, #8]
 8000440:	b2ca      	uxtb	r2, r1
 8000442:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	3301      	adds	r3, #1
 8000448:	617b      	str	r3, [r7, #20]
 800044a:	697a      	ldr	r2, [r7, #20]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	429a      	cmp	r2, r3
 8000450:	dbf0      	blt.n	8000434 <_read+0x12>
  }

  return len;
 8000452:	687b      	ldr	r3, [r7, #4]
}
 8000454:	4618      	mov	r0, r3
 8000456:	3718      	adds	r7, #24
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <_close>:
  }
  return len;
}

int _close(int file)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000468:	4618      	mov	r0, r3
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr

08000472 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
 800047a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000482:	605a      	str	r2, [r3, #4]
  return 0;
 8000484:	2300      	movs	r3, #0
}
 8000486:	4618      	mov	r0, r3
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <_isatty>:

int _isatty(int file)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000498:	2301      	movs	r3, #1
}
 800049a:	4618      	mov	r0, r3
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr

080004a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004b0:	2300      	movs	r3, #0
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004c4:	4a14      	ldr	r2, [pc, #80]	; (8000518 <_sbrk+0x5c>)
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <_sbrk+0x60>)
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <_sbrk+0x64>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d102      	bne.n	80004de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <_sbrk+0x64>)
 80004da:	4a12      	ldr	r2, [pc, #72]	; (8000524 <_sbrk+0x68>)
 80004dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <_sbrk+0x64>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	693a      	ldr	r2, [r7, #16]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d207      	bcs.n	80004fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004ec:	f001 fdec 	bl	80020c8 <__errno>
 80004f0:	4603      	mov	r3, r0
 80004f2:	220c      	movs	r2, #12
 80004f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004fa:	e009      	b.n	8000510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <_sbrk+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <_sbrk+0x64>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4413      	add	r3, r2
 800050a:	4a05      	ldr	r2, [pc, #20]	; (8000520 <_sbrk+0x64>)
 800050c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800050e:	68fb      	ldr	r3, [r7, #12]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3718      	adds	r7, #24
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20002800 	.word	0x20002800
 800051c:	00000400 	.word	0x00000400
 8000520:	200000ec 	.word	0x200000ec
 8000524:	20000240 	.word	0x20000240

08000528 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000534:	f7ff fff8 	bl	8000528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000538:	480b      	ldr	r0, [pc, #44]	; (8000568 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800053a:	490c      	ldr	r1, [pc, #48]	; (800056c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800053c:	4a0c      	ldr	r2, [pc, #48]	; (8000570 <LoopFillZerobss+0x16>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000540:	e002      	b.n	8000548 <LoopCopyDataInit>

08000542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000546:	3304      	adds	r3, #4

08000548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800054c:	d3f9      	bcc.n	8000542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054e:	4a09      	ldr	r2, [pc, #36]	; (8000574 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000550:	4c09      	ldr	r4, [pc, #36]	; (8000578 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000554:	e001      	b.n	800055a <LoopFillZerobss>

08000556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000558:	3204      	adds	r2, #4

0800055a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800055c:	d3fb      	bcc.n	8000556 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800055e:	f001 fdb9 	bl	80020d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000562:	f7ff fe8f 	bl	8000284 <main>
  bx lr
 8000566:	4770      	bx	lr
  ldr r0, =_sdata
 8000568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800056c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000570:	08002b74 	.word	0x08002b74
  ldr r2, =_sbss
 8000574:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000578:	20000240 	.word	0x20000240

0800057c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800057c:	e7fe      	b.n	800057c <ADC1_IRQHandler>

0800057e <logger_put>:
#include <stdarg.h>


static const char *log_level_names[LOG_LEVEL_NUMBER] = {"ERROR","WARN ", "INFO ", "DEBUG", "TRACE" };

static void logger_put(const char *str){
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]

}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <sm_logger_init>:
 *
 * @param _fn
 * @param _level
 * @return
 */
int32_t sm_logger_init(logger_output_fn_t _fn, LOG_LEVEL _level){
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]
    g_logger.m_level= _level;
 800059c:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <sm_logger_init+0x24>)
 800059e:	78fb      	ldrb	r3, [r7, #3]
 80005a0:	7013      	strb	r3, [r2, #0]
    g_logger.m_output_fn = _fn;
 80005a2:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <sm_logger_init+0x24>)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	6053      	str	r3, [r2, #4]

    return 0;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	20000018 	.word	0x20000018

080005b8 <sm_logger_show>:
 *
 * @param _level
 * @param _tag
 * @param _log
 */
void sm_logger_show(LOG_LEVEL _level, const char* _tag, const char* _log, ...){
 80005b8:	b40c      	push	{r2, r3}
 80005ba:	b580      	push	{r7, lr}
 80005bc:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80005c0:	af02      	add	r7, sp, #8
 80005c2:	4602      	mov	r2, r0
 80005c4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80005c8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80005cc:	6019      	str	r1, [r3, #0]
 80005ce:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80005d2:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 80005d6:	701a      	strb	r2, [r3, #0]
    int len = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    char buf[LOG_BUFFER_SIZE + 2] = {0};
 80005de:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80005e2:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	3304      	adds	r3, #4
 80005ec:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fd0a 	bl	800200c <memset>
    va_list args;

    if(_level > g_logger.m_level){
 80005f8:	4b35      	ldr	r3, [pc, #212]	; (80006d0 <sm_logger_show+0x118>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8000600:	f2a2 4211 	subw	r2, r2, #1041	; 0x411
 8000604:	7812      	ldrb	r2, [r2, #0]
 8000606:	429a      	cmp	r2, r3
 8000608:	d85a      	bhi.n	80006c0 <sm_logger_show+0x108>
        return;
    }

    va_start(args, _log);
 800060a:	f207 4224 	addw	r2, r7, #1060	; 0x424
 800060e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000612:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000616:	601a      	str	r2, [r3, #0]

    len = snprintf(buf, LOG_BUFFER_SIZE, "#%s: %s: ", log_level_names[_level], _tag);
 8000618:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800061c:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	4a2c      	ldr	r2, [pc, #176]	; (80006d4 <sm_logger_show+0x11c>)
 8000624:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000628:	f107 0010 	add.w	r0, r7, #16
 800062c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000630:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	4613      	mov	r3, r2
 800063a:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <sm_logger_show+0x120>)
 800063c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000640:	f001 fb9e 	bl	8001d80 <sniprintf>
 8000644:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
    len += vsnprintf(buf + len, LOG_BUFFER_SIZE - len, _log, args);
 8000648:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800064c:	f107 0210 	add.w	r2, r7, #16
 8000650:	18d0      	adds	r0, r2, r3
 8000652:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000656:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800065a:	4619      	mov	r1, r3
 800065c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000660:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 800066a:	f001 fc2b 	bl	8001ec4 <vsniprintf>
 800066e:	4602      	mov	r2, r0
 8000670:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000674:	4413      	add	r3, r2
 8000676:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    va_end(args);

    if(len > LOG_BUFFER_SIZE){
 800067a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800067e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000682:	dd03      	ble.n	800068c <sm_logger_show+0xd4>
        len = LOG_BUFFER_SIZE;
 8000684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000688:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    }
    buf[len] = '\0';
 800068c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000690:	f5a3 6281 	sub.w	r2, r3, #1032	; 0x408
 8000694:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000698:	4413      	add	r3, r2
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]

    if(g_logger.m_output_fn)
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <sm_logger_show+0x118>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d006      	beq.n	80006b4 <sm_logger_show+0xfc>
        g_logger.m_output_fn(buf);
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <sm_logger_show+0x118>)
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	f107 0210 	add.w	r2, r7, #16
 80006ae:	4610      	mov	r0, r2
 80006b0:	4798      	blx	r3
 80006b2:	e006      	b.n	80006c2 <sm_logger_show+0x10a>
    else{
        logger_put (buf);
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff60 	bl	800057e <logger_put>
 80006be:	e000      	b.n	80006c2 <sm_logger_show+0x10a>
        return;
 80006c0:	bf00      	nop
    }
}
 80006c2:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 80006c6:	46bd      	mov	sp, r7
 80006c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006cc:	b002      	add	sp, #8
 80006ce:	4770      	bx	lr
 80006d0:	20000018 	.word	0x20000018
 80006d4:	20000004 	.word	0x20000004
 80006d8:	08002b24 	.word	0x08002b24

080006dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006e2:	2300      	movs	r3, #0
 80006e4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e6:	2003      	movs	r0, #3
 80006e8:	f000 f928 	bl	800093c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ec:	200f      	movs	r0, #15
 80006ee:	f000 f80d 	bl	800070c <HAL_InitTick>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d002      	beq.n	80006fe <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006f8:	2301      	movs	r3, #1
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	e001      	b.n	8000702 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006fe:	f7ff fdf5 	bl	80002ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000702:	79fb      	ldrb	r3, [r7, #7]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000714:	2300      	movs	r3, #0
 8000716:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <HAL_InitTick+0x68>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d022      	beq.n	8000766 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <HAL_InitTick+0x6c>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <HAL_InitTick+0x68>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800072c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000730:	fbb2 f3f3 	udiv	r3, r2, r3
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f936 	bl	80009a6 <HAL_SYSTICK_Config>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d10f      	bne.n	8000760 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b0f      	cmp	r3, #15
 8000744:	d809      	bhi.n	800075a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000746:	2200      	movs	r2, #0
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800074e:	f000 f900 	bl	8000952 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <HAL_InitTick+0x70>)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	e007      	b.n	800076a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e004      	b.n	800076a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000760:	2301      	movs	r3, #1
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	e001      	b.n	800076a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000024 	.word	0x20000024
 8000778:	20000000 	.word	0x20000000
 800077c:	20000020 	.word	0x20000020

08000780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_IncTick+0x1c>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_IncTick+0x20>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4413      	add	r3, r2
 800078e:	4a03      	ldr	r2, [pc, #12]	; (800079c <HAL_IncTick+0x1c>)
 8000790:	6013      	str	r3, [r2, #0]
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	200000f0 	.word	0x200000f0
 80007a0:	20000024 	.word	0x20000024

080007a4 <__NVIC_SetPriorityGrouping>:
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c0:	4013      	ands	r3, r2
 80007c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d6:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	60d3      	str	r3, [r2, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <__NVIC_GetPriorityGrouping>:
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <__NVIC_GetPriorityGrouping+0x18>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	f003 0307 	and.w	r3, r3, #7
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_EnableIRQ>:
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	2b00      	cmp	r3, #0
 8000818:	db0b      	blt.n	8000832 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	f003 021f 	and.w	r2, r3, #31
 8000820:	4906      	ldr	r1, [pc, #24]	; (800083c <__NVIC_EnableIRQ+0x34>)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	095b      	lsrs	r3, r3, #5
 8000828:	2001      	movs	r0, #1
 800082a:	fa00 f202 	lsl.w	r2, r0, r2
 800082e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	e000e100 	.word	0xe000e100

08000840 <__NVIC_SetPriority>:
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000850:	2b00      	cmp	r3, #0
 8000852:	db0a      	blt.n	800086a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	b2da      	uxtb	r2, r3
 8000858:	490c      	ldr	r1, [pc, #48]	; (800088c <__NVIC_SetPriority+0x4c>)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	0112      	lsls	r2, r2, #4
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	440b      	add	r3, r1
 8000864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000868:	e00a      	b.n	8000880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4908      	ldr	r1, [pc, #32]	; (8000890 <__NVIC_SetPriority+0x50>)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	f003 030f 	and.w	r3, r3, #15
 8000876:	3b04      	subs	r3, #4
 8000878:	0112      	lsls	r2, r2, #4
 800087a:	b2d2      	uxtb	r2, r2
 800087c:	440b      	add	r3, r1
 800087e:	761a      	strb	r2, [r3, #24]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000e100 	.word	0xe000e100
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <NVIC_EncodePriority>:
{
 8000894:	b480      	push	{r7}
 8000896:	b089      	sub	sp, #36	; 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	f1c3 0307 	rsb	r3, r3, #7
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	bf28      	it	cs
 80008b2:	2304      	movcs	r3, #4
 80008b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3304      	adds	r3, #4
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	d902      	bls.n	80008c4 <NVIC_EncodePriority+0x30>
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3b03      	subs	r3, #3
 80008c2:	e000      	b.n	80008c6 <NVIC_EncodePriority+0x32>
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43da      	mvns	r2, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	401a      	ands	r2, r3
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	fa01 f303 	lsl.w	r3, r1, r3
 80008e6:	43d9      	mvns	r1, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	4313      	orrs	r3, r2
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3724      	adds	r7, #36	; 0x24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <SysTick_Config>:
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3b01      	subs	r3, #1
 8000904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000908:	d301      	bcc.n	800090e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800090a:	2301      	movs	r3, #1
 800090c:	e00f      	b.n	800092e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <SysTick_Config+0x40>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3b01      	subs	r3, #1
 8000914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000916:	210f      	movs	r1, #15
 8000918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800091c:	f7ff ff90 	bl	8000840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <SysTick_Config+0x40>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000926:	4b04      	ldr	r3, [pc, #16]	; (8000938 <SysTick_Config+0x40>)
 8000928:	2207      	movs	r2, #7
 800092a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	e000e010 	.word	0xe000e010

0800093c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff ff2d 	bl	80007a4 <__NVIC_SetPriorityGrouping>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b086      	sub	sp, #24
 8000956:	af00      	add	r7, sp, #0
 8000958:	4603      	mov	r3, r0
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000964:	f7ff ff42 	bl	80007ec <__NVIC_GetPriorityGrouping>
 8000968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	68b9      	ldr	r1, [r7, #8]
 800096e:	6978      	ldr	r0, [r7, #20]
 8000970:	f7ff ff90 	bl	8000894 <NVIC_EncodePriority>
 8000974:	4602      	mov	r2, r0
 8000976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800097a:	4611      	mov	r1, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff5f 	bl	8000840 <__NVIC_SetPriority>
}
 8000982:	bf00      	nop
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	4603      	mov	r3, r0
 8000992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff35 	bl	8000808 <__NVIC_EnableIRQ>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff ffa2 	bl	80008f8 <SysTick_Config>
 80009b4:	4603      	mov	r3, r0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009be:	b480      	push	{r7}
 80009c0:	b085      	sub	sp, #20
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009c6:	2300      	movs	r3, #0
 80009c8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d008      	beq.n	80009e8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2204      	movs	r2, #4
 80009da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e022      	b.n	8000a2e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f022 020e 	bic.w	r2, r2, #14
 80009f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f022 0201 	bic.w	r2, r2, #1
 8000a06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 021c 	and.w	r2, r3, #28
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a14:	2101      	movs	r1, #1
 8000a16:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d005      	beq.n	8000a5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2204      	movs	r2, #4
 8000a54:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	73fb      	strb	r3, [r7, #15]
 8000a5a:	e029      	b.n	8000ab0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f022 020e 	bic.w	r2, r2, #14
 8000a6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f022 0201 	bic.w	r2, r2, #1
 8000a7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	f003 021c 	and.w	r2, r3, #28
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a88:	2101      	movs	r1, #1
 8000a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2201      	movs	r2, #1
 8000a94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d003      	beq.n	8000ab0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	4798      	blx	r3
    }
  }
  return status;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b087      	sub	sp, #28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ad2:	e154      	b.n	8000d7e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	2101      	movs	r1, #1
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f000 8146 	beq.w	8000d78 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 0303 	and.w	r3, r3, #3
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d005      	beq.n	8000b04 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d130      	bne.n	8000b66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	2203      	movs	r2, #3
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	091b      	lsrs	r3, r3, #4
 8000b50:	f003 0201 	and.w	r2, r3, #1
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	d017      	beq.n	8000ba2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d123      	bne.n	8000bf6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	08da      	lsrs	r2, r3, #3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3208      	adds	r2, #8
 8000bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	220f      	movs	r2, #15
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	691a      	ldr	r2, [r3, #16]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f003 0307 	and.w	r3, r3, #7
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	08da      	lsrs	r2, r3, #3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3208      	adds	r2, #8
 8000bf0:	6939      	ldr	r1, [r7, #16]
 8000bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2203      	movs	r2, #3
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0203 	and.w	r2, r3, #3
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 80a0 	beq.w	8000d78 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c38:	4b58      	ldr	r3, [pc, #352]	; (8000d9c <HAL_GPIO_Init+0x2e0>)
 8000c3a:	6a1b      	ldr	r3, [r3, #32]
 8000c3c:	4a57      	ldr	r2, [pc, #348]	; (8000d9c <HAL_GPIO_Init+0x2e0>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6213      	str	r3, [r2, #32]
 8000c44:	4b55      	ldr	r3, [pc, #340]	; (8000d9c <HAL_GPIO_Init+0x2e0>)
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000c50:	4a53      	ldr	r2, [pc, #332]	; (8000da0 <HAL_GPIO_Init+0x2e4>)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	089b      	lsrs	r3, r3, #2
 8000c56:	3302      	adds	r3, #2
 8000c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	220f      	movs	r2, #15
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a4b      	ldr	r2, [pc, #300]	; (8000da4 <HAL_GPIO_Init+0x2e8>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d019      	beq.n	8000cb0 <HAL_GPIO_Init+0x1f4>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a4a      	ldr	r2, [pc, #296]	; (8000da8 <HAL_GPIO_Init+0x2ec>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d013      	beq.n	8000cac <HAL_GPIO_Init+0x1f0>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a49      	ldr	r2, [pc, #292]	; (8000dac <HAL_GPIO_Init+0x2f0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d00d      	beq.n	8000ca8 <HAL_GPIO_Init+0x1ec>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a48      	ldr	r2, [pc, #288]	; (8000db0 <HAL_GPIO_Init+0x2f4>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d007      	beq.n	8000ca4 <HAL_GPIO_Init+0x1e8>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a47      	ldr	r2, [pc, #284]	; (8000db4 <HAL_GPIO_Init+0x2f8>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d101      	bne.n	8000ca0 <HAL_GPIO_Init+0x1e4>
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	e008      	b.n	8000cb2 <HAL_GPIO_Init+0x1f6>
 8000ca0:	2305      	movs	r3, #5
 8000ca2:	e006      	b.n	8000cb2 <HAL_GPIO_Init+0x1f6>
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	e004      	b.n	8000cb2 <HAL_GPIO_Init+0x1f6>
 8000ca8:	2302      	movs	r3, #2
 8000caa:	e002      	b.n	8000cb2 <HAL_GPIO_Init+0x1f6>
 8000cac:	2301      	movs	r3, #1
 8000cae:	e000      	b.n	8000cb2 <HAL_GPIO_Init+0x1f6>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	f002 0203 	and.w	r2, r2, #3
 8000cb8:	0092      	lsls	r2, r2, #2
 8000cba:	4093      	lsls	r3, r2
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000cc2:	4937      	ldr	r1, [pc, #220]	; (8000da0 <HAL_GPIO_Init+0x2e4>)
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	089b      	lsrs	r3, r3, #2
 8000cc8:	3302      	adds	r3, #2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cd0:	4b39      	ldr	r3, [pc, #228]	; (8000db8 <HAL_GPIO_Init+0x2fc>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cf4:	4a30      	ldr	r2, [pc, #192]	; (8000db8 <HAL_GPIO_Init+0x2fc>)
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cfa:	4b2f      	ldr	r3, [pc, #188]	; (8000db8 <HAL_GPIO_Init+0x2fc>)
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	43db      	mvns	r3, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d1e:	4a26      	ldr	r2, [pc, #152]	; (8000db8 <HAL_GPIO_Init+0x2fc>)
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <HAL_GPIO_Init+0x2fc>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d003      	beq.n	8000d48 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d48:	4a1b      	ldr	r2, [pc, #108]	; (8000db8 <HAL_GPIO_Init+0x2fc>)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <HAL_GPIO_Init+0x2fc>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	43db      	mvns	r3, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d72:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <HAL_GPIO_Init+0x2fc>)
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	fa22 f303 	lsr.w	r3, r2, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f47f aea3 	bne.w	8000ad4 <HAL_GPIO_Init+0x18>
  }
}
 8000d8e:	bf00      	nop
 8000d90:	bf00      	nop
 8000d92:	371c      	adds	r7, #28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40010000 	.word	0x40010000
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40020800 	.word	0x40020800
 8000db0:	40020c00 	.word	0x40020c00
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010400 	.word	0x40010400

08000dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000dc0:	4b02      	ldr	r3, [pc, #8]	; (8000dcc <HAL_RCC_GetHCLKFreq+0x10>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	20000000 	.word	0x20000000

08000dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000dd4:	f7ff fff2 	bl	8000dbc <HAL_RCC_GetHCLKFreq>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	0a1b      	lsrs	r3, r3, #8
 8000de0:	f003 0307 	and.w	r3, r3, #7
 8000de4:	4903      	ldr	r1, [pc, #12]	; (8000df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000de6:	5ccb      	ldrb	r3, [r1, r3]
 8000de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800
 8000df4:	08002b30 	.word	0x08002b30

08000df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000dfc:	f7ff ffde 	bl	8000dbc <HAL_RCC_GetHCLKFreq>
 8000e00:	4602      	mov	r2, r0
 8000e02:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	0adb      	lsrs	r3, r3, #11
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	4903      	ldr	r1, [pc, #12]	; (8000e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e0e:	5ccb      	ldrb	r3, [r1, r3]
 8000e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	08002b30 	.word	0x08002b30

08000e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e042      	b.n	8000eb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d106      	bne.n	8000e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff fa7e 	bl	8000348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2224      	movs	r2, #36	; 0x24
 8000e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 fcdd 	bl	8001824 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	691a      	ldr	r2, [r3, #16]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	695a      	ldr	r2, [r3, #20]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2220      	movs	r2, #32
 8000ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2220      	movs	r2, #32
 8000eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b20      	cmp	r3, #32
 8000ed8:	d112      	bne.n	8000f00 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d002      	beq.n	8000ee6 <HAL_UART_Receive_IT+0x26>
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00b      	b.n	8000f02 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2200      	movs	r2, #0
 8000eee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	68b9      	ldr	r1, [r7, #8]
 8000ef6:	68f8      	ldr	r0, [r7, #12]
 8000ef8:	f000 fac0 	bl	800147c <UART_Start_Receive_IT>
 8000efc:	4603      	mov	r3, r0
 8000efe:	e000      	b.n	8000f02 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8000f00:	2302      	movs	r3, #2
  }
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0ba      	sub	sp, #232	; 0xe8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8000f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8000f4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10f      	bne.n	8000f72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000f56:	f003 0320 	and.w	r3, r3, #32
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d009      	beq.n	8000f72 <HAL_UART_IRQHandler+0x66>
 8000f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f62:	f003 0320 	and.w	r3, r3, #32
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 fb9c 	bl	80016a8 <UART_Receive_IT>
      return;
 8000f70:	e25b      	b.n	800142a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8000f72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 80de 	beq.w	8001138 <HAL_UART_IRQHandler+0x22c>
 8000f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d106      	bne.n	8000f96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8000f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 80d1 	beq.w	8001138 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8000f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00b      	beq.n	8000fba <HAL_UART_IRQHandler+0xae>
 8000fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d005      	beq.n	8000fba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f043 0201 	orr.w	r2, r3, #1
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00b      	beq.n	8000fde <HAL_UART_IRQHandler+0xd2>
 8000fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d005      	beq.n	8000fde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f043 0202 	orr.w	r2, r3, #2
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00b      	beq.n	8001002 <HAL_UART_IRQHandler+0xf6>
 8000fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d005      	beq.n	8001002 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f043 0204 	orr.w	r2, r3, #4
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	2b00      	cmp	r3, #0
 800100c:	d011      	beq.n	8001032 <HAL_UART_IRQHandler+0x126>
 800100e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001012:	f003 0320 	and.w	r3, r3, #32
 8001016:	2b00      	cmp	r3, #0
 8001018:	d105      	bne.n	8001026 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800101a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	d005      	beq.n	8001032 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f043 0208 	orr.w	r2, r3, #8
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 81f2 	beq.w	8001420 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800103c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001040:	f003 0320 	and.w	r3, r3, #32
 8001044:	2b00      	cmp	r3, #0
 8001046:	d008      	beq.n	800105a <HAL_UART_IRQHandler+0x14e>
 8001048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800104c:	f003 0320 	and.w	r3, r3, #32
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 fb27 	bl	80016a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001064:	2b40      	cmp	r3, #64	; 0x40
 8001066:	bf0c      	ite	eq
 8001068:	2301      	moveq	r3, #1
 800106a:	2300      	movne	r3, #0
 800106c:	b2db      	uxtb	r3, r3
 800106e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	2b00      	cmp	r3, #0
 800107c:	d103      	bne.n	8001086 <HAL_UART_IRQHandler+0x17a>
 800107e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001082:	2b00      	cmp	r3, #0
 8001084:	d04f      	beq.n	8001126 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 fa31 	bl	80014ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001096:	2b40      	cmp	r3, #64	; 0x40
 8001098:	d141      	bne.n	800111e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3314      	adds	r3, #20
 80010a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80010a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010a8:	e853 3f00 	ldrex	r3, [r3]
 80010ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80010b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80010b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3314      	adds	r3, #20
 80010c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80010c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80010ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80010ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80010d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80010d6:	e841 2300 	strex	r3, r2, [r1]
 80010da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80010de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1d9      	bne.n	800109a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d013      	beq.n	8001116 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f2:	4a7e      	ldr	r2, [pc, #504]	; (80012ec <HAL_UART_IRQHandler+0x3e0>)
 80010f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fc9c 	bl	8000a38 <HAL_DMA_Abort_IT>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d016      	beq.n	8001134 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800110a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001110:	4610      	mov	r0, r2
 8001112:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001114:	e00e      	b.n	8001134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f99c 	bl	8001454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800111c:	e00a      	b.n	8001134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f998 	bl	8001454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001124:	e006      	b.n	8001134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 f994 	bl	8001454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001132:	e175      	b.n	8001420 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001134:	bf00      	nop
    return;
 8001136:	e173      	b.n	8001420 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	2b01      	cmp	r3, #1
 800113e:	f040 814f 	bne.w	80013e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001146:	f003 0310 	and.w	r3, r3, #16
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8148 	beq.w	80013e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 8141 	beq.w	80013e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800117e:	2b40      	cmp	r3, #64	; 0x40
 8001180:	f040 80b6 	bne.w	80012f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001190:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 8145 	beq.w	8001424 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800119e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80011a2:	429a      	cmp	r2, r3
 80011a4:	f080 813e 	bcs.w	8001424 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80011ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	2b20      	cmp	r3, #32
 80011b8:	f000 8088 	beq.w	80012cc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	330c      	adds	r3, #12
 80011c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80011ca:	e853 3f00 	ldrex	r3, [r3]
 80011ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80011d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	330c      	adds	r3, #12
 80011e4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80011e8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80011ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80011f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80011f8:	e841 2300 	strex	r3, r2, [r1]
 80011fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1d9      	bne.n	80011bc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	3314      	adds	r3, #20
 800120e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001212:	e853 3f00 	ldrex	r3, [r3]
 8001216:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001218:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800121a:	f023 0301 	bic.w	r3, r3, #1
 800121e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	3314      	adds	r3, #20
 8001228:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800122c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001230:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001232:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001234:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001238:	e841 2300 	strex	r3, r2, [r1]
 800123c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800123e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1e1      	bne.n	8001208 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3314      	adds	r3, #20
 800124a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800124c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800124e:	e853 3f00 	ldrex	r3, [r3]
 8001252:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800125a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	3314      	adds	r3, #20
 8001264:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001268:	66fa      	str	r2, [r7, #108]	; 0x6c
 800126a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800126c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800126e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001270:	e841 2300 	strex	r3, r2, [r1]
 8001274:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001276:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1e3      	bne.n	8001244 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2220      	movs	r2, #32
 8001280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	330c      	adds	r3, #12
 8001290:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001294:	e853 3f00 	ldrex	r3, [r3]
 8001298:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800129a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800129c:	f023 0310 	bic.w	r3, r3, #16
 80012a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	330c      	adds	r3, #12
 80012aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80012ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80012b0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80012b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012b6:	e841 2300 	strex	r3, r2, [r1]
 80012ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80012bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1e3      	bne.n	800128a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fb79 	bl	80009be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2202      	movs	r2, #2
 80012d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80012da:	b29b      	uxth	r3, r3
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	b29b      	uxth	r3, r3
 80012e0:	4619      	mov	r1, r3
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 f8bf 	bl	8001466 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80012e8:	e09c      	b.n	8001424 <HAL_UART_IRQHandler+0x518>
 80012ea:	bf00      	nop
 80012ec:	080015b3 	.word	0x080015b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001304:	b29b      	uxth	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 808e 	beq.w	8001428 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800130c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 8089 	beq.w	8001428 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	330c      	adds	r3, #12
 800131c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800131e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001320:	e853 3f00 	ldrex	r3, [r3]
 8001324:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800132c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	330c      	adds	r3, #12
 8001336:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800133a:	647a      	str	r2, [r7, #68]	; 0x44
 800133c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800133e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001342:	e841 2300 	strex	r3, r2, [r1]
 8001346:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1e3      	bne.n	8001316 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3314      	adds	r3, #20
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	e853 3f00 	ldrex	r3, [r3]
 800135c:	623b      	str	r3, [r7, #32]
   return(result);
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	f023 0301 	bic.w	r3, r3, #1
 8001364:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3314      	adds	r3, #20
 800136e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001372:	633a      	str	r2, [r7, #48]	; 0x30
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800137a:	e841 2300 	strex	r3, r2, [r1]
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1e3      	bne.n	800134e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2220      	movs	r2, #32
 800138a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	330c      	adds	r3, #12
 800139a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	e853 3f00 	ldrex	r3, [r3]
 80013a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f023 0310 	bic.w	r3, r3, #16
 80013aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	330c      	adds	r3, #12
 80013b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80013b8:	61fa      	str	r2, [r7, #28]
 80013ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013bc:	69b9      	ldr	r1, [r7, #24]
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	e841 2300 	strex	r3, r2, [r1]
 80013c4:	617b      	str	r3, [r7, #20]
   return(result);
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1e3      	bne.n	8001394 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2202      	movs	r2, #2
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80013d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80013d6:	4619      	mov	r1, r3
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f844 	bl	8001466 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80013de:	e023      	b.n	8001428 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80013e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80013e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d009      	beq.n	8001400 <HAL_UART_IRQHandler+0x4f4>
 80013ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80013f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f8ee 	bl	80015da <UART_Transmit_IT>
    return;
 80013fe:	e014      	b.n	800142a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00e      	beq.n	800142a <HAL_UART_IRQHandler+0x51e>
 800140c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f92d 	bl	8001678 <UART_EndTransmit_IT>
    return;
 800141e:	e004      	b.n	800142a <HAL_UART_IRQHandler+0x51e>
    return;
 8001420:	bf00      	nop
 8001422:	e002      	b.n	800142a <HAL_UART_IRQHandler+0x51e>
      return;
 8001424:	bf00      	nop
 8001426:	e000      	b.n	800142a <HAL_UART_IRQHandler+0x51e>
      return;
 8001428:	bf00      	nop
  }
}
 800142a:	37e8      	adds	r7, #232	; 0xe8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	460b      	mov	r3, r1
 8001470:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	4613      	mov	r3, r2
 8001488:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	88fa      	ldrh	r2, [r7, #6]
 8001494:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	88fa      	ldrh	r2, [r7, #6]
 800149a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2222      	movs	r2, #34	; 0x22
 80014a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d007      	beq.n	80014c2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014c0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f042 0201 	orr.w	r2, r2, #1
 80014d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f042 0220 	orr.w	r2, r2, #32
 80014e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b095      	sub	sp, #84	; 0x54
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	330c      	adds	r3, #12
 80014fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001500:	e853 3f00 	ldrex	r3, [r3]
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800150c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	330c      	adds	r3, #12
 8001514:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001516:	643a      	str	r2, [r7, #64]	; 0x40
 8001518:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800151a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800151c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800151e:	e841 2300 	strex	r3, r2, [r1]
 8001522:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1e5      	bne.n	80014f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	3314      	adds	r3, #20
 8001530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	e853 3f00 	ldrex	r3, [r3]
 8001538:	61fb      	str	r3, [r7, #28]
   return(result);
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	f023 0301 	bic.w	r3, r3, #1
 8001540:	64bb      	str	r3, [r7, #72]	; 0x48
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3314      	adds	r3, #20
 8001548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800154a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800154e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001552:	e841 2300 	strex	r3, r2, [r1]
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1e5      	bne.n	800152a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	2b01      	cmp	r3, #1
 8001564:	d119      	bne.n	800159a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	330c      	adds	r3, #12
 800156c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	e853 3f00 	ldrex	r3, [r3]
 8001574:	60bb      	str	r3, [r7, #8]
   return(result);
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	f023 0310 	bic.w	r3, r3, #16
 800157c:	647b      	str	r3, [r7, #68]	; 0x44
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	330c      	adds	r3, #12
 8001584:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001586:	61ba      	str	r2, [r7, #24]
 8001588:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800158a:	6979      	ldr	r1, [r7, #20]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	e841 2300 	strex	r3, r2, [r1]
 8001592:	613b      	str	r3, [r7, #16]
   return(result);
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1e5      	bne.n	8001566 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2220      	movs	r2, #32
 800159e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80015a8:	bf00      	nop
 80015aa:	3754      	adds	r7, #84	; 0x54
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f7ff ff41 	bl	8001454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80015da:	b480      	push	{r7}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b21      	cmp	r3, #33	; 0x21
 80015ec:	d13e      	bne.n	800166c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015f6:	d114      	bne.n	8001622 <UART_Transmit_IT+0x48>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d110      	bne.n	8001622 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001614:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	1c9a      	adds	r2, r3, #2
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	621a      	str	r2, [r3, #32]
 8001620:	e008      	b.n	8001634 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	1c59      	adds	r1, r3, #1
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6211      	str	r1, [r2, #32]
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001638:	b29b      	uxth	r3, r3
 800163a:	3b01      	subs	r3, #1
 800163c:	b29b      	uxth	r3, r3
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	4619      	mov	r1, r3
 8001642:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10f      	bne.n	8001668 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001656:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001666:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	e000      	b.n	800166e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800166c:	2302      	movs	r3, #2
  }
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800168e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2220      	movs	r2, #32
 8001694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fec9 	bl	8001430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08c      	sub	sp, #48	; 0x30
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b22      	cmp	r3, #34	; 0x22
 80016ba:	f040 80ae 	bne.w	800181a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016c6:	d117      	bne.n	80016f8 <UART_Receive_IT+0x50>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d113      	bne.n	80016f8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	1c9a      	adds	r2, r3, #2
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	629a      	str	r2, [r3, #40]	; 0x28
 80016f6:	e026      	b.n	8001746 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800170a:	d007      	beq.n	800171c <UART_Receive_IT+0x74>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10a      	bne.n	800172a <UART_Receive_IT+0x82>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d106      	bne.n	800172a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	e008      	b.n	800173c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001736:	b2da      	uxtb	r2, r3
 8001738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	b29b      	uxth	r3, r3
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	4619      	mov	r1, r3
 8001754:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001756:	2b00      	cmp	r3, #0
 8001758:	d15d      	bne.n	8001816 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0220 	bic.w	r2, r2, #32
 8001768:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001778:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0201 	bic.w	r2, r2, #1
 8001788:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2220      	movs	r2, #32
 800178e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	2b01      	cmp	r3, #1
 800179e:	d135      	bne.n	800180c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	330c      	adds	r3, #12
 80017ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	e853 3f00 	ldrex	r3, [r3]
 80017b4:	613b      	str	r3, [r7, #16]
   return(result);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	f023 0310 	bic.w	r3, r3, #16
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	330c      	adds	r3, #12
 80017c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c6:	623a      	str	r2, [r7, #32]
 80017c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017ca:	69f9      	ldr	r1, [r7, #28]
 80017cc:	6a3a      	ldr	r2, [r7, #32]
 80017ce:	e841 2300 	strex	r3, r2, [r1]
 80017d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1e5      	bne.n	80017a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	2b10      	cmp	r3, #16
 80017e6:	d10a      	bne.n	80017fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001802:	4619      	mov	r1, r3
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff fe2e 	bl	8001466 <HAL_UARTEx_RxEventCallback>
 800180a:	e002      	b.n	8001812 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff fe18 	bl	8001442 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e002      	b.n	800181c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e000      	b.n	800181c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800181a:	2302      	movs	r3, #2
  }
}
 800181c:	4618      	mov	r0, r3
 800181e:	3730      	adds	r7, #48	; 0x30
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	4313      	orrs	r3, r2
 8001858:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001864:	f023 030c 	bic.w	r3, r3, #12
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	430b      	orrs	r3, r1
 8001870:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699a      	ldr	r2, [r3, #24]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a55      	ldr	r2, [pc, #340]	; (80019e4 <UART_SetConfig+0x1c0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d103      	bne.n	800189a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001892:	f7ff fab1 	bl	8000df8 <HAL_RCC_GetPCLK2Freq>
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	e002      	b.n	80018a0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800189a:	f7ff fa99 	bl	8000dd0 <HAL_RCC_GetPCLK1Freq>
 800189e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018a8:	d14c      	bne.n	8001944 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	009a      	lsls	r2, r3, #2
 80018b4:	441a      	add	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c0:	4a49      	ldr	r2, [pc, #292]	; (80019e8 <UART_SetConfig+0x1c4>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	0119      	lsls	r1, r3, #4
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	009a      	lsls	r2, r3, #2
 80018d4:	441a      	add	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80018e0:	4b41      	ldr	r3, [pc, #260]	; (80019e8 <UART_SetConfig+0x1c4>)
 80018e2:	fba3 0302 	umull	r0, r3, r3, r2
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	2064      	movs	r0, #100	; 0x64
 80018ea:	fb00 f303 	mul.w	r3, r0, r3
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	3332      	adds	r3, #50	; 0x32
 80018f4:	4a3c      	ldr	r2, [pc, #240]	; (80019e8 <UART_SetConfig+0x1c4>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001902:	4419      	add	r1, r3
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	009a      	lsls	r2, r3, #2
 800190e:	441a      	add	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	fbb2 f2f3 	udiv	r2, r2, r3
 800191a:	4b33      	ldr	r3, [pc, #204]	; (80019e8 <UART_SetConfig+0x1c4>)
 800191c:	fba3 0302 	umull	r0, r3, r3, r2
 8001920:	095b      	lsrs	r3, r3, #5
 8001922:	2064      	movs	r0, #100	; 0x64
 8001924:	fb00 f303 	mul.w	r3, r0, r3
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	3332      	adds	r3, #50	; 0x32
 800192e:	4a2e      	ldr	r2, [pc, #184]	; (80019e8 <UART_SetConfig+0x1c4>)
 8001930:	fba2 2303 	umull	r2, r3, r2, r3
 8001934:	095b      	lsrs	r3, r3, #5
 8001936:	f003 0207 	and.w	r2, r3, #7
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	440a      	add	r2, r1
 8001940:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001942:	e04a      	b.n	80019da <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	009a      	lsls	r2, r3, #2
 800194e:	441a      	add	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	fbb2 f3f3 	udiv	r3, r2, r3
 800195a:	4a23      	ldr	r2, [pc, #140]	; (80019e8 <UART_SetConfig+0x1c4>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	095b      	lsrs	r3, r3, #5
 8001962:	0119      	lsls	r1, r3, #4
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	009a      	lsls	r2, r3, #2
 800196e:	441a      	add	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	fbb2 f2f3 	udiv	r2, r2, r3
 800197a:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <UART_SetConfig+0x1c4>)
 800197c:	fba3 0302 	umull	r0, r3, r3, r2
 8001980:	095b      	lsrs	r3, r3, #5
 8001982:	2064      	movs	r0, #100	; 0x64
 8001984:	fb00 f303 	mul.w	r3, r0, r3
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	3332      	adds	r3, #50	; 0x32
 800198e:	4a16      	ldr	r2, [pc, #88]	; (80019e8 <UART_SetConfig+0x1c4>)
 8001990:	fba2 2303 	umull	r2, r3, r2, r3
 8001994:	095b      	lsrs	r3, r3, #5
 8001996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800199a:	4419      	add	r1, r3
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	009a      	lsls	r2, r3, #2
 80019a6:	441a      	add	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <UART_SetConfig+0x1c4>)
 80019b4:	fba3 0302 	umull	r0, r3, r3, r2
 80019b8:	095b      	lsrs	r3, r3, #5
 80019ba:	2064      	movs	r0, #100	; 0x64
 80019bc:	fb00 f303 	mul.w	r3, r0, r3
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	3332      	adds	r3, #50	; 0x32
 80019c6:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <UART_SetConfig+0x1c4>)
 80019c8:	fba2 2303 	umull	r2, r3, r2, r3
 80019cc:	095b      	lsrs	r3, r3, #5
 80019ce:	f003 020f 	and.w	r2, r3, #15
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	440a      	add	r2, r1
 80019d8:	609a      	str	r2, [r3, #8]
}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40013800 	.word	0x40013800
 80019e8:	51eb851f 	.word	0x51eb851f

080019ec <sbrk_aligned>:
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	4e0e      	ldr	r6, [pc, #56]	; (8001a28 <sbrk_aligned+0x3c>)
 80019f0:	460c      	mov	r4, r1
 80019f2:	6831      	ldr	r1, [r6, #0]
 80019f4:	4605      	mov	r5, r0
 80019f6:	b911      	cbnz	r1, 80019fe <sbrk_aligned+0x12>
 80019f8:	f000 fb44 	bl	8002084 <_sbrk_r>
 80019fc:	6030      	str	r0, [r6, #0]
 80019fe:	4621      	mov	r1, r4
 8001a00:	4628      	mov	r0, r5
 8001a02:	f000 fb3f 	bl	8002084 <_sbrk_r>
 8001a06:	1c43      	adds	r3, r0, #1
 8001a08:	d00a      	beq.n	8001a20 <sbrk_aligned+0x34>
 8001a0a:	1cc4      	adds	r4, r0, #3
 8001a0c:	f024 0403 	bic.w	r4, r4, #3
 8001a10:	42a0      	cmp	r0, r4
 8001a12:	d007      	beq.n	8001a24 <sbrk_aligned+0x38>
 8001a14:	1a21      	subs	r1, r4, r0
 8001a16:	4628      	mov	r0, r5
 8001a18:	f000 fb34 	bl	8002084 <_sbrk_r>
 8001a1c:	3001      	adds	r0, #1
 8001a1e:	d101      	bne.n	8001a24 <sbrk_aligned+0x38>
 8001a20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001a24:	4620      	mov	r0, r4
 8001a26:	bd70      	pop	{r4, r5, r6, pc}
 8001a28:	200000f8 	.word	0x200000f8

08001a2c <_malloc_r>:
 8001a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a30:	1ccd      	adds	r5, r1, #3
 8001a32:	f025 0503 	bic.w	r5, r5, #3
 8001a36:	3508      	adds	r5, #8
 8001a38:	2d0c      	cmp	r5, #12
 8001a3a:	bf38      	it	cc
 8001a3c:	250c      	movcc	r5, #12
 8001a3e:	2d00      	cmp	r5, #0
 8001a40:	4607      	mov	r7, r0
 8001a42:	db01      	blt.n	8001a48 <_malloc_r+0x1c>
 8001a44:	42a9      	cmp	r1, r5
 8001a46:	d905      	bls.n	8001a54 <_malloc_r+0x28>
 8001a48:	230c      	movs	r3, #12
 8001a4a:	2600      	movs	r6, #0
 8001a4c:	603b      	str	r3, [r7, #0]
 8001a4e:	4630      	mov	r0, r6
 8001a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001b28 <_malloc_r+0xfc>
 8001a58:	f000 f868 	bl	8001b2c <__malloc_lock>
 8001a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8001a60:	461c      	mov	r4, r3
 8001a62:	bb5c      	cbnz	r4, 8001abc <_malloc_r+0x90>
 8001a64:	4629      	mov	r1, r5
 8001a66:	4638      	mov	r0, r7
 8001a68:	f7ff ffc0 	bl	80019ec <sbrk_aligned>
 8001a6c:	1c43      	adds	r3, r0, #1
 8001a6e:	4604      	mov	r4, r0
 8001a70:	d155      	bne.n	8001b1e <_malloc_r+0xf2>
 8001a72:	f8d8 4000 	ldr.w	r4, [r8]
 8001a76:	4626      	mov	r6, r4
 8001a78:	2e00      	cmp	r6, #0
 8001a7a:	d145      	bne.n	8001b08 <_malloc_r+0xdc>
 8001a7c:	2c00      	cmp	r4, #0
 8001a7e:	d048      	beq.n	8001b12 <_malloc_r+0xe6>
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	4631      	mov	r1, r6
 8001a84:	4638      	mov	r0, r7
 8001a86:	eb04 0903 	add.w	r9, r4, r3
 8001a8a:	f000 fafb 	bl	8002084 <_sbrk_r>
 8001a8e:	4581      	cmp	r9, r0
 8001a90:	d13f      	bne.n	8001b12 <_malloc_r+0xe6>
 8001a92:	6821      	ldr	r1, [r4, #0]
 8001a94:	4638      	mov	r0, r7
 8001a96:	1a6d      	subs	r5, r5, r1
 8001a98:	4629      	mov	r1, r5
 8001a9a:	f7ff ffa7 	bl	80019ec <sbrk_aligned>
 8001a9e:	3001      	adds	r0, #1
 8001aa0:	d037      	beq.n	8001b12 <_malloc_r+0xe6>
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	442b      	add	r3, r5
 8001aa6:	6023      	str	r3, [r4, #0]
 8001aa8:	f8d8 3000 	ldr.w	r3, [r8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d038      	beq.n	8001b22 <_malloc_r+0xf6>
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	42a2      	cmp	r2, r4
 8001ab4:	d12b      	bne.n	8001b0e <_malloc_r+0xe2>
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	e00f      	b.n	8001adc <_malloc_r+0xb0>
 8001abc:	6822      	ldr	r2, [r4, #0]
 8001abe:	1b52      	subs	r2, r2, r5
 8001ac0:	d41f      	bmi.n	8001b02 <_malloc_r+0xd6>
 8001ac2:	2a0b      	cmp	r2, #11
 8001ac4:	d917      	bls.n	8001af6 <_malloc_r+0xca>
 8001ac6:	1961      	adds	r1, r4, r5
 8001ac8:	42a3      	cmp	r3, r4
 8001aca:	6025      	str	r5, [r4, #0]
 8001acc:	bf18      	it	ne
 8001ace:	6059      	strne	r1, [r3, #4]
 8001ad0:	6863      	ldr	r3, [r4, #4]
 8001ad2:	bf08      	it	eq
 8001ad4:	f8c8 1000 	streq.w	r1, [r8]
 8001ad8:	5162      	str	r2, [r4, r5]
 8001ada:	604b      	str	r3, [r1, #4]
 8001adc:	4638      	mov	r0, r7
 8001ade:	f104 060b 	add.w	r6, r4, #11
 8001ae2:	f000 f829 	bl	8001b38 <__malloc_unlock>
 8001ae6:	f026 0607 	bic.w	r6, r6, #7
 8001aea:	1d23      	adds	r3, r4, #4
 8001aec:	1af2      	subs	r2, r6, r3
 8001aee:	d0ae      	beq.n	8001a4e <_malloc_r+0x22>
 8001af0:	1b9b      	subs	r3, r3, r6
 8001af2:	50a3      	str	r3, [r4, r2]
 8001af4:	e7ab      	b.n	8001a4e <_malloc_r+0x22>
 8001af6:	42a3      	cmp	r3, r4
 8001af8:	6862      	ldr	r2, [r4, #4]
 8001afa:	d1dd      	bne.n	8001ab8 <_malloc_r+0x8c>
 8001afc:	f8c8 2000 	str.w	r2, [r8]
 8001b00:	e7ec      	b.n	8001adc <_malloc_r+0xb0>
 8001b02:	4623      	mov	r3, r4
 8001b04:	6864      	ldr	r4, [r4, #4]
 8001b06:	e7ac      	b.n	8001a62 <_malloc_r+0x36>
 8001b08:	4634      	mov	r4, r6
 8001b0a:	6876      	ldr	r6, [r6, #4]
 8001b0c:	e7b4      	b.n	8001a78 <_malloc_r+0x4c>
 8001b0e:	4613      	mov	r3, r2
 8001b10:	e7cc      	b.n	8001aac <_malloc_r+0x80>
 8001b12:	230c      	movs	r3, #12
 8001b14:	4638      	mov	r0, r7
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	f000 f80e 	bl	8001b38 <__malloc_unlock>
 8001b1c:	e797      	b.n	8001a4e <_malloc_r+0x22>
 8001b1e:	6025      	str	r5, [r4, #0]
 8001b20:	e7dc      	b.n	8001adc <_malloc_r+0xb0>
 8001b22:	605b      	str	r3, [r3, #4]
 8001b24:	deff      	udf	#255	; 0xff
 8001b26:	bf00      	nop
 8001b28:	200000f4 	.word	0x200000f4

08001b2c <__malloc_lock>:
 8001b2c:	4801      	ldr	r0, [pc, #4]	; (8001b34 <__malloc_lock+0x8>)
 8001b2e:	f000 baf6 	b.w	800211e <__retarget_lock_acquire_recursive>
 8001b32:	bf00      	nop
 8001b34:	2000023c 	.word	0x2000023c

08001b38 <__malloc_unlock>:
 8001b38:	4801      	ldr	r0, [pc, #4]	; (8001b40 <__malloc_unlock+0x8>)
 8001b3a:	f000 baf1 	b.w	8002120 <__retarget_lock_release_recursive>
 8001b3e:	bf00      	nop
 8001b40:	2000023c 	.word	0x2000023c

08001b44 <std>:
 8001b44:	2300      	movs	r3, #0
 8001b46:	b510      	push	{r4, lr}
 8001b48:	4604      	mov	r4, r0
 8001b4a:	e9c0 3300 	strd	r3, r3, [r0]
 8001b4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b52:	6083      	str	r3, [r0, #8]
 8001b54:	8181      	strh	r1, [r0, #12]
 8001b56:	6643      	str	r3, [r0, #100]	; 0x64
 8001b58:	81c2      	strh	r2, [r0, #14]
 8001b5a:	6183      	str	r3, [r0, #24]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	2208      	movs	r2, #8
 8001b60:	305c      	adds	r0, #92	; 0x5c
 8001b62:	f000 fa53 	bl	800200c <memset>
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <std+0x58>)
 8001b68:	6224      	str	r4, [r4, #32]
 8001b6a:	6263      	str	r3, [r4, #36]	; 0x24
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <std+0x5c>)
 8001b6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <std+0x60>)
 8001b72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <std+0x64>)
 8001b76:	6323      	str	r3, [r4, #48]	; 0x30
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <std+0x68>)
 8001b7a:	429c      	cmp	r4, r3
 8001b7c:	d006      	beq.n	8001b8c <std+0x48>
 8001b7e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001b82:	4294      	cmp	r4, r2
 8001b84:	d002      	beq.n	8001b8c <std+0x48>
 8001b86:	33d0      	adds	r3, #208	; 0xd0
 8001b88:	429c      	cmp	r4, r3
 8001b8a:	d105      	bne.n	8001b98 <std+0x54>
 8001b8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b94:	f000 bac2 	b.w	800211c <__retarget_lock_init_recursive>
 8001b98:	bd10      	pop	{r4, pc}
 8001b9a:	bf00      	nop
 8001b9c:	08001de9 	.word	0x08001de9
 8001ba0:	08001e0b 	.word	0x08001e0b
 8001ba4:	08001e43 	.word	0x08001e43
 8001ba8:	08001e67 	.word	0x08001e67
 8001bac:	200000fc 	.word	0x200000fc

08001bb0 <stdio_exit_handler>:
 8001bb0:	4a02      	ldr	r2, [pc, #8]	; (8001bbc <stdio_exit_handler+0xc>)
 8001bb2:	4903      	ldr	r1, [pc, #12]	; (8001bc0 <stdio_exit_handler+0x10>)
 8001bb4:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <stdio_exit_handler+0x14>)
 8001bb6:	f000 b869 	b.w	8001c8c <_fwalk_sglue>
 8001bba:	bf00      	nop
 8001bbc:	20000028 	.word	0x20000028
 8001bc0:	08002891 	.word	0x08002891
 8001bc4:	20000034 	.word	0x20000034

08001bc8 <cleanup_stdio>:
 8001bc8:	6841      	ldr	r1, [r0, #4]
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <cleanup_stdio+0x34>)
 8001bcc:	b510      	push	{r4, lr}
 8001bce:	4299      	cmp	r1, r3
 8001bd0:	4604      	mov	r4, r0
 8001bd2:	d001      	beq.n	8001bd8 <cleanup_stdio+0x10>
 8001bd4:	f000 fe5c 	bl	8002890 <_fflush_r>
 8001bd8:	68a1      	ldr	r1, [r4, #8]
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <cleanup_stdio+0x38>)
 8001bdc:	4299      	cmp	r1, r3
 8001bde:	d002      	beq.n	8001be6 <cleanup_stdio+0x1e>
 8001be0:	4620      	mov	r0, r4
 8001be2:	f000 fe55 	bl	8002890 <_fflush_r>
 8001be6:	68e1      	ldr	r1, [r4, #12]
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <cleanup_stdio+0x3c>)
 8001bea:	4299      	cmp	r1, r3
 8001bec:	d004      	beq.n	8001bf8 <cleanup_stdio+0x30>
 8001bee:	4620      	mov	r0, r4
 8001bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bf4:	f000 be4c 	b.w	8002890 <_fflush_r>
 8001bf8:	bd10      	pop	{r4, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200000fc 	.word	0x200000fc
 8001c00:	20000164 	.word	0x20000164
 8001c04:	200001cc 	.word	0x200001cc

08001c08 <global_stdio_init.part.0>:
 8001c08:	b510      	push	{r4, lr}
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <global_stdio_init.part.0+0x30>)
 8001c0c:	4c0b      	ldr	r4, [pc, #44]	; (8001c3c <global_stdio_init.part.0+0x34>)
 8001c0e:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <global_stdio_init.part.0+0x38>)
 8001c10:	4620      	mov	r0, r4
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	2104      	movs	r1, #4
 8001c16:	2200      	movs	r2, #0
 8001c18:	f7ff ff94 	bl	8001b44 <std>
 8001c1c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001c20:	2201      	movs	r2, #1
 8001c22:	2109      	movs	r1, #9
 8001c24:	f7ff ff8e 	bl	8001b44 <std>
 8001c28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c32:	2112      	movs	r1, #18
 8001c34:	f7ff bf86 	b.w	8001b44 <std>
 8001c38:	20000234 	.word	0x20000234
 8001c3c:	200000fc 	.word	0x200000fc
 8001c40:	08001bb1 	.word	0x08001bb1

08001c44 <__sfp_lock_acquire>:
 8001c44:	4801      	ldr	r0, [pc, #4]	; (8001c4c <__sfp_lock_acquire+0x8>)
 8001c46:	f000 ba6a 	b.w	800211e <__retarget_lock_acquire_recursive>
 8001c4a:	bf00      	nop
 8001c4c:	2000023d 	.word	0x2000023d

08001c50 <__sfp_lock_release>:
 8001c50:	4801      	ldr	r0, [pc, #4]	; (8001c58 <__sfp_lock_release+0x8>)
 8001c52:	f000 ba65 	b.w	8002120 <__retarget_lock_release_recursive>
 8001c56:	bf00      	nop
 8001c58:	2000023d 	.word	0x2000023d

08001c5c <__sinit>:
 8001c5c:	b510      	push	{r4, lr}
 8001c5e:	4604      	mov	r4, r0
 8001c60:	f7ff fff0 	bl	8001c44 <__sfp_lock_acquire>
 8001c64:	6a23      	ldr	r3, [r4, #32]
 8001c66:	b11b      	cbz	r3, 8001c70 <__sinit+0x14>
 8001c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c6c:	f7ff bff0 	b.w	8001c50 <__sfp_lock_release>
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <__sinit+0x28>)
 8001c72:	6223      	str	r3, [r4, #32]
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <__sinit+0x2c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f5      	bne.n	8001c68 <__sinit+0xc>
 8001c7c:	f7ff ffc4 	bl	8001c08 <global_stdio_init.part.0>
 8001c80:	e7f2      	b.n	8001c68 <__sinit+0xc>
 8001c82:	bf00      	nop
 8001c84:	08001bc9 	.word	0x08001bc9
 8001c88:	20000234 	.word	0x20000234

08001c8c <_fwalk_sglue>:
 8001c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c90:	4607      	mov	r7, r0
 8001c92:	4688      	mov	r8, r1
 8001c94:	4614      	mov	r4, r2
 8001c96:	2600      	movs	r6, #0
 8001c98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001c9c:	f1b9 0901 	subs.w	r9, r9, #1
 8001ca0:	d505      	bpl.n	8001cae <_fwalk_sglue+0x22>
 8001ca2:	6824      	ldr	r4, [r4, #0]
 8001ca4:	2c00      	cmp	r4, #0
 8001ca6:	d1f7      	bne.n	8001c98 <_fwalk_sglue+0xc>
 8001ca8:	4630      	mov	r0, r6
 8001caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001cae:	89ab      	ldrh	r3, [r5, #12]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d907      	bls.n	8001cc4 <_fwalk_sglue+0x38>
 8001cb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	d003      	beq.n	8001cc4 <_fwalk_sglue+0x38>
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	4638      	mov	r0, r7
 8001cc0:	47c0      	blx	r8
 8001cc2:	4306      	orrs	r6, r0
 8001cc4:	3568      	adds	r5, #104	; 0x68
 8001cc6:	e7e9      	b.n	8001c9c <_fwalk_sglue+0x10>

08001cc8 <_puts_r>:
 8001cc8:	6a03      	ldr	r3, [r0, #32]
 8001cca:	b570      	push	{r4, r5, r6, lr}
 8001ccc:	4605      	mov	r5, r0
 8001cce:	460e      	mov	r6, r1
 8001cd0:	6884      	ldr	r4, [r0, #8]
 8001cd2:	b90b      	cbnz	r3, 8001cd8 <_puts_r+0x10>
 8001cd4:	f7ff ffc2 	bl	8001c5c <__sinit>
 8001cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001cda:	07db      	lsls	r3, r3, #31
 8001cdc:	d405      	bmi.n	8001cea <_puts_r+0x22>
 8001cde:	89a3      	ldrh	r3, [r4, #12]
 8001ce0:	0598      	lsls	r0, r3, #22
 8001ce2:	d402      	bmi.n	8001cea <_puts_r+0x22>
 8001ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ce6:	f000 fa1a 	bl	800211e <__retarget_lock_acquire_recursive>
 8001cea:	89a3      	ldrh	r3, [r4, #12]
 8001cec:	0719      	lsls	r1, r3, #28
 8001cee:	d513      	bpl.n	8001d18 <_puts_r+0x50>
 8001cf0:	6923      	ldr	r3, [r4, #16]
 8001cf2:	b18b      	cbz	r3, 8001d18 <_puts_r+0x50>
 8001cf4:	3e01      	subs	r6, #1
 8001cf6:	68a3      	ldr	r3, [r4, #8]
 8001cf8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	60a3      	str	r3, [r4, #8]
 8001d00:	b9e9      	cbnz	r1, 8001d3e <_puts_r+0x76>
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	da2e      	bge.n	8001d64 <_puts_r+0x9c>
 8001d06:	4622      	mov	r2, r4
 8001d08:	210a      	movs	r1, #10
 8001d0a:	4628      	mov	r0, r5
 8001d0c:	f000 f8e8 	bl	8001ee0 <__swbuf_r>
 8001d10:	3001      	adds	r0, #1
 8001d12:	d007      	beq.n	8001d24 <_puts_r+0x5c>
 8001d14:	250a      	movs	r5, #10
 8001d16:	e007      	b.n	8001d28 <_puts_r+0x60>
 8001d18:	4621      	mov	r1, r4
 8001d1a:	4628      	mov	r0, r5
 8001d1c:	f000 f91e 	bl	8001f5c <__swsetup_r>
 8001d20:	2800      	cmp	r0, #0
 8001d22:	d0e7      	beq.n	8001cf4 <_puts_r+0x2c>
 8001d24:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001d28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d2a:	07da      	lsls	r2, r3, #31
 8001d2c:	d405      	bmi.n	8001d3a <_puts_r+0x72>
 8001d2e:	89a3      	ldrh	r3, [r4, #12]
 8001d30:	059b      	lsls	r3, r3, #22
 8001d32:	d402      	bmi.n	8001d3a <_puts_r+0x72>
 8001d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d36:	f000 f9f3 	bl	8002120 <__retarget_lock_release_recursive>
 8001d3a:	4628      	mov	r0, r5
 8001d3c:	bd70      	pop	{r4, r5, r6, pc}
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	da04      	bge.n	8001d4c <_puts_r+0x84>
 8001d42:	69a2      	ldr	r2, [r4, #24]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	dc06      	bgt.n	8001d56 <_puts_r+0x8e>
 8001d48:	290a      	cmp	r1, #10
 8001d4a:	d004      	beq.n	8001d56 <_puts_r+0x8e>
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	6022      	str	r2, [r4, #0]
 8001d52:	7019      	strb	r1, [r3, #0]
 8001d54:	e7cf      	b.n	8001cf6 <_puts_r+0x2e>
 8001d56:	4622      	mov	r2, r4
 8001d58:	4628      	mov	r0, r5
 8001d5a:	f000 f8c1 	bl	8001ee0 <__swbuf_r>
 8001d5e:	3001      	adds	r0, #1
 8001d60:	d1c9      	bne.n	8001cf6 <_puts_r+0x2e>
 8001d62:	e7df      	b.n	8001d24 <_puts_r+0x5c>
 8001d64:	250a      	movs	r5, #10
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	6022      	str	r2, [r4, #0]
 8001d6c:	701d      	strb	r5, [r3, #0]
 8001d6e:	e7db      	b.n	8001d28 <_puts_r+0x60>

08001d70 <puts>:
 8001d70:	4b02      	ldr	r3, [pc, #8]	; (8001d7c <puts+0xc>)
 8001d72:	4601      	mov	r1, r0
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	f7ff bfa7 	b.w	8001cc8 <_puts_r>
 8001d7a:	bf00      	nop
 8001d7c:	20000080 	.word	0x20000080

08001d80 <sniprintf>:
 8001d80:	b40c      	push	{r2, r3}
 8001d82:	b530      	push	{r4, r5, lr}
 8001d84:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <sniprintf+0x64>)
 8001d86:	1e0c      	subs	r4, r1, #0
 8001d88:	681d      	ldr	r5, [r3, #0]
 8001d8a:	b09d      	sub	sp, #116	; 0x74
 8001d8c:	da08      	bge.n	8001da0 <sniprintf+0x20>
 8001d8e:	238b      	movs	r3, #139	; 0x8b
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d94:	602b      	str	r3, [r5, #0]
 8001d96:	b01d      	add	sp, #116	; 0x74
 8001d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001d9c:	b002      	add	sp, #8
 8001d9e:	4770      	bx	lr
 8001da0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001da4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001da8:	bf0c      	ite	eq
 8001daa:	4623      	moveq	r3, r4
 8001dac:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8001db0:	9304      	str	r3, [sp, #16]
 8001db2:	9307      	str	r3, [sp, #28]
 8001db4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db8:	9002      	str	r0, [sp, #8]
 8001dba:	9006      	str	r0, [sp, #24]
 8001dbc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001dc0:	4628      	mov	r0, r5
 8001dc2:	ab21      	add	r3, sp, #132	; 0x84
 8001dc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001dc6:	a902      	add	r1, sp, #8
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	f000 fa4d 	bl	8002268 <_svfiprintf_r>
 8001dce:	1c43      	adds	r3, r0, #1
 8001dd0:	bfbc      	itt	lt
 8001dd2:	238b      	movlt	r3, #139	; 0x8b
 8001dd4:	602b      	strlt	r3, [r5, #0]
 8001dd6:	2c00      	cmp	r4, #0
 8001dd8:	d0dd      	beq.n	8001d96 <sniprintf+0x16>
 8001dda:	2200      	movs	r2, #0
 8001ddc:	9b02      	ldr	r3, [sp, #8]
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	e7d9      	b.n	8001d96 <sniprintf+0x16>
 8001de2:	bf00      	nop
 8001de4:	20000080 	.word	0x20000080

08001de8 <__sread>:
 8001de8:	b510      	push	{r4, lr}
 8001dea:	460c      	mov	r4, r1
 8001dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001df0:	f000 f936 	bl	8002060 <_read_r>
 8001df4:	2800      	cmp	r0, #0
 8001df6:	bfab      	itete	ge
 8001df8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001dfa:	89a3      	ldrhlt	r3, [r4, #12]
 8001dfc:	181b      	addge	r3, r3, r0
 8001dfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e02:	bfac      	ite	ge
 8001e04:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e06:	81a3      	strhlt	r3, [r4, #12]
 8001e08:	bd10      	pop	{r4, pc}

08001e0a <__swrite>:
 8001e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e0e:	461f      	mov	r7, r3
 8001e10:	898b      	ldrh	r3, [r1, #12]
 8001e12:	4605      	mov	r5, r0
 8001e14:	05db      	lsls	r3, r3, #23
 8001e16:	460c      	mov	r4, r1
 8001e18:	4616      	mov	r6, r2
 8001e1a:	d505      	bpl.n	8001e28 <__swrite+0x1e>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e24:	f000 f90a 	bl	800203c <_lseek_r>
 8001e28:	89a3      	ldrh	r3, [r4, #12]
 8001e2a:	4632      	mov	r2, r6
 8001e2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e30:	81a3      	strh	r3, [r4, #12]
 8001e32:	4628      	mov	r0, r5
 8001e34:	463b      	mov	r3, r7
 8001e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e3e:	f000 b931 	b.w	80020a4 <_write_r>

08001e42 <__sseek>:
 8001e42:	b510      	push	{r4, lr}
 8001e44:	460c      	mov	r4, r1
 8001e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e4a:	f000 f8f7 	bl	800203c <_lseek_r>
 8001e4e:	1c43      	adds	r3, r0, #1
 8001e50:	89a3      	ldrh	r3, [r4, #12]
 8001e52:	bf15      	itete	ne
 8001e54:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001e5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001e5e:	81a3      	strheq	r3, [r4, #12]
 8001e60:	bf18      	it	ne
 8001e62:	81a3      	strhne	r3, [r4, #12]
 8001e64:	bd10      	pop	{r4, pc}

08001e66 <__sclose>:
 8001e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e6a:	f000 b8d7 	b.w	800201c <_close_r>

08001e6e <_vsniprintf_r>:
 8001e6e:	b530      	push	{r4, r5, lr}
 8001e70:	4614      	mov	r4, r2
 8001e72:	2c00      	cmp	r4, #0
 8001e74:	4605      	mov	r5, r0
 8001e76:	461a      	mov	r2, r3
 8001e78:	b09b      	sub	sp, #108	; 0x6c
 8001e7a:	da05      	bge.n	8001e88 <_vsniprintf_r+0x1a>
 8001e7c:	238b      	movs	r3, #139	; 0x8b
 8001e7e:	6003      	str	r3, [r0, #0]
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e84:	b01b      	add	sp, #108	; 0x6c
 8001e86:	bd30      	pop	{r4, r5, pc}
 8001e88:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001e8c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001e90:	bf0c      	ite	eq
 8001e92:	4623      	moveq	r3, r4
 8001e94:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8001e98:	9302      	str	r3, [sp, #8]
 8001e9a:	9305      	str	r3, [sp, #20]
 8001e9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ea0:	9100      	str	r1, [sp, #0]
 8001ea2:	9104      	str	r1, [sp, #16]
 8001ea4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8001ea8:	4669      	mov	r1, sp
 8001eaa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001eac:	f000 f9dc 	bl	8002268 <_svfiprintf_r>
 8001eb0:	1c43      	adds	r3, r0, #1
 8001eb2:	bfbc      	itt	lt
 8001eb4:	238b      	movlt	r3, #139	; 0x8b
 8001eb6:	602b      	strlt	r3, [r5, #0]
 8001eb8:	2c00      	cmp	r4, #0
 8001eba:	d0e3      	beq.n	8001e84 <_vsniprintf_r+0x16>
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	9b00      	ldr	r3, [sp, #0]
 8001ec0:	701a      	strb	r2, [r3, #0]
 8001ec2:	e7df      	b.n	8001e84 <_vsniprintf_r+0x16>

08001ec4 <vsniprintf>:
 8001ec4:	b507      	push	{r0, r1, r2, lr}
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	460a      	mov	r2, r1
 8001ecc:	4601      	mov	r1, r0
 8001ece:	4803      	ldr	r0, [pc, #12]	; (8001edc <vsniprintf+0x18>)
 8001ed0:	6800      	ldr	r0, [r0, #0]
 8001ed2:	f7ff ffcc 	bl	8001e6e <_vsniprintf_r>
 8001ed6:	b003      	add	sp, #12
 8001ed8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001edc:	20000080 	.word	0x20000080

08001ee0 <__swbuf_r>:
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee2:	460e      	mov	r6, r1
 8001ee4:	4614      	mov	r4, r2
 8001ee6:	4605      	mov	r5, r0
 8001ee8:	b118      	cbz	r0, 8001ef2 <__swbuf_r+0x12>
 8001eea:	6a03      	ldr	r3, [r0, #32]
 8001eec:	b90b      	cbnz	r3, 8001ef2 <__swbuf_r+0x12>
 8001eee:	f7ff feb5 	bl	8001c5c <__sinit>
 8001ef2:	69a3      	ldr	r3, [r4, #24]
 8001ef4:	60a3      	str	r3, [r4, #8]
 8001ef6:	89a3      	ldrh	r3, [r4, #12]
 8001ef8:	071a      	lsls	r2, r3, #28
 8001efa:	d525      	bpl.n	8001f48 <__swbuf_r+0x68>
 8001efc:	6923      	ldr	r3, [r4, #16]
 8001efe:	b31b      	cbz	r3, 8001f48 <__swbuf_r+0x68>
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	6922      	ldr	r2, [r4, #16]
 8001f04:	b2f6      	uxtb	r6, r6
 8001f06:	1a98      	subs	r0, r3, r2
 8001f08:	6963      	ldr	r3, [r4, #20]
 8001f0a:	4637      	mov	r7, r6
 8001f0c:	4283      	cmp	r3, r0
 8001f0e:	dc04      	bgt.n	8001f1a <__swbuf_r+0x3a>
 8001f10:	4621      	mov	r1, r4
 8001f12:	4628      	mov	r0, r5
 8001f14:	f000 fcbc 	bl	8002890 <_fflush_r>
 8001f18:	b9e0      	cbnz	r0, 8001f54 <__swbuf_r+0x74>
 8001f1a:	68a3      	ldr	r3, [r4, #8]
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	60a3      	str	r3, [r4, #8]
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	6022      	str	r2, [r4, #0]
 8001f26:	701e      	strb	r6, [r3, #0]
 8001f28:	6962      	ldr	r2, [r4, #20]
 8001f2a:	1c43      	adds	r3, r0, #1
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d004      	beq.n	8001f3a <__swbuf_r+0x5a>
 8001f30:	89a3      	ldrh	r3, [r4, #12]
 8001f32:	07db      	lsls	r3, r3, #31
 8001f34:	d506      	bpl.n	8001f44 <__swbuf_r+0x64>
 8001f36:	2e0a      	cmp	r6, #10
 8001f38:	d104      	bne.n	8001f44 <__swbuf_r+0x64>
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	f000 fca7 	bl	8002890 <_fflush_r>
 8001f42:	b938      	cbnz	r0, 8001f54 <__swbuf_r+0x74>
 8001f44:	4638      	mov	r0, r7
 8001f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f48:	4621      	mov	r1, r4
 8001f4a:	4628      	mov	r0, r5
 8001f4c:	f000 f806 	bl	8001f5c <__swsetup_r>
 8001f50:	2800      	cmp	r0, #0
 8001f52:	d0d5      	beq.n	8001f00 <__swbuf_r+0x20>
 8001f54:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001f58:	e7f4      	b.n	8001f44 <__swbuf_r+0x64>
	...

08001f5c <__swsetup_r>:
 8001f5c:	b538      	push	{r3, r4, r5, lr}
 8001f5e:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <__swsetup_r+0xac>)
 8001f60:	4605      	mov	r5, r0
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	460c      	mov	r4, r1
 8001f66:	b118      	cbz	r0, 8001f70 <__swsetup_r+0x14>
 8001f68:	6a03      	ldr	r3, [r0, #32]
 8001f6a:	b90b      	cbnz	r3, 8001f70 <__swsetup_r+0x14>
 8001f6c:	f7ff fe76 	bl	8001c5c <__sinit>
 8001f70:	89a3      	ldrh	r3, [r4, #12]
 8001f72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f76:	0718      	lsls	r0, r3, #28
 8001f78:	d422      	bmi.n	8001fc0 <__swsetup_r+0x64>
 8001f7a:	06d9      	lsls	r1, r3, #27
 8001f7c:	d407      	bmi.n	8001f8e <__swsetup_r+0x32>
 8001f7e:	2309      	movs	r3, #9
 8001f80:	602b      	str	r3, [r5, #0]
 8001f82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001f86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f8a:	81a3      	strh	r3, [r4, #12]
 8001f8c:	e034      	b.n	8001ff8 <__swsetup_r+0x9c>
 8001f8e:	0758      	lsls	r0, r3, #29
 8001f90:	d512      	bpl.n	8001fb8 <__swsetup_r+0x5c>
 8001f92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f94:	b141      	cbz	r1, 8001fa8 <__swsetup_r+0x4c>
 8001f96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f9a:	4299      	cmp	r1, r3
 8001f9c:	d002      	beq.n	8001fa4 <__swsetup_r+0x48>
 8001f9e:	4628      	mov	r0, r5
 8001fa0:	f000 f8c0 	bl	8002124 <_free_r>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	6363      	str	r3, [r4, #52]	; 0x34
 8001fa8:	89a3      	ldrh	r3, [r4, #12]
 8001faa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001fae:	81a3      	strh	r3, [r4, #12]
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	6063      	str	r3, [r4, #4]
 8001fb4:	6923      	ldr	r3, [r4, #16]
 8001fb6:	6023      	str	r3, [r4, #0]
 8001fb8:	89a3      	ldrh	r3, [r4, #12]
 8001fba:	f043 0308 	orr.w	r3, r3, #8
 8001fbe:	81a3      	strh	r3, [r4, #12]
 8001fc0:	6923      	ldr	r3, [r4, #16]
 8001fc2:	b94b      	cbnz	r3, 8001fd8 <__swsetup_r+0x7c>
 8001fc4:	89a3      	ldrh	r3, [r4, #12]
 8001fc6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fce:	d003      	beq.n	8001fd8 <__swsetup_r+0x7c>
 8001fd0:	4621      	mov	r1, r4
 8001fd2:	4628      	mov	r0, r5
 8001fd4:	f000 fca9 	bl	800292a <__smakebuf_r>
 8001fd8:	89a0      	ldrh	r0, [r4, #12]
 8001fda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001fde:	f010 0301 	ands.w	r3, r0, #1
 8001fe2:	d00a      	beq.n	8001ffa <__swsetup_r+0x9e>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60a3      	str	r3, [r4, #8]
 8001fe8:	6963      	ldr	r3, [r4, #20]
 8001fea:	425b      	negs	r3, r3
 8001fec:	61a3      	str	r3, [r4, #24]
 8001fee:	6923      	ldr	r3, [r4, #16]
 8001ff0:	b943      	cbnz	r3, 8002004 <__swsetup_r+0xa8>
 8001ff2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001ff6:	d1c4      	bne.n	8001f82 <__swsetup_r+0x26>
 8001ff8:	bd38      	pop	{r3, r4, r5, pc}
 8001ffa:	0781      	lsls	r1, r0, #30
 8001ffc:	bf58      	it	pl
 8001ffe:	6963      	ldrpl	r3, [r4, #20]
 8002000:	60a3      	str	r3, [r4, #8]
 8002002:	e7f4      	b.n	8001fee <__swsetup_r+0x92>
 8002004:	2000      	movs	r0, #0
 8002006:	e7f7      	b.n	8001ff8 <__swsetup_r+0x9c>
 8002008:	20000080 	.word	0x20000080

0800200c <memset>:
 800200c:	4603      	mov	r3, r0
 800200e:	4402      	add	r2, r0
 8002010:	4293      	cmp	r3, r2
 8002012:	d100      	bne.n	8002016 <memset+0xa>
 8002014:	4770      	bx	lr
 8002016:	f803 1b01 	strb.w	r1, [r3], #1
 800201a:	e7f9      	b.n	8002010 <memset+0x4>

0800201c <_close_r>:
 800201c:	b538      	push	{r3, r4, r5, lr}
 800201e:	2300      	movs	r3, #0
 8002020:	4d05      	ldr	r5, [pc, #20]	; (8002038 <_close_r+0x1c>)
 8002022:	4604      	mov	r4, r0
 8002024:	4608      	mov	r0, r1
 8002026:	602b      	str	r3, [r5, #0]
 8002028:	f7fe fa18 	bl	800045c <_close>
 800202c:	1c43      	adds	r3, r0, #1
 800202e:	d102      	bne.n	8002036 <_close_r+0x1a>
 8002030:	682b      	ldr	r3, [r5, #0]
 8002032:	b103      	cbz	r3, 8002036 <_close_r+0x1a>
 8002034:	6023      	str	r3, [r4, #0]
 8002036:	bd38      	pop	{r3, r4, r5, pc}
 8002038:	20000238 	.word	0x20000238

0800203c <_lseek_r>:
 800203c:	b538      	push	{r3, r4, r5, lr}
 800203e:	4604      	mov	r4, r0
 8002040:	4608      	mov	r0, r1
 8002042:	4611      	mov	r1, r2
 8002044:	2200      	movs	r2, #0
 8002046:	4d05      	ldr	r5, [pc, #20]	; (800205c <_lseek_r+0x20>)
 8002048:	602a      	str	r2, [r5, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	f7fe fa2a 	bl	80004a4 <_lseek>
 8002050:	1c43      	adds	r3, r0, #1
 8002052:	d102      	bne.n	800205a <_lseek_r+0x1e>
 8002054:	682b      	ldr	r3, [r5, #0]
 8002056:	b103      	cbz	r3, 800205a <_lseek_r+0x1e>
 8002058:	6023      	str	r3, [r4, #0]
 800205a:	bd38      	pop	{r3, r4, r5, pc}
 800205c:	20000238 	.word	0x20000238

08002060 <_read_r>:
 8002060:	b538      	push	{r3, r4, r5, lr}
 8002062:	4604      	mov	r4, r0
 8002064:	4608      	mov	r0, r1
 8002066:	4611      	mov	r1, r2
 8002068:	2200      	movs	r2, #0
 800206a:	4d05      	ldr	r5, [pc, #20]	; (8002080 <_read_r+0x20>)
 800206c:	602a      	str	r2, [r5, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	f7fe f9d7 	bl	8000422 <_read>
 8002074:	1c43      	adds	r3, r0, #1
 8002076:	d102      	bne.n	800207e <_read_r+0x1e>
 8002078:	682b      	ldr	r3, [r5, #0]
 800207a:	b103      	cbz	r3, 800207e <_read_r+0x1e>
 800207c:	6023      	str	r3, [r4, #0]
 800207e:	bd38      	pop	{r3, r4, r5, pc}
 8002080:	20000238 	.word	0x20000238

08002084 <_sbrk_r>:
 8002084:	b538      	push	{r3, r4, r5, lr}
 8002086:	2300      	movs	r3, #0
 8002088:	4d05      	ldr	r5, [pc, #20]	; (80020a0 <_sbrk_r+0x1c>)
 800208a:	4604      	mov	r4, r0
 800208c:	4608      	mov	r0, r1
 800208e:	602b      	str	r3, [r5, #0]
 8002090:	f7fe fa14 	bl	80004bc <_sbrk>
 8002094:	1c43      	adds	r3, r0, #1
 8002096:	d102      	bne.n	800209e <_sbrk_r+0x1a>
 8002098:	682b      	ldr	r3, [r5, #0]
 800209a:	b103      	cbz	r3, 800209e <_sbrk_r+0x1a>
 800209c:	6023      	str	r3, [r4, #0]
 800209e:	bd38      	pop	{r3, r4, r5, pc}
 80020a0:	20000238 	.word	0x20000238

080020a4 <_write_r>:
 80020a4:	b538      	push	{r3, r4, r5, lr}
 80020a6:	4604      	mov	r4, r0
 80020a8:	4608      	mov	r0, r1
 80020aa:	4611      	mov	r1, r2
 80020ac:	2200      	movs	r2, #0
 80020ae:	4d05      	ldr	r5, [pc, #20]	; (80020c4 <_write_r+0x20>)
 80020b0:	602a      	str	r2, [r5, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	f7fe f888 	bl	80001c8 <_write>
 80020b8:	1c43      	adds	r3, r0, #1
 80020ba:	d102      	bne.n	80020c2 <_write_r+0x1e>
 80020bc:	682b      	ldr	r3, [r5, #0]
 80020be:	b103      	cbz	r3, 80020c2 <_write_r+0x1e>
 80020c0:	6023      	str	r3, [r4, #0]
 80020c2:	bd38      	pop	{r3, r4, r5, pc}
 80020c4:	20000238 	.word	0x20000238

080020c8 <__errno>:
 80020c8:	4b01      	ldr	r3, [pc, #4]	; (80020d0 <__errno+0x8>)
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000080 	.word	0x20000080

080020d4 <__libc_init_array>:
 80020d4:	b570      	push	{r4, r5, r6, lr}
 80020d6:	2600      	movs	r6, #0
 80020d8:	4d0c      	ldr	r5, [pc, #48]	; (800210c <__libc_init_array+0x38>)
 80020da:	4c0d      	ldr	r4, [pc, #52]	; (8002110 <__libc_init_array+0x3c>)
 80020dc:	1b64      	subs	r4, r4, r5
 80020de:	10a4      	asrs	r4, r4, #2
 80020e0:	42a6      	cmp	r6, r4
 80020e2:	d109      	bne.n	80020f8 <__libc_init_array+0x24>
 80020e4:	f000 fcee 	bl	8002ac4 <_init>
 80020e8:	2600      	movs	r6, #0
 80020ea:	4d0a      	ldr	r5, [pc, #40]	; (8002114 <__libc_init_array+0x40>)
 80020ec:	4c0a      	ldr	r4, [pc, #40]	; (8002118 <__libc_init_array+0x44>)
 80020ee:	1b64      	subs	r4, r4, r5
 80020f0:	10a4      	asrs	r4, r4, #2
 80020f2:	42a6      	cmp	r6, r4
 80020f4:	d105      	bne.n	8002102 <__libc_init_array+0x2e>
 80020f6:	bd70      	pop	{r4, r5, r6, pc}
 80020f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020fc:	4798      	blx	r3
 80020fe:	3601      	adds	r6, #1
 8002100:	e7ee      	b.n	80020e0 <__libc_init_array+0xc>
 8002102:	f855 3b04 	ldr.w	r3, [r5], #4
 8002106:	4798      	blx	r3
 8002108:	3601      	adds	r6, #1
 800210a:	e7f2      	b.n	80020f2 <__libc_init_array+0x1e>
 800210c:	08002b6c 	.word	0x08002b6c
 8002110:	08002b6c 	.word	0x08002b6c
 8002114:	08002b6c 	.word	0x08002b6c
 8002118:	08002b70 	.word	0x08002b70

0800211c <__retarget_lock_init_recursive>:
 800211c:	4770      	bx	lr

0800211e <__retarget_lock_acquire_recursive>:
 800211e:	4770      	bx	lr

08002120 <__retarget_lock_release_recursive>:
 8002120:	4770      	bx	lr
	...

08002124 <_free_r>:
 8002124:	b538      	push	{r3, r4, r5, lr}
 8002126:	4605      	mov	r5, r0
 8002128:	2900      	cmp	r1, #0
 800212a:	d040      	beq.n	80021ae <_free_r+0x8a>
 800212c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002130:	1f0c      	subs	r4, r1, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	bfb8      	it	lt
 8002136:	18e4      	addlt	r4, r4, r3
 8002138:	f7ff fcf8 	bl	8001b2c <__malloc_lock>
 800213c:	4a1c      	ldr	r2, [pc, #112]	; (80021b0 <_free_r+0x8c>)
 800213e:	6813      	ldr	r3, [r2, #0]
 8002140:	b933      	cbnz	r3, 8002150 <_free_r+0x2c>
 8002142:	6063      	str	r3, [r4, #4]
 8002144:	6014      	str	r4, [r2, #0]
 8002146:	4628      	mov	r0, r5
 8002148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800214c:	f7ff bcf4 	b.w	8001b38 <__malloc_unlock>
 8002150:	42a3      	cmp	r3, r4
 8002152:	d908      	bls.n	8002166 <_free_r+0x42>
 8002154:	6820      	ldr	r0, [r4, #0]
 8002156:	1821      	adds	r1, r4, r0
 8002158:	428b      	cmp	r3, r1
 800215a:	bf01      	itttt	eq
 800215c:	6819      	ldreq	r1, [r3, #0]
 800215e:	685b      	ldreq	r3, [r3, #4]
 8002160:	1809      	addeq	r1, r1, r0
 8002162:	6021      	streq	r1, [r4, #0]
 8002164:	e7ed      	b.n	8002142 <_free_r+0x1e>
 8002166:	461a      	mov	r2, r3
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	b10b      	cbz	r3, 8002170 <_free_r+0x4c>
 800216c:	42a3      	cmp	r3, r4
 800216e:	d9fa      	bls.n	8002166 <_free_r+0x42>
 8002170:	6811      	ldr	r1, [r2, #0]
 8002172:	1850      	adds	r0, r2, r1
 8002174:	42a0      	cmp	r0, r4
 8002176:	d10b      	bne.n	8002190 <_free_r+0x6c>
 8002178:	6820      	ldr	r0, [r4, #0]
 800217a:	4401      	add	r1, r0
 800217c:	1850      	adds	r0, r2, r1
 800217e:	4283      	cmp	r3, r0
 8002180:	6011      	str	r1, [r2, #0]
 8002182:	d1e0      	bne.n	8002146 <_free_r+0x22>
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	4408      	add	r0, r1
 800218a:	6010      	str	r0, [r2, #0]
 800218c:	6053      	str	r3, [r2, #4]
 800218e:	e7da      	b.n	8002146 <_free_r+0x22>
 8002190:	d902      	bls.n	8002198 <_free_r+0x74>
 8002192:	230c      	movs	r3, #12
 8002194:	602b      	str	r3, [r5, #0]
 8002196:	e7d6      	b.n	8002146 <_free_r+0x22>
 8002198:	6820      	ldr	r0, [r4, #0]
 800219a:	1821      	adds	r1, r4, r0
 800219c:	428b      	cmp	r3, r1
 800219e:	bf01      	itttt	eq
 80021a0:	6819      	ldreq	r1, [r3, #0]
 80021a2:	685b      	ldreq	r3, [r3, #4]
 80021a4:	1809      	addeq	r1, r1, r0
 80021a6:	6021      	streq	r1, [r4, #0]
 80021a8:	6063      	str	r3, [r4, #4]
 80021aa:	6054      	str	r4, [r2, #4]
 80021ac:	e7cb      	b.n	8002146 <_free_r+0x22>
 80021ae:	bd38      	pop	{r3, r4, r5, pc}
 80021b0:	200000f4 	.word	0x200000f4

080021b4 <__ssputs_r>:
 80021b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021b8:	461f      	mov	r7, r3
 80021ba:	688e      	ldr	r6, [r1, #8]
 80021bc:	4682      	mov	sl, r0
 80021be:	42be      	cmp	r6, r7
 80021c0:	460c      	mov	r4, r1
 80021c2:	4690      	mov	r8, r2
 80021c4:	680b      	ldr	r3, [r1, #0]
 80021c6:	d82c      	bhi.n	8002222 <__ssputs_r+0x6e>
 80021c8:	898a      	ldrh	r2, [r1, #12]
 80021ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80021ce:	d026      	beq.n	800221e <__ssputs_r+0x6a>
 80021d0:	6965      	ldr	r5, [r4, #20]
 80021d2:	6909      	ldr	r1, [r1, #16]
 80021d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80021d8:	eba3 0901 	sub.w	r9, r3, r1
 80021dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80021e0:	1c7b      	adds	r3, r7, #1
 80021e2:	444b      	add	r3, r9
 80021e4:	106d      	asrs	r5, r5, #1
 80021e6:	429d      	cmp	r5, r3
 80021e8:	bf38      	it	cc
 80021ea:	461d      	movcc	r5, r3
 80021ec:	0553      	lsls	r3, r2, #21
 80021ee:	d527      	bpl.n	8002240 <__ssputs_r+0x8c>
 80021f0:	4629      	mov	r1, r5
 80021f2:	f7ff fc1b 	bl	8001a2c <_malloc_r>
 80021f6:	4606      	mov	r6, r0
 80021f8:	b360      	cbz	r0, 8002254 <__ssputs_r+0xa0>
 80021fa:	464a      	mov	r2, r9
 80021fc:	6921      	ldr	r1, [r4, #16]
 80021fe:	f000 fc1b 	bl	8002a38 <memcpy>
 8002202:	89a3      	ldrh	r3, [r4, #12]
 8002204:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800220c:	81a3      	strh	r3, [r4, #12]
 800220e:	6126      	str	r6, [r4, #16]
 8002210:	444e      	add	r6, r9
 8002212:	6026      	str	r6, [r4, #0]
 8002214:	463e      	mov	r6, r7
 8002216:	6165      	str	r5, [r4, #20]
 8002218:	eba5 0509 	sub.w	r5, r5, r9
 800221c:	60a5      	str	r5, [r4, #8]
 800221e:	42be      	cmp	r6, r7
 8002220:	d900      	bls.n	8002224 <__ssputs_r+0x70>
 8002222:	463e      	mov	r6, r7
 8002224:	4632      	mov	r2, r6
 8002226:	4641      	mov	r1, r8
 8002228:	6820      	ldr	r0, [r4, #0]
 800222a:	f000 fbba 	bl	80029a2 <memmove>
 800222e:	2000      	movs	r0, #0
 8002230:	68a3      	ldr	r3, [r4, #8]
 8002232:	1b9b      	subs	r3, r3, r6
 8002234:	60a3      	str	r3, [r4, #8]
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	4433      	add	r3, r6
 800223a:	6023      	str	r3, [r4, #0]
 800223c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002240:	462a      	mov	r2, r5
 8002242:	f000 fc07 	bl	8002a54 <_realloc_r>
 8002246:	4606      	mov	r6, r0
 8002248:	2800      	cmp	r0, #0
 800224a:	d1e0      	bne.n	800220e <__ssputs_r+0x5a>
 800224c:	4650      	mov	r0, sl
 800224e:	6921      	ldr	r1, [r4, #16]
 8002250:	f7ff ff68 	bl	8002124 <_free_r>
 8002254:	230c      	movs	r3, #12
 8002256:	f8ca 3000 	str.w	r3, [sl]
 800225a:	89a3      	ldrh	r3, [r4, #12]
 800225c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002264:	81a3      	strh	r3, [r4, #12]
 8002266:	e7e9      	b.n	800223c <__ssputs_r+0x88>

08002268 <_svfiprintf_r>:
 8002268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800226c:	4698      	mov	r8, r3
 800226e:	898b      	ldrh	r3, [r1, #12]
 8002270:	4607      	mov	r7, r0
 8002272:	061b      	lsls	r3, r3, #24
 8002274:	460d      	mov	r5, r1
 8002276:	4614      	mov	r4, r2
 8002278:	b09d      	sub	sp, #116	; 0x74
 800227a:	d50e      	bpl.n	800229a <_svfiprintf_r+0x32>
 800227c:	690b      	ldr	r3, [r1, #16]
 800227e:	b963      	cbnz	r3, 800229a <_svfiprintf_r+0x32>
 8002280:	2140      	movs	r1, #64	; 0x40
 8002282:	f7ff fbd3 	bl	8001a2c <_malloc_r>
 8002286:	6028      	str	r0, [r5, #0]
 8002288:	6128      	str	r0, [r5, #16]
 800228a:	b920      	cbnz	r0, 8002296 <_svfiprintf_r+0x2e>
 800228c:	230c      	movs	r3, #12
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002294:	e0d0      	b.n	8002438 <_svfiprintf_r+0x1d0>
 8002296:	2340      	movs	r3, #64	; 0x40
 8002298:	616b      	str	r3, [r5, #20]
 800229a:	2300      	movs	r3, #0
 800229c:	9309      	str	r3, [sp, #36]	; 0x24
 800229e:	2320      	movs	r3, #32
 80022a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022a4:	2330      	movs	r3, #48	; 0x30
 80022a6:	f04f 0901 	mov.w	r9, #1
 80022aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80022ae:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002450 <_svfiprintf_r+0x1e8>
 80022b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80022b6:	4623      	mov	r3, r4
 80022b8:	469a      	mov	sl, r3
 80022ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022be:	b10a      	cbz	r2, 80022c4 <_svfiprintf_r+0x5c>
 80022c0:	2a25      	cmp	r2, #37	; 0x25
 80022c2:	d1f9      	bne.n	80022b8 <_svfiprintf_r+0x50>
 80022c4:	ebba 0b04 	subs.w	fp, sl, r4
 80022c8:	d00b      	beq.n	80022e2 <_svfiprintf_r+0x7a>
 80022ca:	465b      	mov	r3, fp
 80022cc:	4622      	mov	r2, r4
 80022ce:	4629      	mov	r1, r5
 80022d0:	4638      	mov	r0, r7
 80022d2:	f7ff ff6f 	bl	80021b4 <__ssputs_r>
 80022d6:	3001      	adds	r0, #1
 80022d8:	f000 80a9 	beq.w	800242e <_svfiprintf_r+0x1c6>
 80022dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022de:	445a      	add	r2, fp
 80022e0:	9209      	str	r2, [sp, #36]	; 0x24
 80022e2:	f89a 3000 	ldrb.w	r3, [sl]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80a1 	beq.w	800242e <_svfiprintf_r+0x1c6>
 80022ec:	2300      	movs	r3, #0
 80022ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80022f6:	f10a 0a01 	add.w	sl, sl, #1
 80022fa:	9304      	str	r3, [sp, #16]
 80022fc:	9307      	str	r3, [sp, #28]
 80022fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002302:	931a      	str	r3, [sp, #104]	; 0x68
 8002304:	4654      	mov	r4, sl
 8002306:	2205      	movs	r2, #5
 8002308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800230c:	4850      	ldr	r0, [pc, #320]	; (8002450 <_svfiprintf_r+0x1e8>)
 800230e:	f000 fb85 	bl	8002a1c <memchr>
 8002312:	9a04      	ldr	r2, [sp, #16]
 8002314:	b9d8      	cbnz	r0, 800234e <_svfiprintf_r+0xe6>
 8002316:	06d0      	lsls	r0, r2, #27
 8002318:	bf44      	itt	mi
 800231a:	2320      	movmi	r3, #32
 800231c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002320:	0711      	lsls	r1, r2, #28
 8002322:	bf44      	itt	mi
 8002324:	232b      	movmi	r3, #43	; 0x2b
 8002326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800232a:	f89a 3000 	ldrb.w	r3, [sl]
 800232e:	2b2a      	cmp	r3, #42	; 0x2a
 8002330:	d015      	beq.n	800235e <_svfiprintf_r+0xf6>
 8002332:	4654      	mov	r4, sl
 8002334:	2000      	movs	r0, #0
 8002336:	f04f 0c0a 	mov.w	ip, #10
 800233a:	9a07      	ldr	r2, [sp, #28]
 800233c:	4621      	mov	r1, r4
 800233e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002342:	3b30      	subs	r3, #48	; 0x30
 8002344:	2b09      	cmp	r3, #9
 8002346:	d94d      	bls.n	80023e4 <_svfiprintf_r+0x17c>
 8002348:	b1b0      	cbz	r0, 8002378 <_svfiprintf_r+0x110>
 800234a:	9207      	str	r2, [sp, #28]
 800234c:	e014      	b.n	8002378 <_svfiprintf_r+0x110>
 800234e:	eba0 0308 	sub.w	r3, r0, r8
 8002352:	fa09 f303 	lsl.w	r3, r9, r3
 8002356:	4313      	orrs	r3, r2
 8002358:	46a2      	mov	sl, r4
 800235a:	9304      	str	r3, [sp, #16]
 800235c:	e7d2      	b.n	8002304 <_svfiprintf_r+0x9c>
 800235e:	9b03      	ldr	r3, [sp, #12]
 8002360:	1d19      	adds	r1, r3, #4
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	9103      	str	r1, [sp, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	bfbb      	ittet	lt
 800236a:	425b      	neglt	r3, r3
 800236c:	f042 0202 	orrlt.w	r2, r2, #2
 8002370:	9307      	strge	r3, [sp, #28]
 8002372:	9307      	strlt	r3, [sp, #28]
 8002374:	bfb8      	it	lt
 8002376:	9204      	strlt	r2, [sp, #16]
 8002378:	7823      	ldrb	r3, [r4, #0]
 800237a:	2b2e      	cmp	r3, #46	; 0x2e
 800237c:	d10c      	bne.n	8002398 <_svfiprintf_r+0x130>
 800237e:	7863      	ldrb	r3, [r4, #1]
 8002380:	2b2a      	cmp	r3, #42	; 0x2a
 8002382:	d134      	bne.n	80023ee <_svfiprintf_r+0x186>
 8002384:	9b03      	ldr	r3, [sp, #12]
 8002386:	3402      	adds	r4, #2
 8002388:	1d1a      	adds	r2, r3, #4
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	9203      	str	r2, [sp, #12]
 800238e:	2b00      	cmp	r3, #0
 8002390:	bfb8      	it	lt
 8002392:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002396:	9305      	str	r3, [sp, #20]
 8002398:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002454 <_svfiprintf_r+0x1ec>
 800239c:	2203      	movs	r2, #3
 800239e:	4650      	mov	r0, sl
 80023a0:	7821      	ldrb	r1, [r4, #0]
 80023a2:	f000 fb3b 	bl	8002a1c <memchr>
 80023a6:	b138      	cbz	r0, 80023b8 <_svfiprintf_r+0x150>
 80023a8:	2240      	movs	r2, #64	; 0x40
 80023aa:	9b04      	ldr	r3, [sp, #16]
 80023ac:	eba0 000a 	sub.w	r0, r0, sl
 80023b0:	4082      	lsls	r2, r0
 80023b2:	4313      	orrs	r3, r2
 80023b4:	3401      	adds	r4, #1
 80023b6:	9304      	str	r3, [sp, #16]
 80023b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023bc:	2206      	movs	r2, #6
 80023be:	4826      	ldr	r0, [pc, #152]	; (8002458 <_svfiprintf_r+0x1f0>)
 80023c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80023c4:	f000 fb2a 	bl	8002a1c <memchr>
 80023c8:	2800      	cmp	r0, #0
 80023ca:	d038      	beq.n	800243e <_svfiprintf_r+0x1d6>
 80023cc:	4b23      	ldr	r3, [pc, #140]	; (800245c <_svfiprintf_r+0x1f4>)
 80023ce:	bb1b      	cbnz	r3, 8002418 <_svfiprintf_r+0x1b0>
 80023d0:	9b03      	ldr	r3, [sp, #12]
 80023d2:	3307      	adds	r3, #7
 80023d4:	f023 0307 	bic.w	r3, r3, #7
 80023d8:	3308      	adds	r3, #8
 80023da:	9303      	str	r3, [sp, #12]
 80023dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023de:	4433      	add	r3, r6
 80023e0:	9309      	str	r3, [sp, #36]	; 0x24
 80023e2:	e768      	b.n	80022b6 <_svfiprintf_r+0x4e>
 80023e4:	460c      	mov	r4, r1
 80023e6:	2001      	movs	r0, #1
 80023e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80023ec:	e7a6      	b.n	800233c <_svfiprintf_r+0xd4>
 80023ee:	2300      	movs	r3, #0
 80023f0:	f04f 0c0a 	mov.w	ip, #10
 80023f4:	4619      	mov	r1, r3
 80023f6:	3401      	adds	r4, #1
 80023f8:	9305      	str	r3, [sp, #20]
 80023fa:	4620      	mov	r0, r4
 80023fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002400:	3a30      	subs	r2, #48	; 0x30
 8002402:	2a09      	cmp	r2, #9
 8002404:	d903      	bls.n	800240e <_svfiprintf_r+0x1a6>
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0c6      	beq.n	8002398 <_svfiprintf_r+0x130>
 800240a:	9105      	str	r1, [sp, #20]
 800240c:	e7c4      	b.n	8002398 <_svfiprintf_r+0x130>
 800240e:	4604      	mov	r4, r0
 8002410:	2301      	movs	r3, #1
 8002412:	fb0c 2101 	mla	r1, ip, r1, r2
 8002416:	e7f0      	b.n	80023fa <_svfiprintf_r+0x192>
 8002418:	ab03      	add	r3, sp, #12
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	462a      	mov	r2, r5
 800241e:	4638      	mov	r0, r7
 8002420:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <_svfiprintf_r+0x1f8>)
 8002422:	a904      	add	r1, sp, #16
 8002424:	f3af 8000 	nop.w
 8002428:	1c42      	adds	r2, r0, #1
 800242a:	4606      	mov	r6, r0
 800242c:	d1d6      	bne.n	80023dc <_svfiprintf_r+0x174>
 800242e:	89ab      	ldrh	r3, [r5, #12]
 8002430:	065b      	lsls	r3, r3, #25
 8002432:	f53f af2d 	bmi.w	8002290 <_svfiprintf_r+0x28>
 8002436:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002438:	b01d      	add	sp, #116	; 0x74
 800243a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800243e:	ab03      	add	r3, sp, #12
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	462a      	mov	r2, r5
 8002444:	4638      	mov	r0, r7
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <_svfiprintf_r+0x1f8>)
 8002448:	a904      	add	r1, sp, #16
 800244a:	f000 f87d 	bl	8002548 <_printf_i>
 800244e:	e7eb      	b.n	8002428 <_svfiprintf_r+0x1c0>
 8002450:	08002b38 	.word	0x08002b38
 8002454:	08002b3e 	.word	0x08002b3e
 8002458:	08002b42 	.word	0x08002b42
 800245c:	00000000 	.word	0x00000000
 8002460:	080021b5 	.word	0x080021b5

08002464 <_printf_common>:
 8002464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002468:	4616      	mov	r6, r2
 800246a:	4699      	mov	r9, r3
 800246c:	688a      	ldr	r2, [r1, #8]
 800246e:	690b      	ldr	r3, [r1, #16]
 8002470:	4607      	mov	r7, r0
 8002472:	4293      	cmp	r3, r2
 8002474:	bfb8      	it	lt
 8002476:	4613      	movlt	r3, r2
 8002478:	6033      	str	r3, [r6, #0]
 800247a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800247e:	460c      	mov	r4, r1
 8002480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002484:	b10a      	cbz	r2, 800248a <_printf_common+0x26>
 8002486:	3301      	adds	r3, #1
 8002488:	6033      	str	r3, [r6, #0]
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	0699      	lsls	r1, r3, #26
 800248e:	bf42      	ittt	mi
 8002490:	6833      	ldrmi	r3, [r6, #0]
 8002492:	3302      	addmi	r3, #2
 8002494:	6033      	strmi	r3, [r6, #0]
 8002496:	6825      	ldr	r5, [r4, #0]
 8002498:	f015 0506 	ands.w	r5, r5, #6
 800249c:	d106      	bne.n	80024ac <_printf_common+0x48>
 800249e:	f104 0a19 	add.w	sl, r4, #25
 80024a2:	68e3      	ldr	r3, [r4, #12]
 80024a4:	6832      	ldr	r2, [r6, #0]
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	42ab      	cmp	r3, r5
 80024aa:	dc2b      	bgt.n	8002504 <_printf_common+0xa0>
 80024ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80024b0:	1e13      	subs	r3, r2, #0
 80024b2:	6822      	ldr	r2, [r4, #0]
 80024b4:	bf18      	it	ne
 80024b6:	2301      	movne	r3, #1
 80024b8:	0692      	lsls	r2, r2, #26
 80024ba:	d430      	bmi.n	800251e <_printf_common+0xba>
 80024bc:	4649      	mov	r1, r9
 80024be:	4638      	mov	r0, r7
 80024c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024c4:	47c0      	blx	r8
 80024c6:	3001      	adds	r0, #1
 80024c8:	d023      	beq.n	8002512 <_printf_common+0xae>
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	6922      	ldr	r2, [r4, #16]
 80024ce:	f003 0306 	and.w	r3, r3, #6
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	bf14      	ite	ne
 80024d6:	2500      	movne	r5, #0
 80024d8:	6833      	ldreq	r3, [r6, #0]
 80024da:	f04f 0600 	mov.w	r6, #0
 80024de:	bf08      	it	eq
 80024e0:	68e5      	ldreq	r5, [r4, #12]
 80024e2:	f104 041a 	add.w	r4, r4, #26
 80024e6:	bf08      	it	eq
 80024e8:	1aed      	subeq	r5, r5, r3
 80024ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80024ee:	bf08      	it	eq
 80024f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024f4:	4293      	cmp	r3, r2
 80024f6:	bfc4      	itt	gt
 80024f8:	1a9b      	subgt	r3, r3, r2
 80024fa:	18ed      	addgt	r5, r5, r3
 80024fc:	42b5      	cmp	r5, r6
 80024fe:	d11a      	bne.n	8002536 <_printf_common+0xd2>
 8002500:	2000      	movs	r0, #0
 8002502:	e008      	b.n	8002516 <_printf_common+0xb2>
 8002504:	2301      	movs	r3, #1
 8002506:	4652      	mov	r2, sl
 8002508:	4649      	mov	r1, r9
 800250a:	4638      	mov	r0, r7
 800250c:	47c0      	blx	r8
 800250e:	3001      	adds	r0, #1
 8002510:	d103      	bne.n	800251a <_printf_common+0xb6>
 8002512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800251a:	3501      	adds	r5, #1
 800251c:	e7c1      	b.n	80024a2 <_printf_common+0x3e>
 800251e:	2030      	movs	r0, #48	; 0x30
 8002520:	18e1      	adds	r1, r4, r3
 8002522:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800252c:	4422      	add	r2, r4
 800252e:	3302      	adds	r3, #2
 8002530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002534:	e7c2      	b.n	80024bc <_printf_common+0x58>
 8002536:	2301      	movs	r3, #1
 8002538:	4622      	mov	r2, r4
 800253a:	4649      	mov	r1, r9
 800253c:	4638      	mov	r0, r7
 800253e:	47c0      	blx	r8
 8002540:	3001      	adds	r0, #1
 8002542:	d0e6      	beq.n	8002512 <_printf_common+0xae>
 8002544:	3601      	adds	r6, #1
 8002546:	e7d9      	b.n	80024fc <_printf_common+0x98>

08002548 <_printf_i>:
 8002548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800254c:	7e0f      	ldrb	r7, [r1, #24]
 800254e:	4691      	mov	r9, r2
 8002550:	2f78      	cmp	r7, #120	; 0x78
 8002552:	4680      	mov	r8, r0
 8002554:	460c      	mov	r4, r1
 8002556:	469a      	mov	sl, r3
 8002558:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800255a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800255e:	d807      	bhi.n	8002570 <_printf_i+0x28>
 8002560:	2f62      	cmp	r7, #98	; 0x62
 8002562:	d80a      	bhi.n	800257a <_printf_i+0x32>
 8002564:	2f00      	cmp	r7, #0
 8002566:	f000 80d5 	beq.w	8002714 <_printf_i+0x1cc>
 800256a:	2f58      	cmp	r7, #88	; 0x58
 800256c:	f000 80c1 	beq.w	80026f2 <_printf_i+0x1aa>
 8002570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002574:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002578:	e03a      	b.n	80025f0 <_printf_i+0xa8>
 800257a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800257e:	2b15      	cmp	r3, #21
 8002580:	d8f6      	bhi.n	8002570 <_printf_i+0x28>
 8002582:	a101      	add	r1, pc, #4	; (adr r1, 8002588 <_printf_i+0x40>)
 8002584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002588:	080025e1 	.word	0x080025e1
 800258c:	080025f5 	.word	0x080025f5
 8002590:	08002571 	.word	0x08002571
 8002594:	08002571 	.word	0x08002571
 8002598:	08002571 	.word	0x08002571
 800259c:	08002571 	.word	0x08002571
 80025a0:	080025f5 	.word	0x080025f5
 80025a4:	08002571 	.word	0x08002571
 80025a8:	08002571 	.word	0x08002571
 80025ac:	08002571 	.word	0x08002571
 80025b0:	08002571 	.word	0x08002571
 80025b4:	080026fb 	.word	0x080026fb
 80025b8:	08002621 	.word	0x08002621
 80025bc:	080026b5 	.word	0x080026b5
 80025c0:	08002571 	.word	0x08002571
 80025c4:	08002571 	.word	0x08002571
 80025c8:	0800271d 	.word	0x0800271d
 80025cc:	08002571 	.word	0x08002571
 80025d0:	08002621 	.word	0x08002621
 80025d4:	08002571 	.word	0x08002571
 80025d8:	08002571 	.word	0x08002571
 80025dc:	080026bd 	.word	0x080026bd
 80025e0:	682b      	ldr	r3, [r5, #0]
 80025e2:	1d1a      	adds	r2, r3, #4
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	602a      	str	r2, [r5, #0]
 80025e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0a0      	b.n	8002736 <_printf_i+0x1ee>
 80025f4:	6820      	ldr	r0, [r4, #0]
 80025f6:	682b      	ldr	r3, [r5, #0]
 80025f8:	0607      	lsls	r7, r0, #24
 80025fa:	f103 0104 	add.w	r1, r3, #4
 80025fe:	6029      	str	r1, [r5, #0]
 8002600:	d501      	bpl.n	8002606 <_printf_i+0xbe>
 8002602:	681e      	ldr	r6, [r3, #0]
 8002604:	e003      	b.n	800260e <_printf_i+0xc6>
 8002606:	0646      	lsls	r6, r0, #25
 8002608:	d5fb      	bpl.n	8002602 <_printf_i+0xba>
 800260a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800260e:	2e00      	cmp	r6, #0
 8002610:	da03      	bge.n	800261a <_printf_i+0xd2>
 8002612:	232d      	movs	r3, #45	; 0x2d
 8002614:	4276      	negs	r6, r6
 8002616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800261a:	230a      	movs	r3, #10
 800261c:	4859      	ldr	r0, [pc, #356]	; (8002784 <_printf_i+0x23c>)
 800261e:	e012      	b.n	8002646 <_printf_i+0xfe>
 8002620:	682b      	ldr	r3, [r5, #0]
 8002622:	6820      	ldr	r0, [r4, #0]
 8002624:	1d19      	adds	r1, r3, #4
 8002626:	6029      	str	r1, [r5, #0]
 8002628:	0605      	lsls	r5, r0, #24
 800262a:	d501      	bpl.n	8002630 <_printf_i+0xe8>
 800262c:	681e      	ldr	r6, [r3, #0]
 800262e:	e002      	b.n	8002636 <_printf_i+0xee>
 8002630:	0641      	lsls	r1, r0, #25
 8002632:	d5fb      	bpl.n	800262c <_printf_i+0xe4>
 8002634:	881e      	ldrh	r6, [r3, #0]
 8002636:	2f6f      	cmp	r7, #111	; 0x6f
 8002638:	bf0c      	ite	eq
 800263a:	2308      	moveq	r3, #8
 800263c:	230a      	movne	r3, #10
 800263e:	4851      	ldr	r0, [pc, #324]	; (8002784 <_printf_i+0x23c>)
 8002640:	2100      	movs	r1, #0
 8002642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002646:	6865      	ldr	r5, [r4, #4]
 8002648:	2d00      	cmp	r5, #0
 800264a:	bfa8      	it	ge
 800264c:	6821      	ldrge	r1, [r4, #0]
 800264e:	60a5      	str	r5, [r4, #8]
 8002650:	bfa4      	itt	ge
 8002652:	f021 0104 	bicge.w	r1, r1, #4
 8002656:	6021      	strge	r1, [r4, #0]
 8002658:	b90e      	cbnz	r6, 800265e <_printf_i+0x116>
 800265a:	2d00      	cmp	r5, #0
 800265c:	d04b      	beq.n	80026f6 <_printf_i+0x1ae>
 800265e:	4615      	mov	r5, r2
 8002660:	fbb6 f1f3 	udiv	r1, r6, r3
 8002664:	fb03 6711 	mls	r7, r3, r1, r6
 8002668:	5dc7      	ldrb	r7, [r0, r7]
 800266a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800266e:	4637      	mov	r7, r6
 8002670:	42bb      	cmp	r3, r7
 8002672:	460e      	mov	r6, r1
 8002674:	d9f4      	bls.n	8002660 <_printf_i+0x118>
 8002676:	2b08      	cmp	r3, #8
 8002678:	d10b      	bne.n	8002692 <_printf_i+0x14a>
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	07de      	lsls	r6, r3, #31
 800267e:	d508      	bpl.n	8002692 <_printf_i+0x14a>
 8002680:	6923      	ldr	r3, [r4, #16]
 8002682:	6861      	ldr	r1, [r4, #4]
 8002684:	4299      	cmp	r1, r3
 8002686:	bfde      	ittt	le
 8002688:	2330      	movle	r3, #48	; 0x30
 800268a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800268e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002692:	1b52      	subs	r2, r2, r5
 8002694:	6122      	str	r2, [r4, #16]
 8002696:	464b      	mov	r3, r9
 8002698:	4621      	mov	r1, r4
 800269a:	4640      	mov	r0, r8
 800269c:	f8cd a000 	str.w	sl, [sp]
 80026a0:	aa03      	add	r2, sp, #12
 80026a2:	f7ff fedf 	bl	8002464 <_printf_common>
 80026a6:	3001      	adds	r0, #1
 80026a8:	d14a      	bne.n	8002740 <_printf_i+0x1f8>
 80026aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026ae:	b004      	add	sp, #16
 80026b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	f043 0320 	orr.w	r3, r3, #32
 80026ba:	6023      	str	r3, [r4, #0]
 80026bc:	2778      	movs	r7, #120	; 0x78
 80026be:	4832      	ldr	r0, [pc, #200]	; (8002788 <_printf_i+0x240>)
 80026c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	6829      	ldr	r1, [r5, #0]
 80026c8:	061f      	lsls	r7, r3, #24
 80026ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80026ce:	d402      	bmi.n	80026d6 <_printf_i+0x18e>
 80026d0:	065f      	lsls	r7, r3, #25
 80026d2:	bf48      	it	mi
 80026d4:	b2b6      	uxthmi	r6, r6
 80026d6:	07df      	lsls	r7, r3, #31
 80026d8:	bf48      	it	mi
 80026da:	f043 0320 	orrmi.w	r3, r3, #32
 80026de:	6029      	str	r1, [r5, #0]
 80026e0:	bf48      	it	mi
 80026e2:	6023      	strmi	r3, [r4, #0]
 80026e4:	b91e      	cbnz	r6, 80026ee <_printf_i+0x1a6>
 80026e6:	6823      	ldr	r3, [r4, #0]
 80026e8:	f023 0320 	bic.w	r3, r3, #32
 80026ec:	6023      	str	r3, [r4, #0]
 80026ee:	2310      	movs	r3, #16
 80026f0:	e7a6      	b.n	8002640 <_printf_i+0xf8>
 80026f2:	4824      	ldr	r0, [pc, #144]	; (8002784 <_printf_i+0x23c>)
 80026f4:	e7e4      	b.n	80026c0 <_printf_i+0x178>
 80026f6:	4615      	mov	r5, r2
 80026f8:	e7bd      	b.n	8002676 <_printf_i+0x12e>
 80026fa:	682b      	ldr	r3, [r5, #0]
 80026fc:	6826      	ldr	r6, [r4, #0]
 80026fe:	1d18      	adds	r0, r3, #4
 8002700:	6961      	ldr	r1, [r4, #20]
 8002702:	6028      	str	r0, [r5, #0]
 8002704:	0635      	lsls	r5, r6, #24
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	d501      	bpl.n	800270e <_printf_i+0x1c6>
 800270a:	6019      	str	r1, [r3, #0]
 800270c:	e002      	b.n	8002714 <_printf_i+0x1cc>
 800270e:	0670      	lsls	r0, r6, #25
 8002710:	d5fb      	bpl.n	800270a <_printf_i+0x1c2>
 8002712:	8019      	strh	r1, [r3, #0]
 8002714:	2300      	movs	r3, #0
 8002716:	4615      	mov	r5, r2
 8002718:	6123      	str	r3, [r4, #16]
 800271a:	e7bc      	b.n	8002696 <_printf_i+0x14e>
 800271c:	682b      	ldr	r3, [r5, #0]
 800271e:	2100      	movs	r1, #0
 8002720:	1d1a      	adds	r2, r3, #4
 8002722:	602a      	str	r2, [r5, #0]
 8002724:	681d      	ldr	r5, [r3, #0]
 8002726:	6862      	ldr	r2, [r4, #4]
 8002728:	4628      	mov	r0, r5
 800272a:	f000 f977 	bl	8002a1c <memchr>
 800272e:	b108      	cbz	r0, 8002734 <_printf_i+0x1ec>
 8002730:	1b40      	subs	r0, r0, r5
 8002732:	6060      	str	r0, [r4, #4]
 8002734:	6863      	ldr	r3, [r4, #4]
 8002736:	6123      	str	r3, [r4, #16]
 8002738:	2300      	movs	r3, #0
 800273a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800273e:	e7aa      	b.n	8002696 <_printf_i+0x14e>
 8002740:	462a      	mov	r2, r5
 8002742:	4649      	mov	r1, r9
 8002744:	4640      	mov	r0, r8
 8002746:	6923      	ldr	r3, [r4, #16]
 8002748:	47d0      	blx	sl
 800274a:	3001      	adds	r0, #1
 800274c:	d0ad      	beq.n	80026aa <_printf_i+0x162>
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	079b      	lsls	r3, r3, #30
 8002752:	d413      	bmi.n	800277c <_printf_i+0x234>
 8002754:	68e0      	ldr	r0, [r4, #12]
 8002756:	9b03      	ldr	r3, [sp, #12]
 8002758:	4298      	cmp	r0, r3
 800275a:	bfb8      	it	lt
 800275c:	4618      	movlt	r0, r3
 800275e:	e7a6      	b.n	80026ae <_printf_i+0x166>
 8002760:	2301      	movs	r3, #1
 8002762:	4632      	mov	r2, r6
 8002764:	4649      	mov	r1, r9
 8002766:	4640      	mov	r0, r8
 8002768:	47d0      	blx	sl
 800276a:	3001      	adds	r0, #1
 800276c:	d09d      	beq.n	80026aa <_printf_i+0x162>
 800276e:	3501      	adds	r5, #1
 8002770:	68e3      	ldr	r3, [r4, #12]
 8002772:	9903      	ldr	r1, [sp, #12]
 8002774:	1a5b      	subs	r3, r3, r1
 8002776:	42ab      	cmp	r3, r5
 8002778:	dcf2      	bgt.n	8002760 <_printf_i+0x218>
 800277a:	e7eb      	b.n	8002754 <_printf_i+0x20c>
 800277c:	2500      	movs	r5, #0
 800277e:	f104 0619 	add.w	r6, r4, #25
 8002782:	e7f5      	b.n	8002770 <_printf_i+0x228>
 8002784:	08002b49 	.word	0x08002b49
 8002788:	08002b5a 	.word	0x08002b5a

0800278c <__sflush_r>:
 800278c:	898a      	ldrh	r2, [r1, #12]
 800278e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002790:	4605      	mov	r5, r0
 8002792:	0710      	lsls	r0, r2, #28
 8002794:	460c      	mov	r4, r1
 8002796:	d457      	bmi.n	8002848 <__sflush_r+0xbc>
 8002798:	684b      	ldr	r3, [r1, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	dc04      	bgt.n	80027a8 <__sflush_r+0x1c>
 800279e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	dc01      	bgt.n	80027a8 <__sflush_r+0x1c>
 80027a4:	2000      	movs	r0, #0
 80027a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80027aa:	2e00      	cmp	r6, #0
 80027ac:	d0fa      	beq.n	80027a4 <__sflush_r+0x18>
 80027ae:	2300      	movs	r3, #0
 80027b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80027b4:	682f      	ldr	r7, [r5, #0]
 80027b6:	6a21      	ldr	r1, [r4, #32]
 80027b8:	602b      	str	r3, [r5, #0]
 80027ba:	d032      	beq.n	8002822 <__sflush_r+0x96>
 80027bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80027be:	89a3      	ldrh	r3, [r4, #12]
 80027c0:	075a      	lsls	r2, r3, #29
 80027c2:	d505      	bpl.n	80027d0 <__sflush_r+0x44>
 80027c4:	6863      	ldr	r3, [r4, #4]
 80027c6:	1ac0      	subs	r0, r0, r3
 80027c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027ca:	b10b      	cbz	r3, 80027d0 <__sflush_r+0x44>
 80027cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027ce:	1ac0      	subs	r0, r0, r3
 80027d0:	2300      	movs	r3, #0
 80027d2:	4602      	mov	r2, r0
 80027d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80027d6:	4628      	mov	r0, r5
 80027d8:	6a21      	ldr	r1, [r4, #32]
 80027da:	47b0      	blx	r6
 80027dc:	1c43      	adds	r3, r0, #1
 80027de:	89a3      	ldrh	r3, [r4, #12]
 80027e0:	d106      	bne.n	80027f0 <__sflush_r+0x64>
 80027e2:	6829      	ldr	r1, [r5, #0]
 80027e4:	291d      	cmp	r1, #29
 80027e6:	d82b      	bhi.n	8002840 <__sflush_r+0xb4>
 80027e8:	4a28      	ldr	r2, [pc, #160]	; (800288c <__sflush_r+0x100>)
 80027ea:	410a      	asrs	r2, r1
 80027ec:	07d6      	lsls	r6, r2, #31
 80027ee:	d427      	bmi.n	8002840 <__sflush_r+0xb4>
 80027f0:	2200      	movs	r2, #0
 80027f2:	6062      	str	r2, [r4, #4]
 80027f4:	6922      	ldr	r2, [r4, #16]
 80027f6:	04d9      	lsls	r1, r3, #19
 80027f8:	6022      	str	r2, [r4, #0]
 80027fa:	d504      	bpl.n	8002806 <__sflush_r+0x7a>
 80027fc:	1c42      	adds	r2, r0, #1
 80027fe:	d101      	bne.n	8002804 <__sflush_r+0x78>
 8002800:	682b      	ldr	r3, [r5, #0]
 8002802:	b903      	cbnz	r3, 8002806 <__sflush_r+0x7a>
 8002804:	6560      	str	r0, [r4, #84]	; 0x54
 8002806:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002808:	602f      	str	r7, [r5, #0]
 800280a:	2900      	cmp	r1, #0
 800280c:	d0ca      	beq.n	80027a4 <__sflush_r+0x18>
 800280e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002812:	4299      	cmp	r1, r3
 8002814:	d002      	beq.n	800281c <__sflush_r+0x90>
 8002816:	4628      	mov	r0, r5
 8002818:	f7ff fc84 	bl	8002124 <_free_r>
 800281c:	2000      	movs	r0, #0
 800281e:	6360      	str	r0, [r4, #52]	; 0x34
 8002820:	e7c1      	b.n	80027a6 <__sflush_r+0x1a>
 8002822:	2301      	movs	r3, #1
 8002824:	4628      	mov	r0, r5
 8002826:	47b0      	blx	r6
 8002828:	1c41      	adds	r1, r0, #1
 800282a:	d1c8      	bne.n	80027be <__sflush_r+0x32>
 800282c:	682b      	ldr	r3, [r5, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0c5      	beq.n	80027be <__sflush_r+0x32>
 8002832:	2b1d      	cmp	r3, #29
 8002834:	d001      	beq.n	800283a <__sflush_r+0xae>
 8002836:	2b16      	cmp	r3, #22
 8002838:	d101      	bne.n	800283e <__sflush_r+0xb2>
 800283a:	602f      	str	r7, [r5, #0]
 800283c:	e7b2      	b.n	80027a4 <__sflush_r+0x18>
 800283e:	89a3      	ldrh	r3, [r4, #12]
 8002840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002844:	81a3      	strh	r3, [r4, #12]
 8002846:	e7ae      	b.n	80027a6 <__sflush_r+0x1a>
 8002848:	690f      	ldr	r7, [r1, #16]
 800284a:	2f00      	cmp	r7, #0
 800284c:	d0aa      	beq.n	80027a4 <__sflush_r+0x18>
 800284e:	0793      	lsls	r3, r2, #30
 8002850:	bf18      	it	ne
 8002852:	2300      	movne	r3, #0
 8002854:	680e      	ldr	r6, [r1, #0]
 8002856:	bf08      	it	eq
 8002858:	694b      	ldreq	r3, [r1, #20]
 800285a:	1bf6      	subs	r6, r6, r7
 800285c:	600f      	str	r7, [r1, #0]
 800285e:	608b      	str	r3, [r1, #8]
 8002860:	2e00      	cmp	r6, #0
 8002862:	dd9f      	ble.n	80027a4 <__sflush_r+0x18>
 8002864:	4633      	mov	r3, r6
 8002866:	463a      	mov	r2, r7
 8002868:	4628      	mov	r0, r5
 800286a:	6a21      	ldr	r1, [r4, #32]
 800286c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002870:	47e0      	blx	ip
 8002872:	2800      	cmp	r0, #0
 8002874:	dc06      	bgt.n	8002884 <__sflush_r+0xf8>
 8002876:	89a3      	ldrh	r3, [r4, #12]
 8002878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800287c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002880:	81a3      	strh	r3, [r4, #12]
 8002882:	e790      	b.n	80027a6 <__sflush_r+0x1a>
 8002884:	4407      	add	r7, r0
 8002886:	1a36      	subs	r6, r6, r0
 8002888:	e7ea      	b.n	8002860 <__sflush_r+0xd4>
 800288a:	bf00      	nop
 800288c:	dfbffffe 	.word	0xdfbffffe

08002890 <_fflush_r>:
 8002890:	b538      	push	{r3, r4, r5, lr}
 8002892:	690b      	ldr	r3, [r1, #16]
 8002894:	4605      	mov	r5, r0
 8002896:	460c      	mov	r4, r1
 8002898:	b913      	cbnz	r3, 80028a0 <_fflush_r+0x10>
 800289a:	2500      	movs	r5, #0
 800289c:	4628      	mov	r0, r5
 800289e:	bd38      	pop	{r3, r4, r5, pc}
 80028a0:	b118      	cbz	r0, 80028aa <_fflush_r+0x1a>
 80028a2:	6a03      	ldr	r3, [r0, #32]
 80028a4:	b90b      	cbnz	r3, 80028aa <_fflush_r+0x1a>
 80028a6:	f7ff f9d9 	bl	8001c5c <__sinit>
 80028aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f3      	beq.n	800289a <_fflush_r+0xa>
 80028b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80028b4:	07d0      	lsls	r0, r2, #31
 80028b6:	d404      	bmi.n	80028c2 <_fflush_r+0x32>
 80028b8:	0599      	lsls	r1, r3, #22
 80028ba:	d402      	bmi.n	80028c2 <_fflush_r+0x32>
 80028bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028be:	f7ff fc2e 	bl	800211e <__retarget_lock_acquire_recursive>
 80028c2:	4628      	mov	r0, r5
 80028c4:	4621      	mov	r1, r4
 80028c6:	f7ff ff61 	bl	800278c <__sflush_r>
 80028ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028cc:	4605      	mov	r5, r0
 80028ce:	07da      	lsls	r2, r3, #31
 80028d0:	d4e4      	bmi.n	800289c <_fflush_r+0xc>
 80028d2:	89a3      	ldrh	r3, [r4, #12]
 80028d4:	059b      	lsls	r3, r3, #22
 80028d6:	d4e1      	bmi.n	800289c <_fflush_r+0xc>
 80028d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028da:	f7ff fc21 	bl	8002120 <__retarget_lock_release_recursive>
 80028de:	e7dd      	b.n	800289c <_fflush_r+0xc>

080028e0 <__swhatbuf_r>:
 80028e0:	b570      	push	{r4, r5, r6, lr}
 80028e2:	460c      	mov	r4, r1
 80028e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028e8:	4615      	mov	r5, r2
 80028ea:	2900      	cmp	r1, #0
 80028ec:	461e      	mov	r6, r3
 80028ee:	b096      	sub	sp, #88	; 0x58
 80028f0:	da0c      	bge.n	800290c <__swhatbuf_r+0x2c>
 80028f2:	89a3      	ldrh	r3, [r4, #12]
 80028f4:	2100      	movs	r1, #0
 80028f6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80028fa:	bf0c      	ite	eq
 80028fc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002900:	2340      	movne	r3, #64	; 0x40
 8002902:	2000      	movs	r0, #0
 8002904:	6031      	str	r1, [r6, #0]
 8002906:	602b      	str	r3, [r5, #0]
 8002908:	b016      	add	sp, #88	; 0x58
 800290a:	bd70      	pop	{r4, r5, r6, pc}
 800290c:	466a      	mov	r2, sp
 800290e:	f000 f863 	bl	80029d8 <_fstat_r>
 8002912:	2800      	cmp	r0, #0
 8002914:	dbed      	blt.n	80028f2 <__swhatbuf_r+0x12>
 8002916:	9901      	ldr	r1, [sp, #4]
 8002918:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800291c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002920:	4259      	negs	r1, r3
 8002922:	4159      	adcs	r1, r3
 8002924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002928:	e7eb      	b.n	8002902 <__swhatbuf_r+0x22>

0800292a <__smakebuf_r>:
 800292a:	898b      	ldrh	r3, [r1, #12]
 800292c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800292e:	079d      	lsls	r5, r3, #30
 8002930:	4606      	mov	r6, r0
 8002932:	460c      	mov	r4, r1
 8002934:	d507      	bpl.n	8002946 <__smakebuf_r+0x1c>
 8002936:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800293a:	6023      	str	r3, [r4, #0]
 800293c:	6123      	str	r3, [r4, #16]
 800293e:	2301      	movs	r3, #1
 8002940:	6163      	str	r3, [r4, #20]
 8002942:	b002      	add	sp, #8
 8002944:	bd70      	pop	{r4, r5, r6, pc}
 8002946:	466a      	mov	r2, sp
 8002948:	ab01      	add	r3, sp, #4
 800294a:	f7ff ffc9 	bl	80028e0 <__swhatbuf_r>
 800294e:	9900      	ldr	r1, [sp, #0]
 8002950:	4605      	mov	r5, r0
 8002952:	4630      	mov	r0, r6
 8002954:	f7ff f86a 	bl	8001a2c <_malloc_r>
 8002958:	b948      	cbnz	r0, 800296e <__smakebuf_r+0x44>
 800295a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800295e:	059a      	lsls	r2, r3, #22
 8002960:	d4ef      	bmi.n	8002942 <__smakebuf_r+0x18>
 8002962:	f023 0303 	bic.w	r3, r3, #3
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	81a3      	strh	r3, [r4, #12]
 800296c:	e7e3      	b.n	8002936 <__smakebuf_r+0xc>
 800296e:	89a3      	ldrh	r3, [r4, #12]
 8002970:	6020      	str	r0, [r4, #0]
 8002972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002976:	81a3      	strh	r3, [r4, #12]
 8002978:	9b00      	ldr	r3, [sp, #0]
 800297a:	6120      	str	r0, [r4, #16]
 800297c:	6163      	str	r3, [r4, #20]
 800297e:	9b01      	ldr	r3, [sp, #4]
 8002980:	b15b      	cbz	r3, 800299a <__smakebuf_r+0x70>
 8002982:	4630      	mov	r0, r6
 8002984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002988:	f000 f838 	bl	80029fc <_isatty_r>
 800298c:	b128      	cbz	r0, 800299a <__smakebuf_r+0x70>
 800298e:	89a3      	ldrh	r3, [r4, #12]
 8002990:	f023 0303 	bic.w	r3, r3, #3
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	81a3      	strh	r3, [r4, #12]
 800299a:	89a3      	ldrh	r3, [r4, #12]
 800299c:	431d      	orrs	r5, r3
 800299e:	81a5      	strh	r5, [r4, #12]
 80029a0:	e7cf      	b.n	8002942 <__smakebuf_r+0x18>

080029a2 <memmove>:
 80029a2:	4288      	cmp	r0, r1
 80029a4:	b510      	push	{r4, lr}
 80029a6:	eb01 0402 	add.w	r4, r1, r2
 80029aa:	d902      	bls.n	80029b2 <memmove+0x10>
 80029ac:	4284      	cmp	r4, r0
 80029ae:	4623      	mov	r3, r4
 80029b0:	d807      	bhi.n	80029c2 <memmove+0x20>
 80029b2:	1e43      	subs	r3, r0, #1
 80029b4:	42a1      	cmp	r1, r4
 80029b6:	d008      	beq.n	80029ca <memmove+0x28>
 80029b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029c0:	e7f8      	b.n	80029b4 <memmove+0x12>
 80029c2:	4601      	mov	r1, r0
 80029c4:	4402      	add	r2, r0
 80029c6:	428a      	cmp	r2, r1
 80029c8:	d100      	bne.n	80029cc <memmove+0x2a>
 80029ca:	bd10      	pop	{r4, pc}
 80029cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029d0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80029d4:	e7f7      	b.n	80029c6 <memmove+0x24>
	...

080029d8 <_fstat_r>:
 80029d8:	b538      	push	{r3, r4, r5, lr}
 80029da:	2300      	movs	r3, #0
 80029dc:	4d06      	ldr	r5, [pc, #24]	; (80029f8 <_fstat_r+0x20>)
 80029de:	4604      	mov	r4, r0
 80029e0:	4608      	mov	r0, r1
 80029e2:	4611      	mov	r1, r2
 80029e4:	602b      	str	r3, [r5, #0]
 80029e6:	f7fd fd44 	bl	8000472 <_fstat>
 80029ea:	1c43      	adds	r3, r0, #1
 80029ec:	d102      	bne.n	80029f4 <_fstat_r+0x1c>
 80029ee:	682b      	ldr	r3, [r5, #0]
 80029f0:	b103      	cbz	r3, 80029f4 <_fstat_r+0x1c>
 80029f2:	6023      	str	r3, [r4, #0]
 80029f4:	bd38      	pop	{r3, r4, r5, pc}
 80029f6:	bf00      	nop
 80029f8:	20000238 	.word	0x20000238

080029fc <_isatty_r>:
 80029fc:	b538      	push	{r3, r4, r5, lr}
 80029fe:	2300      	movs	r3, #0
 8002a00:	4d05      	ldr	r5, [pc, #20]	; (8002a18 <_isatty_r+0x1c>)
 8002a02:	4604      	mov	r4, r0
 8002a04:	4608      	mov	r0, r1
 8002a06:	602b      	str	r3, [r5, #0]
 8002a08:	f7fd fd42 	bl	8000490 <_isatty>
 8002a0c:	1c43      	adds	r3, r0, #1
 8002a0e:	d102      	bne.n	8002a16 <_isatty_r+0x1a>
 8002a10:	682b      	ldr	r3, [r5, #0]
 8002a12:	b103      	cbz	r3, 8002a16 <_isatty_r+0x1a>
 8002a14:	6023      	str	r3, [r4, #0]
 8002a16:	bd38      	pop	{r3, r4, r5, pc}
 8002a18:	20000238 	.word	0x20000238

08002a1c <memchr>:
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	b510      	push	{r4, lr}
 8002a20:	b2c9      	uxtb	r1, r1
 8002a22:	4402      	add	r2, r0
 8002a24:	4293      	cmp	r3, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	d101      	bne.n	8002a2e <memchr+0x12>
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	e003      	b.n	8002a36 <memchr+0x1a>
 8002a2e:	7804      	ldrb	r4, [r0, #0]
 8002a30:	3301      	adds	r3, #1
 8002a32:	428c      	cmp	r4, r1
 8002a34:	d1f6      	bne.n	8002a24 <memchr+0x8>
 8002a36:	bd10      	pop	{r4, pc}

08002a38 <memcpy>:
 8002a38:	440a      	add	r2, r1
 8002a3a:	4291      	cmp	r1, r2
 8002a3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002a40:	d100      	bne.n	8002a44 <memcpy+0xc>
 8002a42:	4770      	bx	lr
 8002a44:	b510      	push	{r4, lr}
 8002a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a4a:	4291      	cmp	r1, r2
 8002a4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a50:	d1f9      	bne.n	8002a46 <memcpy+0xe>
 8002a52:	bd10      	pop	{r4, pc}

08002a54 <_realloc_r>:
 8002a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a58:	4680      	mov	r8, r0
 8002a5a:	4614      	mov	r4, r2
 8002a5c:	460e      	mov	r6, r1
 8002a5e:	b921      	cbnz	r1, 8002a6a <_realloc_r+0x16>
 8002a60:	4611      	mov	r1, r2
 8002a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a66:	f7fe bfe1 	b.w	8001a2c <_malloc_r>
 8002a6a:	b92a      	cbnz	r2, 8002a78 <_realloc_r+0x24>
 8002a6c:	f7ff fb5a 	bl	8002124 <_free_r>
 8002a70:	4625      	mov	r5, r4
 8002a72:	4628      	mov	r0, r5
 8002a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a78:	f000 f81b 	bl	8002ab2 <_malloc_usable_size_r>
 8002a7c:	4284      	cmp	r4, r0
 8002a7e:	4607      	mov	r7, r0
 8002a80:	d802      	bhi.n	8002a88 <_realloc_r+0x34>
 8002a82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002a86:	d812      	bhi.n	8002aae <_realloc_r+0x5a>
 8002a88:	4621      	mov	r1, r4
 8002a8a:	4640      	mov	r0, r8
 8002a8c:	f7fe ffce 	bl	8001a2c <_malloc_r>
 8002a90:	4605      	mov	r5, r0
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d0ed      	beq.n	8002a72 <_realloc_r+0x1e>
 8002a96:	42bc      	cmp	r4, r7
 8002a98:	4622      	mov	r2, r4
 8002a9a:	4631      	mov	r1, r6
 8002a9c:	bf28      	it	cs
 8002a9e:	463a      	movcs	r2, r7
 8002aa0:	f7ff ffca 	bl	8002a38 <memcpy>
 8002aa4:	4631      	mov	r1, r6
 8002aa6:	4640      	mov	r0, r8
 8002aa8:	f7ff fb3c 	bl	8002124 <_free_r>
 8002aac:	e7e1      	b.n	8002a72 <_realloc_r+0x1e>
 8002aae:	4635      	mov	r5, r6
 8002ab0:	e7df      	b.n	8002a72 <_realloc_r+0x1e>

08002ab2 <_malloc_usable_size_r>:
 8002ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ab6:	1f18      	subs	r0, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bfbc      	itt	lt
 8002abc:	580b      	ldrlt	r3, [r1, r0]
 8002abe:	18c0      	addlt	r0, r0, r3
 8002ac0:	4770      	bx	lr
	...

08002ac4 <_init>:
 8002ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac6:	bf00      	nop
 8002ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aca:	bc08      	pop	{r3}
 8002acc:	469e      	mov	lr, r3
 8002ace:	4770      	bx	lr

08002ad0 <_fini>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	bf00      	nop
 8002ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad6:	bc08      	pop	{r3}
 8002ad8:	469e      	mov	lr, r3
 8002ada:	4770      	bx	lr
