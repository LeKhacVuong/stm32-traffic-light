
light_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006660  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800679c  0800679c  0001679c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006964  08006964  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  08006964  08006964  00016964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800696c  0800696c  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800696c  0800696c  0001696c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006970  08006970  00016970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08006974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000254  08006bc8  00020254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08006bc8  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002027d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bae9  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002251  00000000  00000000  0002bda9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae8  00000000  00000000  0002e000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000084b  00000000  00000000  0002eae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014cd1  00000000  00000000  0002f333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bbd8  00000000  00000000  00044004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079cff  00000000  00000000  0004fbdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000353c  00000000  00000000  000c98dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000cce18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000254 	.word	0x20000254
 8000158:	00000000 	.word	0x00000000
 800015c:	08006784 	.word	0x08006784

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000258 	.word	0x20000258
 8000178:	08006784 	.word	0x08006784

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000484:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000488:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800048c:	f003 0301 	and.w	r3, r3, #1
 8000490:	2b00      	cmp	r3, #0
 8000492:	d013      	beq.n	80004bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000494:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000498:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800049c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d00b      	beq.n	80004bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004a4:	e000      	b.n	80004a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0f9      	beq.n	80004a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	b2d2      	uxtb	r2, r2
 80004ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004bc:	687b      	ldr	r3, [r7, #4]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <elapsed_timer_resetz>:
/**
 * @brief
 * @param _self
 * @param _duration
 */
static inline void elapsed_timer_resetz(elapsed_timer_t* _self, int32_t _duration){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
    _self->m_duration = _duration;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	683a      	ldr	r2, [r7, #0]
 80004d6:	601a      	str	r2, [r3, #0]
    _self->m_start_time = get_tick_count();
 80004d8:	f000 fb3a 	bl	8000b50 <get_tick_count>
 80004dc:	4602      	mov	r2, r0
 80004de:	460b      	mov	r3, r1
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	605a      	str	r2, [r3, #4]
}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <elapsed_timer_get_remain>:
/**
 * @brief
 * @param _self
 * @return
 */
static inline int32_t elapsed_timer_get_remain(elapsed_timer_t* _self){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
    int32_t remain_time = get_tick_count() - _self->m_start_time;
 80004f4:	f000 fb2c 	bl	8000b50 <get_tick_count>
 80004f8:	4602      	mov	r2, r0
 80004fa:	460b      	mov	r3, r1
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	1ad3      	subs	r3, r2, r3
 8000502:	60fb      	str	r3, [r7, #12]
    if(remain_time >= _self->m_duration){
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	429a      	cmp	r2, r3
 800050c:	db01      	blt.n	8000512 <elapsed_timer_get_remain+0x26>
        return 0;
 800050e:	2300      	movs	r3, #0
 8000510:	e003      	b.n	800051a <elapsed_timer_get_remain+0x2e>
    }else{
        return _self->m_duration - remain_time;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	1ad3      	subs	r3, r2, r3
    }
}
 800051a:	4618      	mov	r0, r3
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <queue_push>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);


int queue_push(data_queue_t* _queue, uint8_t _data){
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	460b      	mov	r3, r1
 800052c:	70fb      	strb	r3, [r7, #3]
	_queue->m_queue[_queue->m_head] = _data;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000534:	4619      	mov	r1, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	78fa      	ldrb	r2, [r7, #3]
 800053a:	545a      	strb	r2, [r3, r1]
	_queue->m_head++;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000542:	3301      	adds	r3, #1
 8000544:	b29a      	uxth	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	if(_queue->m_head >= QUEUE_SIZE){
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000552:	2b7f      	cmp	r3, #127	; 0x7f
 8000554:	d903      	bls.n	800055e <queue_push+0x3c>
		_queue->m_head = 0;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2200      	movs	r2, #0
 800055a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	}
	return 0;
 800055e:	2300      	movs	r3, #0
}
 8000560:	4618      	mov	r0, r3
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <queue_get_byte_available>:

int queue_get_byte_available(data_queue_t* _queue){
 800056a:	b480      	push	{r7}
 800056c:	b085      	sub	sp, #20
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
	uint16_t head = _queue->m_head;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000578:	81fb      	strh	r3, [r7, #14]
	uint16_t tail = _queue->m_tail;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000580:	81bb      	strh	r3, [r7, #12]
	uint16_t size = QUEUE_SIZE;
 8000582:	2380      	movs	r3, #128	; 0x80
 8000584:	817b      	strh	r3, [r7, #10]
	return (head >= tail) ? head - tail : size - tail + head;
 8000586:	89fa      	ldrh	r2, [r7, #14]
 8000588:	89bb      	ldrh	r3, [r7, #12]
 800058a:	429a      	cmp	r2, r3
 800058c:	d303      	bcc.n	8000596 <queue_get_byte_available+0x2c>
 800058e:	89fa      	ldrh	r2, [r7, #14]
 8000590:	89bb      	ldrh	r3, [r7, #12]
 8000592:	1ad3      	subs	r3, r2, r3
 8000594:	e004      	b.n	80005a0 <queue_get_byte_available+0x36>
 8000596:	897a      	ldrh	r2, [r7, #10]
 8000598:	89bb      	ldrh	r3, [r7, #12]
 800059a:	1ad2      	subs	r2, r2, r3
 800059c:	89fb      	ldrh	r3, [r7, #14]
 800059e:	4413      	add	r3, r2
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <queue_get_bytes>:

int queue_get_bytes(data_queue_t* _queue, uint8_t* _buff, uint8_t _len, uint32_t _timeout){
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b088      	sub	sp, #32
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	60f8      	str	r0, [r7, #12]
 80005b2:	60b9      	str	r1, [r7, #8]
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	4613      	mov	r3, r2
 80005b8:	71fb      	strb	r3, [r7, #7]

	elapsed_timer_t timeout;
	elapsed_timer_resetz(&timeout, _timeout);
 80005ba:	683a      	ldr	r2, [r7, #0]
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4611      	mov	r1, r2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff ff80 	bl	80004c8 <elapsed_timer_resetz>

	do{
		if(queue_get_byte_available(_queue) >= _len){
 80005c8:	68f8      	ldr	r0, [r7, #12]
 80005ca:	f7ff ffce 	bl	800056a <queue_get_byte_available>
 80005ce:	4602      	mov	r2, r0
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	db26      	blt.n	8000624 <queue_get_bytes+0x7a>
			for(int i = 0; i < _len; i++){
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
 80005da:	e01d      	b.n	8000618 <queue_get_bytes+0x6e>
				_buff[i] = _queue->m_queue[_queue->m_tail];
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80005e2:	4619      	mov	r1, r3
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	4413      	add	r3, r2
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	5c52      	ldrb	r2, [r2, r1]
 80005ee:	701a      	strb	r2, [r3, #0]
				_queue->m_tail++;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80005f6:	3301      	adds	r3, #1
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				if(_queue->m_tail >= QUEUE_SIZE){
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000606:	2b7f      	cmp	r3, #127	; 0x7f
 8000608:	d903      	bls.n	8000612 <queue_get_bytes+0x68>
					_queue->m_tail = 0;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2200      	movs	r2, #0
 800060e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
			for(int i = 0; i < _len; i++){
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	3301      	adds	r3, #1
 8000616:	61fb      	str	r3, [r7, #28]
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	69fa      	ldr	r2, [r7, #28]
 800061c:	429a      	cmp	r2, r3
 800061e:	dbdd      	blt.n	80005dc <queue_get_bytes+0x32>
				}
			}
			return _len;
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	e008      	b.n	8000636 <queue_get_bytes+0x8c>
		}
	}
	while(elapsed_timer_get_remain(&timeout));
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ff5f 	bl	80004ec <elapsed_timer_get_remain>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1c9      	bne.n	80005c8 <queue_get_bytes+0x1e>
	return 0;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3720      	adds	r7, #32
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <_write>:
int queue_reset(data_queue_t* _queue){
	_queue->m_head = _queue->m_tail = 0;
	return 0;
}

int _write(int file, char *ptr, int len){
 800063e:	b580      	push	{r7, lr}
 8000640:	b086      	sub	sp, #24
 8000642:	af00      	add	r7, sp, #0
 8000644:	60f8      	str	r0, [r7, #12]
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
	 int DataIdx;
	 for (DataIdx = 0; DataIdx < len; DataIdx++){
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	e009      	b.n	8000664 <_write+0x26>
		 ITM_SendChar(*ptr++);
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	1c5a      	adds	r2, r3, #1
 8000654:	60ba      	str	r2, [r7, #8]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff0f 	bl	800047c <ITM_SendChar>
	 for (DataIdx = 0; DataIdx < len; DataIdx++){
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	3301      	adds	r3, #1
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbf1      	blt.n	8000650 <_write+0x12>
	 }
	 return len;
 800066c:	687b      	ldr	r3, [r7, #4]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <board_init>:

void board_init(){
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0
	  HAL_Init();
 800067a:	f002 ffd1 	bl	8003620 <HAL_Init>
	  SystemClock_Config();
 800067e:	f000 f807 	bl	8000690 <SystemClock_Config>
	  MX_GPIO_Init();
 8000682:	f000 f87d 	bl	8000780 <MX_GPIO_Init>
	  MX_USART2_UART_Init();
 8000686:	f000 f851 	bl	800072c <MX_USART2_UART_Init>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b092      	sub	sp, #72	; 0x48
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2234      	movs	r2, #52	; 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 fb14 	bl	8005ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b2:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <SystemClock_Config+0x98>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80006ba:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <SystemClock_Config+0x98>)
 80006bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006c0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c2:	2302      	movs	r3, #2
 80006c4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c6:	2301      	movs	r3, #1
 80006c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ca:	2310      	movs	r3, #16
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d2:	2300      	movs	r3, #0
 80006d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80006d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80006dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 fb46 	bl	8003d78 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006f2:	f000 f883 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2303      	movs	r3, #3
 80006fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	2101      	movs	r1, #1
 800070e:	4618      	mov	r0, r3
 8000710:	f003 fe62 	bl	80043d8 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800071a:	f000 f86f 	bl	80007fc <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3748      	adds	r7, #72	; 0x48
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40007000 	.word	0x40007000

0800072c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000732:	4a12      	ldr	r2, [pc, #72]	; (800077c <MX_USART2_UART_Init+0x50>)
 8000734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000764:	f004 f8bc 	bl	80048e0 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076e:	f000 f845 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000270 	.word	0x20000270
 800077c:	40004400 	.word	0x40004400

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_GPIO_Init+0x74>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	4a16      	ldr	r2, [pc, #88]	; (80007f4 <MX_GPIO_Init+0x74>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	61d3      	str	r3, [r2, #28]
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_GPIO_Init+0x74>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_GPIO_Init+0x74>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <MX_GPIO_Init+0x74>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	61d3      	str	r3, [r2, #28]
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_GPIO_Init+0x74>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	480b      	ldr	r0, [pc, #44]	; (80007f8 <MX_GPIO_Init+0x78>)
 80007cc:	f003 faa2 	bl	8003d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	4619      	mov	r1, r3
 80007e6:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_GPIO_Init+0x78>)
 80007e8:	f003 f914 	bl	8003a14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020400 	.word	0x40020400

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <getLightColorString>:

    uint32_t m_latitude;
    uint32_t m_longitude;
}light_slv_info_t;

static inline const char* getLightColorString(uint8_t _color){
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
    switch (_color) {
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b03      	cmp	r3, #3
 8000816:	d813      	bhi.n	8000840 <getLightColorString+0x38>
 8000818:	a201      	add	r2, pc, #4	; (adr r2, 8000820 <getLightColorString+0x18>)
 800081a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081e:	bf00      	nop
 8000820:	08000831 	.word	0x08000831
 8000824:	08000835 	.word	0x08000835
 8000828:	08000839 	.word	0x08000839
 800082c:	0800083d 	.word	0x0800083d
        case LIGHT_GREEN:
            return "GREEN";
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <getLightColorString+0x44>)
 8000832:	e006      	b.n	8000842 <getLightColorString+0x3a>
        case LIGHT_RED:
            return "RED";
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <getLightColorString+0x48>)
 8000836:	e004      	b.n	8000842 <getLightColorString+0x3a>
        case LIGHT_YELLOW:
            return "YELLOW";
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <getLightColorString+0x4c>)
 800083a:	e002      	b.n	8000842 <getLightColorString+0x3a>
        case LIGHT_NONE:
            return "NONE";;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <getLightColorString+0x50>)
 800083e:	e000      	b.n	8000842 <getLightColorString+0x3a>
        default:
            return "INVALID";
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <getLightColorString+0x54>)
    }
}
 8000842:	4618      	mov	r0, r3
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	0800679c 	.word	0x0800679c
 8000850:	080067a4 	.word	0x080067a4
 8000854:	080067a8 	.word	0x080067a8
 8000858:	080067b0 	.word	0x080067b0
 800085c:	080067b8 	.word	0x080067b8

08000860 <log_put>:


uint8_t rx_buff;
data_queue_t mb_queue;

void log_put(const char* _log) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
    printf("%s\n", _log);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f005 f8d1 	bl	8005a10 <puts>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <mb_slv_send_if>:

int32_t mb_slv_send_if(uint8_t _addr, const uint8_t* _data, uint16_t _len, int32_t _timeout, void* _arg){
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4603      	mov	r3, r0
 8000884:	73fb      	strb	r3, [r7, #15]
 8000886:	4613      	mov	r3, r2
 8000888:	81bb      	strh	r3, [r7, #12]
    return 	HAL_UART_Transmit(&huart2, _data, _len, _timeout);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	89ba      	ldrh	r2, [r7, #12]
 800088e:	68b9      	ldr	r1, [r7, #8]
 8000890:	4803      	ldr	r0, [pc, #12]	; (80008a0 <mb_slv_send_if+0x28>)
 8000892:	f004 f875 	bl	8004980 <HAL_UART_Transmit>
 8000896:	4603      	mov	r3, r0
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000270 	.word	0x20000270

080008a4 <mb_slv_rcv_if>:
int32_t mb_slv_rcv_if(uint8_t _addr, uint8_t *_buf, uint16_t _max_len, int32_t _timeout, void *_arg) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4603      	mov	r3, r0
 80008b0:	73fb      	strb	r3, [r7, #15]
 80008b2:	4613      	mov	r3, r2
 80008b4:	81bb      	strh	r3, [r7, #12]
    return queue_get_bytes(&mb_queue, _buf, _max_len, _timeout);
 80008b6:	89bb      	ldrh	r3, [r7, #12]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	4804      	ldr	r0, [pc, #16]	; (80008d0 <mb_slv_rcv_if+0x2c>)
 80008c0:	f7ff fe73 	bl	80005aa <queue_get_bytes>
 80008c4:	4603      	mov	r3, r0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200002c0 	.word	0x200002c0

080008d4 <modbus_cb_write_single_register_cb>:
light_slv_info_t g_slave_info[3];

MODBUS_ERROR_CODE modbus_cb_write_single_register_cb(uint16_t _address,
                                                     uint16_t _value,
                                                     uint8_t _unit_id,
                                                     void* _arg){
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b089      	sub	sp, #36	; 0x24
 80008d8:	af02      	add	r7, sp, #8
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	4603      	mov	r3, r0
 80008de:	81fb      	strh	r3, [r7, #14]
 80008e0:	460b      	mov	r3, r1
 80008e2:	81bb      	strh	r3, [r7, #12]
 80008e4:	4613      	mov	r3, r2
 80008e6:	72fb      	strb	r3, [r7, #11]
//    LOG_DBG(TAG, "Master write single reg %d, value 0x%x", _address, _value);
    if(_address == MODBUS_HOLDING_REG_CONTROL_LIGHT_INDEX){
 80008e8:	89fb      	ldrh	r3, [r7, #14]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d11f      	bne.n	800092e <modbus_cb_write_single_register_cb+0x5a>
        uint16_t id = _value>>8;
 80008ee:	89bb      	ldrh	r3, [r7, #12]
 80008f0:	0a1b      	lsrs	r3, r3, #8
 80008f2:	82fb      	strh	r3, [r7, #22]
        uint16_t color = _value&0xFF;
 80008f4:	89bb      	ldrh	r3, [r7, #12]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	82bb      	strh	r3, [r7, #20]
        LOG_INF(TAG, "Slave %d change light color to %s", id, getLightColorString(color));
 80008fa:	8afc      	ldrh	r4, [r7, #22]
 80008fc:	8abb      	ldrh	r3, [r7, #20]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff81 	bl	8000808 <getLightColorString>
 8000906:	4603      	mov	r3, r0
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	4623      	mov	r3, r4
 800090c:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <modbus_cb_write_single_register_cb+0x64>)
 800090e:	490b      	ldr	r1, [pc, #44]	; (800093c <modbus_cb_write_single_register_cb+0x68>)
 8000910:	2002      	movs	r0, #2
 8000912:	f002 fde7 	bl	80034e4 <sm_logger_show>
        g_slave_info[id].m_current_light = color;
 8000916:	8afa      	ldrh	r2, [r7, #22]
 8000918:	8abb      	ldrh	r3, [r7, #20]
 800091a:	b2d8      	uxtb	r0, r3
 800091c:	4908      	ldr	r1, [pc, #32]	; (8000940 <modbus_cb_write_single_register_cb+0x6c>)
 800091e:	4613      	mov	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	440b      	add	r3, r1
 8000928:	3302      	adds	r3, #2
 800092a:	4602      	mov	r2, r0
 800092c:	701a      	strb	r2, [r3, #0]
    }

    return MODBUS_ERROR_NONE;
 800092e:	2300      	movs	r3, #0
}
 8000930:	4618      	mov	r0, r3
 8000932:	371c      	adds	r7, #28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	080067c0 	.word	0x080067c0
 800093c:	080067e4 	.word	0x080067e4
 8000940:	20000344 	.word	0x20000344

08000944 <modbus_cb_write_multiple_registers_cb>:
MODBUS_ERROR_CODE modbus_cb_write_multiple_registers_cb(uint16_t _address,
                                                        uint16_t _quantity,
                                                        const uint16_t* _registers,
                                                        uint8_t _unit_id,
                                                        void* _arg){
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af02      	add	r7, sp, #8
 800094a:	60ba      	str	r2, [r7, #8]
 800094c:	461a      	mov	r2, r3
 800094e:	4603      	mov	r3, r0
 8000950:	81fb      	strh	r3, [r7, #14]
 8000952:	460b      	mov	r3, r1
 8000954:	81bb      	strh	r3, [r7, #12]
 8000956:	4613      	mov	r3, r2
 8000958:	71fb      	strb	r3, [r7, #7]
    LOG_DBG(TAG, "Master write multi reg %d quantity %d", _address, _quantity);
 800095a:	89fa      	ldrh	r2, [r7, #14]
 800095c:	89bb      	ldrh	r3, [r7, #12]
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	4613      	mov	r3, r2
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <modbus_cb_write_multiple_registers_cb+0x34>)
 8000964:	4905      	ldr	r1, [pc, #20]	; (800097c <modbus_cb_write_multiple_registers_cb+0x38>)
 8000966:	2003      	movs	r0, #3
 8000968:	f002 fdbc 	bl	80034e4 <sm_logger_show>

    return MODBUS_ERROR_NONE;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	080067ec 	.word	0x080067ec
 800097c:	080067e4 	.word	0x080067e4

08000980 <modbus_cb_read_input_registers>:

MODBUS_ERROR_CODE modbus_cb_read_input_registers(uint16_t _address,
                                                                uint16_t _quantity,
                                                                uint16_t* _registers_out,
                                                                uint8_t _unit_id,
                                                                void* _arg){
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af02      	add	r7, sp, #8
 8000986:	60ba      	str	r2, [r7, #8]
 8000988:	461a      	mov	r2, r3
 800098a:	4603      	mov	r3, r0
 800098c:	81fb      	strh	r3, [r7, #14]
 800098e:	460b      	mov	r3, r1
 8000990:	81bb      	strh	r3, [r7, #12]
 8000992:	4613      	mov	r3, r2
 8000994:	71fb      	strb	r3, [r7, #7]
    LOG_DBG(TAG, "Master read input reg %d quantity %d", _address, _quantity);
 8000996:	89fa      	ldrh	r2, [r7, #14]
 8000998:	89bb      	ldrh	r3, [r7, #12]
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	4613      	mov	r3, r2
 800099e:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <modbus_cb_read_input_registers+0x64>)
 80009a0:	4911      	ldr	r1, [pc, #68]	; (80009e8 <modbus_cb_read_input_registers+0x68>)
 80009a2:	2003      	movs	r0, #3
 80009a4:	f002 fd9e 	bl	80034e4 <sm_logger_show>
    if(_quantity != MODBUS_INPUT_REG_SYNC_DATA_REG_NUM)
 80009a8:	89bb      	ldrh	r3, [r7, #12]
 80009aa:	2b14      	cmp	r3, #20
 80009ac:	d001      	beq.n	80009b2 <modbus_cb_read_input_registers+0x32>
        return MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE;
 80009ae:	2303      	movs	r3, #3
 80009b0:	e014      	b.n	80009dc <modbus_cb_read_input_registers+0x5c>
//
    uint16_t testID = _address; //scrip
 80009b2:	89fb      	ldrh	r3, [r7, #14]
 80009b4:	82fb      	strh	r3, [r7, #22]

//
//    if(testID >= 3)
//        return MODBUS_ERROR_INVALID_UNIT_ID;
//
    LOG_INF(TAG, "Sync slave %d", testID);
 80009b6:	8afb      	ldrh	r3, [r7, #22]
 80009b8:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <modbus_cb_read_input_registers+0x6c>)
 80009ba:	490b      	ldr	r1, [pc, #44]	; (80009e8 <modbus_cb_read_input_registers+0x68>)
 80009bc:	2002      	movs	r0, #2
 80009be:	f002 fd91 	bl	80034e4 <sm_logger_show>
//        }
//    }else{
//        memcpy((uint8_t*)_registers_out, &g_slave_info[testID], sizeof(light_slv_info_t));
//    }

    memcpy((uint8_t*)_registers_out, &g_slave_info[testID], sizeof(light_slv_info_t));
 80009c2:	8afa      	ldrh	r2, [r7, #22]
 80009c4:	4613      	mov	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <modbus_cb_read_input_registers+0x70>)
 80009ce:	4413      	add	r3, r2
 80009d0:	220c      	movs	r2, #12
 80009d2:	4619      	mov	r1, r3
 80009d4:	68b8      	ldr	r0, [r7, #8]
 80009d6:	f005 fa04 	bl	8005de2 <memcpy>


    return MODBUS_ERROR_NONE;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	08006814 	.word	0x08006814
 80009e8:	080067e4 	.word	0x080067e4
 80009ec:	0800683c 	.word	0x0800683c
 80009f0:	20000344 	.word	0x20000344

080009f4 <modbus_cb_read_holding_registers>:

MODBUS_ERROR_CODE modbus_cb_read_holding_registers(uint16_t _address,
                                                   uint16_t _quantity,
                                                   uint16_t *_registers_out,
                                                   uint8_t _unit_id,
                                                   void *_arg) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af02      	add	r7, sp, #8
 80009fa:	60ba      	str	r2, [r7, #8]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4603      	mov	r3, r0
 8000a00:	81fb      	strh	r3, [r7, #14]
 8000a02:	460b      	mov	r3, r1
 8000a04:	81bb      	strh	r3, [r7, #12]
 8000a06:	4613      	mov	r3, r2
 8000a08:	71fb      	strb	r3, [r7, #7]
    LOG_DBG(TAG, "Master read holding reg %d quantity %d", _address, _quantity);
 8000a0a:	89fa      	ldrh	r2, [r7, #14]
 8000a0c:	89bb      	ldrh	r3, [r7, #12]
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	4613      	mov	r3, r2
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <modbus_cb_read_holding_registers+0x34>)
 8000a14:	4905      	ldr	r1, [pc, #20]	; (8000a2c <modbus_cb_read_holding_registers+0x38>)
 8000a16:	2003      	movs	r0, #3
 8000a18:	f002 fd64 	bl	80034e4 <sm_logger_show>

    return MODBUS_ERROR_NONE;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	0800684c 	.word	0x0800684c
 8000a2c:	080067e4 	.word	0x080067e4

08000a30 <main>:
        .write_single_register = modbus_cb_write_single_register_cb,
        .write_multiple_registers = modbus_cb_write_multiple_registers_cb,
};


int main(void){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
    sm_logger_init(log_put, LOG_LEVEL_DEBUG);
 8000a34:	2103      	movs	r1, #3
 8000a36:	4822      	ldr	r0, [pc, #136]	; (8000ac0 <main+0x90>)
 8000a38:	f002 fd40 	bl	80034bc <sm_logger_init>
	board_init();
 8000a3c:	f7ff fe1b 	bl	8000676 <board_init>
	HAL_UART_Receive_IT(&huart2, &rx_buff, 1);
 8000a40:	2201      	movs	r2, #1
 8000a42:	4920      	ldr	r1, [pc, #128]	; (8000ac4 <main+0x94>)
 8000a44:	4820      	ldr	r0, [pc, #128]	; (8000ac8 <main+0x98>)
 8000a46:	f004 f81e 	bl	8004a86 <HAL_UART_Receive_IT>

    g_mb_slave = sm_mb_slave_create_default(MB_SLAVE_ID, mb_slv_send_if, mb_slv_rcv_if, NULL);
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <main+0x9c>)
 8000a4e:	4920      	ldr	r1, [pc, #128]	; (8000ad0 <main+0xa0>)
 8000a50:	2001      	movs	r0, #1
 8000a52:	f000 fac9 	bl	8000fe8 <sm_mb_slave_create_default>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <main+0xa4>)
 8000a5a:	6013      	str	r3, [r2, #0]
    g_mb_slave = sm_mb_slave_create_default(MB_SLAVE_ID, mb_slv_send_if, mb_slv_rcv_if, NULL);
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <main+0x9c>)
 8000a60:	491b      	ldr	r1, [pc, #108]	; (8000ad0 <main+0xa0>)
 8000a62:	2001      	movs	r0, #1
 8000a64:	f000 fac0 	bl	8000fe8 <sm_mb_slave_create_default>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	4a1a      	ldr	r2, [pc, #104]	; (8000ad4 <main+0xa4>)
 8000a6c:	6013      	str	r3, [r2, #0]
    if(!g_mb_slave){
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <main+0xa4>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d107      	bne.n	8000a86 <main+0x56>
        LOG_ERR(TAG, "Create modbus server FAILED");
 8000a76:	4a18      	ldr	r2, [pc, #96]	; (8000ad8 <main+0xa8>)
 8000a78:	4918      	ldr	r1, [pc, #96]	; (8000adc <main+0xac>)
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f002 fd32 	bl	80034e4 <sm_logger_show>
        return -1;
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a84:	e019      	b.n	8000aba <main+0x8a>
    }

    g_mb_slave->m_proc->init(g_mb_slave);
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <main+0xa4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a11      	ldr	r2, [pc, #68]	; (8000ad4 <main+0xa4>)
 8000a90:	6812      	ldr	r2, [r2, #0]
 8000a92:	4610      	mov	r0, r2
 8000a94:	4798      	blx	r3
    g_mb_slave->m_proc->reg_function_cb(g_mb_slave, &g_mb_slave_callback);
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <main+0xa4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <main+0xa4>)
 8000aa0:	6812      	ldr	r2, [r2, #0]
 8000aa2:	490f      	ldr	r1, [pc, #60]	; (8000ae0 <main+0xb0>)
 8000aa4:	4610      	mov	r0, r2
 8000aa6:	4798      	blx	r3


	while (1)
	{
		g_mb_slave->m_proc->polling(g_mb_slave);
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <main+0xa4>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <main+0xa4>)
 8000ab2:	6812      	ldr	r2, [r2, #0]
 8000ab4:	4610      	mov	r0, r2
 8000ab6:	4798      	blx	r3
 8000ab8:	e7f6      	b.n	8000aa8 <main+0x78>
	}
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	08000861 	.word	0x08000861
 8000ac4:	200002bc 	.word	0x200002bc
 8000ac8:	20000270 	.word	0x20000270
 8000acc:	080008a5 	.word	0x080008a5
 8000ad0:	08000879 	.word	0x08000879
 8000ad4:	200002b8 	.word	0x200002b8
 8000ad8:	08006874 	.word	0x08006874
 8000adc:	080067e4 	.word	0x080067e4
 8000ae0:	080068ec 	.word	0x080068ec

08000ae4 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	if(uwTick % 500 == 0){
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <SysTick_Handler+0x30>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <SysTick_Handler+0x34>)
 8000aee:	fba3 1302 	umull	r1, r3, r3, r2
 8000af2:	095b      	lsrs	r3, r3, #5
 8000af4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000af8:	fb01 f303 	mul.w	r3, r1, r3
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d103      	bne.n	8000b0a <SysTick_Handler+0x26>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <SysTick_Handler+0x38>)
 8000b06:	f003 f91d 	bl	8003d44 <HAL_GPIO_TogglePin>
	}

	HAL_IncTick();
 8000b0a:	f002 fddb 	bl	80036c4 <HAL_IncTick>

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000036c 	.word	0x2000036c
 8000b18:	10624dd3 	.word	0x10624dd3
 8000b1c:	40020400 	.word	0x40020400

08000b20 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000b24:	4807      	ldr	r0, [pc, #28]	; (8000b44 <USART2_IRQHandler+0x24>)
 8000b26:	f003 ffd3 	bl	8004ad0 <HAL_UART_IRQHandler>
	queue_push(&mb_queue, rx_buff);
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <USART2_IRQHandler+0x28>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4806      	ldr	r0, [pc, #24]	; (8000b4c <USART2_IRQHandler+0x2c>)
 8000b32:	f7ff fcf6 	bl	8000522 <queue_push>
	HAL_UART_Receive_IT(&huart2, &rx_buff, 1);
 8000b36:	2201      	movs	r2, #1
 8000b38:	4903      	ldr	r1, [pc, #12]	; (8000b48 <USART2_IRQHandler+0x28>)
 8000b3a:	4802      	ldr	r0, [pc, #8]	; (8000b44 <USART2_IRQHandler+0x24>)
 8000b3c:	f003 ffa3 	bl	8004a86 <HAL_UART_Receive_IT>
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000270 	.word	0x20000270
 8000b48:	200002bc 	.word	0x200002bc
 8000b4c:	200002c0 	.word	0x200002c0

08000b50 <get_tick_count>:

int64_t get_tick_count(){
 8000b50:	b5b0      	push	{r4, r5, r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000b54:	f002 fdc8 	bl	80036e8 <HAL_GetTick>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	461c      	mov	r4, r3
 8000b5e:	4615      	mov	r5, r2
 8000b60:	4622      	mov	r2, r4
 8000b62:	462b      	mov	r3, r5
}
 8000b64:	4610      	mov	r0, r2
 8000b66:	4619      	mov	r1, r3
 8000b68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <HAL_MspInit+0x58>)
 8000b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b76:	4a13      	ldr	r2, [pc, #76]	; (8000bc4 <HAL_MspInit+0x58>)
 8000b78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7c:	6253      	str	r3, [r2, #36]	; 0x24
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_MspInit+0x58>)
 8000b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_MspInit+0x58>)
 8000b8c:	6a1b      	ldr	r3, [r3, #32]
 8000b8e:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <HAL_MspInit+0x58>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6213      	str	r3, [r2, #32]
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <HAL_MspInit+0x58>)
 8000b98:	6a1b      	ldr	r3, [r3, #32]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <HAL_MspInit+0x58>)
 8000ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba6:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <HAL_MspInit+0x58>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	6253      	str	r3, [r2, #36]	; 0x24
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_MspInit+0x58>)
 8000bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a1b      	ldr	r2, [pc, #108]	; (8000c54 <HAL_UART_MspInit+0x8c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d12f      	bne.n	8000c4a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bea:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <HAL_UART_MspInit+0x90>)
 8000bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bee:	4a1a      	ldr	r2, [pc, #104]	; (8000c58 <HAL_UART_MspInit+0x90>)
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	6253      	str	r3, [r2, #36]	; 0x24
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_UART_MspInit+0x90>)
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_UART_MspInit+0x90>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <HAL_UART_MspInit+0x90>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	61d3      	str	r3, [r2, #28]
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_UART_MspInit+0x90>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c1a:	230c      	movs	r3, #12
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <HAL_UART_MspInit+0x94>)
 8000c36:	f002 feed 	bl	8003a14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2026      	movs	r0, #38	; 0x26
 8000c40:	f002 fe33 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c44:	2026      	movs	r0, #38	; 0x26
 8000c46:	f002 fe4c 	bl	80038e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40004400 	.word	0x40004400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	e00a      	b.n	8000cca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cb4:	f3af 8000 	nop.w
 8000cb8:	4601      	mov	r1, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1c5a      	adds	r2, r3, #1
 8000cbe:	60ba      	str	r2, [r7, #8]
 8000cc0:	b2ca      	uxtb	r2, r1
 8000cc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	dbf0      	blt.n	8000cb4 <_read+0x12>
  }

  return len;
 8000cd2:	687b      	ldr	r3, [r7, #4]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr

08000cf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d02:	605a      	str	r2, [r3, #4]
  return 0;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <_isatty>:

int _isatty(int file)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d18:	2301      	movs	r3, #1
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d44:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <_sbrk+0x5c>)
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <_sbrk+0x60>)
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <_sbrk+0x64>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <_sbrk+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d207      	bcs.n	8000d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d6c:	f005 f80c 	bl	8005d88 <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	220c      	movs	r2, #12
 8000d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d7a:	e009      	b.n	8000d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <_sbrk+0x64>)
 8000d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20002800 	.word	0x20002800
 8000d9c:	00000400 	.word	0x00000400
 8000da0:	20000368 	.word	0x20000368
 8000da4:	200004c0 	.word	0x200004c0

08000da8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db4:	f7ff fff8 	bl	8000da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	480b      	ldr	r0, [pc, #44]	; (8000de8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dba:	490c      	ldr	r1, [pc, #48]	; (8000dec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dbc:	4a0c      	ldr	r2, [pc, #48]	; (8000df0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dd0:	4c09      	ldr	r4, [pc, #36]	; (8000df8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dde:	f004 ffd9 	bl	8005d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000de2:	f7ff fe25 	bl	8000a30 <main>
  bx lr
 8000de6:	4770      	bx	lr
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8000df0:	08006974 	.word	0x08006974
  ldr r2, =_sbss
 8000df4:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8000df8:	200004bc 	.word	0x200004bc

08000dfc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC1_IRQHandler>
	...

08000e00 <sm_mb_slave_init>:
}sm_mb_slave_impl_t;

int32_t nmbs_read_fn(uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg);
int32_t nmbs_write_fn(const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg);

int32_t sm_mb_slave_init(sm_mb_slave_t* _this){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
    if(!_this){
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d102      	bne.n	8000e14 <sm_mb_slave_init+0x14>
        return -1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e12:	e032      	b.n	8000e7a <sm_mb_slave_init+0x7a>
    }
    _impl(_this)->m_nmbs_if.read = nmbs_read_fn;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <sm_mb_slave_init+0x84>)
 8000e18:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    _impl(_this)->m_nmbs_if.write = nmbs_write_fn;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a1a      	ldr	r2, [pc, #104]	; (8000e88 <sm_mb_slave_init+0x88>)
 8000e20:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    _impl(_this)->m_nmbs_if.arg = _this;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    _impl(_this)->m_nmbs_if.transport = NMBS_TRANSPORT_RTU;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c

    nmbs_error err = nmbs_server_create(&_impl(_this)->m_nmbs_instance,
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f103 0018 	add.w	r0, r3, #24
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7b19      	ldrb	r1, [r3, #12]
                                        _impl(_this)->m_addr,
                                        &_impl(_this)->m_nmbs_if,
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f503 72b6 	add.w	r2, r3, #364	; 0x16c
                                        &_impl(_this)->m_nmbs_cb);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f503 73be 	add.w	r3, r3, #380	; 0x17c
    nmbs_error err = nmbs_server_create(&_impl(_this)->m_nmbs_instance,
 8000e4a:	f002 fa9b 	bl	8003384 <nmbs_server_create>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	73fb      	strb	r3, [r7, #15]

    if(err != NMBS_ERROR_NONE){
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d002      	beq.n	8000e60 <sm_mb_slave_init+0x60>
        return err;
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	e00c      	b.n	8000e7a <sm_mb_slave_init+0x7a>
    }

    nmbs_set_byte_timeout(&_impl(_this)->m_nmbs_instance, 50);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3318      	adds	r3, #24
 8000e64:	2132      	movs	r1, #50	; 0x32
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 fa77 	bl	800135a <nmbs_set_byte_timeout>
    nmbs_set_read_timeout(&_impl(_this)->m_nmbs_instance, 50);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3318      	adds	r3, #24
 8000e70:	2132      	movs	r1, #50	; 0x32
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 fa63 	bl	800133e <nmbs_set_read_timeout>

    return 0;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	08000f6b 	.word	0x08000f6b
 8000e88:	08000fa9 	.word	0x08000fa9

08000e8c <sm_mb_slave_free>:

int32_t sm_mb_slave_free(sm_mb_slave_t* _this){
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
    if(!_this){
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d102      	bne.n	8000ea0 <sm_mb_slave_free+0x14>
        return -1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e9e:	e000      	b.n	8000ea2 <sm_mb_slave_free+0x16>
    }
    return 0;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <sm_mb_slave_set_addr>:

int32_t sm_mb_slave_set_addr(sm_mb_slave_t* _this, uint8_t _addr){
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	70fb      	strb	r3, [r7, #3]
    if(!_this){
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d102      	bne.n	8000ec4 <sm_mb_slave_set_addr+0x18>
        return -1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec2:	e003      	b.n	8000ecc <sm_mb_slave_set_addr+0x20>
    }
    _impl(_this)->m_addr = _addr;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	78fa      	ldrb	r2, [r7, #3]
 8000ec8:	731a      	strb	r2, [r3, #12]
    return 0;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr

08000ed6 <sm_mb_slave_reg_function_cb>:

int32_t sm_mb_slave_reg_function_cb(sm_mb_slave_t* _this, const sm_mb_slave_cb_t* _cb){
 8000ed6:	b4b0      	push	{r4, r5, r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
    if(!_this){
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d102      	bne.n	8000eec <sm_mb_slave_reg_function_cb+0x16>
        return -1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eea:	e025      	b.n	8000f38 <sm_mb_slave_reg_function_cb+0x62>
    }
    _impl(_this)->m_cb = _cb;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	605a      	str	r2, [r3, #4]

    _impl(_this)->m_nmbs_cb.write_single_register = (nmbs_error (*)(uint16_t, uint16_t, uint8_t, void *))_cb->write_single_register;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	695a      	ldr	r2, [r3, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    _impl(_this)->m_nmbs_cb.write_multiple_registers = (nmbs_error (*)(uint16_t, uint16_t, const uint16_t*, uint8_t, void*))_cb->write_multiple_registers;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	69da      	ldr	r2, [r3, #28]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

#ifndef NMBS_SERVER_WRITE_SINGLE_COIL_DISABLED
    _impl(_this)->m_nmbs_cb.write_single_coil = (nmbs_error (*)(uint16_t address, bool value, uint8_t unit_id, void* arg)) _cb->write_single_coil;
#endif

    _impl(_this)->m_nmbs_cb.read_input_registers = (nmbs_error (*)(uint16_t, uint16_t, uint16_t*, uint8_t, void* )) _cb->read_input_registers;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    _impl(_this)->m_nmbs_cb.read_holding_registers = (nmbs_error (*)(uint16_t, uint16_t, uint16_t*, uint8_t,void*)) _cb->read_holding_registers;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

#ifndef NMBS_SERVER_READ_COILS_DISABLED
    _impl(_this)->m_nmbs_cb.read_coils = (nmbs_error (*)(uint16_t, uint16_t, uint8_t*, uint8_t,void*)) _cb->read_coils;
#endif

    _impl(_this)->m_nmbs_instance.callbacks = _impl(_this)->m_nmbs_cb;
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f502 7492 	add.w	r4, r2, #292	; 0x124
 8000f22:	f503 75be 	add.w	r5, r3, #380	; 0x17c
 8000f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f32:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    return 0;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bcb0      	pop	{r4, r5, r7}
 8000f40:	4770      	bx	lr

08000f42 <sm_mb_slave_polling>:

int32_t sm_mb_slave_polling(sm_mb_slave_t* _this){
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
    if(!_this){
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <sm_mb_slave_polling+0x14>
        return -1;
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f54:	e005      	b.n	8000f62 <sm_mb_slave_polling+0x20>
    }
    return nmbs_server_poll(&_impl(_this)->m_nmbs_instance);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3318      	adds	r3, #24
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 fa47 	bl	80033ee <nmbs_server_poll>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <nmbs_read_fn>:
static sm_mb_slave_impl_t g_mb_slave = {
        .m_base.m_proc = &g_mb_proc_default,
        .m_addr = 0,
};

int32_t nmbs_read_fn(uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg){
 8000f6a:	b590      	push	{r4, r7, lr}
 8000f6c:	b089      	sub	sp, #36	; 0x24
 8000f6e:	af02      	add	r7, sp, #8
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	460b      	mov	r3, r1
 8000f78:	817b      	strh	r3, [r7, #10]
    sm_mb_slave_impl_t* this = _impl(arg);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	617b      	str	r3, [r7, #20]
    if(this == NULL) return -1;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d102      	bne.n	8000f8a <nmbs_read_fn+0x20>
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f88:	e00a      	b.n	8000fa0 <nmbs_read_fn+0x36>
    return this->m_recv_fn_t(_impl(arg)->m_addr, buf, count, byte_timeout_ms, arg);
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	695c      	ldr	r4, [r3, #20]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	7b18      	ldrb	r0, [r3, #12]
 8000f92:	897a      	ldrh	r2, [r7, #10]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68f9      	ldr	r1, [r7, #12]
 8000f9c:	47a0      	blx	r4
 8000f9e:	4603      	mov	r3, r0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	371c      	adds	r7, #28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd90      	pop	{r4, r7, pc}

08000fa8 <nmbs_write_fn>:

int32_t nmbs_write_fn(const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg){
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	817b      	strh	r3, [r7, #10]
    sm_mb_slave_impl_t* this = _impl(arg);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	617b      	str	r3, [r7, #20]
    if(this == NULL) return -1;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d102      	bne.n	8000fc8 <nmbs_write_fn+0x20>
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fc6:	e00a      	b.n	8000fde <nmbs_write_fn+0x36>
    return this->m_send_fn_t(_impl(arg)->m_addr, buf, count, byte_timeout_ms, arg);
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	691c      	ldr	r4, [r3, #16]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	7b18      	ldrb	r0, [r3, #12]
 8000fd0:	897a      	ldrh	r2, [r7, #10]
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68f9      	ldr	r1, [r7, #12]
 8000fda:	47a0      	blx	r4
 8000fdc:	4603      	mov	r3, r0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	371c      	adds	r7, #28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}
	...

08000fe8 <sm_mb_slave_create_default>:


sm_mb_slave_t* sm_mb_slave_create_default(uint8_t _addr,
                                          sm_mb_send_if _send_fn,
                                          sm_mb_recv_if _recv_fn,
                                          void* _arg){
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
    g_mb_slave.m_addr = _addr;
 8000ff8:	4a08      	ldr	r2, [pc, #32]	; (800101c <sm_mb_slave_create_default+0x34>)
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	7313      	strb	r3, [r2, #12]
    g_mb_slave.m_arg = _arg;
 8000ffe:	4a07      	ldr	r2, [pc, #28]	; (800101c <sm_mb_slave_create_default+0x34>)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	6093      	str	r3, [r2, #8]
    g_mb_slave.m_send_fn_t = _send_fn;
 8001004:	4a05      	ldr	r2, [pc, #20]	; (800101c <sm_mb_slave_create_default+0x34>)
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	6113      	str	r3, [r2, #16]
    g_mb_slave.m_recv_fn_t = _recv_fn;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <sm_mb_slave_create_default+0x34>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6153      	str	r3, [r2, #20]
    
    return &g_mb_slave.m_base;
 8001010:	4b02      	ldr	r3, [pc, #8]	; (800101c <sm_mb_slave_create_default+0x34>)
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	20000018 	.word	0x20000018

08001020 <get_1>:
#else
#define NMBS_DEBUG_PRINT(...) (void) (0)
#endif


static uint8_t get_1(nmbs_t* nmbs) {
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    uint8_t result = nmbs->msg.buf[nmbs->msg.buf_idx];
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800102e:	461a      	mov	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	5c9b      	ldrb	r3, [r3, r2]
 8001034:	73fb      	strb	r3, [r7, #15]
    nmbs->msg.buf_idx++;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800103c:	3301      	adds	r3, #1
 800103e:	b29a      	uxth	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return result;
 8001046:	7bfb      	ldrb	r3, [r7, #15]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <put_1>:


static void put_1(nmbs_t* nmbs, uint8_t data) {
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	70fb      	strb	r3, [r7, #3]
    nmbs->msg.buf[nmbs->msg.buf_idx] = data;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001064:	4619      	mov	r1, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	78fa      	ldrb	r2, [r7, #3]
 800106a:	545a      	strb	r2, [r3, r1]
    nmbs->msg.buf_idx++;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001072:	3301      	adds	r3, #1
 8001074:	b29a      	uxth	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr

08001086 <discard_1>:


static void discard_1(nmbs_t* nmbs) {
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
    nmbs->msg.buf_idx++;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001094:	3301      	adds	r3, #1
 8001096:	b29a      	uxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <discard_n>:


static void discard_n(nmbs_t* nmbs, uint16_t n) {
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
    nmbs->msg.buf_idx += n;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 80010ba:	887b      	ldrh	r3, [r7, #2]
 80010bc:	4413      	add	r3, r2
 80010be:	b29a      	uxth	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <get_2>:


static uint16_t get_2(nmbs_t* nmbs) {
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	/*if(nmbs->msg.buf_idx >= 260){
		nmbs->msg.buf_idx = 0;
		return 0;
	}*/
    uint16_t result =
            ((uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx]) << 8 | (uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx + 1];
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80010de:	461a      	mov	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	5c9b      	ldrb	r3, [r3, r2]
 80010e4:	021b      	lsls	r3, r3, #8
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80010ee:	3301      	adds	r3, #1
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	5ccb      	ldrb	r3, [r1, r3]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21b      	sxth	r3, r3
    uint16_t result =
 80010fa:	81fb      	strh	r3, [r7, #14]
    nmbs->msg.buf_idx += 2;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001102:	3302      	adds	r3, #2
 8001104:	b29a      	uxth	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return result;
 800110c:	89fb      	ldrh	r3, [r7, #14]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <put_2>:


static void put_2(nmbs_t* nmbs, uint16_t data) {
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
    nmbs->msg.buf[nmbs->msg.buf_idx] = (uint8_t) ((data >> 8) & 0xFFU);
 8001124:	887b      	ldrh	r3, [r7, #2]
 8001126:	0a1b      	lsrs	r3, r3, #8
 8001128:	b299      	uxth	r1, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001130:	461a      	mov	r2, r3
 8001132:	b2c9      	uxtb	r1, r1
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	5499      	strb	r1, [r3, r2]
    nmbs->msg.buf[nmbs->msg.buf_idx + 1] = (uint8_t) data;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800113e:	3301      	adds	r3, #1
 8001140:	887a      	ldrh	r2, [r7, #2]
 8001142:	b2d1      	uxtb	r1, r2
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	54d1      	strb	r1, [r2, r3]
    nmbs->msg.buf_idx += 2;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800114e:	3302      	adds	r3, #2
 8001150:	b29a      	uxth	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <get_n>:


static uint8_t* get_n(nmbs_t* nmbs, uint16_t n) {
 8001162:	b480      	push	{r7}
 8001164:	b085      	sub	sp, #20
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	807b      	strh	r3, [r7, #2]
    uint8_t* msg_buf_ptr = nmbs->msg.buf + nmbs->msg.buf_idx;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
    nmbs->msg.buf_idx += n;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8001180:	887b      	ldrh	r3, [r7, #2]
 8001182:	4413      	add	r3, r2
 8001184:	b29a      	uxth	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return msg_buf_ptr;
 800118c:	68fb      	ldr	r3, [r7, #12]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <get_regs>:


static uint16_t* get_regs(nmbs_t* nmbs, uint16_t n) {
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
    uint16_t* msg_buf_ptr = (uint16_t*) (nmbs->msg.buf + nmbs->msg.buf_idx);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 80011ac:	4413      	add	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]
    nmbs->msg.buf_idx += n * 2;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	4413      	add	r3, r2
 80011be:	b29a      	uxth	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    while (n--) {
 80011c6:	e016      	b.n	80011f6 <get_regs+0x5e>
        msg_buf_ptr[n] = (msg_buf_ptr[n] << 8) | ((msg_buf_ptr[n] >> 8) & 0xFF);
 80011c8:	887b      	ldrh	r3, [r7, #2]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	68f9      	ldr	r1, [r7, #12]
 80011dc:	440b      	add	r3, r1
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b219      	sxth	r1, r3
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	4413      	add	r3, r2
 80011f2:	b28a      	uxth	r2, r1
 80011f4:	801a      	strh	r2, [r3, #0]
    while (n--) {
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	1e5a      	subs	r2, r3, #1
 80011fa:	807a      	strh	r2, [r7, #2]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1e3      	bne.n	80011c8 <get_regs+0x30>
    }
    return msg_buf_ptr;
 8001200:	68fb      	ldr	r3, [r7, #12]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <swap_regs>:
        msg_buf_ptr[n] = (data[n] << 8) | ((data[n] >> 8) & 0xFF);
    }
}


static void swap_regs(uint16_t* data, uint16_t n) {
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
    while (n--) {
 8001218:	e016      	b.n	8001248 <swap_regs+0x3c>
        data[n] = (data[n] << 8) | ((data[n] >> 8) & 0xFF);
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	440b      	add	r3, r1
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	0a1b      	lsrs	r3, r3, #8
 8001234:	b29b      	uxth	r3, r3
 8001236:	b21b      	sxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b219      	sxth	r1, r3
 800123c:	887b      	ldrh	r3, [r7, #2]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	b28a      	uxth	r2, r1
 8001246:	801a      	strh	r2, [r3, #0]
    while (n--) {
 8001248:	887b      	ldrh	r3, [r7, #2]
 800124a:	1e5a      	subs	r2, r3, #1
 800124c:	807a      	strh	r2, [r7, #2]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1e3      	bne.n	800121a <swap_regs+0xe>
    }
}
 8001252:	bf00      	nop
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <msg_buf_reset>:


static void msg_buf_reset(nmbs_t* nmbs) {
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
    nmbs->msg.buf_idx = 0;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <msg_state_reset>:


static void msg_state_reset(nmbs_t* nmbs) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
    msg_buf_reset(nmbs);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ffec 	bl	800125e <msg_buf_reset>
    nmbs->msg.unit_id = 0;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    nmbs->msg.fc = 0;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    nmbs->msg.transaction_id = 0;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
    nmbs->msg.broadcast = false;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
    nmbs->msg.ignored = false;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <nmbs_create>:
        nmbs->msg.broadcast = true;
}
#endif


nmbs_error nmbs_create(nmbs_t* nmbs, const nmbs_platform_conf* platform_conf) {
 80012b6:	b590      	push	{r4, r7, lr}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
    if (!nmbs)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d102      	bne.n	80012cc <nmbs_create+0x16>
        return NMBS_ERROR_INVALID_ARGUMENT;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ca:	e034      	b.n	8001336 <nmbs_create+0x80>

    memset(nmbs, 0, sizeof(nmbs_t));
 80012cc:	f44f 72aa 	mov.w	r2, #340	; 0x154
 80012d0:	2100      	movs	r1, #0
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f004 fcfa 	bl	8005ccc <memset>

    nmbs->byte_timeout_ms = -1;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012de:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    nmbs->read_timeout_ms = -1;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012e8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    if (!platform_conf)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d102      	bne.n	80012f8 <nmbs_create+0x42>
        return NMBS_ERROR_INVALID_ARGUMENT;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012f6:	e01e      	b.n	8001336 <nmbs_create+0x80>

    if (platform_conf->transport != NMBS_TRANSPORT_RTU && platform_conf->transport != NMBS_TRANSPORT_TCP)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d006      	beq.n	800130e <nmbs_create+0x58>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d002      	beq.n	800130e <nmbs_create+0x58>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8001308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800130c:	e013      	b.n	8001336 <nmbs_create+0x80>

    if (!platform_conf->read || !platform_conf->write)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <nmbs_create+0x68>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <nmbs_create+0x6e>
        return NMBS_ERROR_INVALID_ARGUMENT;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001322:	e008      	b.n	8001336 <nmbs_create+0x80>

    nmbs->platform = *platform_conf;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800132c:	4613      	mov	r3, r2
 800132e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    return NMBS_ERROR_NONE;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bd90      	pop	{r4, r7, pc}

0800133e <nmbs_set_read_timeout>:


void nmbs_set_read_timeout(nmbs_t* nmbs, int32_t timeout_ms) {
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
    nmbs->read_timeout_ms = timeout_ms;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr

0800135a <nmbs_set_byte_timeout>:


void nmbs_set_byte_timeout(nmbs_t* nmbs, int32_t timeout_ms) {
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
    nmbs->byte_timeout_ms = timeout_ms;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <nmbs_crc_calc>:
void nmbs_set_platform_arg(nmbs_t* nmbs, void* arg) {
    nmbs->platform.arg = arg;
}


uint16_t nmbs_crc_calc(const uint8_t* data, uint32_t length) {
 8001376:	b480      	push	{r7}
 8001378:	b087      	sub	sp, #28
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 8001380:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001384:	82fb      	strh	r3, [r7, #22]
    for (uint32_t i = 0; i < length; i++) {
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	e026      	b.n	80013da <nmbs_crc_calc+0x64>
        crc ^= (uint16_t) data[i];
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4413      	add	r3, r2
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b29a      	uxth	r2, r3
 8001396:	8afb      	ldrh	r3, [r7, #22]
 8001398:	4053      	eors	r3, r2
 800139a:	82fb      	strh	r3, [r7, #22]
        for (int j = 8; j != 0; j--) {
 800139c:	2308      	movs	r3, #8
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	e015      	b.n	80013ce <nmbs_crc_calc+0x58>
            if ((crc & 0x0001) != 0) {
 80013a2:	8afb      	ldrh	r3, [r7, #22]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00a      	beq.n	80013c2 <nmbs_crc_calc+0x4c>
                crc >>= 1;
 80013ac:	8afb      	ldrh	r3, [r7, #22]
 80013ae:	085b      	lsrs	r3, r3, #1
 80013b0:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 80013b2:	8afb      	ldrh	r3, [r7, #22]
 80013b4:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80013b8:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 80013bc:	43db      	mvns	r3, r3
 80013be:	82fb      	strh	r3, [r7, #22]
 80013c0:	e002      	b.n	80013c8 <nmbs_crc_calc+0x52>
            }
            else
                crc >>= 1;
 80013c2:	8afb      	ldrh	r3, [r7, #22]
 80013c4:	085b      	lsrs	r3, r3, #1
 80013c6:	82fb      	strh	r3, [r7, #22]
        for (int j = 8; j != 0; j--) {
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1e6      	bne.n	80013a2 <nmbs_crc_calc+0x2c>
    for (uint32_t i = 0; i < length; i++) {
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	3301      	adds	r3, #1
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d3d4      	bcc.n	800138c <nmbs_crc_calc+0x16>
        }
    }

    return (uint16_t) (crc << 8) | (uint16_t) (crc >> 8);
 80013e2:	8afb      	ldrh	r3, [r7, #22]
 80013e4:	ba5b      	rev16	r3, r3
 80013e6:	b29b      	uxth	r3, r3
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	371c      	adds	r7, #28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <recv>:


static nmbs_error recv(nmbs_t* nmbs, uint16_t count) {
 80013f2:	b590      	push	{r4, r7, lr}
 80013f4:	b085      	sub	sp, #20
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	807b      	strh	r3, [r7, #2]
    int32_t ret =
            nmbs->platform.read(nmbs->msg.buf + nmbs->msg.buf_idx, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 800140c:	1898      	adds	r0, r3, r2
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800141a:	8879      	ldrh	r1, [r7, #2]
 800141c:	47a0      	blx	r4
 800141e:	60f8      	str	r0, [r7, #12]

    if (ret == count)
 8001420:	887b      	ldrh	r3, [r7, #2]
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d101      	bne.n	800142c <recv+0x3a>
        return NMBS_ERROR_NONE;
 8001428:	2300      	movs	r3, #0
 800142a:	e00e      	b.n	800144a <recv+0x58>

    if (ret < count) {
 800142c:	887b      	ldrh	r3, [r7, #2]
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	429a      	cmp	r2, r3
 8001432:	da08      	bge.n	8001446 <recv+0x54>
        if (ret < 0)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	da02      	bge.n	8001440 <recv+0x4e>
            return NMBS_ERROR_TRANSPORT;
 800143a:	f06f 0303 	mvn.w	r3, #3
 800143e:	e004      	b.n	800144a <recv+0x58>

        return NMBS_ERROR_TIMEOUT;
 8001440:	f06f 0302 	mvn.w	r3, #2
 8001444:	e001      	b.n	800144a <recv+0x58>
    }

    return NMBS_ERROR_TRANSPORT;
 8001446:	f06f 0303 	mvn.w	r3, #3
}
 800144a:	4618      	mov	r0, r3
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	bd90      	pop	{r4, r7, pc}

08001452 <send>:


static nmbs_error send(nmbs_t* nmbs, uint16_t count) {
 8001452:	b590      	push	{r4, r7, lr}
 8001454:	b085      	sub	sp, #20
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	460b      	mov	r3, r1
 800145c:	807b      	strh	r3, [r7, #2]
    int32_t ret = nmbs->platform.write(nmbs->msg.buf, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001472:	8879      	ldrh	r1, [r7, #2]
 8001474:	47a0      	blx	r4
 8001476:	60f8      	str	r0, [r7, #12]

    if (ret == count)
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	429a      	cmp	r2, r3
 800147e:	d101      	bne.n	8001484 <send+0x32>
        return NMBS_ERROR_NONE;
 8001480:	2300      	movs	r3, #0
 8001482:	e00e      	b.n	80014a2 <send+0x50>

    if (ret < count) {
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	429a      	cmp	r2, r3
 800148a:	da08      	bge.n	800149e <send+0x4c>
        if (ret < 0)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	da02      	bge.n	8001498 <send+0x46>
            return NMBS_ERROR_TRANSPORT;
 8001492:	f06f 0303 	mvn.w	r3, #3
 8001496:	e004      	b.n	80014a2 <send+0x50>

        return NMBS_ERROR_TIMEOUT;
 8001498:	f06f 0302 	mvn.w	r3, #2
 800149c:	e001      	b.n	80014a2 <send+0x50>
    }

    return NMBS_ERROR_TRANSPORT;
 800149e:	f06f 0303 	mvn.w	r3, #3
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd90      	pop	{r4, r7, pc}

080014aa <recv_msg_footer>:


static nmbs_error recv_msg_footer(nmbs_t* nmbs) {
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b084      	sub	sp, #16
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("\n");

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d122      	bne.n	8001502 <recv_msg_footer+0x58>
        uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx);
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80014c4:	4619      	mov	r1, r3
 80014c6:	4610      	mov	r0, r2
 80014c8:	f7ff ff55 	bl	8001376 <nmbs_crc_calc>
 80014cc:	4603      	mov	r3, r0
 80014ce:	81fb      	strh	r3, [r7, #14]

        nmbs_error err = recv(nmbs, 2);
 80014d0:	2102      	movs	r1, #2
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ff8d 	bl	80013f2 <recv>
 80014d8:	4603      	mov	r3, r0
 80014da:	737b      	strb	r3, [r7, #13]
        if (err != NMBS_ERROR_NONE)
 80014dc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <recv_msg_footer+0x40>
            return err;
 80014e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80014e8:	e00c      	b.n	8001504 <recv_msg_footer+0x5a>

        uint16_t recv_crc = get_2(nmbs);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fdf0 	bl	80010d0 <get_2>
 80014f0:	4603      	mov	r3, r0
 80014f2:	817b      	strh	r3, [r7, #10]

        if (recv_crc != crc)
 80014f4:	897a      	ldrh	r2, [r7, #10]
 80014f6:	89fb      	ldrh	r3, [r7, #14]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d002      	beq.n	8001502 <recv_msg_footer+0x58>
            return NMBS_ERROR_CRC;
 80014fc:	f06f 0304 	mvn.w	r3, #4
 8001500:	e000      	b.n	8001504 <recv_msg_footer+0x5a>
    }

    return NMBS_ERROR_NONE;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <recv_msg_header>:


static nmbs_error recv_msg_header(nmbs_t* nmbs, bool* first_byte_received) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
    // We wait for the read timeout here, just for the first message byte
    int32_t old_byte_timeout = nmbs->byte_timeout_ms;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800151c:	617b      	str	r3, [r7, #20]
    nmbs->byte_timeout_ms = nmbs->read_timeout_ms;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

    msg_state_reset(nmbs);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff fea4 	bl	8001278 <msg_state_reset>

    *first_byte_received = false;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800153c:	2b01      	cmp	r3, #1
 800153e:	d131      	bne.n	80015a4 <recv_msg_header+0x98>
        nmbs_error err = recv(nmbs, 1);
 8001540:	2101      	movs	r1, #1
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ff55 	bl	80013f2 <recv>
 8001548:	4603      	mov	r3, r0
 800154a:	737b      	strb	r3, [r7, #13]

        nmbs->byte_timeout_ms = old_byte_timeout;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

        if (err != NMBS_ERROR_NONE)
 8001554:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <recv_msg_header+0x56>
            return err;
 800155c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001560:	e07b      	b.n	800165a <recv_msg_header+0x14e>

        *first_byte_received = true;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]

        nmbs->msg.unit_id = get_1(nmbs);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fd59 	bl	8001020 <get_1>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

        err = recv(nmbs, 1);
 8001578:	2101      	movs	r1, #1
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ff39 	bl	80013f2 <recv>
 8001580:	4603      	mov	r3, r0
 8001582:	737b      	strb	r3, [r7, #13]
        if (err != NMBS_ERROR_NONE)
 8001584:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <recv_msg_header+0x86>
            return err;
 800158c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001590:	e063      	b.n	800165a <recv_msg_header+0x14e>

        nmbs->msg.fc = get_1(nmbs);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fd44 	bl	8001020 <get_1>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 80015a2:	e059      	b.n	8001658 <recv_msg_header+0x14c>

        NMBS_DEBUG_PRINT("id: %d, fc: 0x%02X\n", nmbs->msg.unit_id, nmbs->msg.fc);
    }
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d154      	bne.n	8001658 <recv_msg_header+0x14c>
        nmbs_error err = recv(nmbs, 1);
 80015ae:	2101      	movs	r1, #1
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff1e 	bl	80013f2 <recv>
 80015b6:	4603      	mov	r3, r0
 80015b8:	74fb      	strb	r3, [r7, #19]

        nmbs->byte_timeout_ms = old_byte_timeout;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

        if (err != NMBS_ERROR_NONE)
 80015c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <recv_msg_header+0xc4>
            return err;
 80015ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80015ce:	e044      	b.n	800165a <recv_msg_header+0x14e>

        *first_byte_received = true;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	2201      	movs	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]

        // Advance buf_idx
        discard_1(nmbs);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fd55 	bl	8001086 <discard_1>

        err = recv(nmbs, 7);
 80015dc:	2107      	movs	r1, #7
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ff07 	bl	80013f2 <recv>
 80015e4:	4603      	mov	r3, r0
 80015e6:	74fb      	strb	r3, [r7, #19]
        if (err != NMBS_ERROR_NONE)
 80015e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <recv_msg_header+0xea>
            return err;
 80015f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80015f4:	e031      	b.n	800165a <recv_msg_header+0x14e>

        // Starting over
        msg_buf_reset(nmbs);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fe31 	bl	800125e <msg_buf_reset>

        nmbs->msg.transaction_id = get_2(nmbs);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fd67 	bl	80010d0 <get_2>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
        uint16_t protocol_id = get_2(nmbs);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fd5f 	bl	80010d0 <get_2>
 8001612:	4603      	mov	r3, r0
 8001614:	823b      	strh	r3, [r7, #16]
        uint16_t length = get_2(nmbs);    // We should actually check the length of the request against this value
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fd5a 	bl	80010d0 <get_2>
 800161c:	4603      	mov	r3, r0
 800161e:	81fb      	strh	r3, [r7, #14]
        nmbs->msg.unit_id = get_1(nmbs);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff fcfd 	bl	8001020 <get_1>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        nmbs->msg.fc = get_1(nmbs);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff fcf5 	bl	8001020 <get_1>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107

        if (protocol_id != 0)
 8001640:	8a3b      	ldrh	r3, [r7, #16]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <recv_msg_header+0x140>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8001646:	f06f 0305 	mvn.w	r3, #5
 800164a:	e006      	b.n	800165a <recv_msg_header+0x14e>

        if (length > 255)
 800164c:	89fb      	ldrh	r3, [r7, #14]
 800164e:	2bff      	cmp	r3, #255	; 0xff
 8001650:	d902      	bls.n	8001658 <recv_msg_header+0x14c>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8001652:	f06f 0305 	mvn.w	r3, #5
 8001656:	e000      	b.n	800165a <recv_msg_header+0x14e>
    }

    return NMBS_ERROR_NONE;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <put_msg_header>:


static void put_msg_header(nmbs_t* nmbs, uint16_t data_length) {
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	460b      	mov	r3, r1
 800166c:	807b      	strh	r3, [r7, #2]
    msg_buf_reset(nmbs);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fdf5 	bl	800125e <msg_buf_reset>

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800167a:	2b01      	cmp	r3, #1
 800167c:	d107      	bne.n	800168e <put_msg_header+0x2c>
        put_1(nmbs, nmbs->msg.unit_id);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001684:	4619      	mov	r1, r3
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fce3 	bl	8001052 <put_1>
 800168c:	e01d      	b.n	80016ca <put_msg_header+0x68>
    }
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001694:	2b02      	cmp	r3, #2
 8001696:	d118      	bne.n	80016ca <put_msg_header+0x68>
        put_2(nmbs, nmbs->msg.transaction_id);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 800169e:	4619      	mov	r1, r3
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fd39 	bl	8001118 <put_2>
        put_2(nmbs, 0);
 80016a6:	2100      	movs	r1, #0
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff fd35 	bl	8001118 <put_2>
        put_2(nmbs, (uint16_t) (1 + 1 + data_length));
 80016ae:	887b      	ldrh	r3, [r7, #2]
 80016b0:	3302      	adds	r3, #2
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	4619      	mov	r1, r3
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fd2e 	bl	8001118 <put_2>
        put_1(nmbs, nmbs->msg.unit_id);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80016c2:	4619      	mov	r1, r3
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff fcc4 	bl	8001052 <put_1>
    }

    put_1(nmbs, nmbs->msg.fc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80016d0:	4619      	mov	r1, r3
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff fcbd 	bl	8001052 <put_1>
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <send_msg>:


static nmbs_error send_msg(nmbs_t* nmbs) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("\n");

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d10e      	bne.n	8001710 <send_msg+0x30>
        uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx);
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80016fa:	4619      	mov	r1, r3
 80016fc:	4610      	mov	r0, r2
 80016fe:	f7ff fe3a 	bl	8001376 <nmbs_crc_calc>
 8001702:	4603      	mov	r3, r0
 8001704:	81fb      	strh	r3, [r7, #14]
        put_2(nmbs, crc);
 8001706:	89fb      	ldrh	r3, [r7, #14]
 8001708:	4619      	mov	r1, r3
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fd04 	bl	8001118 <put_2>
    }

    nmbs_error err = send(nmbs, nmbs->msg.buf_idx);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001716:	4619      	mov	r1, r3
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fe9a 	bl	8001452 <send>
 800171e:	4603      	mov	r3, r0
 8001720:	737b      	strb	r3, [r7, #13]

    return err;
 8001722:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <recv_req_header>:


#ifndef NMBS_SERVER_DISABLED
static nmbs_error recv_req_header(nmbs_t* nmbs, bool* first_byte_received) {
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
    nmbs_error err = recv_msg_header(nmbs, first_byte_received);
 8001738:	6839      	ldr	r1, [r7, #0]
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fee6 	bl	800150c <recv_msg_header>
 8001740:	4603      	mov	r3, r0
 8001742:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8001744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <recv_req_header+0x24>
        return err;
 800174c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001750:	e016      	b.n	8001780 <recv_req_header+0x52>

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001758:	2b01      	cmp	r3, #1
 800175a:	d110      	bne.n	800177e <recv_req_header+0x50>
        // Check if request is for us
        /*if (nmbs->msg.unit_id == NMBS_BROADCAST_ADDRESS)
            nmbs->msg.broadcast = true;
        else */if (nmbs->msg.unit_id != nmbs->address_rtu)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8001768:	429a      	cmp	r2, r3
 800176a:	d004      	beq.n	8001776 <recv_req_header+0x48>
            nmbs->msg.ignored = true;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 8001774:	e003      	b.n	800177e <recv_req_header+0x50>
        else
            nmbs->msg.ignored = false;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    }

    return NMBS_ERROR_NONE;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <put_res_header>:


static void put_res_header(nmbs_t* nmbs, uint16_t data_length) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
    put_msg_header(nmbs, data_length);
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	4619      	mov	r1, r3
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff62 	bl	8001662 <put_msg_header>
    NMBS_DEBUG_PRINT("%d NMBS res -> address_rtu %d\tfc %d\t", nmbs->address_rtu, nmbs->address_rtu, nmbs->msg.fc);
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <send_exception_msg>:


static nmbs_error send_exception_msg(nmbs_t* nmbs, uint8_t exception) {
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	70fb      	strb	r3, [r7, #3]
    nmbs->msg.fc += 0x80;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80017b8:	3b80      	subs	r3, #128	; 0x80
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    put_msg_header(nmbs, 1);
 80017c2:	2101      	movs	r1, #1
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff4c 	bl	8001662 <put_msg_header>
    put_1(nmbs, exception);
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	4619      	mov	r1, r3
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff fc3f 	bl	8001052 <put_1>

    NMBS_DEBUG_PRINT("%d NMBS res -> address_rtu %d\texception %d", nmbs->address_rtu, nmbs->address_rtu, exception);

    return send_msg(nmbs);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ff83 	bl	80016e0 <send_msg>
 80017da:	4603      	mov	r3, r0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <recv_res_header>:
#endif


static nmbs_error recv_res_header(nmbs_t* nmbs) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
    uint16_t req_transaction_id = nmbs->msg.transaction_id;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 80017f2:	81fb      	strh	r3, [r7, #14]
    uint8_t req_unit_id = nmbs->msg.unit_id;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80017fa:	737b      	strb	r3, [r7, #13]
    uint8_t req_fc = nmbs->msg.fc;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8001802:	733b      	strb	r3, [r7, #12]

    bool first_byte_received;
    nmbs_error err = recv_msg_header(nmbs, &first_byte_received);
 8001804:	f107 0309 	add.w	r3, r7, #9
 8001808:	4619      	mov	r1, r3
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff fe7e 	bl	800150c <recv_msg_header>
 8001810:	4603      	mov	r3, r0
 8001812:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8001814:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d002      	beq.n	8001822 <recv_res_header+0x3e>
        return err;
 800181c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001820:	e057      	b.n	80018d2 <recv_res_header+0xee>

    if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001828:	2b02      	cmp	r3, #2
 800182a:	d108      	bne.n	800183e <recv_res_header+0x5a>
        if (nmbs->msg.transaction_id != req_transaction_id)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8001832:	89fa      	ldrh	r2, [r7, #14]
 8001834:	429a      	cmp	r2, r3
 8001836:	d002      	beq.n	800183e <recv_res_header+0x5a>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8001838:	f06f 0305 	mvn.w	r3, #5
 800183c:	e049      	b.n	80018d2 <recv_res_header+0xee>
    }

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && nmbs->msg.unit_id != req_unit_id)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001844:	2b01      	cmp	r3, #1
 8001846:	d108      	bne.n	800185a <recv_res_header+0x76>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800184e:	7b7a      	ldrb	r2, [r7, #13]
 8001850:	429a      	cmp	r2, r3
 8001852:	d002      	beq.n	800185a <recv_res_header+0x76>
        return NMBS_ERROR_INVALID_UNIT_ID;
 8001854:	f06f 0306 	mvn.w	r3, #6
 8001858:	e03b      	b.n	80018d2 <recv_res_header+0xee>

    if (nmbs->msg.fc != req_fc) {
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8001860:	7b3a      	ldrb	r2, [r7, #12]
 8001862:	429a      	cmp	r2, r3
 8001864:	d034      	beq.n	80018d0 <recv_res_header+0xec>
        if (nmbs->msg.fc - 0x80 == req_fc) {
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800186c:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 8001870:	7b3b      	ldrb	r3, [r7, #12]
 8001872:	429a      	cmp	r2, r3
 8001874:	d129      	bne.n	80018ca <recv_res_header+0xe6>
            err = recv(nmbs, 1);
 8001876:	2101      	movs	r1, #1
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fdba 	bl	80013f2 <recv>
 800187e:	4603      	mov	r3, r0
 8001880:	72fb      	strb	r3, [r7, #11]
            if (err != NMBS_ERROR_NONE)
 8001882:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <recv_res_header+0xac>
                return err;
 800188a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800188e:	e020      	b.n	80018d2 <recv_res_header+0xee>

            uint8_t exception = get_1(nmbs);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fbc5 	bl	8001020 <get_1>
 8001896:	4603      	mov	r3, r0
 8001898:	72bb      	strb	r3, [r7, #10]
            err = recv_msg_footer(nmbs);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff fe05 	bl	80014aa <recv_msg_footer>
 80018a0:	4603      	mov	r3, r0
 80018a2:	72fb      	strb	r3, [r7, #11]
            if (err != NMBS_ERROR_NONE)
 80018a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <recv_res_header+0xce>
                return err;
 80018ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80018b0:	e00f      	b.n	80018d2 <recv_res_header+0xee>

            if (exception < 1 || exception > 4)
 80018b2:	7abb      	ldrb	r3, [r7, #10]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d002      	beq.n	80018be <recv_res_header+0xda>
 80018b8:	7abb      	ldrb	r3, [r7, #10]
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d902      	bls.n	80018c4 <recv_res_header+0xe0>
                return NMBS_ERROR_INVALID_RESPONSE;
 80018be:	f06f 0301 	mvn.w	r3, #1
 80018c2:	e006      	b.n	80018d2 <recv_res_header+0xee>

            NMBS_DEBUG_PRINT("%d NMBS res <- address_rtu %d\texception %d\n", nmbs->address_rtu, nmbs->msg.unit_id,
                             exception);
            return (nmbs_error) exception;
 80018c4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80018c8:	e003      	b.n	80018d2 <recv_res_header+0xee>
        }

        return NMBS_ERROR_INVALID_RESPONSE;
 80018ca:	f06f 0301 	mvn.w	r3, #1
 80018ce:	e000      	b.n	80018d2 <recv_res_header+0xee>
    }

    NMBS_DEBUG_PRINT("%d NMBS res <- address_rtu %d\tfc %d\t", nmbs->address_rtu, nmbs->msg.unit_id, nmbs->msg.fc);

    return NMBS_ERROR_NONE;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <recv_read_discrete_res>:
#endif
}
#endif


static nmbs_error recv_read_discrete_res(nmbs_t* nmbs, nmbs_bitfield values) {
 80018da:	b580      	push	{r7, lr}
 80018dc:	b084      	sub	sp, #16
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ff7d 	bl	80017e4 <recv_res_header>
 80018ea:	4603      	mov	r3, r0
 80018ec:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 80018ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <recv_read_discrete_res+0x22>
        return err;
 80018f6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80018fa:	e044      	b.n	8001986 <recv_read_discrete_res+0xac>

    err = recv(nmbs, 1);
 80018fc:	2101      	movs	r1, #1
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fd77 	bl	80013f2 <recv>
 8001904:	4603      	mov	r3, r0
 8001906:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8001908:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <recv_read_discrete_res+0x3c>
        return err;
 8001910:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001914:	e037      	b.n	8001986 <recv_read_discrete_res+0xac>

    uint8_t coils_bytes = get_1(nmbs);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff fb82 	bl	8001020 <get_1>
 800191c:	4603      	mov	r3, r0
 800191e:	72bb      	strb	r3, [r7, #10]
    NMBS_DEBUG_PRINT("b %d\t", coils_bytes);

    err = recv(nmbs, coils_bytes);
 8001920:	7abb      	ldrb	r3, [r7, #10]
 8001922:	b29b      	uxth	r3, r3
 8001924:	4619      	mov	r1, r3
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff fd63 	bl	80013f2 <recv>
 800192c:	4603      	mov	r3, r0
 800192e:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8001930:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <recv_read_discrete_res+0x64>
        return err;
 8001938:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800193c:	e023      	b.n	8001986 <recv_read_discrete_res+0xac>

    NMBS_DEBUG_PRINT("coils ");
    for (int i = 0; i < coils_bytes; i++) {
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	e00f      	b.n	8001964 <recv_read_discrete_res+0x8a>
        uint8_t coil = get_1(nmbs);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff fb6b 	bl	8001020 <get_1>
 800194a:	4603      	mov	r3, r0
 800194c:	727b      	strb	r3, [r7, #9]
        if (values)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d004      	beq.n	800195e <recv_read_discrete_res+0x84>
            values[i] = coil;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	4413      	add	r3, r2
 800195a:	7a7a      	ldrb	r2, [r7, #9]
 800195c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < coils_bytes; i++) {
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3301      	adds	r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	7abb      	ldrb	r3, [r7, #10]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	dbeb      	blt.n	8001944 <recv_read_discrete_res+0x6a>
        NMBS_DEBUG_PRINT("%d ", coil);
    }

    err = recv_msg_footer(nmbs);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff fd9c 	bl	80014aa <recv_msg_footer>
 8001972:	4603      	mov	r3, r0
 8001974:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8001976:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <recv_read_discrete_res+0xaa>
        return err;
 800197e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001982:	e000      	b.n	8001986 <recv_read_discrete_res+0xac>

    return NMBS_ERROR_NONE;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <recv_read_registers_res>:


static nmbs_error recv_read_registers_res(nmbs_t* nmbs, uint16_t quantity, uint16_t* registers) {
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	460b      	mov	r3, r1
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	817b      	strh	r3, [r7, #10]
    nmbs_error err = recv_res_header(nmbs);
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f7ff ff21 	bl	80017e4 <recv_res_header>
 80019a2:	4603      	mov	r3, r0
 80019a4:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 80019a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <recv_read_registers_res+0x26>
        return err;
 80019ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019b2:	e050      	b.n	8001a56 <recv_read_registers_res+0xc8>

    err = recv(nmbs, 1);
 80019b4:	2101      	movs	r1, #1
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f7ff fd1b 	bl	80013f2 <recv>
 80019bc:	4603      	mov	r3, r0
 80019be:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 80019c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <recv_read_registers_res+0x40>
        return err;
 80019c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019cc:	e043      	b.n	8001a56 <recv_read_registers_res+0xc8>

    uint8_t registers_bytes = get_1(nmbs);
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f7ff fb26 	bl	8001020 <get_1>
 80019d4:	4603      	mov	r3, r0
 80019d6:	74bb      	strb	r3, [r7, #18]
    NMBS_DEBUG_PRINT("b %d\t", registers_bytes);

    err = recv(nmbs, registers_bytes);
 80019d8:	7cbb      	ldrb	r3, [r7, #18]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	4619      	mov	r1, r3
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f7ff fd07 	bl	80013f2 <recv>
 80019e4:	4603      	mov	r3, r0
 80019e6:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 80019e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <recv_read_registers_res+0x68>
        return err;
 80019f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019f4:	e02f      	b.n	8001a56 <recv_read_registers_res+0xc8>

    NMBS_DEBUG_PRINT("regs ");
    for (int i = 0; i < registers_bytes / 2; i++) {
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e010      	b.n	8001a1e <recv_read_registers_res+0x90>
        uint16_t reg = get_2(nmbs);
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7ff fb67 	bl	80010d0 <get_2>
 8001a02:	4603      	mov	r3, r0
 8001a04:	823b      	strh	r3, [r7, #16]
        if (registers)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <recv_read_registers_res+0x8a>
            registers[i] = reg;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	8a3a      	ldrh	r2, [r7, #16]
 8001a16:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < registers_bytes / 2; i++) {
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	7cbb      	ldrb	r3, [r7, #18]
 8001a20:	085b      	lsrs	r3, r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	dbe7      	blt.n	80019fc <recv_read_registers_res+0x6e>
        NMBS_DEBUG_PRINT("%d ", reg);
    }

    err = recv_msg_footer(nmbs);
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f7ff fd3c 	bl	80014aa <recv_msg_footer>
 8001a32:	4603      	mov	r3, r0
 8001a34:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 8001a36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <recv_read_registers_res+0xb6>
        return err;
 8001a3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a42:	e008      	b.n	8001a56 <recv_read_registers_res+0xc8>

    if (registers_bytes != quantity * 2)
 8001a44:	7cba      	ldrb	r2, [r7, #18]
 8001a46:	897b      	ldrh	r3, [r7, #10]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d002      	beq.n	8001a54 <recv_read_registers_res+0xc6>
        return NMBS_ERROR_INVALID_RESPONSE;
 8001a4e:	f06f 0301 	mvn.w	r3, #1
 8001a52:	e000      	b.n	8001a56 <recv_read_registers_res+0xc8>

    return NMBS_ERROR_NONE;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <recv_write_single_coil_res>:


nmbs_error recv_write_single_coil_res(nmbs_t* nmbs, uint16_t address, uint16_t value_req) {
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	807b      	strh	r3, [r7, #2]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff feb8 	bl	80017e4 <recv_res_header>
 8001a74:	4603      	mov	r3, r0
 8001a76:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8001a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <recv_write_single_coil_res+0x28>
        return err;
 8001a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a84:	e031      	b.n	8001aea <recv_write_single_coil_res+0x8c>

    err = recv(nmbs, 4);
 8001a86:	2104      	movs	r1, #4
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff fcb2 	bl	80013f2 <recv>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <recv_write_single_coil_res+0x42>
        return err;
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	e024      	b.n	8001aea <recv_write_single_coil_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff fb15 	bl	80010d0 <get_2>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	81bb      	strh	r3, [r7, #12]
    uint16_t value_res = get_2(nmbs);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fb10 	bl	80010d0 <get_2>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	817b      	strh	r3, [r7, #10]

    NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value_res);

    err = recv_msg_footer(nmbs);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff fcf8 	bl	80014aa <recv_msg_footer>
 8001aba:	4603      	mov	r3, r0
 8001abc:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8001abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <recv_write_single_coil_res+0x6e>
        return err;
 8001ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aca:	e00e      	b.n	8001aea <recv_write_single_coil_res+0x8c>

    if (address_res != address)
 8001acc:	89ba      	ldrh	r2, [r7, #12]
 8001ace:	887b      	ldrh	r3, [r7, #2]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d002      	beq.n	8001ada <recv_write_single_coil_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 8001ad4:	f06f 0301 	mvn.w	r3, #1
 8001ad8:	e007      	b.n	8001aea <recv_write_single_coil_res+0x8c>

    if (value_res != value_req)
 8001ada:	897a      	ldrh	r2, [r7, #10]
 8001adc:	883b      	ldrh	r3, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d002      	beq.n	8001ae8 <recv_write_single_coil_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 8001ae2:	f06f 0301 	mvn.w	r3, #1
 8001ae6:	e000      	b.n	8001aea <recv_write_single_coil_res+0x8c>

    return NMBS_ERROR_NONE;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <recv_write_single_register_res>:


nmbs_error recv_write_single_register_res(nmbs_t* nmbs, uint16_t address, uint16_t value_req) {
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b084      	sub	sp, #16
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	807b      	strh	r3, [r7, #2]
 8001afe:	4613      	mov	r3, r2
 8001b00:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fe6e 	bl	80017e4 <recv_res_header>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8001b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <recv_write_single_register_res+0x28>
        return err;
 8001b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b18:	e031      	b.n	8001b7e <recv_write_single_register_res+0x8c>

    err = recv(nmbs, 4);
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff fc68 	bl	80013f2 <recv>
 8001b22:	4603      	mov	r3, r0
 8001b24:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <recv_write_single_register_res+0x42>
        return err;
 8001b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b32:	e024      	b.n	8001b7e <recv_write_single_register_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff facb 	bl	80010d0 <get_2>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	81bb      	strh	r3, [r7, #12]
    uint16_t value_res = get_2(nmbs);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff fac6 	bl	80010d0 <get_2>
 8001b44:	4603      	mov	r3, r0
 8001b46:	817b      	strh	r3, [r7, #10]
    NMBS_DEBUG_PRINT("a %d\tvalue %d ", address, value_res);

    err = recv_msg_footer(nmbs);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff fcae 	bl	80014aa <recv_msg_footer>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8001b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <recv_write_single_register_res+0x6e>
        return err;
 8001b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5e:	e00e      	b.n	8001b7e <recv_write_single_register_res+0x8c>

    if (address_res != address)
 8001b60:	89ba      	ldrh	r2, [r7, #12]
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d002      	beq.n	8001b6e <recv_write_single_register_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 8001b68:	f06f 0301 	mvn.w	r3, #1
 8001b6c:	e007      	b.n	8001b7e <recv_write_single_register_res+0x8c>

    if (value_res != value_req)
 8001b6e:	897a      	ldrh	r2, [r7, #10]
 8001b70:	883b      	ldrh	r3, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d002      	beq.n	8001b7c <recv_write_single_register_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 8001b76:	f06f 0301 	mvn.w	r3, #1
 8001b7a:	e000      	b.n	8001b7e <recv_write_single_register_res+0x8c>

    return NMBS_ERROR_NONE;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <recv_write_multiple_coils_res>:


nmbs_error recv_write_multiple_coils_res(nmbs_t* nmbs, uint16_t address, uint16_t quantity) {
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	807b      	strh	r3, [r7, #2]
 8001b92:	4613      	mov	r3, r2
 8001b94:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fe24 	bl	80017e4 <recv_res_header>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8001ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <recv_write_multiple_coils_res+0x28>
        return err;
 8001ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bac:	e031      	b.n	8001c12 <recv_write_multiple_coils_res+0x8c>

    err = recv(nmbs, 4);
 8001bae:	2104      	movs	r1, #4
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff fc1e 	bl	80013f2 <recv>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8001bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <recv_write_multiple_coils_res+0x42>
        return err;
 8001bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc6:	e024      	b.n	8001c12 <recv_write_multiple_coils_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fa81 	bl	80010d0 <get_2>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	81bb      	strh	r3, [r7, #12]
    uint16_t quantity_res = get_2(nmbs);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fa7c 	bl	80010d0 <get_2>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	817b      	strh	r3, [r7, #10]
    NMBS_DEBUG_PRINT("a %d\tq %d", address_res, quantity_res);

    err = recv_msg_footer(nmbs);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff fc64 	bl	80014aa <recv_msg_footer>
 8001be2:	4603      	mov	r3, r0
 8001be4:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8001be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <recv_write_multiple_coils_res+0x6e>
        return err;
 8001bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf2:	e00e      	b.n	8001c12 <recv_write_multiple_coils_res+0x8c>

    if (address_res != address)
 8001bf4:	89ba      	ldrh	r2, [r7, #12]
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d002      	beq.n	8001c02 <recv_write_multiple_coils_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 8001bfc:	f06f 0301 	mvn.w	r3, #1
 8001c00:	e007      	b.n	8001c12 <recv_write_multiple_coils_res+0x8c>

    if (quantity_res != quantity)
 8001c02:	897a      	ldrh	r2, [r7, #10]
 8001c04:	883b      	ldrh	r3, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d002      	beq.n	8001c10 <recv_write_multiple_coils_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 8001c0a:	f06f 0301 	mvn.w	r3, #1
 8001c0e:	e000      	b.n	8001c12 <recv_write_multiple_coils_res+0x8c>

    return NMBS_ERROR_NONE;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <recv_write_multiple_registers_res>:


nmbs_error recv_write_multiple_registers_res(nmbs_t* nmbs, uint16_t address, uint16_t quantity) {
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	807b      	strh	r3, [r7, #2]
 8001c26:	4613      	mov	r3, r2
 8001c28:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff fdda 	bl	80017e4 <recv_res_header>
 8001c30:	4603      	mov	r3, r0
 8001c32:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8001c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <recv_write_multiple_registers_res+0x28>
        return err;
 8001c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c40:	e031      	b.n	8001ca6 <recv_write_multiple_registers_res+0x8c>

    err = recv(nmbs, 4);
 8001c42:	2104      	movs	r1, #4
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fbd4 	bl	80013f2 <recv>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8001c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <recv_write_multiple_registers_res+0x42>
        return err;
 8001c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5a:	e024      	b.n	8001ca6 <recv_write_multiple_registers_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fa37 	bl	80010d0 <get_2>
 8001c62:	4603      	mov	r3, r0
 8001c64:	81bb      	strh	r3, [r7, #12]
    uint16_t quantity_res = get_2(nmbs);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff fa32 	bl	80010d0 <get_2>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	817b      	strh	r3, [r7, #10]
    NMBS_DEBUG_PRINT("a %d\tq %d", address_res, quantity_res);

    err = recv_msg_footer(nmbs);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff fc1a 	bl	80014aa <recv_msg_footer>
 8001c76:	4603      	mov	r3, r0
 8001c78:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8001c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <recv_write_multiple_registers_res+0x6e>
        return err;
 8001c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c86:	e00e      	b.n	8001ca6 <recv_write_multiple_registers_res+0x8c>

    if (address_res != address)
 8001c88:	89ba      	ldrh	r2, [r7, #12]
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d002      	beq.n	8001c96 <recv_write_multiple_registers_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 8001c90:	f06f 0301 	mvn.w	r3, #1
 8001c94:	e007      	b.n	8001ca6 <recv_write_multiple_registers_res+0x8c>

    if (quantity_res != quantity)
 8001c96:	897a      	ldrh	r2, [r7, #10]
 8001c98:	883b      	ldrh	r3, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d002      	beq.n	8001ca4 <recv_write_multiple_registers_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 8001c9e:	f06f 0301 	mvn.w	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <recv_write_multiple_registers_res+0x8c>

    return NMBS_ERROR_NONE;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <recv_read_file_record_res>:


nmbs_error recv_read_file_record_res(nmbs_t* nmbs, uint16_t* registers, uint16_t count) {
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	80fb      	strh	r3, [r7, #6]
    nmbs_error err = recv_res_header(nmbs);
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f7ff fd91 	bl	80017e4 <recv_res_header>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	75fb      	strb	r3, [r7, #23]
    if (err != NMBS_ERROR_NONE)
 8001cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <recv_read_file_record_res+0x26>
        return err;
 8001cce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cd2:	e060      	b.n	8001d96 <recv_read_file_record_res+0xe8>

    err = recv(nmbs, 1);
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f7ff fb8b 	bl	80013f2 <recv>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	75fb      	strb	r3, [r7, #23]
    if (err != NMBS_ERROR_NONE)
 8001ce0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <recv_read_file_record_res+0x40>
        return err;
 8001ce8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cec:	e053      	b.n	8001d96 <recv_read_file_record_res+0xe8>

    uint8_t response_size = get_1(nmbs);
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f7ff f996 	bl	8001020 <get_1>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	75bb      	strb	r3, [r7, #22]

    err = recv(nmbs, response_size);
 8001cf8:	7dbb      	ldrb	r3, [r7, #22]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f7ff fb77 	bl	80013f2 <recv>
 8001d04:	4603      	mov	r3, r0
 8001d06:	75fb      	strb	r3, [r7, #23]
    if (err != NMBS_ERROR_NONE)
 8001d08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <recv_read_file_record_res+0x68>
        return err;
 8001d10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d14:	e03f      	b.n	8001d96 <recv_read_file_record_res+0xe8>

    uint8_t subreq_data_size = get_1(nmbs) - 1;
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f7ff f982 	bl	8001020 <get_1>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	757b      	strb	r3, [r7, #21]
    uint8_t subreq_reference_type = get_1(nmbs);
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7ff f97c 	bl	8001020 <get_1>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	753b      	strb	r3, [r7, #20]
    uint16_t* subreq_record_data = (uint16_t*) get_n(nmbs, subreq_data_size);
 8001d2c:	7d7b      	ldrb	r3, [r7, #21]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	4619      	mov	r1, r3
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f7ff fa15 	bl	8001162 <get_n>
 8001d38:	6138      	str	r0, [r7, #16]

    err = recv_msg_footer(nmbs);
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f7ff fbb5 	bl	80014aa <recv_msg_footer>
 8001d40:	4603      	mov	r3, r0
 8001d42:	75fb      	strb	r3, [r7, #23]
    if (err != NMBS_ERROR_NONE)
 8001d44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <recv_read_file_record_res+0xa4>
        return err;
 8001d4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d50:	e021      	b.n	8001d96 <recv_read_file_record_res+0xe8>

    if (registers) {
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d01d      	beq.n	8001d94 <recv_read_file_record_res+0xe6>
        if (subreq_reference_type != 6)
 8001d58:	7d3b      	ldrb	r3, [r7, #20]
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d002      	beq.n	8001d64 <recv_read_file_record_res+0xb6>
            return NMBS_ERROR_INVALID_RESPONSE;
 8001d5e:	f06f 0301 	mvn.w	r3, #1
 8001d62:	e018      	b.n	8001d96 <recv_read_file_record_res+0xe8>

        if (count != (subreq_data_size / 2))
 8001d64:	7d7b      	ldrb	r3, [r7, #21]
 8001d66:	085b      	lsrs	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	88fa      	ldrh	r2, [r7, #6]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d002      	beq.n	8001d78 <recv_read_file_record_res+0xca>
            return NMBS_ERROR_INVALID_RESPONSE;
 8001d72:	f06f 0301 	mvn.w	r3, #1
 8001d76:	e00e      	b.n	8001d96 <recv_read_file_record_res+0xe8>

        swap_regs(subreq_record_data, subreq_data_size / 2);
 8001d78:	7d7b      	ldrb	r3, [r7, #21]
 8001d7a:	085b      	lsrs	r3, r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4619      	mov	r1, r3
 8001d82:	6938      	ldr	r0, [r7, #16]
 8001d84:	f7ff fa42 	bl	800120c <swap_regs>
        memcpy(registers, subreq_record_data, subreq_data_size);
 8001d88:	7d7b      	ldrb	r3, [r7, #21]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	6939      	ldr	r1, [r7, #16]
 8001d8e:	68b8      	ldr	r0, [r7, #8]
 8001d90:	f004 f827 	bl	8005de2 <memcpy>
    }

    return NMBS_ERROR_NONE;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <recv_write_file_record_res>:


nmbs_error recv_write_file_record_res(nmbs_t* nmbs, uint16_t file_number, uint16_t record_number,
                                      const uint16_t* registers, uint16_t count) {
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b088      	sub	sp, #32
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	817b      	strh	r3, [r7, #10]
 8001dac:	4613      	mov	r3, r2
 8001dae:	813b      	strh	r3, [r7, #8]
    nmbs_error err = recv_res_header(nmbs);
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f7ff fd17 	bl	80017e4 <recv_res_header>
 8001db6:	4603      	mov	r3, r0
 8001db8:	77fb      	strb	r3, [r7, #31]
    if (err != NMBS_ERROR_NONE)
 8001dba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <recv_write_file_record_res+0x2a>
        return err;
 8001dc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001dc6:	e079      	b.n	8001ebc <recv_write_file_record_res+0x11e>

    err = recv(nmbs, 1);
 8001dc8:	2101      	movs	r1, #1
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff fb11 	bl	80013f2 <recv>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	77fb      	strb	r3, [r7, #31]
    if (err != NMBS_ERROR_NONE)
 8001dd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <recv_write_file_record_res+0x44>
        return err;
 8001ddc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001de0:	e06c      	b.n	8001ebc <recv_write_file_record_res+0x11e>

    uint8_t response_size = get_1(nmbs);
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f7ff f91c 	bl	8001020 <get_1>
 8001de8:	4603      	mov	r3, r0
 8001dea:	77bb      	strb	r3, [r7, #30]

    err = recv(nmbs, response_size);
 8001dec:	7fbb      	ldrb	r3, [r7, #30]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	4619      	mov	r1, r3
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f7ff fafd 	bl	80013f2 <recv>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	77fb      	strb	r3, [r7, #31]
    if (err != NMBS_ERROR_NONE)
 8001dfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <recv_write_file_record_res+0x6c>
        return err;
 8001e04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e08:	e058      	b.n	8001ebc <recv_write_file_record_res+0x11e>

    uint8_t subreq_reference_type = get_1(nmbs);
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f7ff f908 	bl	8001020 <get_1>
 8001e10:	4603      	mov	r3, r0
 8001e12:	777b      	strb	r3, [r7, #29]
    uint16_t subreq_file_number = get_2(nmbs);
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f7ff f95b 	bl	80010d0 <get_2>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	837b      	strh	r3, [r7, #26]
    uint16_t subreq_record_number = get_2(nmbs);
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f7ff f956 	bl	80010d0 <get_2>
 8001e24:	4603      	mov	r3, r0
 8001e26:	833b      	strh	r3, [r7, #24]
    uint16_t subreq_record_length = get_2(nmbs);
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f7ff f951 	bl	80010d0 <get_2>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	82fb      	strh	r3, [r7, #22]
    NMBS_DEBUG_PRINT("a %d\tr %d\tl %d\t fwrite ", subreq_file_number, subreq_record_number, subreq_record_length);

    uint16_t subreq_data_size = subreq_record_length * 2;
 8001e32:	8afb      	ldrh	r3, [r7, #22]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	82bb      	strh	r3, [r7, #20]
    uint16_t* subreq_record_data = (uint16_t*) get_n(nmbs, subreq_data_size);
 8001e38:	8abb      	ldrh	r3, [r7, #20]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7ff f990 	bl	8001162 <get_n>
 8001e42:	6138      	str	r0, [r7, #16]

    err = recv_msg_footer(nmbs);
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f7ff fb30 	bl	80014aa <recv_msg_footer>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	77fb      	strb	r3, [r7, #31]
    if (err != NMBS_ERROR_NONE)
 8001e4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <recv_write_file_record_res+0xbe>
        return err;
 8001e56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e5a:	e02f      	b.n	8001ebc <recv_write_file_record_res+0x11e>

    if (registers) {
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d02b      	beq.n	8001eba <recv_write_file_record_res+0x11c>
        if (subreq_reference_type != 6)
 8001e62:	7f7b      	ldrb	r3, [r7, #29]
 8001e64:	2b06      	cmp	r3, #6
 8001e66:	d002      	beq.n	8001e6e <recv_write_file_record_res+0xd0>
            return NMBS_ERROR_INVALID_RESPONSE;
 8001e68:	f06f 0301 	mvn.w	r3, #1
 8001e6c:	e026      	b.n	8001ebc <recv_write_file_record_res+0x11e>

        if (subreq_file_number != file_number)
 8001e6e:	8b7a      	ldrh	r2, [r7, #26]
 8001e70:	897b      	ldrh	r3, [r7, #10]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d002      	beq.n	8001e7c <recv_write_file_record_res+0xde>
            return NMBS_ERROR_INVALID_RESPONSE;
 8001e76:	f06f 0301 	mvn.w	r3, #1
 8001e7a:	e01f      	b.n	8001ebc <recv_write_file_record_res+0x11e>

        if (subreq_record_number != record_number)
 8001e7c:	8b3a      	ldrh	r2, [r7, #24]
 8001e7e:	893b      	ldrh	r3, [r7, #8]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d002      	beq.n	8001e8a <recv_write_file_record_res+0xec>
            return NMBS_ERROR_INVALID_RESPONSE;
 8001e84:	f06f 0301 	mvn.w	r3, #1
 8001e88:	e018      	b.n	8001ebc <recv_write_file_record_res+0x11e>

        if (subreq_record_length != count)
 8001e8a:	8afa      	ldrh	r2, [r7, #22]
 8001e8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d002      	beq.n	8001e98 <recv_write_file_record_res+0xfa>
            return NMBS_ERROR_INVALID_RESPONSE;
 8001e92:	f06f 0301 	mvn.w	r3, #1
 8001e96:	e011      	b.n	8001ebc <recv_write_file_record_res+0x11e>

        swap_regs(subreq_record_data, subreq_record_length);
 8001e98:	8afb      	ldrh	r3, [r7, #22]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	6938      	ldr	r0, [r7, #16]
 8001e9e:	f7ff f9b5 	bl	800120c <swap_regs>
        if (memcmp(registers, subreq_record_data, subreq_data_size) != 0)
 8001ea2:	8abb      	ldrh	r3, [r7, #20]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6939      	ldr	r1, [r7, #16]
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f003 feff 	bl	8005cac <memcmp>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <recv_write_file_record_res+0x11c>
            return NMBS_ERROR_INVALID_RESPONSE;
 8001eb4:	f06f 0301 	mvn.w	r3, #1
 8001eb8:	e000      	b.n	8001ebc <recv_write_file_record_res+0x11e>
    }

    return NMBS_ERROR_NONE;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3720      	adds	r7, #32
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <handle_read_discrete>:


#ifndef NMBS_SERVER_DISABLED
#if !defined(NMBS_SERVER_READ_COILS_DISABLED) || !defined(NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED)
static nmbs_error handle_read_discrete(nmbs_t* nmbs,
                                       nmbs_error (*callback)(uint16_t, uint16_t, nmbs_bitfield, uint8_t, void*)) {
 8001ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec6:	b0c7      	sub	sp, #284	; 0x11c
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ece:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ed2:	6018      	str	r0, [r3, #0]
 8001ed4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ed8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001edc:	6019      	str	r1, [r3, #0]
    nmbs_error err = recv(nmbs, 4);
 8001ede:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ee2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	f7ff fa82 	bl	80013f2 <recv>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8001ef4:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <handle_read_discrete+0x3e>
        return err;
 8001efc:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8001f00:	e11d      	b.n	800213e <handle_read_discrete+0x27a>

    uint16_t address = get_2(nmbs);
 8001f02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	f7ff f8e0 	bl	80010d0 <get_2>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 8001f16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	f7ff f8d6 	bl	80010d0 <get_2>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

    err = recv_msg_footer(nmbs);
 8001f2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	f7ff fab9 	bl	80014aa <recv_msg_footer>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8001f3e:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <handle_read_discrete+0x88>
        return err;
 8001f46:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8001f4a:	e0f8      	b.n	800213e <handle_read_discrete+0x27a>

    if (!nmbs->msg.ignored) {
 8001f4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8001f5a:	f083 0301 	eor.w	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80e1 	beq.w	8002128 <handle_read_discrete+0x264>
        if (quantity < 1 || quantity > 2000)
 8001f66:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d004      	beq.n	8001f78 <handle_read_discrete+0xb4>
 8001f6e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8001f72:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f76:	d909      	bls.n	8001f8c <handle_read_discrete+0xc8>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8001f78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f80:	2103      	movs	r1, #3
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	f7ff fc0f 	bl	80017a6 <send_exception_msg>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	e0d8      	b.n	800213e <handle_read_discrete+0x27a>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8001f8c:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8001f90:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8001f94:	4413      	add	r3, r2
 8001f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9a:	d909      	bls.n	8001fb0 <handle_read_discrete+0xec>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8001f9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001fa0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	f7ff fbfd 	bl	80017a6 <send_exception_msg>
 8001fac:	4603      	mov	r3, r0
 8001fae:	e0c6      	b.n	800213e <handle_read_discrete+0x27a>

        if (callback) {
 8001fb0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001fb4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80aa 	beq.w	8002114 <handle_read_discrete+0x250>
            nmbs_bitfield bitfield = {0};
 8001fc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	22f6      	movs	r2, #246	; 0xf6
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 fe7a 	bl	8005ccc <memset>
            err = callback(address, quantity, bitfield, nmbs->msg.unit_id, nmbs->platform.arg);
 8001fd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001fdc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f893 6106 	ldrb.w	r6, [r3, #262]	; 0x106
 8001fe6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001fea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001ff4:	f107 0508 	add.w	r5, r7, #8
 8001ff8:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8001ffc:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 8002000:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002004:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002008:	9200      	str	r2, [sp, #0]
 800200a:	681c      	ldr	r4, [r3, #0]
 800200c:	4633      	mov	r3, r6
 800200e:	462a      	mov	r2, r5
 8002010:	47a0      	blx	r4
 8002012:	4603      	mov	r3, r0
 8002014:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 8002018:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01d      	beq.n	800205c <handle_read_discrete+0x198>
                if (nmbs_error_is_exception(err))
 8002020:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002024:	2b00      	cmp	r3, #0
 8002026:	dd0f      	ble.n	8002048 <handle_read_discrete+0x184>
 8002028:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800202c:	2b04      	cmp	r3, #4
 800202e:	dc0b      	bgt.n	8002048 <handle_read_discrete+0x184>
                    return send_exception_msg(nmbs, err);
 8002030:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8002034:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002038:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800203c:	4611      	mov	r1, r2
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	f7ff fbb1 	bl	80017a6 <send_exception_msg>
 8002044:	4603      	mov	r3, r0
 8002046:	e07a      	b.n	800213e <handle_read_discrete+0x27a>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8002048:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800204c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002050:	2104      	movs	r1, #4
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	f7ff fba7 	bl	80017a6 <send_exception_msg>
 8002058:	4603      	mov	r3, r0
 800205a:	e070      	b.n	800213e <handle_read_discrete+0x27a>
            }

            if (!nmbs->msg.broadcast) {
 800205c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002060:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 800206a:	f083 0301 	eor.w	r3, r3, #1
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d063      	beq.n	800213c <handle_read_discrete+0x278>
                uint8_t discrete_bytes = (quantity + 7) / 8;
 8002074:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002078:	3307      	adds	r3, #7
 800207a:	2b00      	cmp	r3, #0
 800207c:	da00      	bge.n	8002080 <handle_read_discrete+0x1bc>
 800207e:	3307      	adds	r3, #7
 8002080:	10db      	asrs	r3, r3, #3
 8002082:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
                put_res_header(nmbs, 1 + discrete_bytes);
 8002086:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800208a:	b29b      	uxth	r3, r3
 800208c:	3301      	adds	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002094:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002098:	4611      	mov	r1, r2
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	f7ff fb74 	bl	8001788 <put_res_header>

                put_1(nmbs, discrete_bytes);
 80020a0:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 80020a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020ac:	4611      	mov	r1, r2
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	f7fe ffcf 	bl	8001052 <put_1>

                NMBS_DEBUG_PRINT("b %d\t", discrete_bytes);

                NMBS_DEBUG_PRINT("coils ");
                for (int i = 0; i < discrete_bytes; i++) {
 80020b4:	2300      	movs	r3, #0
 80020b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80020ba:	e014      	b.n	80020e6 <handle_read_discrete+0x222>
                    put_1(nmbs, bitfield[i]);
 80020bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020c0:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80020c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80020c8:	4413      	add	r3, r2
 80020ca:	781a      	ldrb	r2, [r3, #0]
 80020cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020d4:	4611      	mov	r1, r2
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	f7fe ffbb 	bl	8001052 <put_1>
                for (int i = 0; i < discrete_bytes; i++) {
 80020dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80020e0:	3301      	adds	r3, #1
 80020e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80020e6:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80020ea:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80020ee:	429a      	cmp	r2, r3
 80020f0:	dbe4      	blt.n	80020bc <handle_read_discrete+0x1f8>
                    NMBS_DEBUG_PRINT("%d ", bitfield[i]);
                }

                err = send_msg(nmbs);
 80020f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	f7ff faf0 	bl	80016e0 <send_msg>
 8002100:	4603      	mov	r3, r0
 8002102:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 8002106:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800210a:	2b00      	cmp	r3, #0
 800210c:	d016      	beq.n	800213c <handle_read_discrete+0x278>
                    return err;
 800210e:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002112:	e014      	b.n	800213e <handle_read_discrete+0x27a>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8002114:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002118:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800211c:	2101      	movs	r1, #1
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	f7ff fb41 	bl	80017a6 <send_exception_msg>
 8002124:	4603      	mov	r3, r0
 8002126:	e00a      	b.n	800213e <handle_read_discrete+0x27a>
        }
    }
    else {
        return recv_read_discrete_res(nmbs, NULL);
 8002128:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800212c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002130:	2100      	movs	r1, #0
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	f7ff fbd1 	bl	80018da <recv_read_discrete_res>
 8002138:	4603      	mov	r3, r0
 800213a:	e000      	b.n	800213e <handle_read_discrete+0x27a>
    }

    return NMBS_ERROR_NONE;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002144:	46bd      	mov	sp, r7
 8002146:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002148 <handle_read_registers>:
#endif


#if !defined(NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED) || !defined(NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED)
static nmbs_error handle_read_registers(nmbs_t* nmbs,
                                        nmbs_error (*callback)(uint16_t, uint16_t, uint16_t*, uint8_t, void*)) {
 8002148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800214a:	b0c7      	sub	sp, #284	; 0x11c
 800214c:	af02      	add	r7, sp, #8
 800214e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002152:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002156:	6018      	str	r0, [r3, #0]
 8002158:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800215c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002160:	6019      	str	r1, [r3, #0]
    nmbs_error err = recv(nmbs, 4);
 8002162:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002166:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800216a:	2104      	movs	r1, #4
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	f7ff f940 	bl	80013f2 <recv>
 8002172:	4603      	mov	r3, r0
 8002174:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8002178:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <handle_read_registers+0x3e>
        return err;
 8002180:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002184:	e119      	b.n	80023ba <handle_read_registers+0x272>

    uint16_t address = get_2(nmbs);
 8002186:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800218a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	f7fe ff9e 	bl	80010d0 <get_2>
 8002194:	4603      	mov	r3, r0
 8002196:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 800219a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800219e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	f7fe ff94 	bl	80010d0 <get_2>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

    err = recv_msg_footer(nmbs);
 80021ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	f7ff f977 	bl	80014aa <recv_msg_footer>
 80021bc:	4603      	mov	r3, r0
 80021be:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 80021c2:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <handle_read_registers+0x88>
        return err;
 80021ca:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80021ce:	e0f4      	b.n	80023ba <handle_read_registers+0x272>

    if (!nmbs->msg.ignored) {
 80021d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80021de:	f083 0301 	eor.w	r3, r3, #1
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80db 	beq.w	80023a0 <handle_read_registers+0x258>
        if (quantity < 1 || quantity > 125)
 80021ea:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <handle_read_registers+0xb2>
 80021f2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80021f6:	2b7d      	cmp	r3, #125	; 0x7d
 80021f8:	d909      	bls.n	800220e <handle_read_registers+0xc6>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80021fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002202:	2103      	movs	r1, #3
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	f7ff face 	bl	80017a6 <send_exception_msg>
 800220a:	4603      	mov	r3, r0
 800220c:	e0d5      	b.n	80023ba <handle_read_registers+0x272>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 800220e:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8002212:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002216:	4413      	add	r3, r2
 8002218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221c:	d909      	bls.n	8002232 <handle_read_registers+0xea>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 800221e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002222:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002226:	2102      	movs	r1, #2
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	f7ff fabc 	bl	80017a6 <send_exception_msg>
 800222e:	4603      	mov	r3, r0
 8002230:	e0c3      	b.n	80023ba <handle_read_registers+0x272>

        if (callback) {
 8002232:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002236:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80a5 	beq.w	800238c <handle_read_registers+0x244>
            uint16_t regs[125] = {0};
 8002242:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800224a:	4618      	mov	r0, r3
 800224c:	23fa      	movs	r3, #250	; 0xfa
 800224e:	461a      	mov	r2, r3
 8002250:	2100      	movs	r1, #0
 8002252:	f003 fd3b 	bl	8005ccc <memset>
            err = callback(address, quantity, regs, nmbs->msg.unit_id, nmbs->platform.arg);
 8002256:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800225a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f893 6106 	ldrb.w	r6, [r3, #262]	; 0x106
 8002264:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002268:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8002272:	f107 0508 	add.w	r5, r7, #8
 8002276:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 800227a:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 800227e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002282:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002286:	9200      	str	r2, [sp, #0]
 8002288:	681c      	ldr	r4, [r3, #0]
 800228a:	4633      	mov	r3, r6
 800228c:	462a      	mov	r2, r5
 800228e:	47a0      	blx	r4
 8002290:	4603      	mov	r3, r0
 8002292:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 8002296:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800229a:	2b00      	cmp	r3, #0
 800229c:	d01d      	beq.n	80022da <handle_read_registers+0x192>
                if (nmbs_error_is_exception(err))
 800229e:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	dd0f      	ble.n	80022c6 <handle_read_registers+0x17e>
 80022a6:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	dc0b      	bgt.n	80022c6 <handle_read_registers+0x17e>
                    return send_exception_msg(nmbs, err);
 80022ae:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 80022b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022ba:	4611      	mov	r1, r2
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	f7ff fa72 	bl	80017a6 <send_exception_msg>
 80022c2:	4603      	mov	r3, r0
 80022c4:	e079      	b.n	80023ba <handle_read_registers+0x272>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80022c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022ce:	2104      	movs	r1, #4
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	f7ff fa68 	bl	80017a6 <send_exception_msg>
 80022d6:	4603      	mov	r3, r0
 80022d8:	e06f      	b.n	80023ba <handle_read_registers+0x272>
            }

            if (!nmbs->msg.broadcast) {
 80022da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80022e8:	f083 0301 	eor.w	r3, r3, #1
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d062      	beq.n	80023b8 <handle_read_registers+0x270>
                uint8_t regs_bytes = quantity * 2;
 80022f2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
                put_res_header(nmbs, 1 + regs_bytes);
 80022fe:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002302:	b29b      	uxth	r3, r3
 8002304:	3301      	adds	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800230c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002310:	4611      	mov	r1, r2
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	f7ff fa38 	bl	8001788 <put_res_header>

                put_1(nmbs, regs_bytes);
 8002318:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 800231c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002320:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002324:	4611      	mov	r1, r2
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	f7fe fe93 	bl	8001052 <put_1>

                NMBS_DEBUG_PRINT("b %d\t", regs_bytes);

                NMBS_DEBUG_PRINT("regs ");
                for (int i = 0; i < quantity; i++) {
 800232c:	2300      	movs	r3, #0
 800232e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002332:	e014      	b.n	800235e <handle_read_registers+0x216>
                    put_2(nmbs, regs[i]);
 8002334:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800233c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002340:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002344:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002348:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800234c:	4611      	mov	r1, r2
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	f7fe fee2 	bl	8001118 <put_2>
                for (int i = 0; i < quantity; i++) {
 8002354:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002358:	3301      	adds	r3, #1
 800235a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800235e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002362:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002366:	429a      	cmp	r2, r3
 8002368:	dbe4      	blt.n	8002334 <handle_read_registers+0x1ec>
                    NMBS_DEBUG_PRINT("%d ", regs[i]);
                }

                err = send_msg(nmbs);
 800236a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800236e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	f7ff f9b4 	bl	80016e0 <send_msg>
 8002378:	4603      	mov	r3, r0
 800237a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 800237e:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002382:	2b00      	cmp	r3, #0
 8002384:	d018      	beq.n	80023b8 <handle_read_registers+0x270>
                    return err;
 8002386:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800238a:	e016      	b.n	80023ba <handle_read_registers+0x272>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 800238c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002390:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002394:	2101      	movs	r1, #1
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	f7ff fa05 	bl	80017a6 <send_exception_msg>
 800239c:	4603      	mov	r3, r0
 800239e:	e00c      	b.n	80023ba <handle_read_registers+0x272>
        }
    }
    else {
        return recv_read_registers_res(nmbs, quantity, NULL);
 80023a0:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 80023a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023ac:	2200      	movs	r2, #0
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	f7ff faed 	bl	800198e <recv_read_registers_res>
 80023b4:	4603      	mov	r3, r0
 80023b6:	e000      	b.n	80023ba <handle_read_registers+0x272>
    }

    return NMBS_ERROR_NONE;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023c4 <handle_read_coils>:
#endif


#ifndef NMBS_SERVER_READ_COILS_DISABLED
static nmbs_error handle_read_coils(nmbs_t* nmbs) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
    return handle_read_discrete(nmbs, nmbs->callbacks.read_coils);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80023d2:	4619      	mov	r1, r3
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff fd75 	bl	8001ec4 <handle_read_discrete>
 80023da:	4603      	mov	r3, r0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <handle_read_discrete_inputs>:
#endif


#ifndef NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED
static nmbs_error handle_read_discrete_inputs(nmbs_t* nmbs) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
    return handle_read_discrete(nmbs, nmbs->callbacks.read_discrete_inputs);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80023f2:	4619      	mov	r1, r3
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff fd65 	bl	8001ec4 <handle_read_discrete>
 80023fa:	4603      	mov	r3, r0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <handle_read_holding_registers>:
#endif


#ifndef NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED
static nmbs_error handle_read_holding_registers(nmbs_t* nmbs) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
    return handle_read_registers(nmbs, nmbs->callbacks.read_holding_registers);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002412:	4619      	mov	r1, r3
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff fe97 	bl	8002148 <handle_read_registers>
 800241a:	4603      	mov	r3, r0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <handle_read_input_registers>:
#endif


#ifndef NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED
static nmbs_error handle_read_input_registers(nmbs_t* nmbs) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
    return handle_read_registers(nmbs, nmbs->callbacks.read_input_registers);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002432:	4619      	mov	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff fe87 	bl	8002148 <handle_read_registers>
 800243a:	4603      	mov	r3, r0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <handle_write_single_coil>:
#endif


#ifndef NMBS_SERVER_WRITE_SINGLE_COIL_DISABLED
static nmbs_error handle_write_single_coil(nmbs_t* nmbs) {
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
    nmbs_error err = recv(nmbs, 4);
 800244c:	2104      	movs	r1, #4
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fe ffcf 	bl	80013f2 <recv>
 8002454:	4603      	mov	r3, r0
 8002456:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8002458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <handle_write_single_coil+0x22>
        return err;
 8002460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002464:	e08c      	b.n	8002580 <handle_write_single_coil+0x13c>

    uint16_t address = get_2(nmbs);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe fe32 	bl	80010d0 <get_2>
 800246c:	4603      	mov	r3, r0
 800246e:	81bb      	strh	r3, [r7, #12]
    uint16_t value = get_2(nmbs);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7fe fe2d 	bl	80010d0 <get_2>
 8002476:	4603      	mov	r3, r0
 8002478:	817b      	strh	r3, [r7, #10]

    NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

    err = recv_msg_footer(nmbs);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff f815 	bl	80014aa <recv_msg_footer>
 8002480:	4603      	mov	r3, r0
 8002482:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8002484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <handle_write_single_coil+0x4e>
        return err;
 800248c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002490:	e076      	b.n	8002580 <handle_write_single_coil+0x13c>

    if (!nmbs->msg.ignored) {
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8002498:	f083 0301 	eor.w	r3, r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d065      	beq.n	800256e <handle_write_single_coil+0x12a>
        if (nmbs->callbacks.write_single_coil) {
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d05a      	beq.n	8002562 <handle_write_single_coil+0x11e>
            if (value != 0 && value != 0xFF00)
 80024ac:	897b      	ldrh	r3, [r7, #10]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <handle_write_single_coil+0x82>
 80024b2:	897b      	ldrh	r3, [r7, #10]
 80024b4:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80024b8:	d005      	beq.n	80024c6 <handle_write_single_coil+0x82>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80024ba:	2103      	movs	r1, #3
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff f972 	bl	80017a6 <send_exception_msg>
 80024c2:	4603      	mov	r3, r0
 80024c4:	e05c      	b.n	8002580 <handle_write_single_coil+0x13c>

            err = nmbs->callbacks.write_single_coil(address, value == 0 ? false : true, nmbs->msg.unit_id,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
 80024cc:	897b      	ldrh	r3, [r7, #10]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	bf14      	ite	ne
 80024d2:	2301      	movne	r3, #1
 80024d4:	2300      	moveq	r3, #0
 80024d6:	b2d9      	uxtb	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80024e4:	89b8      	ldrh	r0, [r7, #12]
 80024e6:	47a0      	blx	r4
 80024e8:	4603      	mov	r3, r0
 80024ea:	73fb      	strb	r3, [r7, #15]
                                                    nmbs->platform.arg);
            if (err != NMBS_ERROR_NONE) {
 80024ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d014      	beq.n	800251e <handle_write_single_coil+0xda>
                if (nmbs_error_is_exception(err))
 80024f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	dd0a      	ble.n	8002512 <handle_write_single_coil+0xce>
 80024fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002500:	2b04      	cmp	r3, #4
 8002502:	dc06      	bgt.n	8002512 <handle_write_single_coil+0xce>
                    return send_exception_msg(nmbs, err);
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	4619      	mov	r1, r3
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff f94c 	bl	80017a6 <send_exception_msg>
 800250e:	4603      	mov	r3, r0
 8002510:	e036      	b.n	8002580 <handle_write_single_coil+0x13c>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8002512:	2104      	movs	r1, #4
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff f946 	bl	80017a6 <send_exception_msg>
 800251a:	4603      	mov	r3, r0
 800251c:	e030      	b.n	8002580 <handle_write_single_coil+0x13c>
            }

            if (!nmbs->msg.broadcast) {
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8002524:	f083 0301 	eor.w	r3, r3, #1
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d027      	beq.n	800257e <handle_write_single_coil+0x13a>
                put_res_header(nmbs, 4);
 800252e:	2104      	movs	r1, #4
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff f929 	bl	8001788 <put_res_header>

                put_2(nmbs, address);
 8002536:	89bb      	ldrh	r3, [r7, #12]
 8002538:	4619      	mov	r1, r3
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe fdec 	bl	8001118 <put_2>
                put_2(nmbs, value);
 8002540:	897b      	ldrh	r3, [r7, #10]
 8002542:	4619      	mov	r1, r3
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7fe fde7 	bl	8001118 <put_2>
                NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

                err = send_msg(nmbs);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff f8c8 	bl	80016e0 <send_msg>
 8002550:	4603      	mov	r3, r0
 8002552:	73fb      	strb	r3, [r7, #15]
                if (err != NMBS_ERROR_NONE)
 8002554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d010      	beq.n	800257e <handle_write_single_coil+0x13a>
                    return err;
 800255c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002560:	e00e      	b.n	8002580 <handle_write_single_coil+0x13c>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8002562:	2101      	movs	r1, #1
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff f91e 	bl	80017a6 <send_exception_msg>
 800256a:	4603      	mov	r3, r0
 800256c:	e008      	b.n	8002580 <handle_write_single_coil+0x13c>
        }
    }
    else {
        return recv_write_single_coil_res(nmbs, address, value);
 800256e:	897a      	ldrh	r2, [r7, #10]
 8002570:	89bb      	ldrh	r3, [r7, #12]
 8002572:	4619      	mov	r1, r3
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff fa72 	bl	8001a5e <recv_write_single_coil_res>
 800257a:	4603      	mov	r3, r0
 800257c:	e000      	b.n	8002580 <handle_write_single_coil+0x13c>
    }

    return NMBS_ERROR_NONE;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	bd90      	pop	{r4, r7, pc}

08002588 <handle_write_single_register>:
#endif


#ifndef NMBS_SERVER_WRITE_SINGLE_REGISTER_DISABLED
static nmbs_error handle_write_single_register(nmbs_t* nmbs) {
 8002588:	b590      	push	{r4, r7, lr}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
    nmbs_error err = recv(nmbs, 4);
 8002590:	2104      	movs	r1, #4
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe ff2d 	bl	80013f2 <recv>
 8002598:	4603      	mov	r3, r0
 800259a:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 800259c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <handle_write_single_register+0x22>
        return err;
 80025a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a8:	e07a      	b.n	80026a0 <handle_write_single_register+0x118>

    uint16_t address = get_2(nmbs);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fe fd90 	bl	80010d0 <get_2>
 80025b0:	4603      	mov	r3, r0
 80025b2:	81bb      	strh	r3, [r7, #12]
    uint16_t value = get_2(nmbs);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7fe fd8b 	bl	80010d0 <get_2>
 80025ba:	4603      	mov	r3, r0
 80025bc:	817b      	strh	r3, [r7, #10]

    NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

    err = recv_msg_footer(nmbs);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe ff73 	bl	80014aa <recv_msg_footer>
 80025c4:	4603      	mov	r3, r0
 80025c6:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80025c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <handle_write_single_register+0x4e>
        return err;
 80025d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d4:	e064      	b.n	80026a0 <handle_write_single_register+0x118>

    if (!nmbs->msg.ignored) {
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80025dc:	f083 0301 	eor.w	r3, r3, #1
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d053      	beq.n	800268e <handle_write_single_register+0x106>
        if (nmbs->callbacks.write_single_register) {
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d048      	beq.n	8002682 <handle_write_single_register+0xfa>
            err = nmbs->callbacks.write_single_register(address, value, nmbs->msg.unit_id, nmbs->platform.arg);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002602:	8979      	ldrh	r1, [r7, #10]
 8002604:	89b8      	ldrh	r0, [r7, #12]
 8002606:	47a0      	blx	r4
 8002608:	4603      	mov	r3, r0
 800260a:	73fb      	strb	r3, [r7, #15]
            if (err != NMBS_ERROR_NONE) {
 800260c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d014      	beq.n	800263e <handle_write_single_register+0xb6>
                if (nmbs_error_is_exception(err))
 8002614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002618:	2b00      	cmp	r3, #0
 800261a:	dd0a      	ble.n	8002632 <handle_write_single_register+0xaa>
 800261c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002620:	2b04      	cmp	r3, #4
 8002622:	dc06      	bgt.n	8002632 <handle_write_single_register+0xaa>
                    return send_exception_msg(nmbs, err);
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	4619      	mov	r1, r3
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff f8bc 	bl	80017a6 <send_exception_msg>
 800262e:	4603      	mov	r3, r0
 8002630:	e036      	b.n	80026a0 <handle_write_single_register+0x118>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8002632:	2104      	movs	r1, #4
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff f8b6 	bl	80017a6 <send_exception_msg>
 800263a:	4603      	mov	r3, r0
 800263c:	e030      	b.n	80026a0 <handle_write_single_register+0x118>
            }

            if (!nmbs->msg.broadcast) {
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8002644:	f083 0301 	eor.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d027      	beq.n	800269e <handle_write_single_register+0x116>
                put_res_header(nmbs, 4);
 800264e:	2104      	movs	r1, #4
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff f899 	bl	8001788 <put_res_header>

                put_2(nmbs, address);
 8002656:	89bb      	ldrh	r3, [r7, #12]
 8002658:	4619      	mov	r1, r3
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe fd5c 	bl	8001118 <put_2>
                put_2(nmbs, value);
 8002660:	897b      	ldrh	r3, [r7, #10]
 8002662:	4619      	mov	r1, r3
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7fe fd57 	bl	8001118 <put_2>
                NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

                err = send_msg(nmbs);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff f838 	bl	80016e0 <send_msg>
 8002670:	4603      	mov	r3, r0
 8002672:	73fb      	strb	r3, [r7, #15]
                if (err != NMBS_ERROR_NONE)
 8002674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d010      	beq.n	800269e <handle_write_single_register+0x116>
                    return err;
 800267c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002680:	e00e      	b.n	80026a0 <handle_write_single_register+0x118>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8002682:	2101      	movs	r1, #1
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff f88e 	bl	80017a6 <send_exception_msg>
 800268a:	4603      	mov	r3, r0
 800268c:	e008      	b.n	80026a0 <handle_write_single_register+0x118>
        }
    }
    else {
        return recv_write_single_register_res(nmbs, address, value);
 800268e:	897a      	ldrh	r2, [r7, #10]
 8002690:	89bb      	ldrh	r3, [r7, #12]
 8002692:	4619      	mov	r1, r3
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff fa2c 	bl	8001af2 <recv_write_single_register_res>
 800269a:	4603      	mov	r3, r0
 800269c:	e000      	b.n	80026a0 <handle_write_single_register+0x118>
    }

    return NMBS_ERROR_NONE;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd90      	pop	{r4, r7, pc}

080026a8 <handle_write_multiple_coils>:
#endif


#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
static nmbs_error handle_write_multiple_coils(nmbs_t* nmbs) {
 80026a8:	b5b0      	push	{r4, r5, r7, lr}
 80026aa:	b0c6      	sub	sp, #280	; 0x118
 80026ac:	af02      	add	r7, sp, #8
 80026ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026b6:	6018      	str	r0, [r3, #0]
    nmbs_error err = recv(nmbs, 5);
 80026b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026c0:	2105      	movs	r1, #5
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	f7fe fe95 	bl	80013f2 <recv>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 80026ce:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <handle_write_multiple_coils+0x34>
        return err;
 80026d6:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80026da:	e163      	b.n	80029a4 <handle_write_multiple_coils+0x2fc>

    uint16_t address = get_2(nmbs);
 80026dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	f7fe fcf3 	bl	80010d0 <get_2>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 80026f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	f7fe fce9 	bl	80010d0 <get_2>
 80026fe:	4603      	mov	r3, r0
 8002700:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    uint8_t coils_bytes = get_1(nmbs);
 8002704:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002708:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	f7fe fc87 	bl	8001020 <get_1>
 8002712:	4603      	mov	r3, r0
 8002714:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

    NMBS_DEBUG_PRINT("a %d\tq %d\tb %d\tcoils ", address, quantity, coils_bytes);

    err = recv(nmbs, coils_bytes);
 8002718:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800271c:	b29a      	uxth	r2, r3
 800271e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002722:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002726:	4611      	mov	r1, r2
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	f7fe fe62 	bl	80013f2 <recv>
 800272e:	4603      	mov	r3, r0
 8002730:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8002734:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <handle_write_multiple_coils+0x9a>
        return err;
 800273c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002740:	e130      	b.n	80029a4 <handle_write_multiple_coils+0x2fc>

    nmbs_bitfield coils = {0};
 8002742:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	3304      	adds	r3, #4
 8002750:	22f6      	movs	r2, #246	; 0xf6
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f003 fab9 	bl	8005ccc <memset>
    for (int i = 0; i < coils_bytes; i++) {
 800275a:	2300      	movs	r3, #0
 800275c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002760:	e016      	b.n	8002790 <handle_write_multiple_coils+0xe8>
        coils[i] = get_1(nmbs);
 8002762:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002766:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	f7fe fc58 	bl	8001020 <get_1>
 8002770:	4603      	mov	r3, r0
 8002772:	4619      	mov	r1, r3
 8002774:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002778:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800277c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002780:	4413      	add	r3, r2
 8002782:	460a      	mov	r2, r1
 8002784:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < coils_bytes; i++) {
 8002786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800278a:	3301      	adds	r3, #1
 800278c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002790:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002794:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002798:	429a      	cmp	r2, r3
 800279a:	dbe2      	blt.n	8002762 <handle_write_multiple_coils+0xba>
        NMBS_DEBUG_PRINT("%d ", coils[i]);
    }

    err = recv_msg_footer(nmbs);
 800279c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	f7fe fe80 	bl	80014aa <recv_msg_footer>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 80027b0:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <handle_write_multiple_coils+0x116>
        return err;
 80027b8:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80027bc:	e0f2      	b.n	80029a4 <handle_write_multiple_coils+0x2fc>

    if (!nmbs->msg.ignored) {
 80027be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80027cc:	f083 0301 	eor.w	r3, r3, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 80d8 	beq.w	8002988 <handle_write_multiple_coils+0x2e0>
        if (quantity < 1 || quantity > 0x07B0)
 80027d8:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <handle_write_multiple_coils+0x142>
 80027e0:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80027e4:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 80027e8:	d909      	bls.n	80027fe <handle_write_multiple_coils+0x156>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80027ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027f2:	2103      	movs	r1, #3
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	f7fe ffd6 	bl	80017a6 <send_exception_msg>
 80027fa:	4603      	mov	r3, r0
 80027fc:	e0d2      	b.n	80029a4 <handle_write_multiple_coils+0x2fc>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 80027fe:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8002802:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002806:	4413      	add	r3, r2
 8002808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280c:	d909      	bls.n	8002822 <handle_write_multiple_coils+0x17a>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 800280e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002812:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002816:	2102      	movs	r1, #2
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	f7fe ffc4 	bl	80017a6 <send_exception_msg>
 800281e:	4603      	mov	r3, r0
 8002820:	e0c0      	b.n	80029a4 <handle_write_multiple_coils+0x2fc>

        if (coils_bytes == 0)
 8002822:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <handle_write_multiple_coils+0x196>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 800282a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800282e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002832:	2103      	movs	r1, #3
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	f7fe ffb6 	bl	80017a6 <send_exception_msg>
 800283a:	4603      	mov	r3, r0
 800283c:	e0b2      	b.n	80029a4 <handle_write_multiple_coils+0x2fc>

        if ((quantity + 7) / 8 != coils_bytes)
 800283e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002842:	3307      	adds	r3, #7
 8002844:	2b00      	cmp	r3, #0
 8002846:	da00      	bge.n	800284a <handle_write_multiple_coils+0x1a2>
 8002848:	3307      	adds	r3, #7
 800284a:	10db      	asrs	r3, r3, #3
 800284c:	461a      	mov	r2, r3
 800284e:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002852:	429a      	cmp	r2, r3
 8002854:	d009      	beq.n	800286a <handle_write_multiple_coils+0x1c2>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8002856:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800285a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800285e:	2103      	movs	r1, #3
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	f7fe ffa0 	bl	80017a6 <send_exception_msg>
 8002866:	4603      	mov	r3, r0
 8002868:	e09c      	b.n	80029a4 <handle_write_multiple_coils+0x2fc>

        if (nmbs->callbacks.write_multiple_coils) {
 800286a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800286e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002878:	2b00      	cmp	r3, #0
 800287a:	d07b      	beq.n	8002974 <handle_write_multiple_coils+0x2cc>
            err = nmbs->callbacks.write_multiple_coils(address, quantity, coils, nmbs->msg.unit_id, nmbs->platform.arg);
 800287c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002880:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
 800288a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800288e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f893 5106 	ldrb.w	r5, [r3, #262]	; 0x106
 8002898:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800289c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80028a6:	f107 0208 	add.w	r2, r7, #8
 80028aa:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 80028ae:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	462b      	mov	r3, r5
 80028b6:	47a0      	blx	r4
 80028b8:	4603      	mov	r3, r0
 80028ba:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 80028be:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d01d      	beq.n	8002902 <handle_write_multiple_coils+0x25a>
                if (nmbs_error_is_exception(err))
 80028c6:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	dd0f      	ble.n	80028ee <handle_write_multiple_coils+0x246>
 80028ce:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	dc0b      	bgt.n	80028ee <handle_write_multiple_coils+0x246>
                    return send_exception_msg(nmbs, err);
 80028d6:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 80028da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028e2:	4611      	mov	r1, r2
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	f7fe ff5e 	bl	80017a6 <send_exception_msg>
 80028ea:	4603      	mov	r3, r0
 80028ec:	e05a      	b.n	80029a4 <handle_write_multiple_coils+0x2fc>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80028ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028f6:	2104      	movs	r1, #4
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	f7fe ff54 	bl	80017a6 <send_exception_msg>
 80028fe:	4603      	mov	r3, r0
 8002900:	e050      	b.n	80029a4 <handle_write_multiple_coils+0x2fc>
            }

            if (!nmbs->msg.broadcast) {
 8002902:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002906:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8002910:	f083 0301 	eor.w	r3, r3, #1
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d043      	beq.n	80029a2 <handle_write_multiple_coils+0x2fa>
                put_res_header(nmbs, 4);
 800291a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800291e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002922:	2104      	movs	r1, #4
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	f7fe ff2f 	bl	8001788 <put_res_header>

                put_2(nmbs, address);
 800292a:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 800292e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002932:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002936:	4611      	mov	r1, r2
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	f7fe fbed 	bl	8001118 <put_2>
                put_2(nmbs, quantity);
 800293e:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8002942:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002946:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800294a:	4611      	mov	r1, r2
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	f7fe fbe3 	bl	8001118 <put_2>
                NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

                err = send_msg(nmbs);
 8002952:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002956:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	f7fe fec0 	bl	80016e0 <send_msg>
 8002960:	4603      	mov	r3, r0
 8002962:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 8002966:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800296a:	2b00      	cmp	r3, #0
 800296c:	d019      	beq.n	80029a2 <handle_write_multiple_coils+0x2fa>
                    return err;
 800296e:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002972:	e017      	b.n	80029a4 <handle_write_multiple_coils+0x2fc>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8002974:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002978:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800297c:	2101      	movs	r1, #1
 800297e:	6818      	ldr	r0, [r3, #0]
 8002980:	f7fe ff11 	bl	80017a6 <send_exception_msg>
 8002984:	4603      	mov	r3, r0
 8002986:	e00d      	b.n	80029a4 <handle_write_multiple_coils+0x2fc>
        }
    }
    else {
        return recv_write_multiple_coils_res(nmbs, address, quantity);
 8002988:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 800298c:	f8b7 1108 	ldrh.w	r1, [r7, #264]	; 0x108
 8002990:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002994:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	f7ff f8f4 	bl	8001b86 <recv_write_multiple_coils_res>
 800299e:	4603      	mov	r3, r0
 80029a0:	e000      	b.n	80029a4 <handle_write_multiple_coils+0x2fc>
    }

    return NMBS_ERROR_NONE;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bdb0      	pop	{r4, r5, r7, pc}

080029ae <handle_write_multiple_registers>:
#endif


#ifndef NMBS_SERVER_WRITE_MULTIPLE_REGISTERS_DISABLED
static nmbs_error handle_write_multiple_registers(nmbs_t* nmbs) {
 80029ae:	b5b0      	push	{r4, r5, r7, lr}
 80029b0:	b0c6      	sub	sp, #280	; 0x118
 80029b2:	af02      	add	r7, sp, #8
 80029b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029bc:	6018      	str	r0, [r3, #0]
    nmbs_error err = recv(nmbs, 5);
 80029be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029c6:	2105      	movs	r1, #5
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	f7fe fd12 	bl	80013f2 <recv>
 80029ce:	4603      	mov	r3, r0
 80029d0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 80029d4:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <handle_write_multiple_registers+0x34>
        return err;
 80029dc:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80029e0:	e153      	b.n	8002c8a <handle_write_multiple_registers+0x2dc>

    uint16_t address = get_2(nmbs);
 80029e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	f7fe fb70 	bl	80010d0 <get_2>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 80029f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	f7fe fb66 	bl	80010d0 <get_2>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    uint8_t registers_bytes = get_1(nmbs);
 8002a0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	f7fe fb04 	bl	8001020 <get_1>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

    NMBS_DEBUG_PRINT("a %d\tq %d\tb %d\tregs ", address, quantity, registers_bytes);

    err = recv(nmbs, registers_bytes);
 8002a1e:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	f7fe fcdf 	bl	80013f2 <recv>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8002a3a:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <handle_write_multiple_registers+0x9a>
        return err;
 8002a42:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002a46:	e120      	b.n	8002c8a <handle_write_multiple_registers+0x2dc>

    uint16_t registers[0x007B];
    for (int i = 0; i < registers_bytes / 2; i++) {
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002a4e:	e015      	b.n	8002a7c <handle_write_multiple_registers+0xce>
        registers[i] = get_2(nmbs);
 8002a50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	f7fe fb39 	bl	80010d0 <get_2>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4619      	mov	r1, r3
 8002a62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a6a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002a6e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < registers_bytes / 2; i++) {
 8002a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a76:	3301      	adds	r3, #1
 8002a78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002a7c:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	dbe0      	blt.n	8002a50 <handle_write_multiple_registers+0xa2>
        NMBS_DEBUG_PRINT("%d ", registers[i]);
    }

    err = recv_msg_footer(nmbs);
 8002a8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	f7fe fd07 	bl	80014aa <recv_msg_footer>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8002aa2:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <handle_write_multiple_registers+0x102>
        return err;
 8002aaa:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002aae:	e0ec      	b.n	8002c8a <handle_write_multiple_registers+0x2dc>

    if (!nmbs->msg.ignored) {
 8002ab0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ab4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8002abe:	f083 0301 	eor.w	r3, r3, #1
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80d2 	beq.w	8002c6e <handle_write_multiple_registers+0x2c0>
        if (quantity < 1 || quantity > 0x007B)
 8002aca:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <handle_write_multiple_registers+0x12c>
 8002ad2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002ad6:	2b7b      	cmp	r3, #123	; 0x7b
 8002ad8:	d909      	bls.n	8002aee <handle_write_multiple_registers+0x140>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8002ada:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ade:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ae2:	2103      	movs	r1, #3
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	f7fe fe5e 	bl	80017a6 <send_exception_msg>
 8002aea:	4603      	mov	r3, r0
 8002aec:	e0cd      	b.n	8002c8a <handle_write_multiple_registers+0x2dc>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8002aee:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8002af2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002af6:	4413      	add	r3, r2
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afc:	d909      	bls.n	8002b12 <handle_write_multiple_registers+0x164>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8002afe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b06:	2102      	movs	r1, #2
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	f7fe fe4c 	bl	80017a6 <send_exception_msg>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	e0bb      	b.n	8002c8a <handle_write_multiple_registers+0x2dc>

        if (registers_bytes == 0)
 8002b12:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <handle_write_multiple_registers+0x180>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8002b1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b22:	2103      	movs	r1, #3
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	f7fe fe3e 	bl	80017a6 <send_exception_msg>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	e0ad      	b.n	8002c8a <handle_write_multiple_registers+0x2dc>

        if (registers_bytes != quantity * 2)
 8002b2e:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 8002b32:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d009      	beq.n	8002b50 <handle_write_multiple_registers+0x1a2>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8002b3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b44:	2103      	movs	r1, #3
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	f7fe fe2d 	bl	80017a6 <send_exception_msg>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	e09c      	b.n	8002c8a <handle_write_multiple_registers+0x2dc>

        if (nmbs->callbacks.write_multiple_registers) {
 8002b50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d07b      	beq.n	8002c5a <handle_write_multiple_registers+0x2ac>
            err = nmbs->callbacks.write_multiple_registers(address, quantity, registers, nmbs->msg.unit_id,
 8002b62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
 8002b70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f893 5106 	ldrb.w	r5, [r3, #262]	; 0x106
 8002b7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002b8c:	f107 020c 	add.w	r2, r7, #12
 8002b90:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8002b94:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	462b      	mov	r3, r5
 8002b9c:	47a0      	blx	r4
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                                                           nmbs->platform.arg);
            if (err != NMBS_ERROR_NONE) {
 8002ba4:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01d      	beq.n	8002be8 <handle_write_multiple_registers+0x23a>
                if (nmbs_error_is_exception(err))
 8002bac:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	dd0f      	ble.n	8002bd4 <handle_write_multiple_registers+0x226>
 8002bb4:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	dc0b      	bgt.n	8002bd4 <handle_write_multiple_registers+0x226>
                    return send_exception_msg(nmbs, err);
 8002bbc:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8002bc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bc4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002bc8:	4611      	mov	r1, r2
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	f7fe fdeb 	bl	80017a6 <send_exception_msg>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	e05a      	b.n	8002c8a <handle_write_multiple_registers+0x2dc>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8002bd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bd8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002bdc:	2104      	movs	r1, #4
 8002bde:	6818      	ldr	r0, [r3, #0]
 8002be0:	f7fe fde1 	bl	80017a6 <send_exception_msg>
 8002be4:	4603      	mov	r3, r0
 8002be6:	e050      	b.n	8002c8a <handle_write_multiple_registers+0x2dc>
            }

            if (!nmbs->msg.broadcast) {
 8002be8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8002bf6:	f083 0301 	eor.w	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d043      	beq.n	8002c88 <handle_write_multiple_registers+0x2da>
                put_res_header(nmbs, 4);
 8002c00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c08:	2104      	movs	r1, #4
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	f7fe fdbc 	bl	8001788 <put_res_header>

                put_2(nmbs, address);
 8002c10:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8002c14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	f7fe fa7a 	bl	8001118 <put_2>
                put_2(nmbs, quantity);
 8002c24:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8002c28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c2c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c30:	4611      	mov	r1, r2
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	f7fe fa70 	bl	8001118 <put_2>
                NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

                err = send_msg(nmbs);
 8002c38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c3c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	f7fe fd4d 	bl	80016e0 <send_msg>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 8002c4c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d019      	beq.n	8002c88 <handle_write_multiple_registers+0x2da>
                    return err;
 8002c54:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002c58:	e017      	b.n	8002c8a <handle_write_multiple_registers+0x2dc>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8002c5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c62:	2101      	movs	r1, #1
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	f7fe fd9e 	bl	80017a6 <send_exception_msg>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	e00d      	b.n	8002c8a <handle_write_multiple_registers+0x2dc>
        }
    }
    else {
        return recv_write_multiple_registers_res(nmbs, address, quantity);
 8002c6e:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8002c72:	f8b7 1108 	ldrh.w	r1, [r7, #264]	; 0x108
 8002c76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	f7fe ffcb 	bl	8001c1a <recv_write_multiple_registers_res>
 8002c84:	4603      	mov	r3, r0
 8002c86:	e000      	b.n	8002c8a <handle_write_multiple_registers+0x2dc>
    }

    return NMBS_ERROR_NONE;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bdb0      	pop	{r4, r5, r7, pc}

08002c94 <handle_read_file_record>:
#endif

#ifndef NMBS_SERVER_READ_FILE_RECORD_DISABLED
static nmbs_error handle_read_file_record(nmbs_t* nmbs) {
 8002c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c98:	b08b      	sub	sp, #44	; 0x2c
 8002c9a:	af02      	add	r7, sp, #8
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	466b      	mov	r3, sp
 8002ca0:	461e      	mov	r6, r3
    nmbs_error err = recv(nmbs, 1);
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7fe fba4 	bl	80013f2 <recv>
 8002caa:	4603      	mov	r3, r0
 8002cac:	76fb      	strb	r3, [r7, #27]
    if (err != NMBS_ERROR_NONE)
 8002cae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <handle_read_file_record+0x28>
        return err;
 8002cb6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002cba:	e199      	b.n	8002ff0 <handle_read_file_record+0x35c>

    uint8_t request_size = get_1(nmbs);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7fe f9af 	bl	8001020 <get_1>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	76bb      	strb	r3, [r7, #26]

    err = recv(nmbs, request_size);
 8002cc6:	7ebb      	ldrb	r3, [r7, #26]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7fe fb90 	bl	80013f2 <recv>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	76fb      	strb	r3, [r7, #27]
    if (err != NMBS_ERROR_NONE)
 8002cd6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <handle_read_file_record+0x50>
        return err;
 8002cde:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002ce2:	e185      	b.n	8002ff0 <handle_read_file_record+0x35c>

    const uint8_t subreq_header_size = 7;
 8002ce4:	2307      	movs	r3, #7
 8002ce6:	767b      	strb	r3, [r7, #25]
    const uint8_t subreq_count = request_size / subreq_header_size;
 8002ce8:	7eba      	ldrb	r2, [r7, #26]
 8002cea:	7e7b      	ldrb	r3, [r7, #25]
 8002cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf0:	763b      	strb	r3, [r7, #24]
        uint16_t record_length;
    }
#ifdef __STDC_NO_VLA__
    subreq[35];    // 245 / subreq_header_size
#else
    subreq[subreq_count];
 8002cf2:	7e3b      	ldrb	r3, [r7, #24]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	7e3b      	ldrb	r3, [r7, #24]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	4698      	mov	r8, r3
 8002cfe:	4691      	mov	r9, r2
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d0c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d10:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d14:	7e3b      	ldrb	r3, [r7, #24]
 8002d16:	2200      	movs	r2, #0
 8002d18:	461c      	mov	r4, r3
 8002d1a:	4615      	mov	r5, r2
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	01ab      	lsls	r3, r5, #6
 8002d26:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8002d2a:	01a2      	lsls	r2, r4, #6
 8002d2c:	7e3b      	ldrb	r3, [r7, #24]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	3307      	adds	r3, #7
 8002d32:	08db      	lsrs	r3, r3, #3
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	ebad 0d03 	sub.w	sp, sp, r3
 8002d3a:	ab02      	add	r3, sp, #8
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	613b      	str	r3, [r7, #16]
#endif

    uint8_t response_data_size = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	77fb      	strb	r3, [r7, #31]

    for (uint8_t i = 0; i < subreq_count; i++) {
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77bb      	strb	r3, [r7, #30]
 8002d4c:	e038      	b.n	8002dc0 <handle_read_file_record+0x12c>
        subreq[i].reference_type = get_1(nmbs);
 8002d4e:	7fbc      	ldrb	r4, [r7, #30]
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7fe f965 	bl	8001020 <get_1>
 8002d56:	4603      	mov	r3, r0
 8002d58:	461a      	mov	r2, r3
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
        subreq[i].file_number = get_2(nmbs);
 8002d60:	7fbc      	ldrb	r4, [r7, #30]
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fe f9b4 	bl	80010d0 <get_2>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	00e3      	lsls	r3, r4, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	460a      	mov	r2, r1
 8002d74:	805a      	strh	r2, [r3, #2]
        subreq[i].record_number = get_2(nmbs);
 8002d76:	7fbc      	ldrb	r4, [r7, #30]
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7fe f9a9 	bl	80010d0 <get_2>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4619      	mov	r1, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	00e3      	lsls	r3, r4, #3
 8002d86:	4413      	add	r3, r2
 8002d88:	460a      	mov	r2, r1
 8002d8a:	809a      	strh	r2, [r3, #4]
        subreq[i].record_length = get_2(nmbs);
 8002d8c:	7fbc      	ldrb	r4, [r7, #30]
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fe f99e 	bl	80010d0 <get_2>
 8002d94:	4603      	mov	r3, r0
 8002d96:	4619      	mov	r1, r3
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	00e3      	lsls	r3, r4, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	460a      	mov	r2, r1
 8002da0:	80da      	strh	r2, [r3, #6]

        response_data_size += 2 + subreq[i].record_length * 2;
 8002da2:	7fbb      	ldrb	r3, [r7, #30]
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	88db      	ldrh	r3, [r3, #6]
 8002dac:	3301      	adds	r3, #1
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	7ffb      	ldrb	r3, [r7, #31]
 8002db6:	4413      	add	r3, r2
 8002db8:	77fb      	strb	r3, [r7, #31]
    for (uint8_t i = 0; i < subreq_count; i++) {
 8002dba:	7fbb      	ldrb	r3, [r7, #30]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	77bb      	strb	r3, [r7, #30]
 8002dc0:	7fba      	ldrb	r2, [r7, #30]
 8002dc2:	7e3b      	ldrb	r3, [r7, #24]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d3c2      	bcc.n	8002d4e <handle_read_file_record+0xba>
    }

    discard_n(nmbs, request_size % subreq_header_size);
 8002dc8:	7ebb      	ldrb	r3, [r7, #26]
 8002dca:	7e7a      	ldrb	r2, [r7, #25]
 8002dcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8002dd0:	fb01 f202 	mul.w	r2, r1, r2
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7fe f963 	bl	80010a8 <discard_n>

    err = recv_msg_footer(nmbs);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fe fb61 	bl	80014aa <recv_msg_footer>
 8002de8:	4603      	mov	r3, r0
 8002dea:	76fb      	strb	r3, [r7, #27]
    if (err != NMBS_ERROR_NONE)
 8002dec:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <handle_read_file_record+0x166>
        return err;
 8002df4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002df8:	e0fa      	b.n	8002ff0 <handle_read_file_record+0x35c>

    if (!nmbs->msg.ignored) {
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8002e00:	f083 0301 	eor.w	r3, r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80ea 	beq.w	8002fe0 <handle_read_file_record+0x34c>
        if (request_size % subreq_header_size)
 8002e0c:	7ebb      	ldrb	r3, [r7, #26]
 8002e0e:	7e7a      	ldrb	r2, [r7, #25]
 8002e10:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e14:	fb01 f202 	mul.w	r2, r1, r2
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <handle_read_file_record+0x198>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8002e20:	2103      	movs	r1, #3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fe fcbf 	bl	80017a6 <send_exception_msg>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	e0e1      	b.n	8002ff0 <handle_read_file_record+0x35c>

        if (request_size < 0x07 || request_size > 0xF5)
 8002e2c:	7ebb      	ldrb	r3, [r7, #26]
 8002e2e:	2b06      	cmp	r3, #6
 8002e30:	d902      	bls.n	8002e38 <handle_read_file_record+0x1a4>
 8002e32:	7ebb      	ldrb	r3, [r7, #26]
 8002e34:	2bf5      	cmp	r3, #245	; 0xf5
 8002e36:	d905      	bls.n	8002e44 <handle_read_file_record+0x1b0>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8002e38:	2103      	movs	r1, #3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fe fcb3 	bl	80017a6 <send_exception_msg>
 8002e40:	4603      	mov	r3, r0
 8002e42:	e0d5      	b.n	8002ff0 <handle_read_file_record+0x35c>

        for (uint8_t i = 0; i < subreq_count; i++) {
 8002e44:	2300      	movs	r3, #0
 8002e46:	777b      	strb	r3, [r7, #29]
 8002e48:	e037      	b.n	8002eba <handle_read_file_record+0x226>
            if (subreq[i].reference_type != 0x06)
 8002e4a:	7f7a      	ldrb	r2, [r7, #29]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8002e52:	2b06      	cmp	r3, #6
 8002e54:	d005      	beq.n	8002e62 <handle_read_file_record+0x1ce>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8002e56:	2102      	movs	r1, #2
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7fe fca4 	bl	80017a6 <send_exception_msg>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	e0c6      	b.n	8002ff0 <handle_read_file_record+0x35c>

            if (subreq[i].file_number == 0x0000)
 8002e62:	7f7b      	ldrb	r3, [r7, #29]
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	885b      	ldrh	r3, [r3, #2]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d105      	bne.n	8002e7c <handle_read_file_record+0x1e8>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8002e70:	2102      	movs	r1, #2
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fe fc97 	bl	80017a6 <send_exception_msg>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	e0b9      	b.n	8002ff0 <handle_read_file_record+0x35c>

            if (subreq[i].record_number > 0x270F)
 8002e7c:	7f7b      	ldrb	r3, [r7, #29]
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	889b      	ldrh	r3, [r3, #4]
 8002e86:	f242 720f 	movw	r2, #9999	; 0x270f
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d905      	bls.n	8002e9a <handle_read_file_record+0x206>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8002e8e:	2102      	movs	r1, #2
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7fe fc88 	bl	80017a6 <send_exception_msg>
 8002e96:	4603      	mov	r3, r0
 8002e98:	e0aa      	b.n	8002ff0 <handle_read_file_record+0x35c>

            if (subreq[i].record_length > 124)
 8002e9a:	7f7b      	ldrb	r3, [r7, #29]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	88db      	ldrh	r3, [r3, #6]
 8002ea4:	2b7c      	cmp	r3, #124	; 0x7c
 8002ea6:	d905      	bls.n	8002eb4 <handle_read_file_record+0x220>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fe fc7b 	bl	80017a6 <send_exception_msg>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	e09d      	b.n	8002ff0 <handle_read_file_record+0x35c>
        for (uint8_t i = 0; i < subreq_count; i++) {
 8002eb4:	7f7b      	ldrb	r3, [r7, #29]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	777b      	strb	r3, [r7, #29]
 8002eba:	7f7a      	ldrb	r2, [r7, #29]
 8002ebc:	7e3b      	ldrb	r3, [r7, #24]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d3c3      	bcc.n	8002e4a <handle_read_file_record+0x1b6>

            NMBS_DEBUG_PRINT("a %d\tr %d\tl %d\t fread ", subreq[i].file_number, subreq[i].record_number,
                             subreq[i].record_length);
        }

        put_res_header(nmbs, response_data_size);
 8002ec2:	7ffb      	ldrb	r3, [r7, #31]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7fe fc5d 	bl	8001788 <put_res_header>
        put_1(nmbs, response_data_size);
 8002ece:	7ffb      	ldrb	r3, [r7, #31]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe f8bd 	bl	8001052 <put_1>

        if (nmbs->callbacks.read_file_record) {
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d064      	beq.n	8002fac <handle_read_file_record+0x318>
            for (uint8_t i = 0; i < subreq_count; i++) {
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	773b      	strb	r3, [r7, #28]
 8002ee6:	e05c      	b.n	8002fa2 <handle_read_file_record+0x30e>
                uint16_t subreq_data_size = subreq[i].record_length * 2;
 8002ee8:	7f3b      	ldrb	r3, [r7, #28]
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	88db      	ldrh	r3, [r3, #6]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	81fb      	strh	r3, [r7, #14]
                put_1(nmbs, subreq_data_size + 1);
 8002ef6:	89fb      	ldrh	r3, [r7, #14]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	4619      	mov	r1, r3
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7fe f8a6 	bl	8001052 <put_1>
                put_1(nmbs, 0x06);    // add Reference Type const
 8002f06:	2106      	movs	r1, #6
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7fe f8a2 	bl	8001052 <put_1>
                uint16_t* subreq_data = (uint16_t*) get_n(nmbs, subreq_data_size);
 8002f0e:	89fb      	ldrh	r3, [r7, #14]
 8002f10:	4619      	mov	r1, r3
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fe f925 	bl	8001162 <get_n>
 8002f18:	60b8      	str	r0, [r7, #8]

                err = nmbs->callbacks.read_file_record(subreq[i].file_number, subreq[i].record_number, subreq_data,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
 8002f20:	7f3b      	ldrb	r3, [r7, #28]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	8858      	ldrh	r0, [r3, #2]
 8002f2a:	7f3b      	ldrb	r3, [r7, #28]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4413      	add	r3, r2
 8002f32:	8899      	ldrh	r1, [r3, #4]
 8002f34:	7f3b      	ldrb	r3, [r7, #28]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	88dd      	ldrh	r5, [r3, #6]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	f8d2 214c 	ldr.w	r2, [r2, #332]	; 0x14c
 8002f4a:	9201      	str	r2, [sp, #4]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	462b      	mov	r3, r5
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	47a0      	blx	r4
 8002f54:	4603      	mov	r3, r0
 8002f56:	76fb      	strb	r3, [r7, #27]
                                                       subreq[i].record_length, nmbs->msg.unit_id, nmbs->platform.arg);
                if (err != NMBS_ERROR_NONE) {
 8002f58:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d014      	beq.n	8002f8a <handle_read_file_record+0x2f6>
                    if (nmbs_error_is_exception(err))
 8002f60:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	dd0a      	ble.n	8002f7e <handle_read_file_record+0x2ea>
 8002f68:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	dc06      	bgt.n	8002f7e <handle_read_file_record+0x2ea>
                        return send_exception_msg(nmbs, err);
 8002f70:	7efb      	ldrb	r3, [r7, #27]
 8002f72:	4619      	mov	r1, r3
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7fe fc16 	bl	80017a6 <send_exception_msg>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	e038      	b.n	8002ff0 <handle_read_file_record+0x35c>

                    return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8002f7e:	2104      	movs	r1, #4
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7fe fc10 	bl	80017a6 <send_exception_msg>
 8002f86:	4603      	mov	r3, r0
 8002f88:	e032      	b.n	8002ff0 <handle_read_file_record+0x35c>
                }

                swap_regs(subreq_data, subreq[i].record_length);
 8002f8a:	7f3b      	ldrb	r3, [r7, #28]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	88db      	ldrh	r3, [r3, #6]
 8002f94:	4619      	mov	r1, r3
 8002f96:	68b8      	ldr	r0, [r7, #8]
 8002f98:	f7fe f938 	bl	800120c <swap_regs>
            for (uint8_t i = 0; i < subreq_count; i++) {
 8002f9c:	7f3b      	ldrb	r3, [r7, #28]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	773b      	strb	r3, [r7, #28]
 8002fa2:	7f3a      	ldrb	r2, [r7, #28]
 8002fa4:	7e3b      	ldrb	r3, [r7, #24]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d39e      	bcc.n	8002ee8 <handle_read_file_record+0x254>
 8002faa:	e005      	b.n	8002fb8 <handle_read_file_record+0x324>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8002fac:	2101      	movs	r1, #1
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fe fbf9 	bl	80017a6 <send_exception_msg>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	e01b      	b.n	8002ff0 <handle_read_file_record+0x35c>
        }

        if (!nmbs->msg.broadcast) {
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8002fbe:	f083 0301 	eor.w	r3, r3, #1
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d012      	beq.n	8002fee <handle_read_file_record+0x35a>
            err = send_msg(nmbs);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7fe fb89 	bl	80016e0 <send_msg>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	76fb      	strb	r3, [r7, #27]
            if (err != NMBS_ERROR_NONE)
 8002fd2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <handle_read_file_record+0x35a>
                return err;
 8002fda:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002fde:	e007      	b.n	8002ff0 <handle_read_file_record+0x35c>
        }
    }
    else {
        return recv_read_file_record_res(nmbs, NULL, 0);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7fe fe62 	bl	8001cae <recv_read_file_record_res>
 8002fea:	4603      	mov	r3, r0
 8002fec:	e000      	b.n	8002ff0 <handle_read_file_record+0x35c>
    }

    return NMBS_ERROR_NONE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	46b5      	mov	sp, r6
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3724      	adds	r7, #36	; 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002ffc <handle_write_file_record>:
#endif

#ifndef NMBS_SERVER_WRITE_FILE_RECORD_DISABLED
static nmbs_error handle_write_file_record(nmbs_t* nmbs) {
 8002ffc:	b5b0      	push	{r4, r5, r7, lr}
 8002ffe:	b08a      	sub	sp, #40	; 0x28
 8003000:	af02      	add	r7, sp, #8
 8003002:	6078      	str	r0, [r7, #4]
    nmbs_error err = recv(nmbs, 1);
 8003004:	2101      	movs	r1, #1
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fe f9f3 	bl	80013f2 <recv>
 800300c:	4603      	mov	r3, r0
 800300e:	777b      	strb	r3, [r7, #29]
    if (err != NMBS_ERROR_NONE)
 8003010:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <handle_write_file_record+0x22>
        return err;
 8003018:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800301c:	e132      	b.n	8003284 <handle_write_file_record+0x288>

    uint8_t request_size = get_1(nmbs);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fd fffe 	bl	8001020 <get_1>
 8003024:	4603      	mov	r3, r0
 8003026:	773b      	strb	r3, [r7, #28]

    err = recv(nmbs, request_size);
 8003028:	7f3b      	ldrb	r3, [r7, #28]
 800302a:	b29b      	uxth	r3, r3
 800302c:	4619      	mov	r1, r3
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fe f9df 	bl	80013f2 <recv>
 8003034:	4603      	mov	r3, r0
 8003036:	777b      	strb	r3, [r7, #29]
    if (err != NMBS_ERROR_NONE)
 8003038:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <handle_write_file_record+0x4a>
        return err;
 8003040:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003044:	e11e      	b.n	8003284 <handle_write_file_record+0x288>

    // We can save msg.buf index and use it later for context recovery.
    uint16_t msg_buf_idx = nmbs->msg.buf_idx;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800304c:	837b      	strh	r3, [r7, #26]
    discard_n(nmbs, request_size);
 800304e:	7f3b      	ldrb	r3, [r7, #28]
 8003050:	b29b      	uxth	r3, r3
 8003052:	4619      	mov	r1, r3
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7fe f827 	bl	80010a8 <discard_n>

    err = recv_msg_footer(nmbs);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fe fa25 	bl	80014aa <recv_msg_footer>
 8003060:	4603      	mov	r3, r0
 8003062:	777b      	strb	r3, [r7, #29]
    if (err != NMBS_ERROR_NONE)
 8003064:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <handle_write_file_record+0x76>
        return err;
 800306c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003070:	e108      	b.n	8003284 <handle_write_file_record+0x288>

    if (!nmbs->msg.ignored) {
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8003078:	f083 0301 	eor.w	r3, r3, #1
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 80f5 	beq.w	800326e <handle_write_file_record+0x272>
        const uint8_t subreq_header_size = 7;
 8003084:	2307      	movs	r3, #7
 8003086:	767b      	strb	r3, [r7, #25]
        uint16_t size = request_size;
 8003088:	7f3b      	ldrb	r3, [r7, #28]
 800308a:	83fb      	strh	r3, [r7, #30]
        nmbs->msg.buf_idx = msg_buf_idx;    // restore context
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8b7a      	ldrh	r2, [r7, #26]
 8003090:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104

        if (request_size < 0x07 || request_size > 0xFB)
 8003094:	7f3b      	ldrb	r3, [r7, #28]
 8003096:	2b06      	cmp	r3, #6
 8003098:	d902      	bls.n	80030a0 <handle_write_file_record+0xa4>
 800309a:	7f3b      	ldrb	r3, [r7, #28]
 800309c:	2bfb      	cmp	r3, #251	; 0xfb
 800309e:	d905      	bls.n	80030ac <handle_write_file_record+0xb0>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80030a0:	2103      	movs	r1, #3
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fe fb7f 	bl	80017a6 <send_exception_msg>
 80030a8:	4603      	mov	r3, r0
 80030aa:	e0eb      	b.n	8003284 <handle_write_file_record+0x288>

        do {
            uint8_t subreq_reference_type = get_1(nmbs);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7fd ffb7 	bl	8001020 <get_1>
 80030b2:	4603      	mov	r3, r0
 80030b4:	763b      	strb	r3, [r7, #24]
            uint16_t subreq_file_number_c = get_2(nmbs);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fe f80a 	bl	80010d0 <get_2>
 80030bc:	4603      	mov	r3, r0
 80030be:	82fb      	strh	r3, [r7, #22]
            uint16_t subreq_record_number_c = get_2(nmbs);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7fe f805 	bl	80010d0 <get_2>
 80030c6:	4603      	mov	r3, r0
 80030c8:	82bb      	strh	r3, [r7, #20]
            uint16_t subreq_record_length_c = get_2(nmbs);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fe f800 	bl	80010d0 <get_2>
 80030d0:	4603      	mov	r3, r0
 80030d2:	827b      	strh	r3, [r7, #18]
            discard_n(nmbs, subreq_record_length_c * 2);
 80030d4:	8a7b      	ldrh	r3, [r7, #18]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	b29b      	uxth	r3, r3
 80030da:	4619      	mov	r1, r3
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7fd ffe3 	bl	80010a8 <discard_n>

            if (subreq_reference_type != 0x06)
 80030e2:	7e3b      	ldrb	r3, [r7, #24]
 80030e4:	2b06      	cmp	r3, #6
 80030e6:	d005      	beq.n	80030f4 <handle_write_file_record+0xf8>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 80030e8:	2102      	movs	r1, #2
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fe fb5b 	bl	80017a6 <send_exception_msg>
 80030f0:	4603      	mov	r3, r0
 80030f2:	e0c7      	b.n	8003284 <handle_write_file_record+0x288>

            if (subreq_file_number_c == 0x0000)
 80030f4:	8afb      	ldrh	r3, [r7, #22]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d105      	bne.n	8003106 <handle_write_file_record+0x10a>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 80030fa:	2102      	movs	r1, #2
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7fe fb52 	bl	80017a6 <send_exception_msg>
 8003102:	4603      	mov	r3, r0
 8003104:	e0be      	b.n	8003284 <handle_write_file_record+0x288>

            if (subreq_record_number_c > 0x270F)
 8003106:	8abb      	ldrh	r3, [r7, #20]
 8003108:	f242 720f 	movw	r2, #9999	; 0x270f
 800310c:	4293      	cmp	r3, r2
 800310e:	d905      	bls.n	800311c <handle_write_file_record+0x120>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8003110:	2102      	movs	r1, #2
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fe fb47 	bl	80017a6 <send_exception_msg>
 8003118:	4603      	mov	r3, r0
 800311a:	e0b3      	b.n	8003284 <handle_write_file_record+0x288>

            if (subreq_record_length_c > 122)
 800311c:	8a7b      	ldrh	r3, [r7, #18]
 800311e:	2b7a      	cmp	r3, #122	; 0x7a
 8003120:	d905      	bls.n	800312e <handle_write_file_record+0x132>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8003122:	2102      	movs	r1, #2
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7fe fb3e 	bl	80017a6 <send_exception_msg>
 800312a:	4603      	mov	r3, r0
 800312c:	e0aa      	b.n	8003284 <handle_write_file_record+0x288>

            NMBS_DEBUG_PRINT("a %d\tr %d\tl %d\t fwrite ", subreq_file_number_c, subreq_record_number_c,
                             subreq_record_length_c);
            size -= (subreq_header_size + subreq_record_length_c * 2);
 800312e:	7e7b      	ldrb	r3, [r7, #25]
 8003130:	b29a      	uxth	r2, r3
 8003132:	8a7b      	ldrh	r3, [r7, #18]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	b29b      	uxth	r3, r3
 8003138:	4413      	add	r3, r2
 800313a:	b29b      	uxth	r3, r3
 800313c:	8bfa      	ldrh	r2, [r7, #30]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	83fb      	strh	r3, [r7, #30]
        } while (size >= subreq_header_size);
 8003142:	7e7b      	ldrb	r3, [r7, #25]
 8003144:	b29b      	uxth	r3, r3
 8003146:	8bfa      	ldrh	r2, [r7, #30]
 8003148:	429a      	cmp	r2, r3
 800314a:	d2af      	bcs.n	80030ac <handle_write_file_record+0xb0>

        if (size)
 800314c:	8bfb      	ldrh	r3, [r7, #30]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <handle_write_file_record+0x162>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8003152:	2103      	movs	r1, #3
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7fe fb26 	bl	80017a6 <send_exception_msg>
 800315a:	4603      	mov	r3, r0
 800315c:	e092      	b.n	8003284 <handle_write_file_record+0x288>

        // checks completed

        size = request_size;
 800315e:	7f3b      	ldrb	r3, [r7, #28]
 8003160:	83fb      	strh	r3, [r7, #30]
        nmbs->msg.buf_idx = msg_buf_idx;    // restore context
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	8b7a      	ldrh	r2, [r7, #26]
 8003166:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104

        do {
            discard_1(nmbs);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fd ff8b 	bl	8001086 <discard_1>
            uint16_t subreq_file_number = get_2(nmbs);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7fd ffad 	bl	80010d0 <get_2>
 8003176:	4603      	mov	r3, r0
 8003178:	823b      	strh	r3, [r7, #16]
            uint16_t subreq_record_number = get_2(nmbs);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fd ffa8 	bl	80010d0 <get_2>
 8003180:	4603      	mov	r3, r0
 8003182:	81fb      	strh	r3, [r7, #14]
            uint16_t subreq_record_length = get_2(nmbs);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7fd ffa3 	bl	80010d0 <get_2>
 800318a:	4603      	mov	r3, r0
 800318c:	81bb      	strh	r3, [r7, #12]
            uint16_t* subreq_data = get_regs(nmbs, subreq_record_length);
 800318e:	89bb      	ldrh	r3, [r7, #12]
 8003190:	4619      	mov	r1, r3
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fe f800 	bl	8001198 <get_regs>
 8003198:	60b8      	str	r0, [r7, #8]

            if (nmbs->callbacks.write_file_record) {
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d031      	beq.n	8003208 <handle_write_file_record+0x20c>
                err = nmbs->callbacks.write_file_record(subreq_file_number, subreq_record_number, subreq_data,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8d3 4130 	ldr.w	r4, [r3, #304]	; 0x130
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	f8d2 214c 	ldr.w	r2, [r2, #332]	; 0x14c
 80031b6:	89bd      	ldrh	r5, [r7, #12]
 80031b8:	89f9      	ldrh	r1, [r7, #14]
 80031ba:	8a38      	ldrh	r0, [r7, #16]
 80031bc:	9201      	str	r2, [sp, #4]
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	462b      	mov	r3, r5
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	47a0      	blx	r4
 80031c6:	4603      	mov	r3, r0
 80031c8:	777b      	strb	r3, [r7, #29]
                                                        subreq_record_length, nmbs->msg.unit_id, nmbs->platform.arg);
                if (err != NMBS_ERROR_NONE) {
 80031ca:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d014      	beq.n	80031fc <handle_write_file_record+0x200>
                    if (nmbs_error_is_exception(err))
 80031d2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	dd0a      	ble.n	80031f0 <handle_write_file_record+0x1f4>
 80031da:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80031de:	2b04      	cmp	r3, #4
 80031e0:	dc06      	bgt.n	80031f0 <handle_write_file_record+0x1f4>
                        return send_exception_msg(nmbs, err);
 80031e2:	7f7b      	ldrb	r3, [r7, #29]
 80031e4:	4619      	mov	r1, r3
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fe fadd 	bl	80017a6 <send_exception_msg>
 80031ec:	4603      	mov	r3, r0
 80031ee:	e049      	b.n	8003284 <handle_write_file_record+0x288>

                    return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80031f0:	2104      	movs	r1, #4
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fe fad7 	bl	80017a6 <send_exception_msg>
 80031f8:	4603      	mov	r3, r0
 80031fa:	e043      	b.n	8003284 <handle_write_file_record+0x288>
                }

                swap_regs(subreq_data, subreq_record_length);    // restore swapping
 80031fc:	89bb      	ldrh	r3, [r7, #12]
 80031fe:	4619      	mov	r1, r3
 8003200:	68b8      	ldr	r0, [r7, #8]
 8003202:	f7fe f803 	bl	800120c <swap_regs>
 8003206:	e005      	b.n	8003214 <handle_write_file_record+0x218>
            }
            else {
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8003208:	2101      	movs	r1, #1
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fe facb 	bl	80017a6 <send_exception_msg>
 8003210:	4603      	mov	r3, r0
 8003212:	e037      	b.n	8003284 <handle_write_file_record+0x288>
            }

            size -= (subreq_header_size + subreq_record_length * 2);
 8003214:	7e7b      	ldrb	r3, [r7, #25]
 8003216:	b29a      	uxth	r2, r3
 8003218:	89bb      	ldrh	r3, [r7, #12]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	b29b      	uxth	r3, r3
 800321e:	4413      	add	r3, r2
 8003220:	b29b      	uxth	r3, r3
 8003222:	8bfa      	ldrh	r2, [r7, #30]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	83fb      	strh	r3, [r7, #30]
        } while (size >= subreq_header_size);
 8003228:	7e7b      	ldrb	r3, [r7, #25]
 800322a:	b29b      	uxth	r3, r3
 800322c:	8bfa      	ldrh	r2, [r7, #30]
 800322e:	429a      	cmp	r2, r3
 8003230:	d29b      	bcs.n	800316a <handle_write_file_record+0x16e>

        if (!nmbs->msg.broadcast) {
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8003238:	f083 0301 	eor.w	r3, r3, #1
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01f      	beq.n	8003282 <handle_write_file_record+0x286>
            // The normal response to 'Write File' is an echo of the request.
            // We can restore buffer index and response msg.
            nmbs->msg.buf_idx = msg_buf_idx;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	8b7a      	ldrh	r2, [r7, #26]
 8003246:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
            discard_n(nmbs, request_size);
 800324a:	7f3b      	ldrb	r3, [r7, #28]
 800324c:	b29b      	uxth	r3, r3
 800324e:	4619      	mov	r1, r3
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7fd ff29 	bl	80010a8 <discard_n>

            err = send_msg(nmbs);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe fa42 	bl	80016e0 <send_msg>
 800325c:	4603      	mov	r3, r0
 800325e:	777b      	strb	r3, [r7, #29]
            if (err != NMBS_ERROR_NONE)
 8003260:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00c      	beq.n	8003282 <handle_write_file_record+0x286>
                return err;
 8003268:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800326c:	e00a      	b.n	8003284 <handle_write_file_record+0x288>
        }
    }
    else {
        return recv_write_file_record_res(nmbs, 0, 0, NULL, 0);
 800326e:	2300      	movs	r3, #0
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	2300      	movs	r3, #0
 8003274:	2200      	movs	r2, #0
 8003276:	2100      	movs	r1, #0
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7fe fd90 	bl	8001d9e <recv_write_file_record_res>
 800327e:	4603      	mov	r3, r0
 8003280:	e000      	b.n	8003284 <handle_write_file_record+0x288>
    }

    return NMBS_ERROR_NONE;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3720      	adds	r7, #32
 8003288:	46bd      	mov	sp, r7
 800328a:	bdb0      	pop	{r4, r5, r7, pc}

0800328c <handle_req_fc>:
#endif

static nmbs_error handle_req_fc(nmbs_t* nmbs) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("fc %d\t", nmbs->msg.fc);

    nmbs_error err;
    switch (nmbs->msg.fc) {
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800329a:	3b01      	subs	r3, #1
 800329c:	2b14      	cmp	r3, #20
 800329e:	d869      	bhi.n	8003374 <handle_req_fc+0xe8>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <handle_req_fc+0x1c>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032fd 	.word	0x080032fd
 80032ac:	08003309 	.word	0x08003309
 80032b0:	08003315 	.word	0x08003315
 80032b4:	08003321 	.word	0x08003321
 80032b8:	0800332d 	.word	0x0800332d
 80032bc:	08003339 	.word	0x08003339
 80032c0:	08003375 	.word	0x08003375
 80032c4:	08003375 	.word	0x08003375
 80032c8:	08003375 	.word	0x08003375
 80032cc:	08003375 	.word	0x08003375
 80032d0:	08003375 	.word	0x08003375
 80032d4:	08003375 	.word	0x08003375
 80032d8:	08003375 	.word	0x08003375
 80032dc:	08003375 	.word	0x08003375
 80032e0:	08003345 	.word	0x08003345
 80032e4:	08003351 	.word	0x08003351
 80032e8:	08003375 	.word	0x08003375
 80032ec:	08003375 	.word	0x08003375
 80032f0:	08003375 	.word	0x08003375
 80032f4:	0800335d 	.word	0x0800335d
 80032f8:	08003369 	.word	0x08003369
#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
        case 1:
            err = handle_read_coils(nmbs);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff f861 	bl	80023c4 <handle_read_coils>
 8003302:	4603      	mov	r3, r0
 8003304:	73fb      	strb	r3, [r7, #15]
            break;
 8003306:	e037      	b.n	8003378 <handle_req_fc+0xec>
#endif

#ifndef NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED
        case 2:
            err = handle_read_discrete_inputs(nmbs);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff f86b 	bl	80023e4 <handle_read_discrete_inputs>
 800330e:	4603      	mov	r3, r0
 8003310:	73fb      	strb	r3, [r7, #15]
            break;
 8003312:	e031      	b.n	8003378 <handle_req_fc+0xec>
#endif

#ifndef NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED
        case 3:
            err = handle_read_holding_registers(nmbs);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff f875 	bl	8002404 <handle_read_holding_registers>
 800331a:	4603      	mov	r3, r0
 800331c:	73fb      	strb	r3, [r7, #15]
            break;
 800331e:	e02b      	b.n	8003378 <handle_req_fc+0xec>
#endif

#ifndef NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED
        case 4:
            err = handle_read_input_registers(nmbs);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff f87f 	bl	8002424 <handle_read_input_registers>
 8003326:	4603      	mov	r3, r0
 8003328:	73fb      	strb	r3, [r7, #15]
            break;
 800332a:	e025      	b.n	8003378 <handle_req_fc+0xec>
#endif

#ifndef NMBS_SERVER_WRITE_SINGLE_COIL_DISABLED
        case 5:
            err = handle_write_single_coil(nmbs);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff f889 	bl	8002444 <handle_write_single_coil>
 8003332:	4603      	mov	r3, r0
 8003334:	73fb      	strb	r3, [r7, #15]
            break;
 8003336:	e01f      	b.n	8003378 <handle_req_fc+0xec>
#endif

#ifndef NMBS_SERVER_WRITE_SINGLE_REGISTER_DISABLED
        case 6:
            err = handle_write_single_register(nmbs);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff f925 	bl	8002588 <handle_write_single_register>
 800333e:	4603      	mov	r3, r0
 8003340:	73fb      	strb	r3, [r7, #15]
            break;
 8003342:	e019      	b.n	8003378 <handle_req_fc+0xec>
#endif

#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
        case 15:
            err = handle_write_multiple_coils(nmbs);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff f9af 	bl	80026a8 <handle_write_multiple_coils>
 800334a:	4603      	mov	r3, r0
 800334c:	73fb      	strb	r3, [r7, #15]
            break;
 800334e:	e013      	b.n	8003378 <handle_req_fc+0xec>
#endif

#ifndef NMBS_SERVER_WRITE_MULTIPLE_REGISTERS_DISABLED
        case 16:
            err = handle_write_multiple_registers(nmbs);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff fb2c 	bl	80029ae <handle_write_multiple_registers>
 8003356:	4603      	mov	r3, r0
 8003358:	73fb      	strb	r3, [r7, #15]
            break;
 800335a:	e00d      	b.n	8003378 <handle_req_fc+0xec>
#endif

#ifndef NMBS_SERVER_READ_FILE_RECORD_DISABLED
        case 20:
            err = handle_read_file_record(nmbs);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff fc99 	bl	8002c94 <handle_read_file_record>
 8003362:	4603      	mov	r3, r0
 8003364:	73fb      	strb	r3, [r7, #15]
            break;
 8003366:	e007      	b.n	8003378 <handle_req_fc+0xec>
#endif

#ifndef NMBS_SERVER_WRITE_FILE_RECORD_DISABLED
        case 21:
            err = handle_write_file_record(nmbs);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff fe47 	bl	8002ffc <handle_write_file_record>
 800336e:	4603      	mov	r3, r0
 8003370:	73fb      	strb	r3, [r7, #15]
            break;
 8003372:	e001      	b.n	8003378 <handle_req_fc+0xec>
#endif

        default:
            err = NMBS_EXCEPTION_ILLEGAL_FUNCTION;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
    }

    return err;
 8003378:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <nmbs_server_create>:


nmbs_error nmbs_server_create(nmbs_t* nmbs, uint8_t address_rtu, const nmbs_platform_conf* platform_conf,
                              const nmbs_callbacks* callbacks) {
 8003384:	b5b0      	push	{r4, r5, r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	460b      	mov	r3, r1
 8003392:	72fb      	strb	r3, [r7, #11]
    if (platform_conf->transport == NMBS_TRANSPORT_RTU && address_rtu == 0)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d105      	bne.n	80033a8 <nmbs_server_create+0x24>
 800339c:	7afb      	ldrb	r3, [r7, #11]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d102      	bne.n	80033a8 <nmbs_server_create+0x24>
        return NMBS_ERROR_INVALID_ARGUMENT;
 80033a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033a6:	e01e      	b.n	80033e6 <nmbs_server_create+0x62>

    nmbs_error ret = nmbs_create(nmbs, platform_conf);
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f7fd ff83 	bl	80012b6 <nmbs_create>
 80033b0:	4603      	mov	r3, r0
 80033b2:	75fb      	strb	r3, [r7, #23]
    if (ret != NMBS_ERROR_NONE)
 80033b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <nmbs_server_create+0x3e>
        return ret;
 80033bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033c0:	e011      	b.n	80033e6 <nmbs_server_create+0x62>

    nmbs->address_rtu = address_rtu;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	7afa      	ldrb	r2, [r7, #11]
 80033c6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
    nmbs->callbacks = *callbacks;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 80033d2:	4615      	mov	r5, r2
 80033d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    return NMBS_ERROR_NONE;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bdb0      	pop	{r4, r5, r7, pc}

080033ee <nmbs_server_poll>:


nmbs_error nmbs_server_poll(nmbs_t* nmbs) {
 80033ee:	b590      	push	{r4, r7, lr}
 80033f0:	b085      	sub	sp, #20
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
    msg_state_reset(nmbs);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd ff3e 	bl	8001278 <msg_state_reset>

    bool first_byte_received = false;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73bb      	strb	r3, [r7, #14]
    nmbs_error err = recv_req_header(nmbs, &first_byte_received);
 8003400:	f107 030e 	add.w	r3, r7, #14
 8003404:	4619      	mov	r1, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fe f991 	bl	800172e <recv_req_header>
 800340c:	4603      	mov	r3, r0
 800340e:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE || nmbs->msg.ignored) {
 8003410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d104      	bne.n	8003422 <nmbs_server_poll+0x34>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00f      	beq.n	8003442 <nmbs_server_poll+0x54>
        if (!first_byte_received && err == NMBS_ERROR_TIMEOUT)
 8003422:	7bbb      	ldrb	r3, [r7, #14]
 8003424:	f083 0301 	eor.w	r3, r3, #1
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d006      	beq.n	800343c <nmbs_server_poll+0x4e>
 800342e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003432:	f113 0f03 	cmn.w	r3, #3
 8003436:	d101      	bne.n	800343c <nmbs_server_poll+0x4e>
            return NMBS_ERROR_NONE;
 8003438:	2300      	movs	r3, #0
 800343a:	e031      	b.n	80034a0 <nmbs_server_poll+0xb2>

        return err;
 800343c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003440:	e02e      	b.n	80034a0 <nmbs_server_poll+0xb2>
        else
            printf("address_rtu %d\t", nmbs->msg.unit_id);
    }
#endif

    err = handle_req_fc(nmbs);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ff22 	bl	800328c <handle_req_fc>
 8003448:	4603      	mov	r3, r0
 800344a:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE && !nmbs_error_is_exception(err)) {
 800344c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d024      	beq.n	800349e <nmbs_server_poll+0xb0>
 8003454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003458:	2b00      	cmp	r3, #0
 800345a:	dd03      	ble.n	8003464 <nmbs_server_poll+0x76>
 800345c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003460:	2b04      	cmp	r3, #4
 8003462:	dd1c      	ble.n	800349e <nmbs_server_poll+0xb0>
        if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && err != NMBS_ERROR_TIMEOUT && nmbs->msg.ignored) {
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800346a:	2b01      	cmp	r3, #1
 800346c:	d114      	bne.n	8003498 <nmbs_server_poll+0xaa>
 800346e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003472:	f113 0f03 	cmn.w	r3, #3
 8003476:	d00f      	beq.n	8003498 <nmbs_server_poll+0xaa>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <nmbs_server_poll+0xaa>
            // Flush the remaining data on the line
            nmbs->platform.read(nmbs->msg.buf, sizeof(nmbs->msg.buf), 0, nmbs->platform.arg);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003490:	2200      	movs	r2, #0
 8003492:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003496:	47a0      	blx	r4
        }

        return err;
 8003498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349c:	e000      	b.n	80034a0 <nmbs_server_poll+0xb2>
    }

    return NMBS_ERROR_NONE;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd90      	pop	{r4, r7, pc}

080034a8 <logger_put>:

static const char *log_level_colors[LOG_LEVEL_NUMBER] = {RED,YEL,GRN,RESET, WHT };

static const char *log_level_names[LOG_LEVEL_NUMBER] = {"ERROR","WARN ", "INFO ", "DEBUG", "TRACE" };

static void logger_put(const char *str){
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
	...

080034bc <sm_logger_init>:
 *
 * @param _fn
 * @param _level
 * @return
 */
int32_t sm_logger_init(logger_output_fn_t _fn, LOG_LEVEL _level){
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	70fb      	strb	r3, [r7, #3]
    g_logger.m_level= _level;
 80034c8:	4a05      	ldr	r2, [pc, #20]	; (80034e0 <sm_logger_init+0x24>)
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	7013      	strb	r3, [r2, #0]
    g_logger.m_output_fn = _fn;
 80034ce:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <sm_logger_init+0x24>)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6053      	str	r3, [r2, #4]

    return 0;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr
 80034e0:	200001e8 	.word	0x200001e8

080034e4 <sm_logger_show>:
 *
 * @param _level
 * @param _tag
 * @param _log
 */
void sm_logger_show(LOG_LEVEL _level, const char* _tag, const char* _log, ...){
 80034e4:	b40c      	push	{r2, r3}
 80034e6:	b580      	push	{r7, lr}
 80034e8:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	4602      	mov	r2, r0
 80034f0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80034f4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80034f8:	6019      	str	r1, [r3, #0]
 80034fa:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80034fe:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 8003502:	701a      	strb	r2, [r3, #0]
    int len = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    char buf[LOG_BUFFER_SIZE + 2] = {0};
 800350a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800350e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	3304      	adds	r3, #4
 8003518:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800351c:	2100      	movs	r1, #0
 800351e:	4618      	mov	r0, r3
 8003520:	f002 fbd4 	bl	8005ccc <memset>
    va_list args;

    if(_level > g_logger.m_level){
 8003524:	4b3a      	ldr	r3, [pc, #232]	; (8003610 <sm_logger_show+0x12c>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800352c:	f2a2 4211 	subw	r2, r2, #1041	; 0x411
 8003530:	7812      	ldrb	r2, [r2, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d863      	bhi.n	80035fe <sm_logger_show+0x11a>
        return;
    }

    va_start(args, _log);
 8003536:	f207 4224 	addw	r2, r7, #1060	; 0x424
 800353a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800353e:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8003542:	601a      	str	r2, [r3, #0]

    len = snprintf(buf, LOG_BUFFER_SIZE, "%s#%s: %s: ",log_level_colors[_level], log_level_names[_level], _tag);
 8003544:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8003548:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	4a31      	ldr	r2, [pc, #196]	; (8003614 <sm_logger_show+0x130>)
 8003550:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003554:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8003558:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	4a2e      	ldr	r2, [pc, #184]	; (8003618 <sm_logger_show+0x134>)
 8003560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003564:	f107 0010 	add.w	r0, r7, #16
 8003568:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800356c:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	9201      	str	r2, [sp, #4]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	460b      	mov	r3, r1
 8003578:	4a28      	ldr	r2, [pc, #160]	; (800361c <sm_logger_show+0x138>)
 800357a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800357e:	f002 fa4f 	bl	8005a20 <sniprintf>
 8003582:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
    len += vsnprintf(buf + len, LOG_BUFFER_SIZE - len, _log, args);
 8003586:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800358a:	f107 0210 	add.w	r2, r7, #16
 800358e:	18d0      	adds	r0, r2, r3
 8003590:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8003594:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8003598:	4619      	mov	r1, r3
 800359a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800359e:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 80035a8:	f002 fadc 	bl	8005b64 <vsniprintf>
 80035ac:	4602      	mov	r2, r0
 80035ae:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80035b2:	4413      	add	r3, r2
 80035b4:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    va_end(args);

    if(len > LOG_BUFFER_SIZE){
 80035b8:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80035bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c0:	dd03      	ble.n	80035ca <sm_logger_show+0xe6>
        len = LOG_BUFFER_SIZE;
 80035c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035c6:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    }
    buf[len] = '\0';
 80035ca:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80035ce:	f5a3 6281 	sub.w	r2, r3, #1032	; 0x408
 80035d2:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80035d6:	4413      	add	r3, r2
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]

    if(g_logger.m_output_fn)
 80035dc:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <sm_logger_show+0x12c>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d006      	beq.n	80035f2 <sm_logger_show+0x10e>
        g_logger.m_output_fn(buf);
 80035e4:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <sm_logger_show+0x12c>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f107 0210 	add.w	r2, r7, #16
 80035ec:	4610      	mov	r0, r2
 80035ee:	4798      	blx	r3
 80035f0:	e006      	b.n	8003600 <sm_logger_show+0x11c>
    else{
        logger_put (buf);
 80035f2:	f107 0310 	add.w	r3, r7, #16
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ff56 	bl	80034a8 <logger_put>
 80035fc:	e000      	b.n	8003600 <sm_logger_show+0x11c>
        return;
 80035fe:	bf00      	nop
    }
}
 8003600:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 8003604:	46bd      	mov	sp, r7
 8003606:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800360a:	b002      	add	sp, #8
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	200001e8 	.word	0x200001e8
 8003614:	200001c0 	.word	0x200001c0
 8003618:	200001d4 	.word	0x200001d4
 800361c:	080068e0 	.word	0x080068e0

08003620 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800362a:	2003      	movs	r0, #3
 800362c:	f000 f932 	bl	8003894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003630:	200f      	movs	r0, #15
 8003632:	f000 f80d 	bl	8003650 <HAL_InitTick>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	71fb      	strb	r3, [r7, #7]
 8003640:	e001      	b.n	8003646 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003642:	f7fd fa93 	bl	8000b6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003646:	79fb      	ldrb	r3, [r7, #7]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800365c:	4b16      	ldr	r3, [pc, #88]	; (80036b8 <HAL_InitTick+0x68>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d022      	beq.n	80036aa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003664:	4b15      	ldr	r3, [pc, #84]	; (80036bc <HAL_InitTick+0x6c>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <HAL_InitTick+0x68>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003670:	fbb1 f3f3 	udiv	r3, r1, r3
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	4618      	mov	r0, r3
 800367a:	f000 f940 	bl	80038fe <HAL_SYSTICK_Config>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10f      	bne.n	80036a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b0f      	cmp	r3, #15
 8003688:	d809      	bhi.n	800369e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800368a:	2200      	movs	r2, #0
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003692:	f000 f90a 	bl	80038aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003696:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <HAL_InitTick+0x70>)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	e007      	b.n	80036ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
 80036a2:	e004      	b.n	80036ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
 80036a8:	e001      	b.n	80036ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	200001f4 	.word	0x200001f4
 80036bc:	20000000 	.word	0x20000000
 80036c0:	200001f0 	.word	0x200001f0

080036c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_IncTick+0x1c>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_IncTick+0x20>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4413      	add	r3, r2
 80036d2:	4a03      	ldr	r2, [pc, #12]	; (80036e0 <HAL_IncTick+0x1c>)
 80036d4:	6013      	str	r3, [r2, #0]
}
 80036d6:	bf00      	nop
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	2000036c 	.word	0x2000036c
 80036e4:	200001f4 	.word	0x200001f4

080036e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return uwTick;
 80036ec:	4b02      	ldr	r3, [pc, #8]	; (80036f8 <HAL_GetTick+0x10>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	2000036c 	.word	0x2000036c

080036fc <__NVIC_SetPriorityGrouping>:
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800370c:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <__NVIC_SetPriorityGrouping+0x44>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003718:	4013      	ands	r3, r2
 800371a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800372c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800372e:	4a04      	ldr	r2, [pc, #16]	; (8003740 <__NVIC_SetPriorityGrouping+0x44>)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	60d3      	str	r3, [r2, #12]
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <__NVIC_GetPriorityGrouping>:
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003748:	4b04      	ldr	r3, [pc, #16]	; (800375c <__NVIC_GetPriorityGrouping+0x18>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	0a1b      	lsrs	r3, r3, #8
 800374e:	f003 0307 	and.w	r3, r3, #7
}
 8003752:	4618      	mov	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <__NVIC_EnableIRQ>:
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	2b00      	cmp	r3, #0
 8003770:	db0b      	blt.n	800378a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	f003 021f 	and.w	r2, r3, #31
 8003778:	4906      	ldr	r1, [pc, #24]	; (8003794 <__NVIC_EnableIRQ+0x34>)
 800377a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	2001      	movs	r0, #1
 8003782:	fa00 f202 	lsl.w	r2, r0, r2
 8003786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	e000e100 	.word	0xe000e100

08003798 <__NVIC_SetPriority>:
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	6039      	str	r1, [r7, #0]
 80037a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	db0a      	blt.n	80037c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	490c      	ldr	r1, [pc, #48]	; (80037e4 <__NVIC_SetPriority+0x4c>)
 80037b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b6:	0112      	lsls	r2, r2, #4
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	440b      	add	r3, r1
 80037bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037c0:	e00a      	b.n	80037d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	4908      	ldr	r1, [pc, #32]	; (80037e8 <__NVIC_SetPriority+0x50>)
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	3b04      	subs	r3, #4
 80037d0:	0112      	lsls	r2, r2, #4
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	440b      	add	r3, r1
 80037d6:	761a      	strb	r2, [r3, #24]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	e000e100 	.word	0xe000e100
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <NVIC_EncodePriority>:
{
 80037ec:	b480      	push	{r7}
 80037ee:	b089      	sub	sp, #36	; 0x24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f1c3 0307 	rsb	r3, r3, #7
 8003806:	2b04      	cmp	r3, #4
 8003808:	bf28      	it	cs
 800380a:	2304      	movcs	r3, #4
 800380c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3304      	adds	r3, #4
 8003812:	2b06      	cmp	r3, #6
 8003814:	d902      	bls.n	800381c <NVIC_EncodePriority+0x30>
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3b03      	subs	r3, #3
 800381a:	e000      	b.n	800381e <NVIC_EncodePriority+0x32>
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43da      	mvns	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	401a      	ands	r2, r3
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003834:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	fa01 f303 	lsl.w	r3, r1, r3
 800383e:	43d9      	mvns	r1, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003844:	4313      	orrs	r3, r2
}
 8003846:	4618      	mov	r0, r3
 8003848:	3724      	adds	r7, #36	; 0x24
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <SysTick_Config>:
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3b01      	subs	r3, #1
 800385c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003860:	d301      	bcc.n	8003866 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003862:	2301      	movs	r3, #1
 8003864:	e00f      	b.n	8003886 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003866:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <SysTick_Config+0x40>)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3b01      	subs	r3, #1
 800386c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800386e:	210f      	movs	r1, #15
 8003870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003874:	f7ff ff90 	bl	8003798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <SysTick_Config+0x40>)
 800387a:	2200      	movs	r2, #0
 800387c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387e:	4b04      	ldr	r3, [pc, #16]	; (8003890 <SysTick_Config+0x40>)
 8003880:	2207      	movs	r2, #7
 8003882:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	e000e010 	.word	0xe000e010

08003894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff ff2d 	bl	80036fc <__NVIC_SetPriorityGrouping>
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b086      	sub	sp, #24
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	4603      	mov	r3, r0
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038bc:	f7ff ff42 	bl	8003744 <__NVIC_GetPriorityGrouping>
 80038c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	6978      	ldr	r0, [r7, #20]
 80038c8:	f7ff ff90 	bl	80037ec <NVIC_EncodePriority>
 80038cc:	4602      	mov	r2, r0
 80038ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff ff5f 	bl	8003798 <__NVIC_SetPriority>
}
 80038da:	bf00      	nop
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	4603      	mov	r3, r0
 80038ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff ff35 	bl	8003760 <__NVIC_EnableIRQ>
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff ffa2 	bl	8003850 <SysTick_Config>
 800390c:	4603      	mov	r3, r0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003916:	b480      	push	{r7}
 8003918:	b085      	sub	sp, #20
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d008      	beq.n	8003940 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2204      	movs	r2, #4
 8003932:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e022      	b.n	8003986 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 020e 	bic.w	r2, r2, #14
 800394e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	f003 021c 	and.w	r2, r3, #28
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396c:	2101      	movs	r1, #1
 800396e:	fa01 f202 	lsl.w	r2, r1, r2
 8003972:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8003984:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d005      	beq.n	80039b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2204      	movs	r2, #4
 80039ac:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
 80039b2:	e029      	b.n	8003a08 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 020e 	bic.w	r2, r2, #14
 80039c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0201 	bic.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f003 021c 	and.w	r2, r3, #28
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e0:	2101      	movs	r1, #1
 80039e2:	fa01 f202 	lsl.w	r2, r1, r2
 80039e6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
    }
  }
  return status;
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003a26:	2300      	movs	r3, #0
 8003a28:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003a2a:	e154      	b.n	8003cd6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	2101      	movs	r1, #1
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	fa01 f303 	lsl.w	r3, r1, r3
 8003a38:	4013      	ands	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8146 	beq.w	8003cd0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d005      	beq.n	8003a5c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d130      	bne.n	8003abe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	2203      	movs	r2, #3
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4013      	ands	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003a92:	2201      	movs	r2, #1
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	f003 0201 	and.w	r2, r3, #1
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d017      	beq.n	8003afa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43db      	mvns	r3, r3
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d123      	bne.n	8003b4e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	08da      	lsrs	r2, r3, #3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3208      	adds	r2, #8
 8003b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	220f      	movs	r2, #15
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4013      	ands	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	691a      	ldr	r2, [r3, #16]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	08da      	lsrs	r2, r3, #3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3208      	adds	r2, #8
 8003b48:	6939      	ldr	r1, [r7, #16]
 8003b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	2203      	movs	r2, #3
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4013      	ands	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 0203 	and.w	r2, r3, #3
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80a0 	beq.w	8003cd0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b90:	4b58      	ldr	r3, [pc, #352]	; (8003cf4 <HAL_GPIO_Init+0x2e0>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	4a57      	ldr	r2, [pc, #348]	; (8003cf4 <HAL_GPIO_Init+0x2e0>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6213      	str	r3, [r2, #32]
 8003b9c:	4b55      	ldr	r3, [pc, #340]	; (8003cf4 <HAL_GPIO_Init+0x2e0>)
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ba8:	4a53      	ldr	r2, [pc, #332]	; (8003cf8 <HAL_GPIO_Init+0x2e4>)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	089b      	lsrs	r3, r3, #2
 8003bae:	3302      	adds	r3, #2
 8003bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	220f      	movs	r2, #15
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a4b      	ldr	r2, [pc, #300]	; (8003cfc <HAL_GPIO_Init+0x2e8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d019      	beq.n	8003c08 <HAL_GPIO_Init+0x1f4>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a4a      	ldr	r2, [pc, #296]	; (8003d00 <HAL_GPIO_Init+0x2ec>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d013      	beq.n	8003c04 <HAL_GPIO_Init+0x1f0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a49      	ldr	r2, [pc, #292]	; (8003d04 <HAL_GPIO_Init+0x2f0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00d      	beq.n	8003c00 <HAL_GPIO_Init+0x1ec>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a48      	ldr	r2, [pc, #288]	; (8003d08 <HAL_GPIO_Init+0x2f4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d007      	beq.n	8003bfc <HAL_GPIO_Init+0x1e8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a47      	ldr	r2, [pc, #284]	; (8003d0c <HAL_GPIO_Init+0x2f8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d101      	bne.n	8003bf8 <HAL_GPIO_Init+0x1e4>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	e008      	b.n	8003c0a <HAL_GPIO_Init+0x1f6>
 8003bf8:	2305      	movs	r3, #5
 8003bfa:	e006      	b.n	8003c0a <HAL_GPIO_Init+0x1f6>
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e004      	b.n	8003c0a <HAL_GPIO_Init+0x1f6>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e002      	b.n	8003c0a <HAL_GPIO_Init+0x1f6>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <HAL_GPIO_Init+0x1f6>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	f002 0203 	and.w	r2, r2, #3
 8003c10:	0092      	lsls	r2, r2, #2
 8003c12:	4093      	lsls	r3, r2
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c1a:	4937      	ldr	r1, [pc, #220]	; (8003cf8 <HAL_GPIO_Init+0x2e4>)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	089b      	lsrs	r3, r3, #2
 8003c20:	3302      	adds	r3, #2
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c28:	4b39      	ldr	r3, [pc, #228]	; (8003d10 <HAL_GPIO_Init+0x2fc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	43db      	mvns	r3, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4013      	ands	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c4c:	4a30      	ldr	r2, [pc, #192]	; (8003d10 <HAL_GPIO_Init+0x2fc>)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c52:	4b2f      	ldr	r3, [pc, #188]	; (8003d10 <HAL_GPIO_Init+0x2fc>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c76:	4a26      	ldr	r2, [pc, #152]	; (8003d10 <HAL_GPIO_Init+0x2fc>)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c7c:	4b24      	ldr	r3, [pc, #144]	; (8003d10 <HAL_GPIO_Init+0x2fc>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	43db      	mvns	r3, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ca0:	4a1b      	ldr	r2, [pc, #108]	; (8003d10 <HAL_GPIO_Init+0x2fc>)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ca6:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <HAL_GPIO_Init+0x2fc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003cca:	4a11      	ldr	r2, [pc, #68]	; (8003d10 <HAL_GPIO_Init+0x2fc>)
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f47f aea3 	bne.w	8003a2c <HAL_GPIO_Init+0x18>
  }
}
 8003ce6:	bf00      	nop
 8003ce8:	bf00      	nop
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	40020000 	.word	0x40020000
 8003d00:	40020400 	.word	0x40020400
 8003d04:	40020800 	.word	0x40020800
 8003d08:	40020c00 	.word	0x40020c00
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	40010400 	.word	0x40010400

08003d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	807b      	strh	r3, [r7, #2]
 8003d20:	4613      	mov	r3, r2
 8003d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d24:	787b      	ldrb	r3, [r7, #1]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d2a:	887a      	ldrh	r2, [r7, #2]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003d30:	e003      	b.n	8003d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003d32:	887b      	ldrh	r3, [r7, #2]
 8003d34:	041a      	lsls	r2, r3, #16
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	619a      	str	r2, [r3, #24]
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d56:	887a      	ldrh	r2, [r7, #2]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	041a      	lsls	r2, r3, #16
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	43d9      	mvns	r1, r3
 8003d62:	887b      	ldrh	r3, [r7, #2]
 8003d64:	400b      	ands	r3, r1
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	619a      	str	r2, [r3, #24]
}
 8003d6c:	bf00      	nop
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr
	...

08003d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e31d      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d8a:	4b94      	ldr	r3, [pc, #592]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d94:	4b91      	ldr	r3, [pc, #580]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d9c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d07b      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d006      	beq.n	8003dbe <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	2b0c      	cmp	r3, #12
 8003db4:	d10f      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x5e>
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dbc:	d10b      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dbe:	4b87      	ldr	r3, [pc, #540]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d06a      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x128>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d166      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e2f7      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d106      	bne.n	8003dec <HAL_RCC_OscConfig+0x74>
 8003dde:	4b7f      	ldr	r3, [pc, #508]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a7e      	ldr	r2, [pc, #504]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	e02d      	b.n	8003e48 <HAL_RCC_OscConfig+0xd0>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10c      	bne.n	8003e0e <HAL_RCC_OscConfig+0x96>
 8003df4:	4b79      	ldr	r3, [pc, #484]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a78      	ldr	r2, [pc, #480]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	4b76      	ldr	r3, [pc, #472]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a75      	ldr	r2, [pc, #468]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	e01c      	b.n	8003e48 <HAL_RCC_OscConfig+0xd0>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b05      	cmp	r3, #5
 8003e14:	d10c      	bne.n	8003e30 <HAL_RCC_OscConfig+0xb8>
 8003e16:	4b71      	ldr	r3, [pc, #452]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a70      	ldr	r2, [pc, #448]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	4b6e      	ldr	r3, [pc, #440]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a6d      	ldr	r2, [pc, #436]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	e00b      	b.n	8003e48 <HAL_RCC_OscConfig+0xd0>
 8003e30:	4b6a      	ldr	r3, [pc, #424]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a69      	ldr	r2, [pc, #420]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	4b67      	ldr	r3, [pc, #412]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a66      	ldr	r2, [pc, #408]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d013      	beq.n	8003e78 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7ff fc4a 	bl	80036e8 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e58:	f7ff fc46 	bl	80036e8 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b64      	cmp	r3, #100	; 0x64
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e2ad      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e6a:	4b5c      	ldr	r3, [pc, #368]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0xe0>
 8003e76:	e014      	b.n	8003ea2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7ff fc36 	bl	80036e8 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e80:	f7ff fc32 	bl	80036e8 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	; 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e299      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e92:	4b52      	ldr	r3, [pc, #328]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x108>
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d05a      	beq.n	8003f64 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d119      	bne.n	8003eee <HAL_RCC_OscConfig+0x176>
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d116      	bne.n	8003eee <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec0:	4b46      	ldr	r3, [pc, #280]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x160>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e276      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed8:	4b40      	ldr	r3, [pc, #256]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	493d      	ldr	r1, [pc, #244]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eec:	e03a      	b.n	8003f64 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d020      	beq.n	8003f38 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ef6:	4b3a      	ldr	r3, [pc, #232]	; (8003fe0 <HAL_RCC_OscConfig+0x268>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efc:	f7ff fbf4 	bl	80036e8 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f04:	f7ff fbf0 	bl	80036e8 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e257      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f16:	4b31      	ldr	r3, [pc, #196]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f22:	4b2e      	ldr	r3, [pc, #184]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	492a      	ldr	r1, [pc, #168]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	604b      	str	r3, [r1, #4]
 8003f36:	e015      	b.n	8003f64 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f38:	4b29      	ldr	r3, [pc, #164]	; (8003fe0 <HAL_RCC_OscConfig+0x268>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3e:	f7ff fbd3 	bl	80036e8 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f46:	f7ff fbcf 	bl	80036e8 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e236      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f58:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1f0      	bne.n	8003f46 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80b8 	beq.w	80040e2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d170      	bne.n	800405a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f78:	4b18      	ldr	r3, [pc, #96]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_OscConfig+0x218>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e21a      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1a      	ldr	r2, [r3, #32]
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d921      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fc3b 	bl	8004820 <RCC_SetFlashLatencyFromMSIRange>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e208      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fb4:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	4906      	ldr	r1, [pc, #24]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fc6:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	061b      	lsls	r3, r3, #24
 8003fd4:	4901      	ldr	r1, [pc, #4]	; (8003fdc <HAL_RCC_OscConfig+0x264>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	604b      	str	r3, [r1, #4]
 8003fda:	e020      	b.n	800401e <HAL_RCC_OscConfig+0x2a6>
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fe4:	4b99      	ldr	r3, [pc, #612]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	4996      	ldr	r1, [pc, #600]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ff6:	4b95      	ldr	r3, [pc, #596]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	061b      	lsls	r3, r3, #24
 8004004:	4991      	ldr	r1, [pc, #580]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 8004006:	4313      	orrs	r3, r2
 8004008:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fc06 	bl	8004820 <RCC_SetFlashLatencyFromMSIRange>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e1d3      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	0b5b      	lsrs	r3, r3, #13
 8004024:	3301      	adds	r3, #1
 8004026:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800402e:	4a87      	ldr	r2, [pc, #540]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 8004030:	6892      	ldr	r2, [r2, #8]
 8004032:	0912      	lsrs	r2, r2, #4
 8004034:	f002 020f 	and.w	r2, r2, #15
 8004038:	4985      	ldr	r1, [pc, #532]	; (8004250 <HAL_RCC_OscConfig+0x4d8>)
 800403a:	5c8a      	ldrb	r2, [r1, r2]
 800403c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800403e:	4a85      	ldr	r2, [pc, #532]	; (8004254 <HAL_RCC_OscConfig+0x4dc>)
 8004040:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004042:	4b85      	ldr	r3, [pc, #532]	; (8004258 <HAL_RCC_OscConfig+0x4e0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff fb02 	bl	8003650 <HAL_InitTick>
 800404c:	4603      	mov	r3, r0
 800404e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d045      	beq.n	80040e2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	e1b5      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d029      	beq.n	80040b6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004062:	4b7e      	ldr	r3, [pc, #504]	; (800425c <HAL_RCC_OscConfig+0x4e4>)
 8004064:	2201      	movs	r2, #1
 8004066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004068:	f7ff fb3e 	bl	80036e8 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004070:	f7ff fb3a 	bl	80036e8 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e1a1      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004082:	4b72      	ldr	r3, [pc, #456]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800408e:	4b6f      	ldr	r3, [pc, #444]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	496c      	ldr	r1, [pc, #432]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 800409c:	4313      	orrs	r3, r2
 800409e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040a0:	4b6a      	ldr	r3, [pc, #424]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	061b      	lsls	r3, r3, #24
 80040ae:	4967      	ldr	r1, [pc, #412]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	604b      	str	r3, [r1, #4]
 80040b4:	e015      	b.n	80040e2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040b6:	4b69      	ldr	r3, [pc, #420]	; (800425c <HAL_RCC_OscConfig+0x4e4>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040bc:	f7ff fb14 	bl	80036e8 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040c4:	f7ff fb10 	bl	80036e8 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e177      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80040d6:	4b5d      	ldr	r3, [pc, #372]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d030      	beq.n	8004150 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d016      	beq.n	8004124 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040f6:	4b5a      	ldr	r3, [pc, #360]	; (8004260 <HAL_RCC_OscConfig+0x4e8>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fc:	f7ff faf4 	bl	80036e8 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004104:	f7ff faf0 	bl	80036e8 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e157      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004116:	4b4d      	ldr	r3, [pc, #308]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 8004118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x38c>
 8004122:	e015      	b.n	8004150 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004124:	4b4e      	ldr	r3, [pc, #312]	; (8004260 <HAL_RCC_OscConfig+0x4e8>)
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412a:	f7ff fadd 	bl	80036e8 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004132:	f7ff fad9 	bl	80036e8 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e140      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004144:	4b41      	ldr	r3, [pc, #260]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 8004146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f0      	bne.n	8004132 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80b5 	beq.w	80042c8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800415e:	2300      	movs	r3, #0
 8004160:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004162:	4b3a      	ldr	r3, [pc, #232]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10d      	bne.n	800418a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800416e:	4b37      	ldr	r3, [pc, #220]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	4a36      	ldr	r2, [pc, #216]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 8004174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004178:	6253      	str	r3, [r2, #36]	; 0x24
 800417a:	4b34      	ldr	r3, [pc, #208]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004182:	60bb      	str	r3, [r7, #8]
 8004184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004186:	2301      	movs	r3, #1
 8004188:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418a:	4b36      	ldr	r3, [pc, #216]	; (8004264 <HAL_RCC_OscConfig+0x4ec>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d118      	bne.n	80041c8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004196:	4b33      	ldr	r3, [pc, #204]	; (8004264 <HAL_RCC_OscConfig+0x4ec>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a32      	ldr	r2, [pc, #200]	; (8004264 <HAL_RCC_OscConfig+0x4ec>)
 800419c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041a2:	f7ff faa1 	bl	80036e8 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041aa:	f7ff fa9d 	bl	80036e8 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b64      	cmp	r3, #100	; 0x64
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e104      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	4b29      	ldr	r3, [pc, #164]	; (8004264 <HAL_RCC_OscConfig+0x4ec>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d106      	bne.n	80041de <HAL_RCC_OscConfig+0x466>
 80041d0:	4b1e      	ldr	r3, [pc, #120]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 80041d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d4:	4a1d      	ldr	r2, [pc, #116]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 80041d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041da:	6353      	str	r3, [r2, #52]	; 0x34
 80041dc:	e02d      	b.n	800423a <HAL_RCC_OscConfig+0x4c2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10c      	bne.n	8004200 <HAL_RCC_OscConfig+0x488>
 80041e6:	4b19      	ldr	r3, [pc, #100]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 80041e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ea:	4a18      	ldr	r2, [pc, #96]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 80041ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f0:	6353      	str	r3, [r2, #52]	; 0x34
 80041f2:	4b16      	ldr	r3, [pc, #88]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 80041f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f6:	4a15      	ldr	r2, [pc, #84]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 80041f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041fc:	6353      	str	r3, [r2, #52]	; 0x34
 80041fe:	e01c      	b.n	800423a <HAL_RCC_OscConfig+0x4c2>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b05      	cmp	r3, #5
 8004206:	d10c      	bne.n	8004222 <HAL_RCC_OscConfig+0x4aa>
 8004208:	4b10      	ldr	r3, [pc, #64]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 800420a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420c:	4a0f      	ldr	r2, [pc, #60]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 800420e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004212:	6353      	str	r3, [r2, #52]	; 0x34
 8004214:	4b0d      	ldr	r3, [pc, #52]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 8004216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004218:	4a0c      	ldr	r2, [pc, #48]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 800421a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421e:	6353      	str	r3, [r2, #52]	; 0x34
 8004220:	e00b      	b.n	800423a <HAL_RCC_OscConfig+0x4c2>
 8004222:	4b0a      	ldr	r3, [pc, #40]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 8004224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004226:	4a09      	ldr	r2, [pc, #36]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 8004228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800422c:	6353      	str	r3, [r2, #52]	; 0x34
 800422e:	4b07      	ldr	r3, [pc, #28]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 8004230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004232:	4a06      	ldr	r2, [pc, #24]	; (800424c <HAL_RCC_OscConfig+0x4d4>)
 8004234:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004238:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d024      	beq.n	800428c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004242:	f7ff fa51 	bl	80036e8 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004248:	e019      	b.n	800427e <HAL_RCC_OscConfig+0x506>
 800424a:	bf00      	nop
 800424c:	40023800 	.word	0x40023800
 8004250:	08006918 	.word	0x08006918
 8004254:	20000000 	.word	0x20000000
 8004258:	200001f0 	.word	0x200001f0
 800425c:	42470020 	.word	0x42470020
 8004260:	42470680 	.word	0x42470680
 8004264:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004268:	f7ff fa3e 	bl	80036e8 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	; 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0a3      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800427e:	4b54      	ldr	r3, [pc, #336]	; (80043d0 <HAL_RCC_OscConfig+0x658>)
 8004280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0ee      	beq.n	8004268 <HAL_RCC_OscConfig+0x4f0>
 800428a:	e014      	b.n	80042b6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428c:	f7ff fa2c 	bl	80036e8 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004292:	e00a      	b.n	80042aa <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004294:	f7ff fa28 	bl	80036e8 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e08d      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042aa:	4b49      	ldr	r3, [pc, #292]	; (80043d0 <HAL_RCC_OscConfig+0x658>)
 80042ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1ee      	bne.n	8004294 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042b6:	7ffb      	ldrb	r3, [r7, #31]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d105      	bne.n	80042c8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042bc:	4b44      	ldr	r3, [pc, #272]	; (80043d0 <HAL_RCC_OscConfig+0x658>)
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	4a43      	ldr	r2, [pc, #268]	; (80043d0 <HAL_RCC_OscConfig+0x658>)
 80042c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d079      	beq.n	80043c4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	2b0c      	cmp	r3, #12
 80042d4:	d056      	beq.n	8004384 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d13b      	bne.n	8004356 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042de:	4b3d      	ldr	r3, [pc, #244]	; (80043d4 <HAL_RCC_OscConfig+0x65c>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e4:	f7ff fa00 	bl	80036e8 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ec:	f7ff f9fc 	bl	80036e8 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e063      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042fe:	4b34      	ldr	r3, [pc, #208]	; (80043d0 <HAL_RCC_OscConfig+0x658>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800430a:	4b31      	ldr	r3, [pc, #196]	; (80043d0 <HAL_RCC_OscConfig+0x658>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	4319      	orrs	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004320:	430b      	orrs	r3, r1
 8004322:	492b      	ldr	r1, [pc, #172]	; (80043d0 <HAL_RCC_OscConfig+0x658>)
 8004324:	4313      	orrs	r3, r2
 8004326:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004328:	4b2a      	ldr	r3, [pc, #168]	; (80043d4 <HAL_RCC_OscConfig+0x65c>)
 800432a:	2201      	movs	r2, #1
 800432c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432e:	f7ff f9db 	bl	80036e8 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004336:	f7ff f9d7 	bl	80036e8 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e03e      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004348:	4b21      	ldr	r3, [pc, #132]	; (80043d0 <HAL_RCC_OscConfig+0x658>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0x5be>
 8004354:	e036      	b.n	80043c4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004356:	4b1f      	ldr	r3, [pc, #124]	; (80043d4 <HAL_RCC_OscConfig+0x65c>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435c:	f7ff f9c4 	bl	80036e8 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004364:	f7ff f9c0 	bl	80036e8 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e027      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004376:	4b16      	ldr	r3, [pc, #88]	; (80043d0 <HAL_RCC_OscConfig+0x658>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0x5ec>
 8004382:	e01f      	b.n	80043c4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e01a      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004390:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <HAL_RCC_OscConfig+0x658>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d10d      	bne.n	80043c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d106      	bne.n	80043c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80043bc:	429a      	cmp	r2, r3
 80043be:	d001      	beq.n	80043c4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3720      	adds	r7, #32
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40023800 	.word	0x40023800
 80043d4:	42470060 	.word	0x42470060

080043d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e11a      	b.n	8004622 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043ec:	4b8f      	ldr	r3, [pc, #572]	; (800462c <HAL_RCC_ClockConfig+0x254>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d919      	bls.n	800442e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d105      	bne.n	800440c <HAL_RCC_ClockConfig+0x34>
 8004400:	4b8a      	ldr	r3, [pc, #552]	; (800462c <HAL_RCC_ClockConfig+0x254>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a89      	ldr	r2, [pc, #548]	; (800462c <HAL_RCC_ClockConfig+0x254>)
 8004406:	f043 0304 	orr.w	r3, r3, #4
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	4b87      	ldr	r3, [pc, #540]	; (800462c <HAL_RCC_ClockConfig+0x254>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f023 0201 	bic.w	r2, r3, #1
 8004414:	4985      	ldr	r1, [pc, #532]	; (800462c <HAL_RCC_ClockConfig+0x254>)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	4313      	orrs	r3, r2
 800441a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800441c:	4b83      	ldr	r3, [pc, #524]	; (800462c <HAL_RCC_ClockConfig+0x254>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d001      	beq.n	800442e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e0f9      	b.n	8004622 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800443a:	4b7d      	ldr	r3, [pc, #500]	; (8004630 <HAL_RCC_ClockConfig+0x258>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	497a      	ldr	r1, [pc, #488]	; (8004630 <HAL_RCC_ClockConfig+0x258>)
 8004448:	4313      	orrs	r3, r2
 800444a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 808e 	beq.w	8004576 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d107      	bne.n	8004472 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004462:	4b73      	ldr	r3, [pc, #460]	; (8004630 <HAL_RCC_ClockConfig+0x258>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d121      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e0d7      	b.n	8004622 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b03      	cmp	r3, #3
 8004478:	d107      	bne.n	800448a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800447a:	4b6d      	ldr	r3, [pc, #436]	; (8004630 <HAL_RCC_ClockConfig+0x258>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d115      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e0cb      	b.n	8004622 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d107      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004492:	4b67      	ldr	r3, [pc, #412]	; (8004630 <HAL_RCC_ClockConfig+0x258>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e0bf      	b.n	8004622 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044a2:	4b63      	ldr	r3, [pc, #396]	; (8004630 <HAL_RCC_ClockConfig+0x258>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e0b7      	b.n	8004622 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044b2:	4b5f      	ldr	r3, [pc, #380]	; (8004630 <HAL_RCC_ClockConfig+0x258>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f023 0203 	bic.w	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	495c      	ldr	r1, [pc, #368]	; (8004630 <HAL_RCC_ClockConfig+0x258>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044c4:	f7ff f910 	bl	80036e8 <HAL_GetTick>
 80044c8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d112      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d4:	f7ff f908 	bl	80036e8 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e09b      	b.n	8004622 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80044ea:	4b51      	ldr	r3, [pc, #324]	; (8004630 <HAL_RCC_ClockConfig+0x258>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d1ee      	bne.n	80044d4 <HAL_RCC_ClockConfig+0xfc>
 80044f6:	e03e      	b.n	8004576 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d112      	bne.n	8004526 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004500:	e00a      	b.n	8004518 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004502:	f7ff f8f1 	bl	80036e8 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004510:	4293      	cmp	r3, r2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e084      	b.n	8004622 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004518:	4b45      	ldr	r3, [pc, #276]	; (8004630 <HAL_RCC_ClockConfig+0x258>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 030c 	and.w	r3, r3, #12
 8004520:	2b0c      	cmp	r3, #12
 8004522:	d1ee      	bne.n	8004502 <HAL_RCC_ClockConfig+0x12a>
 8004524:	e027      	b.n	8004576 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d11d      	bne.n	800456a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800452e:	e00a      	b.n	8004546 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004530:	f7ff f8da 	bl	80036e8 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f241 3288 	movw	r2, #5000	; 0x1388
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e06d      	b.n	8004622 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004546:	4b3a      	ldr	r3, [pc, #232]	; (8004630 <HAL_RCC_ClockConfig+0x258>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b04      	cmp	r3, #4
 8004550:	d1ee      	bne.n	8004530 <HAL_RCC_ClockConfig+0x158>
 8004552:	e010      	b.n	8004576 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004554:	f7ff f8c8 	bl	80036e8 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e05b      	b.n	8004622 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800456a:	4b31      	ldr	r3, [pc, #196]	; (8004630 <HAL_RCC_ClockConfig+0x258>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1ee      	bne.n	8004554 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004576:	4b2d      	ldr	r3, [pc, #180]	; (800462c <HAL_RCC_ClockConfig+0x254>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d219      	bcs.n	80045b8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d105      	bne.n	8004596 <HAL_RCC_ClockConfig+0x1be>
 800458a:	4b28      	ldr	r3, [pc, #160]	; (800462c <HAL_RCC_ClockConfig+0x254>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a27      	ldr	r2, [pc, #156]	; (800462c <HAL_RCC_ClockConfig+0x254>)
 8004590:	f043 0304 	orr.w	r3, r3, #4
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b25      	ldr	r3, [pc, #148]	; (800462c <HAL_RCC_ClockConfig+0x254>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f023 0201 	bic.w	r2, r3, #1
 800459e:	4923      	ldr	r1, [pc, #140]	; (800462c <HAL_RCC_ClockConfig+0x254>)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a6:	4b21      	ldr	r3, [pc, #132]	; (800462c <HAL_RCC_ClockConfig+0x254>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e034      	b.n	8004622 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045c4:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <HAL_RCC_ClockConfig+0x258>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	4917      	ldr	r1, [pc, #92]	; (8004630 <HAL_RCC_ClockConfig+0x258>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d009      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045e2:	4b13      	ldr	r3, [pc, #76]	; (8004630 <HAL_RCC_ClockConfig+0x258>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	490f      	ldr	r1, [pc, #60]	; (8004630 <HAL_RCC_ClockConfig+0x258>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045f6:	f000 f823 	bl	8004640 <HAL_RCC_GetSysClockFreq>
 80045fa:	4602      	mov	r2, r0
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <HAL_RCC_ClockConfig+0x258>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	091b      	lsrs	r3, r3, #4
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	490b      	ldr	r1, [pc, #44]	; (8004634 <HAL_RCC_ClockConfig+0x25c>)
 8004608:	5ccb      	ldrb	r3, [r1, r3]
 800460a:	fa22 f303 	lsr.w	r3, r2, r3
 800460e:	4a0a      	ldr	r2, [pc, #40]	; (8004638 <HAL_RCC_ClockConfig+0x260>)
 8004610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004612:	4b0a      	ldr	r3, [pc, #40]	; (800463c <HAL_RCC_ClockConfig+0x264>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff f81a 	bl	8003650 <HAL_InitTick>
 800461c:	4603      	mov	r3, r0
 800461e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004620:	7afb      	ldrb	r3, [r7, #11]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40023c00 	.word	0x40023c00
 8004630:	40023800 	.word	0x40023800
 8004634:	08006918 	.word	0x08006918
 8004638:	20000000 	.word	0x20000000
 800463c:	200001f0 	.word	0x200001f0

08004640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004644:	b08e      	sub	sp, #56	; 0x38
 8004646:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004648:	4b58      	ldr	r3, [pc, #352]	; (80047ac <HAL_RCC_GetSysClockFreq+0x16c>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004650:	f003 030c 	and.w	r3, r3, #12
 8004654:	2b0c      	cmp	r3, #12
 8004656:	d00d      	beq.n	8004674 <HAL_RCC_GetSysClockFreq+0x34>
 8004658:	2b0c      	cmp	r3, #12
 800465a:	f200 8092 	bhi.w	8004782 <HAL_RCC_GetSysClockFreq+0x142>
 800465e:	2b04      	cmp	r3, #4
 8004660:	d002      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0x28>
 8004662:	2b08      	cmp	r3, #8
 8004664:	d003      	beq.n	800466e <HAL_RCC_GetSysClockFreq+0x2e>
 8004666:	e08c      	b.n	8004782 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004668:	4b51      	ldr	r3, [pc, #324]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x170>)
 800466a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800466c:	e097      	b.n	800479e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800466e:	4b51      	ldr	r3, [pc, #324]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x174>)
 8004670:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004672:	e094      	b.n	800479e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004676:	0c9b      	lsrs	r3, r3, #18
 8004678:	f003 020f 	and.w	r2, r3, #15
 800467c:	4b4e      	ldr	r3, [pc, #312]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x178>)
 800467e:	5c9b      	ldrb	r3, [r3, r2]
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004684:	0d9b      	lsrs	r3, r3, #22
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	3301      	adds	r3, #1
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800468e:	4b47      	ldr	r3, [pc, #284]	; (80047ac <HAL_RCC_GetSysClockFreq+0x16c>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d021      	beq.n	80046de <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	2200      	movs	r2, #0
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	61fa      	str	r2, [r7, #28]
 80046a2:	4b44      	ldr	r3, [pc, #272]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x174>)
 80046a4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80046a8:	464a      	mov	r2, r9
 80046aa:	fb03 f202 	mul.w	r2, r3, r2
 80046ae:	2300      	movs	r3, #0
 80046b0:	4644      	mov	r4, r8
 80046b2:	fb04 f303 	mul.w	r3, r4, r3
 80046b6:	4413      	add	r3, r2
 80046b8:	4a3e      	ldr	r2, [pc, #248]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x174>)
 80046ba:	4644      	mov	r4, r8
 80046bc:	fba4 0102 	umull	r0, r1, r4, r2
 80046c0:	440b      	add	r3, r1
 80046c2:	4619      	mov	r1, r3
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	2200      	movs	r2, #0
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	617a      	str	r2, [r7, #20]
 80046cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046d0:	f7fb fd54 	bl	800017c <__aeabi_uldivmod>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4613      	mov	r3, r2
 80046da:	637b      	str	r3, [r7, #52]	; 0x34
 80046dc:	e04e      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80046de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e0:	2200      	movs	r2, #0
 80046e2:	469a      	mov	sl, r3
 80046e4:	4693      	mov	fp, r2
 80046e6:	4652      	mov	r2, sl
 80046e8:	465b      	mov	r3, fp
 80046ea:	f04f 0000 	mov.w	r0, #0
 80046ee:	f04f 0100 	mov.w	r1, #0
 80046f2:	0159      	lsls	r1, r3, #5
 80046f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f8:	0150      	lsls	r0, r2, #5
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	ebb2 080a 	subs.w	r8, r2, sl
 8004702:	eb63 090b 	sbc.w	r9, r3, fp
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004712:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004716:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800471a:	ebb2 0408 	subs.w	r4, r2, r8
 800471e:	eb63 0509 	sbc.w	r5, r3, r9
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	00eb      	lsls	r3, r5, #3
 800472c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004730:	00e2      	lsls	r2, r4, #3
 8004732:	4614      	mov	r4, r2
 8004734:	461d      	mov	r5, r3
 8004736:	eb14 030a 	adds.w	r3, r4, sl
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	eb45 030b 	adc.w	r3, r5, fp
 8004740:	607b      	str	r3, [r7, #4]
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800474e:	4629      	mov	r1, r5
 8004750:	028b      	lsls	r3, r1, #10
 8004752:	4620      	mov	r0, r4
 8004754:	4629      	mov	r1, r5
 8004756:	4604      	mov	r4, r0
 8004758:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800475c:	4601      	mov	r1, r0
 800475e:	028a      	lsls	r2, r1, #10
 8004760:	4610      	mov	r0, r2
 8004762:	4619      	mov	r1, r3
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	2200      	movs	r2, #0
 8004768:	60bb      	str	r3, [r7, #8]
 800476a:	60fa      	str	r2, [r7, #12]
 800476c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004770:	f7fb fd04 	bl	800017c <__aeabi_uldivmod>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4613      	mov	r3, r2
 800477a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 800477c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004780:	e00d      	b.n	800479e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004782:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <HAL_RCC_GetSysClockFreq+0x16c>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	0b5b      	lsrs	r3, r3, #13
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	3301      	adds	r3, #1
 8004792:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800479c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3738      	adds	r7, #56	; 0x38
 80047a4:	46bd      	mov	sp, r7
 80047a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800
 80047b0:	00f42400 	.word	0x00f42400
 80047b4:	016e3600 	.word	0x016e3600
 80047b8:	0800690c 	.word	0x0800690c

080047bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047c0:	4b02      	ldr	r3, [pc, #8]	; (80047cc <HAL_RCC_GetHCLKFreq+0x10>)
 80047c2:	681b      	ldr	r3, [r3, #0]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr
 80047cc:	20000000 	.word	0x20000000

080047d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047d4:	f7ff fff2 	bl	80047bc <HAL_RCC_GetHCLKFreq>
 80047d8:	4602      	mov	r2, r0
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	0a1b      	lsrs	r3, r3, #8
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	4903      	ldr	r1, [pc, #12]	; (80047f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e6:	5ccb      	ldrb	r3, [r1, r3]
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40023800 	.word	0x40023800
 80047f4:	08006928 	.word	0x08006928

080047f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047fc:	f7ff ffde 	bl	80047bc <HAL_RCC_GetHCLKFreq>
 8004800:	4602      	mov	r2, r0
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	0adb      	lsrs	r3, r3, #11
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	4903      	ldr	r1, [pc, #12]	; (800481c <HAL_RCC_GetPCLK2Freq+0x24>)
 800480e:	5ccb      	ldrb	r3, [r1, r3]
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004814:	4618      	mov	r0, r3
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40023800 	.word	0x40023800
 800481c:	08006928 	.word	0x08006928

08004820 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004828:	2300      	movs	r3, #0
 800482a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800482c:	4b29      	ldr	r3, [pc, #164]	; (80048d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d12c      	bne.n	8004892 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004838:	4b26      	ldr	r3, [pc, #152]	; (80048d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004844:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	e016      	b.n	800487e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004850:	4b20      	ldr	r3, [pc, #128]	; (80048d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	4a1f      	ldr	r2, [pc, #124]	; (80048d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800485a:	6253      	str	r3, [r2, #36]	; 0x24
 800485c:	4b1d      	ldr	r3, [pc, #116]	; (80048d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004868:	4b1b      	ldr	r3, [pc, #108]	; (80048d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004870:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004872:	4b18      	ldr	r3, [pc, #96]	; (80048d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800487c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004884:	d105      	bne.n	8004892 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800488c:	d101      	bne.n	8004892 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800488e:	2301      	movs	r3, #1
 8004890:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d105      	bne.n	80048a4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004898:	4b10      	ldr	r3, [pc, #64]	; (80048dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a0f      	ldr	r2, [pc, #60]	; (80048dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800489e:	f043 0304 	orr.w	r3, r3, #4
 80048a2:	6013      	str	r3, [r2, #0]
 80048a4:	4b0d      	ldr	r3, [pc, #52]	; (80048dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f023 0201 	bic.w	r2, r3, #1
 80048ac:	490b      	ldr	r1, [pc, #44]	; (80048dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048b4:	4b09      	ldr	r3, [pc, #36]	; (80048dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d001      	beq.n	80048c6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40023800 	.word	0x40023800
 80048d8:	40007000 	.word	0x40007000
 80048dc:	40023c00 	.word	0x40023c00

080048e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e042      	b.n	8004978 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fc f95e 	bl	8000bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2224      	movs	r2, #36	; 0x24
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004922:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fdcd 	bl	80054c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004948:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004958:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08a      	sub	sp, #40	; 0x28
 8004984:	af02      	add	r7, sp, #8
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	4613      	mov	r3, r2
 800498e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b20      	cmp	r3, #32
 800499e:	d16d      	bne.n	8004a7c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_UART_Transmit+0x2c>
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e066      	b.n	8004a7e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2221      	movs	r2, #33	; 0x21
 80049ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049be:	f7fe fe93 	bl	80036e8 <HAL_GetTick>
 80049c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	88fa      	ldrh	r2, [r7, #6]
 80049c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	88fa      	ldrh	r2, [r7, #6]
 80049ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d8:	d108      	bne.n	80049ec <HAL_UART_Transmit+0x6c>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d104      	bne.n	80049ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	61bb      	str	r3, [r7, #24]
 80049ea:	e003      	b.n	80049f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049f4:	e02a      	b.n	8004a4c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2200      	movs	r2, #0
 80049fe:	2180      	movs	r1, #128	; 0x80
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 fb1d 	bl	8005040 <UART_WaitOnFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e036      	b.n	8004a7e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10b      	bne.n	8004a2e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	3302      	adds	r3, #2
 8004a2a:	61bb      	str	r3, [r7, #24]
 8004a2c:	e007      	b.n	8004a3e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	781a      	ldrb	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1cf      	bne.n	80049f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2140      	movs	r1, #64	; 0x40
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 faed 	bl	8005040 <UART_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e006      	b.n	8004a7e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	e000      	b.n	8004a7e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004a7c:	2302      	movs	r3, #2
  }
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3720      	adds	r7, #32
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b084      	sub	sp, #16
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	4613      	mov	r3, r2
 8004a92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d112      	bne.n	8004ac6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_UART_Receive_IT+0x26>
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e00b      	b.n	8004ac8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ab6:	88fb      	ldrh	r3, [r7, #6]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 fb2d 	bl	800511c <UART_Start_Receive_IT>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	e000      	b.n	8004ac8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ac6:	2302      	movs	r3, #2
  }
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b0ba      	sub	sp, #232	; 0xe8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10f      	bne.n	8004b36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <HAL_UART_IRQHandler+0x66>
 8004b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fc0a 	bl	8005348 <UART_Receive_IT>
      return;
 8004b34:	e25b      	b.n	8004fee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 80de 	beq.w	8004cfc <HAL_UART_IRQHandler+0x22c>
 8004b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d106      	bne.n	8004b5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 80d1 	beq.w	8004cfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00b      	beq.n	8004b7e <HAL_UART_IRQHandler+0xae>
 8004b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d005      	beq.n	8004b7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	f043 0201 	orr.w	r2, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <HAL_UART_IRQHandler+0xd2>
 8004b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	f043 0202 	orr.w	r2, r3, #2
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00b      	beq.n	8004bc6 <HAL_UART_IRQHandler+0xf6>
 8004bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	f043 0204 	orr.w	r2, r3, #4
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d011      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x126>
 8004bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d105      	bne.n	8004bea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bee:	f043 0208 	orr.w	r2, r3, #8
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 81f2 	beq.w	8004fe4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d008      	beq.n	8004c1e <HAL_UART_IRQHandler+0x14e>
 8004c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fb95 	bl	8005348 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c28:	2b40      	cmp	r3, #64	; 0x40
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d103      	bne.n	8004c4a <HAL_UART_IRQHandler+0x17a>
 8004c42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d04f      	beq.n	8004cea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fa9f 	bl	800518e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5a:	2b40      	cmp	r3, #64	; 0x40
 8004c5c:	d141      	bne.n	8004ce2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3314      	adds	r3, #20
 8004c64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c6c:	e853 3f00 	ldrex	r3, [r3]
 8004c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3314      	adds	r3, #20
 8004c86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1d9      	bne.n	8004c5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d013      	beq.n	8004cda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb6:	4a7e      	ldr	r2, [pc, #504]	; (8004eb0 <HAL_UART_IRQHandler+0x3e0>)
 8004cb8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fe fe66 	bl	8003990 <HAL_DMA_Abort_IT>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d016      	beq.n	8004cf8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd8:	e00e      	b.n	8004cf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f99c 	bl	8005018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce0:	e00a      	b.n	8004cf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f998 	bl	8005018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce8:	e006      	b.n	8004cf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f994 	bl	8005018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004cf6:	e175      	b.n	8004fe4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf8:	bf00      	nop
    return;
 8004cfa:	e173      	b.n	8004fe4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	f040 814f 	bne.w	8004fa4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 8148 	beq.w	8004fa4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 8141 	beq.w	8004fa4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d22:	2300      	movs	r3, #0
 8004d24:	60bb      	str	r3, [r7, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60bb      	str	r3, [r7, #8]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	60bb      	str	r3, [r7, #8]
 8004d36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d42:	2b40      	cmp	r3, #64	; 0x40
 8004d44:	f040 80b6 	bne.w	8004eb4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 8145 	beq.w	8004fe8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d66:	429a      	cmp	r2, r3
 8004d68:	f080 813e 	bcs.w	8004fe8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	f000 8088 	beq.w	8004e90 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	330c      	adds	r3, #12
 8004d86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	330c      	adds	r3, #12
 8004da8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004dac:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004db0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004db8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004dbc:	e841 2300 	strex	r3, r2, [r1]
 8004dc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1d9      	bne.n	8004d80 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3314      	adds	r3, #20
 8004dd2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ddc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3314      	adds	r3, #20
 8004dec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004df0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004df4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004df8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dfc:	e841 2300 	strex	r3, r2, [r1]
 8004e00:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e1      	bne.n	8004dcc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3314      	adds	r3, #20
 8004e0e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e12:	e853 3f00 	ldrex	r3, [r3]
 8004e16:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3314      	adds	r3, #20
 8004e28:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e2c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e3      	bne.n	8004e08 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e60:	f023 0310 	bic.w	r3, r3, #16
 8004e64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	330c      	adds	r3, #12
 8004e6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e72:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e74:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e3      	bne.n	8004e4e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fd43 	bl	8003916 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f8bf 	bl	800502a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004eac:	e09c      	b.n	8004fe8 <HAL_UART_IRQHandler+0x518>
 8004eae:	bf00      	nop
 8004eb0:	08005253 	.word	0x08005253
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 808e 	beq.w	8004fec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 8089 	beq.w	8004fec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	330c      	adds	r3, #12
 8004ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ef0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	330c      	adds	r3, #12
 8004efa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004efe:	647a      	str	r2, [r7, #68]	; 0x44
 8004f00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f06:	e841 2300 	strex	r3, r2, [r1]
 8004f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1e3      	bne.n	8004eda <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3314      	adds	r3, #20
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	e853 3f00 	ldrex	r3, [r3]
 8004f20:	623b      	str	r3, [r7, #32]
   return(result);
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	f023 0301 	bic.w	r3, r3, #1
 8004f28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3314      	adds	r3, #20
 8004f32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f36:	633a      	str	r2, [r7, #48]	; 0x30
 8004f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f3e:	e841 2300 	strex	r3, r2, [r1]
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1e3      	bne.n	8004f12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	e853 3f00 	ldrex	r3, [r3]
 8004f66:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0310 	bic.w	r3, r3, #16
 8004f6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	330c      	adds	r3, #12
 8004f78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f7c:	61fa      	str	r2, [r7, #28]
 8004f7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	69b9      	ldr	r1, [r7, #24]
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	617b      	str	r3, [r7, #20]
   return(result);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e3      	bne.n	8004f58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f844 	bl	800502a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fa2:	e023      	b.n	8004fec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d009      	beq.n	8004fc4 <HAL_UART_IRQHandler+0x4f4>
 8004fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f95c 	bl	800527a <UART_Transmit_IT>
    return;
 8004fc2:	e014      	b.n	8004fee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00e      	beq.n	8004fee <HAL_UART_IRQHandler+0x51e>
 8004fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d008      	beq.n	8004fee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f99b 	bl	8005318 <UART_EndTransmit_IT>
    return;
 8004fe2:	e004      	b.n	8004fee <HAL_UART_IRQHandler+0x51e>
    return;
 8004fe4:	bf00      	nop
 8004fe6:	e002      	b.n	8004fee <HAL_UART_IRQHandler+0x51e>
      return;
 8004fe8:	bf00      	nop
 8004fea:	e000      	b.n	8004fee <HAL_UART_IRQHandler+0x51e>
      return;
 8004fec:	bf00      	nop
  }
}
 8004fee:	37e8      	adds	r7, #232	; 0xe8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	bc80      	pop	{r7}
 8005004:	4770      	bx	lr

08005006 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr

08005018 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr

0800502a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	460b      	mov	r3, r1
 8005034:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr

08005040 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b090      	sub	sp, #64	; 0x40
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	4613      	mov	r3, r2
 800504e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005050:	e050      	b.n	80050f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005058:	d04c      	beq.n	80050f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800505a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <UART_WaitOnFlagUntilTimeout+0x30>
 8005060:	f7fe fb42 	bl	80036e8 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800506c:	429a      	cmp	r2, r3
 800506e:	d241      	bcs.n	80050f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	330c      	adds	r3, #12
 8005076:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	330c      	adds	r3, #12
 800508e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005090:	637a      	str	r2, [r7, #52]	; 0x34
 8005092:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800509e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e5      	bne.n	8005070 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3314      	adds	r3, #20
 80050aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	e853 3f00 	ldrex	r3, [r3]
 80050b2:	613b      	str	r3, [r7, #16]
   return(result);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f023 0301 	bic.w	r3, r3, #1
 80050ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3314      	adds	r3, #20
 80050c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050c4:	623a      	str	r2, [r7, #32]
 80050c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	69f9      	ldr	r1, [r7, #28]
 80050ca:	6a3a      	ldr	r2, [r7, #32]
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e5      	bne.n	80050a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e00f      	b.n	8005114 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4013      	ands	r3, r2
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	429a      	cmp	r2, r3
 8005102:	bf0c      	ite	eq
 8005104:	2301      	moveq	r3, #1
 8005106:	2300      	movne	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	461a      	mov	r2, r3
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	429a      	cmp	r2, r3
 8005110:	d09f      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3740      	adds	r7, #64	; 0x40
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	4613      	mov	r3, r2
 8005128:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	88fa      	ldrh	r2, [r7, #6]
 8005134:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	88fa      	ldrh	r2, [r7, #6]
 800513a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2222      	movs	r2, #34	; 0x22
 8005146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005160:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0201 	orr.w	r2, r2, #1
 8005170:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f042 0220 	orr.w	r2, r2, #32
 8005180:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr

0800518e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800518e:	b480      	push	{r7}
 8005190:	b095      	sub	sp, #84	; 0x54
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	330c      	adds	r3, #12
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a0:	e853 3f00 	ldrex	r3, [r3]
 80051a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	330c      	adds	r3, #12
 80051b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051b6:	643a      	str	r2, [r7, #64]	; 0x40
 80051b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051be:	e841 2300 	strex	r3, r2, [r1]
 80051c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1e5      	bne.n	8005196 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3314      	adds	r3, #20
 80051d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	f023 0301 	bic.w	r3, r3, #1
 80051e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3314      	adds	r3, #20
 80051e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e5      	bne.n	80051ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	2b01      	cmp	r3, #1
 8005204:	d119      	bne.n	800523a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	330c      	adds	r3, #12
 800520c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	60bb      	str	r3, [r7, #8]
   return(result);
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f023 0310 	bic.w	r3, r3, #16
 800521c:	647b      	str	r3, [r7, #68]	; 0x44
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005226:	61ba      	str	r2, [r7, #24]
 8005228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6979      	ldr	r1, [r7, #20]
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	613b      	str	r3, [r7, #16]
   return(result);
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e5      	bne.n	8005206 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005248:	bf00      	nop
 800524a:	3754      	adds	r7, #84	; 0x54
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr

08005252 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f7ff fed3 	bl	8005018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800527a:	b480      	push	{r7}
 800527c:	b085      	sub	sp, #20
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b21      	cmp	r3, #33	; 0x21
 800528c:	d13e      	bne.n	800530c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005296:	d114      	bne.n	80052c2 <UART_Transmit_IT+0x48>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d110      	bne.n	80052c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	1c9a      	adds	r2, r3, #2
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	621a      	str	r2, [r3, #32]
 80052c0:	e008      	b.n	80052d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	1c59      	adds	r1, r3, #1
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6211      	str	r1, [r2, #32]
 80052cc:	781a      	ldrb	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29b      	uxth	r3, r3
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	4619      	mov	r1, r3
 80052e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10f      	bne.n	8005308 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005306:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	e000      	b.n	800530e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800530c:	2302      	movs	r3, #2
  }
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800532e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7ff fe5b 	bl	8004ff4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08c      	sub	sp, #48	; 0x30
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b22      	cmp	r3, #34	; 0x22
 800535a:	f040 80ae 	bne.w	80054ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005366:	d117      	bne.n	8005398 <UART_Receive_IT+0x50>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d113      	bne.n	8005398 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005370:	2300      	movs	r3, #0
 8005372:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	b29b      	uxth	r3, r3
 8005382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005386:	b29a      	uxth	r2, r3
 8005388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005390:	1c9a      	adds	r2, r3, #2
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	629a      	str	r2, [r3, #40]	; 0x28
 8005396:	e026      	b.n	80053e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053aa:	d007      	beq.n	80053bc <UART_Receive_IT+0x74>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10a      	bne.n	80053ca <UART_Receive_IT+0x82>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d106      	bne.n	80053ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c6:	701a      	strb	r2, [r3, #0]
 80053c8:	e008      	b.n	80053dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	4619      	mov	r1, r3
 80053f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d15d      	bne.n	80054b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0220 	bic.w	r2, r2, #32
 8005408:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005418:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	695a      	ldr	r2, [r3, #20]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0201 	bic.w	r2, r2, #1
 8005428:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	2b01      	cmp	r3, #1
 800543e:	d135      	bne.n	80054ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	330c      	adds	r3, #12
 800544c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	613b      	str	r3, [r7, #16]
   return(result);
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f023 0310 	bic.w	r3, r3, #16
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	330c      	adds	r3, #12
 8005464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005466:	623a      	str	r2, [r7, #32]
 8005468:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	69f9      	ldr	r1, [r7, #28]
 800546c:	6a3a      	ldr	r2, [r7, #32]
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	61bb      	str	r3, [r7, #24]
   return(result);
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e5      	bne.n	8005446 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b10      	cmp	r3, #16
 8005486:	d10a      	bne.n	800549e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005488:	2300      	movs	r3, #0
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054a2:	4619      	mov	r1, r3
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7ff fdc0 	bl	800502a <HAL_UARTEx_RxEventCallback>
 80054aa:	e002      	b.n	80054b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff fdaa 	bl	8005006 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	e002      	b.n	80054bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	e000      	b.n	80054bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80054ba:	2302      	movs	r3, #2
  }
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3730      	adds	r7, #48	; 0x30
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005504:	f023 030c 	bic.w	r3, r3, #12
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6812      	ldr	r2, [r2, #0]
 800550c:	68b9      	ldr	r1, [r7, #8]
 800550e:	430b      	orrs	r3, r1
 8005510:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699a      	ldr	r2, [r3, #24]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a55      	ldr	r2, [pc, #340]	; (8005684 <UART_SetConfig+0x1c0>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d103      	bne.n	800553a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005532:	f7ff f961 	bl	80047f8 <HAL_RCC_GetPCLK2Freq>
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	e002      	b.n	8005540 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800553a:	f7ff f949 	bl	80047d0 <HAL_RCC_GetPCLK1Freq>
 800553e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005548:	d14c      	bne.n	80055e4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	009a      	lsls	r2, r3, #2
 8005554:	441a      	add	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005560:	4a49      	ldr	r2, [pc, #292]	; (8005688 <UART_SetConfig+0x1c4>)
 8005562:	fba2 2303 	umull	r2, r3, r2, r3
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	0119      	lsls	r1, r3, #4
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	009a      	lsls	r2, r3, #2
 8005574:	441a      	add	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005580:	4b41      	ldr	r3, [pc, #260]	; (8005688 <UART_SetConfig+0x1c4>)
 8005582:	fba3 0302 	umull	r0, r3, r3, r2
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	2064      	movs	r0, #100	; 0x64
 800558a:	fb00 f303 	mul.w	r3, r0, r3
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	3332      	adds	r3, #50	; 0x32
 8005594:	4a3c      	ldr	r2, [pc, #240]	; (8005688 <UART_SetConfig+0x1c4>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055a2:	4419      	add	r1, r3
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	009a      	lsls	r2, r3, #2
 80055ae:	441a      	add	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80055ba:	4b33      	ldr	r3, [pc, #204]	; (8005688 <UART_SetConfig+0x1c4>)
 80055bc:	fba3 0302 	umull	r0, r3, r3, r2
 80055c0:	095b      	lsrs	r3, r3, #5
 80055c2:	2064      	movs	r0, #100	; 0x64
 80055c4:	fb00 f303 	mul.w	r3, r0, r3
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	3332      	adds	r3, #50	; 0x32
 80055ce:	4a2e      	ldr	r2, [pc, #184]	; (8005688 <UART_SetConfig+0x1c4>)
 80055d0:	fba2 2303 	umull	r2, r3, r2, r3
 80055d4:	095b      	lsrs	r3, r3, #5
 80055d6:	f003 0207 	and.w	r2, r3, #7
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	440a      	add	r2, r1
 80055e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055e2:	e04a      	b.n	800567a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4613      	mov	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	009a      	lsls	r2, r3, #2
 80055ee:	441a      	add	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fa:	4a23      	ldr	r2, [pc, #140]	; (8005688 <UART_SetConfig+0x1c4>)
 80055fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005600:	095b      	lsrs	r3, r3, #5
 8005602:	0119      	lsls	r1, r3, #4
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	009a      	lsls	r2, r3, #2
 800560e:	441a      	add	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	fbb2 f2f3 	udiv	r2, r2, r3
 800561a:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <UART_SetConfig+0x1c4>)
 800561c:	fba3 0302 	umull	r0, r3, r3, r2
 8005620:	095b      	lsrs	r3, r3, #5
 8005622:	2064      	movs	r0, #100	; 0x64
 8005624:	fb00 f303 	mul.w	r3, r0, r3
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	3332      	adds	r3, #50	; 0x32
 800562e:	4a16      	ldr	r2, [pc, #88]	; (8005688 <UART_SetConfig+0x1c4>)
 8005630:	fba2 2303 	umull	r2, r3, r2, r3
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800563a:	4419      	add	r1, r3
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4613      	mov	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	009a      	lsls	r2, r3, #2
 8005646:	441a      	add	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005652:	4b0d      	ldr	r3, [pc, #52]	; (8005688 <UART_SetConfig+0x1c4>)
 8005654:	fba3 0302 	umull	r0, r3, r3, r2
 8005658:	095b      	lsrs	r3, r3, #5
 800565a:	2064      	movs	r0, #100	; 0x64
 800565c:	fb00 f303 	mul.w	r3, r0, r3
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	3332      	adds	r3, #50	; 0x32
 8005666:	4a08      	ldr	r2, [pc, #32]	; (8005688 <UART_SetConfig+0x1c4>)
 8005668:	fba2 2303 	umull	r2, r3, r2, r3
 800566c:	095b      	lsrs	r3, r3, #5
 800566e:	f003 020f 	and.w	r2, r3, #15
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	440a      	add	r2, r1
 8005678:	609a      	str	r2, [r3, #8]
}
 800567a:	bf00      	nop
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	40013800 	.word	0x40013800
 8005688:	51eb851f 	.word	0x51eb851f

0800568c <sbrk_aligned>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	4e0e      	ldr	r6, [pc, #56]	; (80056c8 <sbrk_aligned+0x3c>)
 8005690:	460c      	mov	r4, r1
 8005692:	6831      	ldr	r1, [r6, #0]
 8005694:	4605      	mov	r5, r0
 8005696:	b911      	cbnz	r1, 800569e <sbrk_aligned+0x12>
 8005698:	f000 fb54 	bl	8005d44 <_sbrk_r>
 800569c:	6030      	str	r0, [r6, #0]
 800569e:	4621      	mov	r1, r4
 80056a0:	4628      	mov	r0, r5
 80056a2:	f000 fb4f 	bl	8005d44 <_sbrk_r>
 80056a6:	1c43      	adds	r3, r0, #1
 80056a8:	d00a      	beq.n	80056c0 <sbrk_aligned+0x34>
 80056aa:	1cc4      	adds	r4, r0, #3
 80056ac:	f024 0403 	bic.w	r4, r4, #3
 80056b0:	42a0      	cmp	r0, r4
 80056b2:	d007      	beq.n	80056c4 <sbrk_aligned+0x38>
 80056b4:	1a21      	subs	r1, r4, r0
 80056b6:	4628      	mov	r0, r5
 80056b8:	f000 fb44 	bl	8005d44 <_sbrk_r>
 80056bc:	3001      	adds	r0, #1
 80056be:	d101      	bne.n	80056c4 <sbrk_aligned+0x38>
 80056c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80056c4:	4620      	mov	r0, r4
 80056c6:	bd70      	pop	{r4, r5, r6, pc}
 80056c8:	20000374 	.word	0x20000374

080056cc <_malloc_r>:
 80056cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056d0:	1ccd      	adds	r5, r1, #3
 80056d2:	f025 0503 	bic.w	r5, r5, #3
 80056d6:	3508      	adds	r5, #8
 80056d8:	2d0c      	cmp	r5, #12
 80056da:	bf38      	it	cc
 80056dc:	250c      	movcc	r5, #12
 80056de:	2d00      	cmp	r5, #0
 80056e0:	4607      	mov	r7, r0
 80056e2:	db01      	blt.n	80056e8 <_malloc_r+0x1c>
 80056e4:	42a9      	cmp	r1, r5
 80056e6:	d905      	bls.n	80056f4 <_malloc_r+0x28>
 80056e8:	230c      	movs	r3, #12
 80056ea:	2600      	movs	r6, #0
 80056ec:	603b      	str	r3, [r7, #0]
 80056ee:	4630      	mov	r0, r6
 80056f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057c8 <_malloc_r+0xfc>
 80056f8:	f000 f868 	bl	80057cc <__malloc_lock>
 80056fc:	f8d8 3000 	ldr.w	r3, [r8]
 8005700:	461c      	mov	r4, r3
 8005702:	bb5c      	cbnz	r4, 800575c <_malloc_r+0x90>
 8005704:	4629      	mov	r1, r5
 8005706:	4638      	mov	r0, r7
 8005708:	f7ff ffc0 	bl	800568c <sbrk_aligned>
 800570c:	1c43      	adds	r3, r0, #1
 800570e:	4604      	mov	r4, r0
 8005710:	d155      	bne.n	80057be <_malloc_r+0xf2>
 8005712:	f8d8 4000 	ldr.w	r4, [r8]
 8005716:	4626      	mov	r6, r4
 8005718:	2e00      	cmp	r6, #0
 800571a:	d145      	bne.n	80057a8 <_malloc_r+0xdc>
 800571c:	2c00      	cmp	r4, #0
 800571e:	d048      	beq.n	80057b2 <_malloc_r+0xe6>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	4631      	mov	r1, r6
 8005724:	4638      	mov	r0, r7
 8005726:	eb04 0903 	add.w	r9, r4, r3
 800572a:	f000 fb0b 	bl	8005d44 <_sbrk_r>
 800572e:	4581      	cmp	r9, r0
 8005730:	d13f      	bne.n	80057b2 <_malloc_r+0xe6>
 8005732:	6821      	ldr	r1, [r4, #0]
 8005734:	4638      	mov	r0, r7
 8005736:	1a6d      	subs	r5, r5, r1
 8005738:	4629      	mov	r1, r5
 800573a:	f7ff ffa7 	bl	800568c <sbrk_aligned>
 800573e:	3001      	adds	r0, #1
 8005740:	d037      	beq.n	80057b2 <_malloc_r+0xe6>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	442b      	add	r3, r5
 8005746:	6023      	str	r3, [r4, #0]
 8005748:	f8d8 3000 	ldr.w	r3, [r8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d038      	beq.n	80057c2 <_malloc_r+0xf6>
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	42a2      	cmp	r2, r4
 8005754:	d12b      	bne.n	80057ae <_malloc_r+0xe2>
 8005756:	2200      	movs	r2, #0
 8005758:	605a      	str	r2, [r3, #4]
 800575a:	e00f      	b.n	800577c <_malloc_r+0xb0>
 800575c:	6822      	ldr	r2, [r4, #0]
 800575e:	1b52      	subs	r2, r2, r5
 8005760:	d41f      	bmi.n	80057a2 <_malloc_r+0xd6>
 8005762:	2a0b      	cmp	r2, #11
 8005764:	d917      	bls.n	8005796 <_malloc_r+0xca>
 8005766:	1961      	adds	r1, r4, r5
 8005768:	42a3      	cmp	r3, r4
 800576a:	6025      	str	r5, [r4, #0]
 800576c:	bf18      	it	ne
 800576e:	6059      	strne	r1, [r3, #4]
 8005770:	6863      	ldr	r3, [r4, #4]
 8005772:	bf08      	it	eq
 8005774:	f8c8 1000 	streq.w	r1, [r8]
 8005778:	5162      	str	r2, [r4, r5]
 800577a:	604b      	str	r3, [r1, #4]
 800577c:	4638      	mov	r0, r7
 800577e:	f104 060b 	add.w	r6, r4, #11
 8005782:	f000 f829 	bl	80057d8 <__malloc_unlock>
 8005786:	f026 0607 	bic.w	r6, r6, #7
 800578a:	1d23      	adds	r3, r4, #4
 800578c:	1af2      	subs	r2, r6, r3
 800578e:	d0ae      	beq.n	80056ee <_malloc_r+0x22>
 8005790:	1b9b      	subs	r3, r3, r6
 8005792:	50a3      	str	r3, [r4, r2]
 8005794:	e7ab      	b.n	80056ee <_malloc_r+0x22>
 8005796:	42a3      	cmp	r3, r4
 8005798:	6862      	ldr	r2, [r4, #4]
 800579a:	d1dd      	bne.n	8005758 <_malloc_r+0x8c>
 800579c:	f8c8 2000 	str.w	r2, [r8]
 80057a0:	e7ec      	b.n	800577c <_malloc_r+0xb0>
 80057a2:	4623      	mov	r3, r4
 80057a4:	6864      	ldr	r4, [r4, #4]
 80057a6:	e7ac      	b.n	8005702 <_malloc_r+0x36>
 80057a8:	4634      	mov	r4, r6
 80057aa:	6876      	ldr	r6, [r6, #4]
 80057ac:	e7b4      	b.n	8005718 <_malloc_r+0x4c>
 80057ae:	4613      	mov	r3, r2
 80057b0:	e7cc      	b.n	800574c <_malloc_r+0x80>
 80057b2:	230c      	movs	r3, #12
 80057b4:	4638      	mov	r0, r7
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	f000 f80e 	bl	80057d8 <__malloc_unlock>
 80057bc:	e797      	b.n	80056ee <_malloc_r+0x22>
 80057be:	6025      	str	r5, [r4, #0]
 80057c0:	e7dc      	b.n	800577c <_malloc_r+0xb0>
 80057c2:	605b      	str	r3, [r3, #4]
 80057c4:	deff      	udf	#255	; 0xff
 80057c6:	bf00      	nop
 80057c8:	20000370 	.word	0x20000370

080057cc <__malloc_lock>:
 80057cc:	4801      	ldr	r0, [pc, #4]	; (80057d4 <__malloc_lock+0x8>)
 80057ce:	f000 bb06 	b.w	8005dde <__retarget_lock_acquire_recursive>
 80057d2:	bf00      	nop
 80057d4:	200004b8 	.word	0x200004b8

080057d8 <__malloc_unlock>:
 80057d8:	4801      	ldr	r0, [pc, #4]	; (80057e0 <__malloc_unlock+0x8>)
 80057da:	f000 bb01 	b.w	8005de0 <__retarget_lock_release_recursive>
 80057de:	bf00      	nop
 80057e0:	200004b8 	.word	0x200004b8

080057e4 <std>:
 80057e4:	2300      	movs	r3, #0
 80057e6:	b510      	push	{r4, lr}
 80057e8:	4604      	mov	r4, r0
 80057ea:	e9c0 3300 	strd	r3, r3, [r0]
 80057ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057f2:	6083      	str	r3, [r0, #8]
 80057f4:	8181      	strh	r1, [r0, #12]
 80057f6:	6643      	str	r3, [r0, #100]	; 0x64
 80057f8:	81c2      	strh	r2, [r0, #14]
 80057fa:	6183      	str	r3, [r0, #24]
 80057fc:	4619      	mov	r1, r3
 80057fe:	2208      	movs	r2, #8
 8005800:	305c      	adds	r0, #92	; 0x5c
 8005802:	f000 fa63 	bl	8005ccc <memset>
 8005806:	4b0d      	ldr	r3, [pc, #52]	; (800583c <std+0x58>)
 8005808:	6224      	str	r4, [r4, #32]
 800580a:	6263      	str	r3, [r4, #36]	; 0x24
 800580c:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <std+0x5c>)
 800580e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005810:	4b0c      	ldr	r3, [pc, #48]	; (8005844 <std+0x60>)
 8005812:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005814:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <std+0x64>)
 8005816:	6323      	str	r3, [r4, #48]	; 0x30
 8005818:	4b0c      	ldr	r3, [pc, #48]	; (800584c <std+0x68>)
 800581a:	429c      	cmp	r4, r3
 800581c:	d006      	beq.n	800582c <std+0x48>
 800581e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005822:	4294      	cmp	r4, r2
 8005824:	d002      	beq.n	800582c <std+0x48>
 8005826:	33d0      	adds	r3, #208	; 0xd0
 8005828:	429c      	cmp	r4, r3
 800582a:	d105      	bne.n	8005838 <std+0x54>
 800582c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005834:	f000 bad2 	b.w	8005ddc <__retarget_lock_init_recursive>
 8005838:	bd10      	pop	{r4, pc}
 800583a:	bf00      	nop
 800583c:	08005a89 	.word	0x08005a89
 8005840:	08005aab 	.word	0x08005aab
 8005844:	08005ae3 	.word	0x08005ae3
 8005848:	08005b07 	.word	0x08005b07
 800584c:	20000378 	.word	0x20000378

08005850 <stdio_exit_handler>:
 8005850:	4a02      	ldr	r2, [pc, #8]	; (800585c <stdio_exit_handler+0xc>)
 8005852:	4903      	ldr	r1, [pc, #12]	; (8005860 <stdio_exit_handler+0x10>)
 8005854:	4803      	ldr	r0, [pc, #12]	; (8005864 <stdio_exit_handler+0x14>)
 8005856:	f000 b869 	b.w	800592c <_fwalk_sglue>
 800585a:	bf00      	nop
 800585c:	200001f8 	.word	0x200001f8
 8005860:	0800656d 	.word	0x0800656d
 8005864:	20000204 	.word	0x20000204

08005868 <cleanup_stdio>:
 8005868:	6841      	ldr	r1, [r0, #4]
 800586a:	4b0c      	ldr	r3, [pc, #48]	; (800589c <cleanup_stdio+0x34>)
 800586c:	b510      	push	{r4, lr}
 800586e:	4299      	cmp	r1, r3
 8005870:	4604      	mov	r4, r0
 8005872:	d001      	beq.n	8005878 <cleanup_stdio+0x10>
 8005874:	f000 fe7a 	bl	800656c <_fflush_r>
 8005878:	68a1      	ldr	r1, [r4, #8]
 800587a:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <cleanup_stdio+0x38>)
 800587c:	4299      	cmp	r1, r3
 800587e:	d002      	beq.n	8005886 <cleanup_stdio+0x1e>
 8005880:	4620      	mov	r0, r4
 8005882:	f000 fe73 	bl	800656c <_fflush_r>
 8005886:	68e1      	ldr	r1, [r4, #12]
 8005888:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <cleanup_stdio+0x3c>)
 800588a:	4299      	cmp	r1, r3
 800588c:	d004      	beq.n	8005898 <cleanup_stdio+0x30>
 800588e:	4620      	mov	r0, r4
 8005890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005894:	f000 be6a 	b.w	800656c <_fflush_r>
 8005898:	bd10      	pop	{r4, pc}
 800589a:	bf00      	nop
 800589c:	20000378 	.word	0x20000378
 80058a0:	200003e0 	.word	0x200003e0
 80058a4:	20000448 	.word	0x20000448

080058a8 <global_stdio_init.part.0>:
 80058a8:	b510      	push	{r4, lr}
 80058aa:	4b0b      	ldr	r3, [pc, #44]	; (80058d8 <global_stdio_init.part.0+0x30>)
 80058ac:	4c0b      	ldr	r4, [pc, #44]	; (80058dc <global_stdio_init.part.0+0x34>)
 80058ae:	4a0c      	ldr	r2, [pc, #48]	; (80058e0 <global_stdio_init.part.0+0x38>)
 80058b0:	4620      	mov	r0, r4
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	2104      	movs	r1, #4
 80058b6:	2200      	movs	r2, #0
 80058b8:	f7ff ff94 	bl	80057e4 <std>
 80058bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80058c0:	2201      	movs	r2, #1
 80058c2:	2109      	movs	r1, #9
 80058c4:	f7ff ff8e 	bl	80057e4 <std>
 80058c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80058cc:	2202      	movs	r2, #2
 80058ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d2:	2112      	movs	r1, #18
 80058d4:	f7ff bf86 	b.w	80057e4 <std>
 80058d8:	200004b0 	.word	0x200004b0
 80058dc:	20000378 	.word	0x20000378
 80058e0:	08005851 	.word	0x08005851

080058e4 <__sfp_lock_acquire>:
 80058e4:	4801      	ldr	r0, [pc, #4]	; (80058ec <__sfp_lock_acquire+0x8>)
 80058e6:	f000 ba7a 	b.w	8005dde <__retarget_lock_acquire_recursive>
 80058ea:	bf00      	nop
 80058ec:	200004b9 	.word	0x200004b9

080058f0 <__sfp_lock_release>:
 80058f0:	4801      	ldr	r0, [pc, #4]	; (80058f8 <__sfp_lock_release+0x8>)
 80058f2:	f000 ba75 	b.w	8005de0 <__retarget_lock_release_recursive>
 80058f6:	bf00      	nop
 80058f8:	200004b9 	.word	0x200004b9

080058fc <__sinit>:
 80058fc:	b510      	push	{r4, lr}
 80058fe:	4604      	mov	r4, r0
 8005900:	f7ff fff0 	bl	80058e4 <__sfp_lock_acquire>
 8005904:	6a23      	ldr	r3, [r4, #32]
 8005906:	b11b      	cbz	r3, 8005910 <__sinit+0x14>
 8005908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800590c:	f7ff bff0 	b.w	80058f0 <__sfp_lock_release>
 8005910:	4b04      	ldr	r3, [pc, #16]	; (8005924 <__sinit+0x28>)
 8005912:	6223      	str	r3, [r4, #32]
 8005914:	4b04      	ldr	r3, [pc, #16]	; (8005928 <__sinit+0x2c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1f5      	bne.n	8005908 <__sinit+0xc>
 800591c:	f7ff ffc4 	bl	80058a8 <global_stdio_init.part.0>
 8005920:	e7f2      	b.n	8005908 <__sinit+0xc>
 8005922:	bf00      	nop
 8005924:	08005869 	.word	0x08005869
 8005928:	200004b0 	.word	0x200004b0

0800592c <_fwalk_sglue>:
 800592c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005930:	4607      	mov	r7, r0
 8005932:	4688      	mov	r8, r1
 8005934:	4614      	mov	r4, r2
 8005936:	2600      	movs	r6, #0
 8005938:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800593c:	f1b9 0901 	subs.w	r9, r9, #1
 8005940:	d505      	bpl.n	800594e <_fwalk_sglue+0x22>
 8005942:	6824      	ldr	r4, [r4, #0]
 8005944:	2c00      	cmp	r4, #0
 8005946:	d1f7      	bne.n	8005938 <_fwalk_sglue+0xc>
 8005948:	4630      	mov	r0, r6
 800594a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800594e:	89ab      	ldrh	r3, [r5, #12]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d907      	bls.n	8005964 <_fwalk_sglue+0x38>
 8005954:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005958:	3301      	adds	r3, #1
 800595a:	d003      	beq.n	8005964 <_fwalk_sglue+0x38>
 800595c:	4629      	mov	r1, r5
 800595e:	4638      	mov	r0, r7
 8005960:	47c0      	blx	r8
 8005962:	4306      	orrs	r6, r0
 8005964:	3568      	adds	r5, #104	; 0x68
 8005966:	e7e9      	b.n	800593c <_fwalk_sglue+0x10>

08005968 <_puts_r>:
 8005968:	6a03      	ldr	r3, [r0, #32]
 800596a:	b570      	push	{r4, r5, r6, lr}
 800596c:	4605      	mov	r5, r0
 800596e:	460e      	mov	r6, r1
 8005970:	6884      	ldr	r4, [r0, #8]
 8005972:	b90b      	cbnz	r3, 8005978 <_puts_r+0x10>
 8005974:	f7ff ffc2 	bl	80058fc <__sinit>
 8005978:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800597a:	07db      	lsls	r3, r3, #31
 800597c:	d405      	bmi.n	800598a <_puts_r+0x22>
 800597e:	89a3      	ldrh	r3, [r4, #12]
 8005980:	0598      	lsls	r0, r3, #22
 8005982:	d402      	bmi.n	800598a <_puts_r+0x22>
 8005984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005986:	f000 fa2a 	bl	8005dde <__retarget_lock_acquire_recursive>
 800598a:	89a3      	ldrh	r3, [r4, #12]
 800598c:	0719      	lsls	r1, r3, #28
 800598e:	d513      	bpl.n	80059b8 <_puts_r+0x50>
 8005990:	6923      	ldr	r3, [r4, #16]
 8005992:	b18b      	cbz	r3, 80059b8 <_puts_r+0x50>
 8005994:	3e01      	subs	r6, #1
 8005996:	68a3      	ldr	r3, [r4, #8]
 8005998:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800599c:	3b01      	subs	r3, #1
 800599e:	60a3      	str	r3, [r4, #8]
 80059a0:	b9e9      	cbnz	r1, 80059de <_puts_r+0x76>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	da2e      	bge.n	8005a04 <_puts_r+0x9c>
 80059a6:	4622      	mov	r2, r4
 80059a8:	210a      	movs	r1, #10
 80059aa:	4628      	mov	r0, r5
 80059ac:	f000 f8e8 	bl	8005b80 <__swbuf_r>
 80059b0:	3001      	adds	r0, #1
 80059b2:	d007      	beq.n	80059c4 <_puts_r+0x5c>
 80059b4:	250a      	movs	r5, #10
 80059b6:	e007      	b.n	80059c8 <_puts_r+0x60>
 80059b8:	4621      	mov	r1, r4
 80059ba:	4628      	mov	r0, r5
 80059bc:	f000 f91e 	bl	8005bfc <__swsetup_r>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d0e7      	beq.n	8005994 <_puts_r+0x2c>
 80059c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80059c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059ca:	07da      	lsls	r2, r3, #31
 80059cc:	d405      	bmi.n	80059da <_puts_r+0x72>
 80059ce:	89a3      	ldrh	r3, [r4, #12]
 80059d0:	059b      	lsls	r3, r3, #22
 80059d2:	d402      	bmi.n	80059da <_puts_r+0x72>
 80059d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059d6:	f000 fa03 	bl	8005de0 <__retarget_lock_release_recursive>
 80059da:	4628      	mov	r0, r5
 80059dc:	bd70      	pop	{r4, r5, r6, pc}
 80059de:	2b00      	cmp	r3, #0
 80059e0:	da04      	bge.n	80059ec <_puts_r+0x84>
 80059e2:	69a2      	ldr	r2, [r4, #24]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	dc06      	bgt.n	80059f6 <_puts_r+0x8e>
 80059e8:	290a      	cmp	r1, #10
 80059ea:	d004      	beq.n	80059f6 <_puts_r+0x8e>
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	6022      	str	r2, [r4, #0]
 80059f2:	7019      	strb	r1, [r3, #0]
 80059f4:	e7cf      	b.n	8005996 <_puts_r+0x2e>
 80059f6:	4622      	mov	r2, r4
 80059f8:	4628      	mov	r0, r5
 80059fa:	f000 f8c1 	bl	8005b80 <__swbuf_r>
 80059fe:	3001      	adds	r0, #1
 8005a00:	d1c9      	bne.n	8005996 <_puts_r+0x2e>
 8005a02:	e7df      	b.n	80059c4 <_puts_r+0x5c>
 8005a04:	250a      	movs	r5, #10
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	6022      	str	r2, [r4, #0]
 8005a0c:	701d      	strb	r5, [r3, #0]
 8005a0e:	e7db      	b.n	80059c8 <_puts_r+0x60>

08005a10 <puts>:
 8005a10:	4b02      	ldr	r3, [pc, #8]	; (8005a1c <puts+0xc>)
 8005a12:	4601      	mov	r1, r0
 8005a14:	6818      	ldr	r0, [r3, #0]
 8005a16:	f7ff bfa7 	b.w	8005968 <_puts_r>
 8005a1a:	bf00      	nop
 8005a1c:	20000250 	.word	0x20000250

08005a20 <sniprintf>:
 8005a20:	b40c      	push	{r2, r3}
 8005a22:	b530      	push	{r4, r5, lr}
 8005a24:	4b17      	ldr	r3, [pc, #92]	; (8005a84 <sniprintf+0x64>)
 8005a26:	1e0c      	subs	r4, r1, #0
 8005a28:	681d      	ldr	r5, [r3, #0]
 8005a2a:	b09d      	sub	sp, #116	; 0x74
 8005a2c:	da08      	bge.n	8005a40 <sniprintf+0x20>
 8005a2e:	238b      	movs	r3, #139	; 0x8b
 8005a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a34:	602b      	str	r3, [r5, #0]
 8005a36:	b01d      	add	sp, #116	; 0x74
 8005a38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a3c:	b002      	add	sp, #8
 8005a3e:	4770      	bx	lr
 8005a40:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005a44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a48:	bf0c      	ite	eq
 8005a4a:	4623      	moveq	r3, r4
 8005a4c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005a50:	9304      	str	r3, [sp, #16]
 8005a52:	9307      	str	r3, [sp, #28]
 8005a54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a58:	9002      	str	r0, [sp, #8]
 8005a5a:	9006      	str	r0, [sp, #24]
 8005a5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a60:	4628      	mov	r0, r5
 8005a62:	ab21      	add	r3, sp, #132	; 0x84
 8005a64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a66:	a902      	add	r1, sp, #8
 8005a68:	9301      	str	r3, [sp, #4]
 8005a6a:	f000 fa6b 	bl	8005f44 <_svfiprintf_r>
 8005a6e:	1c43      	adds	r3, r0, #1
 8005a70:	bfbc      	itt	lt
 8005a72:	238b      	movlt	r3, #139	; 0x8b
 8005a74:	602b      	strlt	r3, [r5, #0]
 8005a76:	2c00      	cmp	r4, #0
 8005a78:	d0dd      	beq.n	8005a36 <sniprintf+0x16>
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	9b02      	ldr	r3, [sp, #8]
 8005a7e:	701a      	strb	r2, [r3, #0]
 8005a80:	e7d9      	b.n	8005a36 <sniprintf+0x16>
 8005a82:	bf00      	nop
 8005a84:	20000250 	.word	0x20000250

08005a88 <__sread>:
 8005a88:	b510      	push	{r4, lr}
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a90:	f000 f946 	bl	8005d20 <_read_r>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	bfab      	itete	ge
 8005a98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a9a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a9c:	181b      	addge	r3, r3, r0
 8005a9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005aa2:	bfac      	ite	ge
 8005aa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005aa6:	81a3      	strhlt	r3, [r4, #12]
 8005aa8:	bd10      	pop	{r4, pc}

08005aaa <__swrite>:
 8005aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aae:	461f      	mov	r7, r3
 8005ab0:	898b      	ldrh	r3, [r1, #12]
 8005ab2:	4605      	mov	r5, r0
 8005ab4:	05db      	lsls	r3, r3, #23
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	4616      	mov	r6, r2
 8005aba:	d505      	bpl.n	8005ac8 <__swrite+0x1e>
 8005abc:	2302      	movs	r3, #2
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac4:	f000 f91a 	bl	8005cfc <_lseek_r>
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	4632      	mov	r2, r6
 8005acc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ad0:	81a3      	strh	r3, [r4, #12]
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ade:	f000 b941 	b.w	8005d64 <_write_r>

08005ae2 <__sseek>:
 8005ae2:	b510      	push	{r4, lr}
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aea:	f000 f907 	bl	8005cfc <_lseek_r>
 8005aee:	1c43      	adds	r3, r0, #1
 8005af0:	89a3      	ldrh	r3, [r4, #12]
 8005af2:	bf15      	itete	ne
 8005af4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005af6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005afa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005afe:	81a3      	strheq	r3, [r4, #12]
 8005b00:	bf18      	it	ne
 8005b02:	81a3      	strhne	r3, [r4, #12]
 8005b04:	bd10      	pop	{r4, pc}

08005b06 <__sclose>:
 8005b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b0a:	f000 b8e7 	b.w	8005cdc <_close_r>

08005b0e <_vsniprintf_r>:
 8005b0e:	b530      	push	{r4, r5, lr}
 8005b10:	4614      	mov	r4, r2
 8005b12:	2c00      	cmp	r4, #0
 8005b14:	4605      	mov	r5, r0
 8005b16:	461a      	mov	r2, r3
 8005b18:	b09b      	sub	sp, #108	; 0x6c
 8005b1a:	da05      	bge.n	8005b28 <_vsniprintf_r+0x1a>
 8005b1c:	238b      	movs	r3, #139	; 0x8b
 8005b1e:	6003      	str	r3, [r0, #0]
 8005b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b24:	b01b      	add	sp, #108	; 0x6c
 8005b26:	bd30      	pop	{r4, r5, pc}
 8005b28:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005b2c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005b30:	bf0c      	ite	eq
 8005b32:	4623      	moveq	r3, r4
 8005b34:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005b38:	9302      	str	r3, [sp, #8]
 8005b3a:	9305      	str	r3, [sp, #20]
 8005b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b40:	9100      	str	r1, [sp, #0]
 8005b42:	9104      	str	r1, [sp, #16]
 8005b44:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005b48:	4669      	mov	r1, sp
 8005b4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b4c:	f000 f9fa 	bl	8005f44 <_svfiprintf_r>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	bfbc      	itt	lt
 8005b54:	238b      	movlt	r3, #139	; 0x8b
 8005b56:	602b      	strlt	r3, [r5, #0]
 8005b58:	2c00      	cmp	r4, #0
 8005b5a:	d0e3      	beq.n	8005b24 <_vsniprintf_r+0x16>
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	9b00      	ldr	r3, [sp, #0]
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	e7df      	b.n	8005b24 <_vsniprintf_r+0x16>

08005b64 <vsniprintf>:
 8005b64:	b507      	push	{r0, r1, r2, lr}
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	460a      	mov	r2, r1
 8005b6c:	4601      	mov	r1, r0
 8005b6e:	4803      	ldr	r0, [pc, #12]	; (8005b7c <vsniprintf+0x18>)
 8005b70:	6800      	ldr	r0, [r0, #0]
 8005b72:	f7ff ffcc 	bl	8005b0e <_vsniprintf_r>
 8005b76:	b003      	add	sp, #12
 8005b78:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b7c:	20000250 	.word	0x20000250

08005b80 <__swbuf_r>:
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	460e      	mov	r6, r1
 8005b84:	4614      	mov	r4, r2
 8005b86:	4605      	mov	r5, r0
 8005b88:	b118      	cbz	r0, 8005b92 <__swbuf_r+0x12>
 8005b8a:	6a03      	ldr	r3, [r0, #32]
 8005b8c:	b90b      	cbnz	r3, 8005b92 <__swbuf_r+0x12>
 8005b8e:	f7ff feb5 	bl	80058fc <__sinit>
 8005b92:	69a3      	ldr	r3, [r4, #24]
 8005b94:	60a3      	str	r3, [r4, #8]
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	071a      	lsls	r2, r3, #28
 8005b9a:	d525      	bpl.n	8005be8 <__swbuf_r+0x68>
 8005b9c:	6923      	ldr	r3, [r4, #16]
 8005b9e:	b31b      	cbz	r3, 8005be8 <__swbuf_r+0x68>
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	6922      	ldr	r2, [r4, #16]
 8005ba4:	b2f6      	uxtb	r6, r6
 8005ba6:	1a98      	subs	r0, r3, r2
 8005ba8:	6963      	ldr	r3, [r4, #20]
 8005baa:	4637      	mov	r7, r6
 8005bac:	4283      	cmp	r3, r0
 8005bae:	dc04      	bgt.n	8005bba <__swbuf_r+0x3a>
 8005bb0:	4621      	mov	r1, r4
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	f000 fcda 	bl	800656c <_fflush_r>
 8005bb8:	b9e0      	cbnz	r0, 8005bf4 <__swbuf_r+0x74>
 8005bba:	68a3      	ldr	r3, [r4, #8]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	60a3      	str	r3, [r4, #8]
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	6022      	str	r2, [r4, #0]
 8005bc6:	701e      	strb	r6, [r3, #0]
 8005bc8:	6962      	ldr	r2, [r4, #20]
 8005bca:	1c43      	adds	r3, r0, #1
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d004      	beq.n	8005bda <__swbuf_r+0x5a>
 8005bd0:	89a3      	ldrh	r3, [r4, #12]
 8005bd2:	07db      	lsls	r3, r3, #31
 8005bd4:	d506      	bpl.n	8005be4 <__swbuf_r+0x64>
 8005bd6:	2e0a      	cmp	r6, #10
 8005bd8:	d104      	bne.n	8005be4 <__swbuf_r+0x64>
 8005bda:	4621      	mov	r1, r4
 8005bdc:	4628      	mov	r0, r5
 8005bde:	f000 fcc5 	bl	800656c <_fflush_r>
 8005be2:	b938      	cbnz	r0, 8005bf4 <__swbuf_r+0x74>
 8005be4:	4638      	mov	r0, r7
 8005be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005be8:	4621      	mov	r1, r4
 8005bea:	4628      	mov	r0, r5
 8005bec:	f000 f806 	bl	8005bfc <__swsetup_r>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d0d5      	beq.n	8005ba0 <__swbuf_r+0x20>
 8005bf4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005bf8:	e7f4      	b.n	8005be4 <__swbuf_r+0x64>
	...

08005bfc <__swsetup_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4b2a      	ldr	r3, [pc, #168]	; (8005ca8 <__swsetup_r+0xac>)
 8005c00:	4605      	mov	r5, r0
 8005c02:	6818      	ldr	r0, [r3, #0]
 8005c04:	460c      	mov	r4, r1
 8005c06:	b118      	cbz	r0, 8005c10 <__swsetup_r+0x14>
 8005c08:	6a03      	ldr	r3, [r0, #32]
 8005c0a:	b90b      	cbnz	r3, 8005c10 <__swsetup_r+0x14>
 8005c0c:	f7ff fe76 	bl	80058fc <__sinit>
 8005c10:	89a3      	ldrh	r3, [r4, #12]
 8005c12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c16:	0718      	lsls	r0, r3, #28
 8005c18:	d422      	bmi.n	8005c60 <__swsetup_r+0x64>
 8005c1a:	06d9      	lsls	r1, r3, #27
 8005c1c:	d407      	bmi.n	8005c2e <__swsetup_r+0x32>
 8005c1e:	2309      	movs	r3, #9
 8005c20:	602b      	str	r3, [r5, #0]
 8005c22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c2a:	81a3      	strh	r3, [r4, #12]
 8005c2c:	e034      	b.n	8005c98 <__swsetup_r+0x9c>
 8005c2e:	0758      	lsls	r0, r3, #29
 8005c30:	d512      	bpl.n	8005c58 <__swsetup_r+0x5c>
 8005c32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c34:	b141      	cbz	r1, 8005c48 <__swsetup_r+0x4c>
 8005c36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c3a:	4299      	cmp	r1, r3
 8005c3c:	d002      	beq.n	8005c44 <__swsetup_r+0x48>
 8005c3e:	4628      	mov	r0, r5
 8005c40:	f000 f8de 	bl	8005e00 <_free_r>
 8005c44:	2300      	movs	r3, #0
 8005c46:	6363      	str	r3, [r4, #52]	; 0x34
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c4e:	81a3      	strh	r3, [r4, #12]
 8005c50:	2300      	movs	r3, #0
 8005c52:	6063      	str	r3, [r4, #4]
 8005c54:	6923      	ldr	r3, [r4, #16]
 8005c56:	6023      	str	r3, [r4, #0]
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	f043 0308 	orr.w	r3, r3, #8
 8005c5e:	81a3      	strh	r3, [r4, #12]
 8005c60:	6923      	ldr	r3, [r4, #16]
 8005c62:	b94b      	cbnz	r3, 8005c78 <__swsetup_r+0x7c>
 8005c64:	89a3      	ldrh	r3, [r4, #12]
 8005c66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c6e:	d003      	beq.n	8005c78 <__swsetup_r+0x7c>
 8005c70:	4621      	mov	r1, r4
 8005c72:	4628      	mov	r0, r5
 8005c74:	f000 fcc7 	bl	8006606 <__smakebuf_r>
 8005c78:	89a0      	ldrh	r0, [r4, #12]
 8005c7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c7e:	f010 0301 	ands.w	r3, r0, #1
 8005c82:	d00a      	beq.n	8005c9a <__swsetup_r+0x9e>
 8005c84:	2300      	movs	r3, #0
 8005c86:	60a3      	str	r3, [r4, #8]
 8005c88:	6963      	ldr	r3, [r4, #20]
 8005c8a:	425b      	negs	r3, r3
 8005c8c:	61a3      	str	r3, [r4, #24]
 8005c8e:	6923      	ldr	r3, [r4, #16]
 8005c90:	b943      	cbnz	r3, 8005ca4 <__swsetup_r+0xa8>
 8005c92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c96:	d1c4      	bne.n	8005c22 <__swsetup_r+0x26>
 8005c98:	bd38      	pop	{r3, r4, r5, pc}
 8005c9a:	0781      	lsls	r1, r0, #30
 8005c9c:	bf58      	it	pl
 8005c9e:	6963      	ldrpl	r3, [r4, #20]
 8005ca0:	60a3      	str	r3, [r4, #8]
 8005ca2:	e7f4      	b.n	8005c8e <__swsetup_r+0x92>
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	e7f7      	b.n	8005c98 <__swsetup_r+0x9c>
 8005ca8:	20000250 	.word	0x20000250

08005cac <memcmp>:
 8005cac:	b510      	push	{r4, lr}
 8005cae:	3901      	subs	r1, #1
 8005cb0:	4402      	add	r2, r0
 8005cb2:	4290      	cmp	r0, r2
 8005cb4:	d101      	bne.n	8005cba <memcmp+0xe>
 8005cb6:	2000      	movs	r0, #0
 8005cb8:	e005      	b.n	8005cc6 <memcmp+0x1a>
 8005cba:	7803      	ldrb	r3, [r0, #0]
 8005cbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	d001      	beq.n	8005cc8 <memcmp+0x1c>
 8005cc4:	1b18      	subs	r0, r3, r4
 8005cc6:	bd10      	pop	{r4, pc}
 8005cc8:	3001      	adds	r0, #1
 8005cca:	e7f2      	b.n	8005cb2 <memcmp+0x6>

08005ccc <memset>:
 8005ccc:	4603      	mov	r3, r0
 8005cce:	4402      	add	r2, r0
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d100      	bne.n	8005cd6 <memset+0xa>
 8005cd4:	4770      	bx	lr
 8005cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cda:	e7f9      	b.n	8005cd0 <memset+0x4>

08005cdc <_close_r>:
 8005cdc:	b538      	push	{r3, r4, r5, lr}
 8005cde:	2300      	movs	r3, #0
 8005ce0:	4d05      	ldr	r5, [pc, #20]	; (8005cf8 <_close_r+0x1c>)
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	4608      	mov	r0, r1
 8005ce6:	602b      	str	r3, [r5, #0]
 8005ce8:	f7fa fff8 	bl	8000cdc <_close>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d102      	bne.n	8005cf6 <_close_r+0x1a>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	b103      	cbz	r3, 8005cf6 <_close_r+0x1a>
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	bd38      	pop	{r3, r4, r5, pc}
 8005cf8:	200004b4 	.word	0x200004b4

08005cfc <_lseek_r>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	4604      	mov	r4, r0
 8005d00:	4608      	mov	r0, r1
 8005d02:	4611      	mov	r1, r2
 8005d04:	2200      	movs	r2, #0
 8005d06:	4d05      	ldr	r5, [pc, #20]	; (8005d1c <_lseek_r+0x20>)
 8005d08:	602a      	str	r2, [r5, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f7fb f80a 	bl	8000d24 <_lseek>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d102      	bne.n	8005d1a <_lseek_r+0x1e>
 8005d14:	682b      	ldr	r3, [r5, #0]
 8005d16:	b103      	cbz	r3, 8005d1a <_lseek_r+0x1e>
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	bd38      	pop	{r3, r4, r5, pc}
 8005d1c:	200004b4 	.word	0x200004b4

08005d20 <_read_r>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	4604      	mov	r4, r0
 8005d24:	4608      	mov	r0, r1
 8005d26:	4611      	mov	r1, r2
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4d05      	ldr	r5, [pc, #20]	; (8005d40 <_read_r+0x20>)
 8005d2c:	602a      	str	r2, [r5, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f7fa ffb7 	bl	8000ca2 <_read>
 8005d34:	1c43      	adds	r3, r0, #1
 8005d36:	d102      	bne.n	8005d3e <_read_r+0x1e>
 8005d38:	682b      	ldr	r3, [r5, #0]
 8005d3a:	b103      	cbz	r3, 8005d3e <_read_r+0x1e>
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	bd38      	pop	{r3, r4, r5, pc}
 8005d40:	200004b4 	.word	0x200004b4

08005d44 <_sbrk_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	2300      	movs	r3, #0
 8005d48:	4d05      	ldr	r5, [pc, #20]	; (8005d60 <_sbrk_r+0x1c>)
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	4608      	mov	r0, r1
 8005d4e:	602b      	str	r3, [r5, #0]
 8005d50:	f7fa fff4 	bl	8000d3c <_sbrk>
 8005d54:	1c43      	adds	r3, r0, #1
 8005d56:	d102      	bne.n	8005d5e <_sbrk_r+0x1a>
 8005d58:	682b      	ldr	r3, [r5, #0]
 8005d5a:	b103      	cbz	r3, 8005d5e <_sbrk_r+0x1a>
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	bd38      	pop	{r3, r4, r5, pc}
 8005d60:	200004b4 	.word	0x200004b4

08005d64 <_write_r>:
 8005d64:	b538      	push	{r3, r4, r5, lr}
 8005d66:	4604      	mov	r4, r0
 8005d68:	4608      	mov	r0, r1
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	4d05      	ldr	r5, [pc, #20]	; (8005d84 <_write_r+0x20>)
 8005d70:	602a      	str	r2, [r5, #0]
 8005d72:	461a      	mov	r2, r3
 8005d74:	f7fa fc63 	bl	800063e <_write>
 8005d78:	1c43      	adds	r3, r0, #1
 8005d7a:	d102      	bne.n	8005d82 <_write_r+0x1e>
 8005d7c:	682b      	ldr	r3, [r5, #0]
 8005d7e:	b103      	cbz	r3, 8005d82 <_write_r+0x1e>
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	bd38      	pop	{r3, r4, r5, pc}
 8005d84:	200004b4 	.word	0x200004b4

08005d88 <__errno>:
 8005d88:	4b01      	ldr	r3, [pc, #4]	; (8005d90 <__errno+0x8>)
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	20000250 	.word	0x20000250

08005d94 <__libc_init_array>:
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	2600      	movs	r6, #0
 8005d98:	4d0c      	ldr	r5, [pc, #48]	; (8005dcc <__libc_init_array+0x38>)
 8005d9a:	4c0d      	ldr	r4, [pc, #52]	; (8005dd0 <__libc_init_array+0x3c>)
 8005d9c:	1b64      	subs	r4, r4, r5
 8005d9e:	10a4      	asrs	r4, r4, #2
 8005da0:	42a6      	cmp	r6, r4
 8005da2:	d109      	bne.n	8005db8 <__libc_init_array+0x24>
 8005da4:	f000 fcee 	bl	8006784 <_init>
 8005da8:	2600      	movs	r6, #0
 8005daa:	4d0a      	ldr	r5, [pc, #40]	; (8005dd4 <__libc_init_array+0x40>)
 8005dac:	4c0a      	ldr	r4, [pc, #40]	; (8005dd8 <__libc_init_array+0x44>)
 8005dae:	1b64      	subs	r4, r4, r5
 8005db0:	10a4      	asrs	r4, r4, #2
 8005db2:	42a6      	cmp	r6, r4
 8005db4:	d105      	bne.n	8005dc2 <__libc_init_array+0x2e>
 8005db6:	bd70      	pop	{r4, r5, r6, pc}
 8005db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dbc:	4798      	blx	r3
 8005dbe:	3601      	adds	r6, #1
 8005dc0:	e7ee      	b.n	8005da0 <__libc_init_array+0xc>
 8005dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc6:	4798      	blx	r3
 8005dc8:	3601      	adds	r6, #1
 8005dca:	e7f2      	b.n	8005db2 <__libc_init_array+0x1e>
 8005dcc:	0800696c 	.word	0x0800696c
 8005dd0:	0800696c 	.word	0x0800696c
 8005dd4:	0800696c 	.word	0x0800696c
 8005dd8:	08006970 	.word	0x08006970

08005ddc <__retarget_lock_init_recursive>:
 8005ddc:	4770      	bx	lr

08005dde <__retarget_lock_acquire_recursive>:
 8005dde:	4770      	bx	lr

08005de0 <__retarget_lock_release_recursive>:
 8005de0:	4770      	bx	lr

08005de2 <memcpy>:
 8005de2:	440a      	add	r2, r1
 8005de4:	4291      	cmp	r1, r2
 8005de6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005dea:	d100      	bne.n	8005dee <memcpy+0xc>
 8005dec:	4770      	bx	lr
 8005dee:	b510      	push	{r4, lr}
 8005df0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005df4:	4291      	cmp	r1, r2
 8005df6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dfa:	d1f9      	bne.n	8005df0 <memcpy+0xe>
 8005dfc:	bd10      	pop	{r4, pc}
	...

08005e00 <_free_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4605      	mov	r5, r0
 8005e04:	2900      	cmp	r1, #0
 8005e06:	d040      	beq.n	8005e8a <_free_r+0x8a>
 8005e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e0c:	1f0c      	subs	r4, r1, #4
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	bfb8      	it	lt
 8005e12:	18e4      	addlt	r4, r4, r3
 8005e14:	f7ff fcda 	bl	80057cc <__malloc_lock>
 8005e18:	4a1c      	ldr	r2, [pc, #112]	; (8005e8c <_free_r+0x8c>)
 8005e1a:	6813      	ldr	r3, [r2, #0]
 8005e1c:	b933      	cbnz	r3, 8005e2c <_free_r+0x2c>
 8005e1e:	6063      	str	r3, [r4, #4]
 8005e20:	6014      	str	r4, [r2, #0]
 8005e22:	4628      	mov	r0, r5
 8005e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e28:	f7ff bcd6 	b.w	80057d8 <__malloc_unlock>
 8005e2c:	42a3      	cmp	r3, r4
 8005e2e:	d908      	bls.n	8005e42 <_free_r+0x42>
 8005e30:	6820      	ldr	r0, [r4, #0]
 8005e32:	1821      	adds	r1, r4, r0
 8005e34:	428b      	cmp	r3, r1
 8005e36:	bf01      	itttt	eq
 8005e38:	6819      	ldreq	r1, [r3, #0]
 8005e3a:	685b      	ldreq	r3, [r3, #4]
 8005e3c:	1809      	addeq	r1, r1, r0
 8005e3e:	6021      	streq	r1, [r4, #0]
 8005e40:	e7ed      	b.n	8005e1e <_free_r+0x1e>
 8005e42:	461a      	mov	r2, r3
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	b10b      	cbz	r3, 8005e4c <_free_r+0x4c>
 8005e48:	42a3      	cmp	r3, r4
 8005e4a:	d9fa      	bls.n	8005e42 <_free_r+0x42>
 8005e4c:	6811      	ldr	r1, [r2, #0]
 8005e4e:	1850      	adds	r0, r2, r1
 8005e50:	42a0      	cmp	r0, r4
 8005e52:	d10b      	bne.n	8005e6c <_free_r+0x6c>
 8005e54:	6820      	ldr	r0, [r4, #0]
 8005e56:	4401      	add	r1, r0
 8005e58:	1850      	adds	r0, r2, r1
 8005e5a:	4283      	cmp	r3, r0
 8005e5c:	6011      	str	r1, [r2, #0]
 8005e5e:	d1e0      	bne.n	8005e22 <_free_r+0x22>
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	4408      	add	r0, r1
 8005e66:	6010      	str	r0, [r2, #0]
 8005e68:	6053      	str	r3, [r2, #4]
 8005e6a:	e7da      	b.n	8005e22 <_free_r+0x22>
 8005e6c:	d902      	bls.n	8005e74 <_free_r+0x74>
 8005e6e:	230c      	movs	r3, #12
 8005e70:	602b      	str	r3, [r5, #0]
 8005e72:	e7d6      	b.n	8005e22 <_free_r+0x22>
 8005e74:	6820      	ldr	r0, [r4, #0]
 8005e76:	1821      	adds	r1, r4, r0
 8005e78:	428b      	cmp	r3, r1
 8005e7a:	bf01      	itttt	eq
 8005e7c:	6819      	ldreq	r1, [r3, #0]
 8005e7e:	685b      	ldreq	r3, [r3, #4]
 8005e80:	1809      	addeq	r1, r1, r0
 8005e82:	6021      	streq	r1, [r4, #0]
 8005e84:	6063      	str	r3, [r4, #4]
 8005e86:	6054      	str	r4, [r2, #4]
 8005e88:	e7cb      	b.n	8005e22 <_free_r+0x22>
 8005e8a:	bd38      	pop	{r3, r4, r5, pc}
 8005e8c:	20000370 	.word	0x20000370

08005e90 <__ssputs_r>:
 8005e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e94:	461f      	mov	r7, r3
 8005e96:	688e      	ldr	r6, [r1, #8]
 8005e98:	4682      	mov	sl, r0
 8005e9a:	42be      	cmp	r6, r7
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	4690      	mov	r8, r2
 8005ea0:	680b      	ldr	r3, [r1, #0]
 8005ea2:	d82c      	bhi.n	8005efe <__ssputs_r+0x6e>
 8005ea4:	898a      	ldrh	r2, [r1, #12]
 8005ea6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005eaa:	d026      	beq.n	8005efa <__ssputs_r+0x6a>
 8005eac:	6965      	ldr	r5, [r4, #20]
 8005eae:	6909      	ldr	r1, [r1, #16]
 8005eb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005eb4:	eba3 0901 	sub.w	r9, r3, r1
 8005eb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ebc:	1c7b      	adds	r3, r7, #1
 8005ebe:	444b      	add	r3, r9
 8005ec0:	106d      	asrs	r5, r5, #1
 8005ec2:	429d      	cmp	r5, r3
 8005ec4:	bf38      	it	cc
 8005ec6:	461d      	movcc	r5, r3
 8005ec8:	0553      	lsls	r3, r2, #21
 8005eca:	d527      	bpl.n	8005f1c <__ssputs_r+0x8c>
 8005ecc:	4629      	mov	r1, r5
 8005ece:	f7ff fbfd 	bl	80056cc <_malloc_r>
 8005ed2:	4606      	mov	r6, r0
 8005ed4:	b360      	cbz	r0, 8005f30 <__ssputs_r+0xa0>
 8005ed6:	464a      	mov	r2, r9
 8005ed8:	6921      	ldr	r1, [r4, #16]
 8005eda:	f7ff ff82 	bl	8005de2 <memcpy>
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee8:	81a3      	strh	r3, [r4, #12]
 8005eea:	6126      	str	r6, [r4, #16]
 8005eec:	444e      	add	r6, r9
 8005eee:	6026      	str	r6, [r4, #0]
 8005ef0:	463e      	mov	r6, r7
 8005ef2:	6165      	str	r5, [r4, #20]
 8005ef4:	eba5 0509 	sub.w	r5, r5, r9
 8005ef8:	60a5      	str	r5, [r4, #8]
 8005efa:	42be      	cmp	r6, r7
 8005efc:	d900      	bls.n	8005f00 <__ssputs_r+0x70>
 8005efe:	463e      	mov	r6, r7
 8005f00:	4632      	mov	r2, r6
 8005f02:	4641      	mov	r1, r8
 8005f04:	6820      	ldr	r0, [r4, #0]
 8005f06:	f000 fbba 	bl	800667e <memmove>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	68a3      	ldr	r3, [r4, #8]
 8005f0e:	1b9b      	subs	r3, r3, r6
 8005f10:	60a3      	str	r3, [r4, #8]
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	4433      	add	r3, r6
 8005f16:	6023      	str	r3, [r4, #0]
 8005f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f1c:	462a      	mov	r2, r5
 8005f1e:	f000 fbf9 	bl	8006714 <_realloc_r>
 8005f22:	4606      	mov	r6, r0
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d1e0      	bne.n	8005eea <__ssputs_r+0x5a>
 8005f28:	4650      	mov	r0, sl
 8005f2a:	6921      	ldr	r1, [r4, #16]
 8005f2c:	f7ff ff68 	bl	8005e00 <_free_r>
 8005f30:	230c      	movs	r3, #12
 8005f32:	f8ca 3000 	str.w	r3, [sl]
 8005f36:	89a3      	ldrh	r3, [r4, #12]
 8005f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f40:	81a3      	strh	r3, [r4, #12]
 8005f42:	e7e9      	b.n	8005f18 <__ssputs_r+0x88>

08005f44 <_svfiprintf_r>:
 8005f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f48:	4698      	mov	r8, r3
 8005f4a:	898b      	ldrh	r3, [r1, #12]
 8005f4c:	4607      	mov	r7, r0
 8005f4e:	061b      	lsls	r3, r3, #24
 8005f50:	460d      	mov	r5, r1
 8005f52:	4614      	mov	r4, r2
 8005f54:	b09d      	sub	sp, #116	; 0x74
 8005f56:	d50e      	bpl.n	8005f76 <_svfiprintf_r+0x32>
 8005f58:	690b      	ldr	r3, [r1, #16]
 8005f5a:	b963      	cbnz	r3, 8005f76 <_svfiprintf_r+0x32>
 8005f5c:	2140      	movs	r1, #64	; 0x40
 8005f5e:	f7ff fbb5 	bl	80056cc <_malloc_r>
 8005f62:	6028      	str	r0, [r5, #0]
 8005f64:	6128      	str	r0, [r5, #16]
 8005f66:	b920      	cbnz	r0, 8005f72 <_svfiprintf_r+0x2e>
 8005f68:	230c      	movs	r3, #12
 8005f6a:	603b      	str	r3, [r7, #0]
 8005f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f70:	e0d0      	b.n	8006114 <_svfiprintf_r+0x1d0>
 8005f72:	2340      	movs	r3, #64	; 0x40
 8005f74:	616b      	str	r3, [r5, #20]
 8005f76:	2300      	movs	r3, #0
 8005f78:	9309      	str	r3, [sp, #36]	; 0x24
 8005f7a:	2320      	movs	r3, #32
 8005f7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f80:	2330      	movs	r3, #48	; 0x30
 8005f82:	f04f 0901 	mov.w	r9, #1
 8005f86:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f8a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800612c <_svfiprintf_r+0x1e8>
 8005f8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f92:	4623      	mov	r3, r4
 8005f94:	469a      	mov	sl, r3
 8005f96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f9a:	b10a      	cbz	r2, 8005fa0 <_svfiprintf_r+0x5c>
 8005f9c:	2a25      	cmp	r2, #37	; 0x25
 8005f9e:	d1f9      	bne.n	8005f94 <_svfiprintf_r+0x50>
 8005fa0:	ebba 0b04 	subs.w	fp, sl, r4
 8005fa4:	d00b      	beq.n	8005fbe <_svfiprintf_r+0x7a>
 8005fa6:	465b      	mov	r3, fp
 8005fa8:	4622      	mov	r2, r4
 8005faa:	4629      	mov	r1, r5
 8005fac:	4638      	mov	r0, r7
 8005fae:	f7ff ff6f 	bl	8005e90 <__ssputs_r>
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	f000 80a9 	beq.w	800610a <_svfiprintf_r+0x1c6>
 8005fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fba:	445a      	add	r2, fp
 8005fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8005fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 80a1 	beq.w	800610a <_svfiprintf_r+0x1c6>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fd2:	f10a 0a01 	add.w	sl, sl, #1
 8005fd6:	9304      	str	r3, [sp, #16]
 8005fd8:	9307      	str	r3, [sp, #28]
 8005fda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fde:	931a      	str	r3, [sp, #104]	; 0x68
 8005fe0:	4654      	mov	r4, sl
 8005fe2:	2205      	movs	r2, #5
 8005fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe8:	4850      	ldr	r0, [pc, #320]	; (800612c <_svfiprintf_r+0x1e8>)
 8005fea:	f000 fb85 	bl	80066f8 <memchr>
 8005fee:	9a04      	ldr	r2, [sp, #16]
 8005ff0:	b9d8      	cbnz	r0, 800602a <_svfiprintf_r+0xe6>
 8005ff2:	06d0      	lsls	r0, r2, #27
 8005ff4:	bf44      	itt	mi
 8005ff6:	2320      	movmi	r3, #32
 8005ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ffc:	0711      	lsls	r1, r2, #28
 8005ffe:	bf44      	itt	mi
 8006000:	232b      	movmi	r3, #43	; 0x2b
 8006002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006006:	f89a 3000 	ldrb.w	r3, [sl]
 800600a:	2b2a      	cmp	r3, #42	; 0x2a
 800600c:	d015      	beq.n	800603a <_svfiprintf_r+0xf6>
 800600e:	4654      	mov	r4, sl
 8006010:	2000      	movs	r0, #0
 8006012:	f04f 0c0a 	mov.w	ip, #10
 8006016:	9a07      	ldr	r2, [sp, #28]
 8006018:	4621      	mov	r1, r4
 800601a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800601e:	3b30      	subs	r3, #48	; 0x30
 8006020:	2b09      	cmp	r3, #9
 8006022:	d94d      	bls.n	80060c0 <_svfiprintf_r+0x17c>
 8006024:	b1b0      	cbz	r0, 8006054 <_svfiprintf_r+0x110>
 8006026:	9207      	str	r2, [sp, #28]
 8006028:	e014      	b.n	8006054 <_svfiprintf_r+0x110>
 800602a:	eba0 0308 	sub.w	r3, r0, r8
 800602e:	fa09 f303 	lsl.w	r3, r9, r3
 8006032:	4313      	orrs	r3, r2
 8006034:	46a2      	mov	sl, r4
 8006036:	9304      	str	r3, [sp, #16]
 8006038:	e7d2      	b.n	8005fe0 <_svfiprintf_r+0x9c>
 800603a:	9b03      	ldr	r3, [sp, #12]
 800603c:	1d19      	adds	r1, r3, #4
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	9103      	str	r1, [sp, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	bfbb      	ittet	lt
 8006046:	425b      	neglt	r3, r3
 8006048:	f042 0202 	orrlt.w	r2, r2, #2
 800604c:	9307      	strge	r3, [sp, #28]
 800604e:	9307      	strlt	r3, [sp, #28]
 8006050:	bfb8      	it	lt
 8006052:	9204      	strlt	r2, [sp, #16]
 8006054:	7823      	ldrb	r3, [r4, #0]
 8006056:	2b2e      	cmp	r3, #46	; 0x2e
 8006058:	d10c      	bne.n	8006074 <_svfiprintf_r+0x130>
 800605a:	7863      	ldrb	r3, [r4, #1]
 800605c:	2b2a      	cmp	r3, #42	; 0x2a
 800605e:	d134      	bne.n	80060ca <_svfiprintf_r+0x186>
 8006060:	9b03      	ldr	r3, [sp, #12]
 8006062:	3402      	adds	r4, #2
 8006064:	1d1a      	adds	r2, r3, #4
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	9203      	str	r2, [sp, #12]
 800606a:	2b00      	cmp	r3, #0
 800606c:	bfb8      	it	lt
 800606e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006072:	9305      	str	r3, [sp, #20]
 8006074:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006130 <_svfiprintf_r+0x1ec>
 8006078:	2203      	movs	r2, #3
 800607a:	4650      	mov	r0, sl
 800607c:	7821      	ldrb	r1, [r4, #0]
 800607e:	f000 fb3b 	bl	80066f8 <memchr>
 8006082:	b138      	cbz	r0, 8006094 <_svfiprintf_r+0x150>
 8006084:	2240      	movs	r2, #64	; 0x40
 8006086:	9b04      	ldr	r3, [sp, #16]
 8006088:	eba0 000a 	sub.w	r0, r0, sl
 800608c:	4082      	lsls	r2, r0
 800608e:	4313      	orrs	r3, r2
 8006090:	3401      	adds	r4, #1
 8006092:	9304      	str	r3, [sp, #16]
 8006094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006098:	2206      	movs	r2, #6
 800609a:	4826      	ldr	r0, [pc, #152]	; (8006134 <_svfiprintf_r+0x1f0>)
 800609c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060a0:	f000 fb2a 	bl	80066f8 <memchr>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d038      	beq.n	800611a <_svfiprintf_r+0x1d6>
 80060a8:	4b23      	ldr	r3, [pc, #140]	; (8006138 <_svfiprintf_r+0x1f4>)
 80060aa:	bb1b      	cbnz	r3, 80060f4 <_svfiprintf_r+0x1b0>
 80060ac:	9b03      	ldr	r3, [sp, #12]
 80060ae:	3307      	adds	r3, #7
 80060b0:	f023 0307 	bic.w	r3, r3, #7
 80060b4:	3308      	adds	r3, #8
 80060b6:	9303      	str	r3, [sp, #12]
 80060b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ba:	4433      	add	r3, r6
 80060bc:	9309      	str	r3, [sp, #36]	; 0x24
 80060be:	e768      	b.n	8005f92 <_svfiprintf_r+0x4e>
 80060c0:	460c      	mov	r4, r1
 80060c2:	2001      	movs	r0, #1
 80060c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80060c8:	e7a6      	b.n	8006018 <_svfiprintf_r+0xd4>
 80060ca:	2300      	movs	r3, #0
 80060cc:	f04f 0c0a 	mov.w	ip, #10
 80060d0:	4619      	mov	r1, r3
 80060d2:	3401      	adds	r4, #1
 80060d4:	9305      	str	r3, [sp, #20]
 80060d6:	4620      	mov	r0, r4
 80060d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060dc:	3a30      	subs	r2, #48	; 0x30
 80060de:	2a09      	cmp	r2, #9
 80060e0:	d903      	bls.n	80060ea <_svfiprintf_r+0x1a6>
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0c6      	beq.n	8006074 <_svfiprintf_r+0x130>
 80060e6:	9105      	str	r1, [sp, #20]
 80060e8:	e7c4      	b.n	8006074 <_svfiprintf_r+0x130>
 80060ea:	4604      	mov	r4, r0
 80060ec:	2301      	movs	r3, #1
 80060ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80060f2:	e7f0      	b.n	80060d6 <_svfiprintf_r+0x192>
 80060f4:	ab03      	add	r3, sp, #12
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	462a      	mov	r2, r5
 80060fa:	4638      	mov	r0, r7
 80060fc:	4b0f      	ldr	r3, [pc, #60]	; (800613c <_svfiprintf_r+0x1f8>)
 80060fe:	a904      	add	r1, sp, #16
 8006100:	f3af 8000 	nop.w
 8006104:	1c42      	adds	r2, r0, #1
 8006106:	4606      	mov	r6, r0
 8006108:	d1d6      	bne.n	80060b8 <_svfiprintf_r+0x174>
 800610a:	89ab      	ldrh	r3, [r5, #12]
 800610c:	065b      	lsls	r3, r3, #25
 800610e:	f53f af2d 	bmi.w	8005f6c <_svfiprintf_r+0x28>
 8006112:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006114:	b01d      	add	sp, #116	; 0x74
 8006116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611a:	ab03      	add	r3, sp, #12
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	462a      	mov	r2, r5
 8006120:	4638      	mov	r0, r7
 8006122:	4b06      	ldr	r3, [pc, #24]	; (800613c <_svfiprintf_r+0x1f8>)
 8006124:	a904      	add	r1, sp, #16
 8006126:	f000 f87d 	bl	8006224 <_printf_i>
 800612a:	e7eb      	b.n	8006104 <_svfiprintf_r+0x1c0>
 800612c:	08006930 	.word	0x08006930
 8006130:	08006936 	.word	0x08006936
 8006134:	0800693a 	.word	0x0800693a
 8006138:	00000000 	.word	0x00000000
 800613c:	08005e91 	.word	0x08005e91

08006140 <_printf_common>:
 8006140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006144:	4616      	mov	r6, r2
 8006146:	4699      	mov	r9, r3
 8006148:	688a      	ldr	r2, [r1, #8]
 800614a:	690b      	ldr	r3, [r1, #16]
 800614c:	4607      	mov	r7, r0
 800614e:	4293      	cmp	r3, r2
 8006150:	bfb8      	it	lt
 8006152:	4613      	movlt	r3, r2
 8006154:	6033      	str	r3, [r6, #0]
 8006156:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800615a:	460c      	mov	r4, r1
 800615c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006160:	b10a      	cbz	r2, 8006166 <_printf_common+0x26>
 8006162:	3301      	adds	r3, #1
 8006164:	6033      	str	r3, [r6, #0]
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	0699      	lsls	r1, r3, #26
 800616a:	bf42      	ittt	mi
 800616c:	6833      	ldrmi	r3, [r6, #0]
 800616e:	3302      	addmi	r3, #2
 8006170:	6033      	strmi	r3, [r6, #0]
 8006172:	6825      	ldr	r5, [r4, #0]
 8006174:	f015 0506 	ands.w	r5, r5, #6
 8006178:	d106      	bne.n	8006188 <_printf_common+0x48>
 800617a:	f104 0a19 	add.w	sl, r4, #25
 800617e:	68e3      	ldr	r3, [r4, #12]
 8006180:	6832      	ldr	r2, [r6, #0]
 8006182:	1a9b      	subs	r3, r3, r2
 8006184:	42ab      	cmp	r3, r5
 8006186:	dc2b      	bgt.n	80061e0 <_printf_common+0xa0>
 8006188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800618c:	1e13      	subs	r3, r2, #0
 800618e:	6822      	ldr	r2, [r4, #0]
 8006190:	bf18      	it	ne
 8006192:	2301      	movne	r3, #1
 8006194:	0692      	lsls	r2, r2, #26
 8006196:	d430      	bmi.n	80061fa <_printf_common+0xba>
 8006198:	4649      	mov	r1, r9
 800619a:	4638      	mov	r0, r7
 800619c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061a0:	47c0      	blx	r8
 80061a2:	3001      	adds	r0, #1
 80061a4:	d023      	beq.n	80061ee <_printf_common+0xae>
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	6922      	ldr	r2, [r4, #16]
 80061aa:	f003 0306 	and.w	r3, r3, #6
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	bf14      	ite	ne
 80061b2:	2500      	movne	r5, #0
 80061b4:	6833      	ldreq	r3, [r6, #0]
 80061b6:	f04f 0600 	mov.w	r6, #0
 80061ba:	bf08      	it	eq
 80061bc:	68e5      	ldreq	r5, [r4, #12]
 80061be:	f104 041a 	add.w	r4, r4, #26
 80061c2:	bf08      	it	eq
 80061c4:	1aed      	subeq	r5, r5, r3
 80061c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80061ca:	bf08      	it	eq
 80061cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061d0:	4293      	cmp	r3, r2
 80061d2:	bfc4      	itt	gt
 80061d4:	1a9b      	subgt	r3, r3, r2
 80061d6:	18ed      	addgt	r5, r5, r3
 80061d8:	42b5      	cmp	r5, r6
 80061da:	d11a      	bne.n	8006212 <_printf_common+0xd2>
 80061dc:	2000      	movs	r0, #0
 80061de:	e008      	b.n	80061f2 <_printf_common+0xb2>
 80061e0:	2301      	movs	r3, #1
 80061e2:	4652      	mov	r2, sl
 80061e4:	4649      	mov	r1, r9
 80061e6:	4638      	mov	r0, r7
 80061e8:	47c0      	blx	r8
 80061ea:	3001      	adds	r0, #1
 80061ec:	d103      	bne.n	80061f6 <_printf_common+0xb6>
 80061ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f6:	3501      	adds	r5, #1
 80061f8:	e7c1      	b.n	800617e <_printf_common+0x3e>
 80061fa:	2030      	movs	r0, #48	; 0x30
 80061fc:	18e1      	adds	r1, r4, r3
 80061fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006208:	4422      	add	r2, r4
 800620a:	3302      	adds	r3, #2
 800620c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006210:	e7c2      	b.n	8006198 <_printf_common+0x58>
 8006212:	2301      	movs	r3, #1
 8006214:	4622      	mov	r2, r4
 8006216:	4649      	mov	r1, r9
 8006218:	4638      	mov	r0, r7
 800621a:	47c0      	blx	r8
 800621c:	3001      	adds	r0, #1
 800621e:	d0e6      	beq.n	80061ee <_printf_common+0xae>
 8006220:	3601      	adds	r6, #1
 8006222:	e7d9      	b.n	80061d8 <_printf_common+0x98>

08006224 <_printf_i>:
 8006224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006228:	7e0f      	ldrb	r7, [r1, #24]
 800622a:	4691      	mov	r9, r2
 800622c:	2f78      	cmp	r7, #120	; 0x78
 800622e:	4680      	mov	r8, r0
 8006230:	460c      	mov	r4, r1
 8006232:	469a      	mov	sl, r3
 8006234:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006236:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800623a:	d807      	bhi.n	800624c <_printf_i+0x28>
 800623c:	2f62      	cmp	r7, #98	; 0x62
 800623e:	d80a      	bhi.n	8006256 <_printf_i+0x32>
 8006240:	2f00      	cmp	r7, #0
 8006242:	f000 80d5 	beq.w	80063f0 <_printf_i+0x1cc>
 8006246:	2f58      	cmp	r7, #88	; 0x58
 8006248:	f000 80c1 	beq.w	80063ce <_printf_i+0x1aa>
 800624c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006254:	e03a      	b.n	80062cc <_printf_i+0xa8>
 8006256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800625a:	2b15      	cmp	r3, #21
 800625c:	d8f6      	bhi.n	800624c <_printf_i+0x28>
 800625e:	a101      	add	r1, pc, #4	; (adr r1, 8006264 <_printf_i+0x40>)
 8006260:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006264:	080062bd 	.word	0x080062bd
 8006268:	080062d1 	.word	0x080062d1
 800626c:	0800624d 	.word	0x0800624d
 8006270:	0800624d 	.word	0x0800624d
 8006274:	0800624d 	.word	0x0800624d
 8006278:	0800624d 	.word	0x0800624d
 800627c:	080062d1 	.word	0x080062d1
 8006280:	0800624d 	.word	0x0800624d
 8006284:	0800624d 	.word	0x0800624d
 8006288:	0800624d 	.word	0x0800624d
 800628c:	0800624d 	.word	0x0800624d
 8006290:	080063d7 	.word	0x080063d7
 8006294:	080062fd 	.word	0x080062fd
 8006298:	08006391 	.word	0x08006391
 800629c:	0800624d 	.word	0x0800624d
 80062a0:	0800624d 	.word	0x0800624d
 80062a4:	080063f9 	.word	0x080063f9
 80062a8:	0800624d 	.word	0x0800624d
 80062ac:	080062fd 	.word	0x080062fd
 80062b0:	0800624d 	.word	0x0800624d
 80062b4:	0800624d 	.word	0x0800624d
 80062b8:	08006399 	.word	0x08006399
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	1d1a      	adds	r2, r3, #4
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	602a      	str	r2, [r5, #0]
 80062c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062cc:	2301      	movs	r3, #1
 80062ce:	e0a0      	b.n	8006412 <_printf_i+0x1ee>
 80062d0:	6820      	ldr	r0, [r4, #0]
 80062d2:	682b      	ldr	r3, [r5, #0]
 80062d4:	0607      	lsls	r7, r0, #24
 80062d6:	f103 0104 	add.w	r1, r3, #4
 80062da:	6029      	str	r1, [r5, #0]
 80062dc:	d501      	bpl.n	80062e2 <_printf_i+0xbe>
 80062de:	681e      	ldr	r6, [r3, #0]
 80062e0:	e003      	b.n	80062ea <_printf_i+0xc6>
 80062e2:	0646      	lsls	r6, r0, #25
 80062e4:	d5fb      	bpl.n	80062de <_printf_i+0xba>
 80062e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80062ea:	2e00      	cmp	r6, #0
 80062ec:	da03      	bge.n	80062f6 <_printf_i+0xd2>
 80062ee:	232d      	movs	r3, #45	; 0x2d
 80062f0:	4276      	negs	r6, r6
 80062f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062f6:	230a      	movs	r3, #10
 80062f8:	4859      	ldr	r0, [pc, #356]	; (8006460 <_printf_i+0x23c>)
 80062fa:	e012      	b.n	8006322 <_printf_i+0xfe>
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	6820      	ldr	r0, [r4, #0]
 8006300:	1d19      	adds	r1, r3, #4
 8006302:	6029      	str	r1, [r5, #0]
 8006304:	0605      	lsls	r5, r0, #24
 8006306:	d501      	bpl.n	800630c <_printf_i+0xe8>
 8006308:	681e      	ldr	r6, [r3, #0]
 800630a:	e002      	b.n	8006312 <_printf_i+0xee>
 800630c:	0641      	lsls	r1, r0, #25
 800630e:	d5fb      	bpl.n	8006308 <_printf_i+0xe4>
 8006310:	881e      	ldrh	r6, [r3, #0]
 8006312:	2f6f      	cmp	r7, #111	; 0x6f
 8006314:	bf0c      	ite	eq
 8006316:	2308      	moveq	r3, #8
 8006318:	230a      	movne	r3, #10
 800631a:	4851      	ldr	r0, [pc, #324]	; (8006460 <_printf_i+0x23c>)
 800631c:	2100      	movs	r1, #0
 800631e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006322:	6865      	ldr	r5, [r4, #4]
 8006324:	2d00      	cmp	r5, #0
 8006326:	bfa8      	it	ge
 8006328:	6821      	ldrge	r1, [r4, #0]
 800632a:	60a5      	str	r5, [r4, #8]
 800632c:	bfa4      	itt	ge
 800632e:	f021 0104 	bicge.w	r1, r1, #4
 8006332:	6021      	strge	r1, [r4, #0]
 8006334:	b90e      	cbnz	r6, 800633a <_printf_i+0x116>
 8006336:	2d00      	cmp	r5, #0
 8006338:	d04b      	beq.n	80063d2 <_printf_i+0x1ae>
 800633a:	4615      	mov	r5, r2
 800633c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006340:	fb03 6711 	mls	r7, r3, r1, r6
 8006344:	5dc7      	ldrb	r7, [r0, r7]
 8006346:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800634a:	4637      	mov	r7, r6
 800634c:	42bb      	cmp	r3, r7
 800634e:	460e      	mov	r6, r1
 8006350:	d9f4      	bls.n	800633c <_printf_i+0x118>
 8006352:	2b08      	cmp	r3, #8
 8006354:	d10b      	bne.n	800636e <_printf_i+0x14a>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	07de      	lsls	r6, r3, #31
 800635a:	d508      	bpl.n	800636e <_printf_i+0x14a>
 800635c:	6923      	ldr	r3, [r4, #16]
 800635e:	6861      	ldr	r1, [r4, #4]
 8006360:	4299      	cmp	r1, r3
 8006362:	bfde      	ittt	le
 8006364:	2330      	movle	r3, #48	; 0x30
 8006366:	f805 3c01 	strble.w	r3, [r5, #-1]
 800636a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800636e:	1b52      	subs	r2, r2, r5
 8006370:	6122      	str	r2, [r4, #16]
 8006372:	464b      	mov	r3, r9
 8006374:	4621      	mov	r1, r4
 8006376:	4640      	mov	r0, r8
 8006378:	f8cd a000 	str.w	sl, [sp]
 800637c:	aa03      	add	r2, sp, #12
 800637e:	f7ff fedf 	bl	8006140 <_printf_common>
 8006382:	3001      	adds	r0, #1
 8006384:	d14a      	bne.n	800641c <_printf_i+0x1f8>
 8006386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800638a:	b004      	add	sp, #16
 800638c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	f043 0320 	orr.w	r3, r3, #32
 8006396:	6023      	str	r3, [r4, #0]
 8006398:	2778      	movs	r7, #120	; 0x78
 800639a:	4832      	ldr	r0, [pc, #200]	; (8006464 <_printf_i+0x240>)
 800639c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	6829      	ldr	r1, [r5, #0]
 80063a4:	061f      	lsls	r7, r3, #24
 80063a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80063aa:	d402      	bmi.n	80063b2 <_printf_i+0x18e>
 80063ac:	065f      	lsls	r7, r3, #25
 80063ae:	bf48      	it	mi
 80063b0:	b2b6      	uxthmi	r6, r6
 80063b2:	07df      	lsls	r7, r3, #31
 80063b4:	bf48      	it	mi
 80063b6:	f043 0320 	orrmi.w	r3, r3, #32
 80063ba:	6029      	str	r1, [r5, #0]
 80063bc:	bf48      	it	mi
 80063be:	6023      	strmi	r3, [r4, #0]
 80063c0:	b91e      	cbnz	r6, 80063ca <_printf_i+0x1a6>
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	f023 0320 	bic.w	r3, r3, #32
 80063c8:	6023      	str	r3, [r4, #0]
 80063ca:	2310      	movs	r3, #16
 80063cc:	e7a6      	b.n	800631c <_printf_i+0xf8>
 80063ce:	4824      	ldr	r0, [pc, #144]	; (8006460 <_printf_i+0x23c>)
 80063d0:	e7e4      	b.n	800639c <_printf_i+0x178>
 80063d2:	4615      	mov	r5, r2
 80063d4:	e7bd      	b.n	8006352 <_printf_i+0x12e>
 80063d6:	682b      	ldr	r3, [r5, #0]
 80063d8:	6826      	ldr	r6, [r4, #0]
 80063da:	1d18      	adds	r0, r3, #4
 80063dc:	6961      	ldr	r1, [r4, #20]
 80063de:	6028      	str	r0, [r5, #0]
 80063e0:	0635      	lsls	r5, r6, #24
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	d501      	bpl.n	80063ea <_printf_i+0x1c6>
 80063e6:	6019      	str	r1, [r3, #0]
 80063e8:	e002      	b.n	80063f0 <_printf_i+0x1cc>
 80063ea:	0670      	lsls	r0, r6, #25
 80063ec:	d5fb      	bpl.n	80063e6 <_printf_i+0x1c2>
 80063ee:	8019      	strh	r1, [r3, #0]
 80063f0:	2300      	movs	r3, #0
 80063f2:	4615      	mov	r5, r2
 80063f4:	6123      	str	r3, [r4, #16]
 80063f6:	e7bc      	b.n	8006372 <_printf_i+0x14e>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	2100      	movs	r1, #0
 80063fc:	1d1a      	adds	r2, r3, #4
 80063fe:	602a      	str	r2, [r5, #0]
 8006400:	681d      	ldr	r5, [r3, #0]
 8006402:	6862      	ldr	r2, [r4, #4]
 8006404:	4628      	mov	r0, r5
 8006406:	f000 f977 	bl	80066f8 <memchr>
 800640a:	b108      	cbz	r0, 8006410 <_printf_i+0x1ec>
 800640c:	1b40      	subs	r0, r0, r5
 800640e:	6060      	str	r0, [r4, #4]
 8006410:	6863      	ldr	r3, [r4, #4]
 8006412:	6123      	str	r3, [r4, #16]
 8006414:	2300      	movs	r3, #0
 8006416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800641a:	e7aa      	b.n	8006372 <_printf_i+0x14e>
 800641c:	462a      	mov	r2, r5
 800641e:	4649      	mov	r1, r9
 8006420:	4640      	mov	r0, r8
 8006422:	6923      	ldr	r3, [r4, #16]
 8006424:	47d0      	blx	sl
 8006426:	3001      	adds	r0, #1
 8006428:	d0ad      	beq.n	8006386 <_printf_i+0x162>
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	079b      	lsls	r3, r3, #30
 800642e:	d413      	bmi.n	8006458 <_printf_i+0x234>
 8006430:	68e0      	ldr	r0, [r4, #12]
 8006432:	9b03      	ldr	r3, [sp, #12]
 8006434:	4298      	cmp	r0, r3
 8006436:	bfb8      	it	lt
 8006438:	4618      	movlt	r0, r3
 800643a:	e7a6      	b.n	800638a <_printf_i+0x166>
 800643c:	2301      	movs	r3, #1
 800643e:	4632      	mov	r2, r6
 8006440:	4649      	mov	r1, r9
 8006442:	4640      	mov	r0, r8
 8006444:	47d0      	blx	sl
 8006446:	3001      	adds	r0, #1
 8006448:	d09d      	beq.n	8006386 <_printf_i+0x162>
 800644a:	3501      	adds	r5, #1
 800644c:	68e3      	ldr	r3, [r4, #12]
 800644e:	9903      	ldr	r1, [sp, #12]
 8006450:	1a5b      	subs	r3, r3, r1
 8006452:	42ab      	cmp	r3, r5
 8006454:	dcf2      	bgt.n	800643c <_printf_i+0x218>
 8006456:	e7eb      	b.n	8006430 <_printf_i+0x20c>
 8006458:	2500      	movs	r5, #0
 800645a:	f104 0619 	add.w	r6, r4, #25
 800645e:	e7f5      	b.n	800644c <_printf_i+0x228>
 8006460:	08006941 	.word	0x08006941
 8006464:	08006952 	.word	0x08006952

08006468 <__sflush_r>:
 8006468:	898a      	ldrh	r2, [r1, #12]
 800646a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646c:	4605      	mov	r5, r0
 800646e:	0710      	lsls	r0, r2, #28
 8006470:	460c      	mov	r4, r1
 8006472:	d457      	bmi.n	8006524 <__sflush_r+0xbc>
 8006474:	684b      	ldr	r3, [r1, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	dc04      	bgt.n	8006484 <__sflush_r+0x1c>
 800647a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800647c:	2b00      	cmp	r3, #0
 800647e:	dc01      	bgt.n	8006484 <__sflush_r+0x1c>
 8006480:	2000      	movs	r0, #0
 8006482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006484:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006486:	2e00      	cmp	r6, #0
 8006488:	d0fa      	beq.n	8006480 <__sflush_r+0x18>
 800648a:	2300      	movs	r3, #0
 800648c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006490:	682f      	ldr	r7, [r5, #0]
 8006492:	6a21      	ldr	r1, [r4, #32]
 8006494:	602b      	str	r3, [r5, #0]
 8006496:	d032      	beq.n	80064fe <__sflush_r+0x96>
 8006498:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800649a:	89a3      	ldrh	r3, [r4, #12]
 800649c:	075a      	lsls	r2, r3, #29
 800649e:	d505      	bpl.n	80064ac <__sflush_r+0x44>
 80064a0:	6863      	ldr	r3, [r4, #4]
 80064a2:	1ac0      	subs	r0, r0, r3
 80064a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064a6:	b10b      	cbz	r3, 80064ac <__sflush_r+0x44>
 80064a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064aa:	1ac0      	subs	r0, r0, r3
 80064ac:	2300      	movs	r3, #0
 80064ae:	4602      	mov	r2, r0
 80064b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064b2:	4628      	mov	r0, r5
 80064b4:	6a21      	ldr	r1, [r4, #32]
 80064b6:	47b0      	blx	r6
 80064b8:	1c43      	adds	r3, r0, #1
 80064ba:	89a3      	ldrh	r3, [r4, #12]
 80064bc:	d106      	bne.n	80064cc <__sflush_r+0x64>
 80064be:	6829      	ldr	r1, [r5, #0]
 80064c0:	291d      	cmp	r1, #29
 80064c2:	d82b      	bhi.n	800651c <__sflush_r+0xb4>
 80064c4:	4a28      	ldr	r2, [pc, #160]	; (8006568 <__sflush_r+0x100>)
 80064c6:	410a      	asrs	r2, r1
 80064c8:	07d6      	lsls	r6, r2, #31
 80064ca:	d427      	bmi.n	800651c <__sflush_r+0xb4>
 80064cc:	2200      	movs	r2, #0
 80064ce:	6062      	str	r2, [r4, #4]
 80064d0:	6922      	ldr	r2, [r4, #16]
 80064d2:	04d9      	lsls	r1, r3, #19
 80064d4:	6022      	str	r2, [r4, #0]
 80064d6:	d504      	bpl.n	80064e2 <__sflush_r+0x7a>
 80064d8:	1c42      	adds	r2, r0, #1
 80064da:	d101      	bne.n	80064e0 <__sflush_r+0x78>
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	b903      	cbnz	r3, 80064e2 <__sflush_r+0x7a>
 80064e0:	6560      	str	r0, [r4, #84]	; 0x54
 80064e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064e4:	602f      	str	r7, [r5, #0]
 80064e6:	2900      	cmp	r1, #0
 80064e8:	d0ca      	beq.n	8006480 <__sflush_r+0x18>
 80064ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064ee:	4299      	cmp	r1, r3
 80064f0:	d002      	beq.n	80064f8 <__sflush_r+0x90>
 80064f2:	4628      	mov	r0, r5
 80064f4:	f7ff fc84 	bl	8005e00 <_free_r>
 80064f8:	2000      	movs	r0, #0
 80064fa:	6360      	str	r0, [r4, #52]	; 0x34
 80064fc:	e7c1      	b.n	8006482 <__sflush_r+0x1a>
 80064fe:	2301      	movs	r3, #1
 8006500:	4628      	mov	r0, r5
 8006502:	47b0      	blx	r6
 8006504:	1c41      	adds	r1, r0, #1
 8006506:	d1c8      	bne.n	800649a <__sflush_r+0x32>
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0c5      	beq.n	800649a <__sflush_r+0x32>
 800650e:	2b1d      	cmp	r3, #29
 8006510:	d001      	beq.n	8006516 <__sflush_r+0xae>
 8006512:	2b16      	cmp	r3, #22
 8006514:	d101      	bne.n	800651a <__sflush_r+0xb2>
 8006516:	602f      	str	r7, [r5, #0]
 8006518:	e7b2      	b.n	8006480 <__sflush_r+0x18>
 800651a:	89a3      	ldrh	r3, [r4, #12]
 800651c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006520:	81a3      	strh	r3, [r4, #12]
 8006522:	e7ae      	b.n	8006482 <__sflush_r+0x1a>
 8006524:	690f      	ldr	r7, [r1, #16]
 8006526:	2f00      	cmp	r7, #0
 8006528:	d0aa      	beq.n	8006480 <__sflush_r+0x18>
 800652a:	0793      	lsls	r3, r2, #30
 800652c:	bf18      	it	ne
 800652e:	2300      	movne	r3, #0
 8006530:	680e      	ldr	r6, [r1, #0]
 8006532:	bf08      	it	eq
 8006534:	694b      	ldreq	r3, [r1, #20]
 8006536:	1bf6      	subs	r6, r6, r7
 8006538:	600f      	str	r7, [r1, #0]
 800653a:	608b      	str	r3, [r1, #8]
 800653c:	2e00      	cmp	r6, #0
 800653e:	dd9f      	ble.n	8006480 <__sflush_r+0x18>
 8006540:	4633      	mov	r3, r6
 8006542:	463a      	mov	r2, r7
 8006544:	4628      	mov	r0, r5
 8006546:	6a21      	ldr	r1, [r4, #32]
 8006548:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800654c:	47e0      	blx	ip
 800654e:	2800      	cmp	r0, #0
 8006550:	dc06      	bgt.n	8006560 <__sflush_r+0xf8>
 8006552:	89a3      	ldrh	r3, [r4, #12]
 8006554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800655c:	81a3      	strh	r3, [r4, #12]
 800655e:	e790      	b.n	8006482 <__sflush_r+0x1a>
 8006560:	4407      	add	r7, r0
 8006562:	1a36      	subs	r6, r6, r0
 8006564:	e7ea      	b.n	800653c <__sflush_r+0xd4>
 8006566:	bf00      	nop
 8006568:	dfbffffe 	.word	0xdfbffffe

0800656c <_fflush_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	690b      	ldr	r3, [r1, #16]
 8006570:	4605      	mov	r5, r0
 8006572:	460c      	mov	r4, r1
 8006574:	b913      	cbnz	r3, 800657c <_fflush_r+0x10>
 8006576:	2500      	movs	r5, #0
 8006578:	4628      	mov	r0, r5
 800657a:	bd38      	pop	{r3, r4, r5, pc}
 800657c:	b118      	cbz	r0, 8006586 <_fflush_r+0x1a>
 800657e:	6a03      	ldr	r3, [r0, #32]
 8006580:	b90b      	cbnz	r3, 8006586 <_fflush_r+0x1a>
 8006582:	f7ff f9bb 	bl	80058fc <__sinit>
 8006586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0f3      	beq.n	8006576 <_fflush_r+0xa>
 800658e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006590:	07d0      	lsls	r0, r2, #31
 8006592:	d404      	bmi.n	800659e <_fflush_r+0x32>
 8006594:	0599      	lsls	r1, r3, #22
 8006596:	d402      	bmi.n	800659e <_fflush_r+0x32>
 8006598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800659a:	f7ff fc20 	bl	8005dde <__retarget_lock_acquire_recursive>
 800659e:	4628      	mov	r0, r5
 80065a0:	4621      	mov	r1, r4
 80065a2:	f7ff ff61 	bl	8006468 <__sflush_r>
 80065a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065a8:	4605      	mov	r5, r0
 80065aa:	07da      	lsls	r2, r3, #31
 80065ac:	d4e4      	bmi.n	8006578 <_fflush_r+0xc>
 80065ae:	89a3      	ldrh	r3, [r4, #12]
 80065b0:	059b      	lsls	r3, r3, #22
 80065b2:	d4e1      	bmi.n	8006578 <_fflush_r+0xc>
 80065b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065b6:	f7ff fc13 	bl	8005de0 <__retarget_lock_release_recursive>
 80065ba:	e7dd      	b.n	8006578 <_fflush_r+0xc>

080065bc <__swhatbuf_r>:
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	460c      	mov	r4, r1
 80065c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c4:	4615      	mov	r5, r2
 80065c6:	2900      	cmp	r1, #0
 80065c8:	461e      	mov	r6, r3
 80065ca:	b096      	sub	sp, #88	; 0x58
 80065cc:	da0c      	bge.n	80065e8 <__swhatbuf_r+0x2c>
 80065ce:	89a3      	ldrh	r3, [r4, #12]
 80065d0:	2100      	movs	r1, #0
 80065d2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80065d6:	bf0c      	ite	eq
 80065d8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80065dc:	2340      	movne	r3, #64	; 0x40
 80065de:	2000      	movs	r0, #0
 80065e0:	6031      	str	r1, [r6, #0]
 80065e2:	602b      	str	r3, [r5, #0]
 80065e4:	b016      	add	sp, #88	; 0x58
 80065e6:	bd70      	pop	{r4, r5, r6, pc}
 80065e8:	466a      	mov	r2, sp
 80065ea:	f000 f863 	bl	80066b4 <_fstat_r>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	dbed      	blt.n	80065ce <__swhatbuf_r+0x12>
 80065f2:	9901      	ldr	r1, [sp, #4]
 80065f4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80065f8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80065fc:	4259      	negs	r1, r3
 80065fe:	4159      	adcs	r1, r3
 8006600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006604:	e7eb      	b.n	80065de <__swhatbuf_r+0x22>

08006606 <__smakebuf_r>:
 8006606:	898b      	ldrh	r3, [r1, #12]
 8006608:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800660a:	079d      	lsls	r5, r3, #30
 800660c:	4606      	mov	r6, r0
 800660e:	460c      	mov	r4, r1
 8006610:	d507      	bpl.n	8006622 <__smakebuf_r+0x1c>
 8006612:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006616:	6023      	str	r3, [r4, #0]
 8006618:	6123      	str	r3, [r4, #16]
 800661a:	2301      	movs	r3, #1
 800661c:	6163      	str	r3, [r4, #20]
 800661e:	b002      	add	sp, #8
 8006620:	bd70      	pop	{r4, r5, r6, pc}
 8006622:	466a      	mov	r2, sp
 8006624:	ab01      	add	r3, sp, #4
 8006626:	f7ff ffc9 	bl	80065bc <__swhatbuf_r>
 800662a:	9900      	ldr	r1, [sp, #0]
 800662c:	4605      	mov	r5, r0
 800662e:	4630      	mov	r0, r6
 8006630:	f7ff f84c 	bl	80056cc <_malloc_r>
 8006634:	b948      	cbnz	r0, 800664a <__smakebuf_r+0x44>
 8006636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800663a:	059a      	lsls	r2, r3, #22
 800663c:	d4ef      	bmi.n	800661e <__smakebuf_r+0x18>
 800663e:	f023 0303 	bic.w	r3, r3, #3
 8006642:	f043 0302 	orr.w	r3, r3, #2
 8006646:	81a3      	strh	r3, [r4, #12]
 8006648:	e7e3      	b.n	8006612 <__smakebuf_r+0xc>
 800664a:	89a3      	ldrh	r3, [r4, #12]
 800664c:	6020      	str	r0, [r4, #0]
 800664e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006652:	81a3      	strh	r3, [r4, #12]
 8006654:	9b00      	ldr	r3, [sp, #0]
 8006656:	6120      	str	r0, [r4, #16]
 8006658:	6163      	str	r3, [r4, #20]
 800665a:	9b01      	ldr	r3, [sp, #4]
 800665c:	b15b      	cbz	r3, 8006676 <__smakebuf_r+0x70>
 800665e:	4630      	mov	r0, r6
 8006660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006664:	f000 f838 	bl	80066d8 <_isatty_r>
 8006668:	b128      	cbz	r0, 8006676 <__smakebuf_r+0x70>
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	f023 0303 	bic.w	r3, r3, #3
 8006670:	f043 0301 	orr.w	r3, r3, #1
 8006674:	81a3      	strh	r3, [r4, #12]
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	431d      	orrs	r5, r3
 800667a:	81a5      	strh	r5, [r4, #12]
 800667c:	e7cf      	b.n	800661e <__smakebuf_r+0x18>

0800667e <memmove>:
 800667e:	4288      	cmp	r0, r1
 8006680:	b510      	push	{r4, lr}
 8006682:	eb01 0402 	add.w	r4, r1, r2
 8006686:	d902      	bls.n	800668e <memmove+0x10>
 8006688:	4284      	cmp	r4, r0
 800668a:	4623      	mov	r3, r4
 800668c:	d807      	bhi.n	800669e <memmove+0x20>
 800668e:	1e43      	subs	r3, r0, #1
 8006690:	42a1      	cmp	r1, r4
 8006692:	d008      	beq.n	80066a6 <memmove+0x28>
 8006694:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006698:	f803 2f01 	strb.w	r2, [r3, #1]!
 800669c:	e7f8      	b.n	8006690 <memmove+0x12>
 800669e:	4601      	mov	r1, r0
 80066a0:	4402      	add	r2, r0
 80066a2:	428a      	cmp	r2, r1
 80066a4:	d100      	bne.n	80066a8 <memmove+0x2a>
 80066a6:	bd10      	pop	{r4, pc}
 80066a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066b0:	e7f7      	b.n	80066a2 <memmove+0x24>
	...

080066b4 <_fstat_r>:
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	2300      	movs	r3, #0
 80066b8:	4d06      	ldr	r5, [pc, #24]	; (80066d4 <_fstat_r+0x20>)
 80066ba:	4604      	mov	r4, r0
 80066bc:	4608      	mov	r0, r1
 80066be:	4611      	mov	r1, r2
 80066c0:	602b      	str	r3, [r5, #0]
 80066c2:	f7fa fb16 	bl	8000cf2 <_fstat>
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	d102      	bne.n	80066d0 <_fstat_r+0x1c>
 80066ca:	682b      	ldr	r3, [r5, #0]
 80066cc:	b103      	cbz	r3, 80066d0 <_fstat_r+0x1c>
 80066ce:	6023      	str	r3, [r4, #0]
 80066d0:	bd38      	pop	{r3, r4, r5, pc}
 80066d2:	bf00      	nop
 80066d4:	200004b4 	.word	0x200004b4

080066d8 <_isatty_r>:
 80066d8:	b538      	push	{r3, r4, r5, lr}
 80066da:	2300      	movs	r3, #0
 80066dc:	4d05      	ldr	r5, [pc, #20]	; (80066f4 <_isatty_r+0x1c>)
 80066de:	4604      	mov	r4, r0
 80066e0:	4608      	mov	r0, r1
 80066e2:	602b      	str	r3, [r5, #0]
 80066e4:	f7fa fb14 	bl	8000d10 <_isatty>
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	d102      	bne.n	80066f2 <_isatty_r+0x1a>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	b103      	cbz	r3, 80066f2 <_isatty_r+0x1a>
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	bd38      	pop	{r3, r4, r5, pc}
 80066f4:	200004b4 	.word	0x200004b4

080066f8 <memchr>:
 80066f8:	4603      	mov	r3, r0
 80066fa:	b510      	push	{r4, lr}
 80066fc:	b2c9      	uxtb	r1, r1
 80066fe:	4402      	add	r2, r0
 8006700:	4293      	cmp	r3, r2
 8006702:	4618      	mov	r0, r3
 8006704:	d101      	bne.n	800670a <memchr+0x12>
 8006706:	2000      	movs	r0, #0
 8006708:	e003      	b.n	8006712 <memchr+0x1a>
 800670a:	7804      	ldrb	r4, [r0, #0]
 800670c:	3301      	adds	r3, #1
 800670e:	428c      	cmp	r4, r1
 8006710:	d1f6      	bne.n	8006700 <memchr+0x8>
 8006712:	bd10      	pop	{r4, pc}

08006714 <_realloc_r>:
 8006714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006718:	4680      	mov	r8, r0
 800671a:	4614      	mov	r4, r2
 800671c:	460e      	mov	r6, r1
 800671e:	b921      	cbnz	r1, 800672a <_realloc_r+0x16>
 8006720:	4611      	mov	r1, r2
 8006722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006726:	f7fe bfd1 	b.w	80056cc <_malloc_r>
 800672a:	b92a      	cbnz	r2, 8006738 <_realloc_r+0x24>
 800672c:	f7ff fb68 	bl	8005e00 <_free_r>
 8006730:	4625      	mov	r5, r4
 8006732:	4628      	mov	r0, r5
 8006734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006738:	f000 f81b 	bl	8006772 <_malloc_usable_size_r>
 800673c:	4284      	cmp	r4, r0
 800673e:	4607      	mov	r7, r0
 8006740:	d802      	bhi.n	8006748 <_realloc_r+0x34>
 8006742:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006746:	d812      	bhi.n	800676e <_realloc_r+0x5a>
 8006748:	4621      	mov	r1, r4
 800674a:	4640      	mov	r0, r8
 800674c:	f7fe ffbe 	bl	80056cc <_malloc_r>
 8006750:	4605      	mov	r5, r0
 8006752:	2800      	cmp	r0, #0
 8006754:	d0ed      	beq.n	8006732 <_realloc_r+0x1e>
 8006756:	42bc      	cmp	r4, r7
 8006758:	4622      	mov	r2, r4
 800675a:	4631      	mov	r1, r6
 800675c:	bf28      	it	cs
 800675e:	463a      	movcs	r2, r7
 8006760:	f7ff fb3f 	bl	8005de2 <memcpy>
 8006764:	4631      	mov	r1, r6
 8006766:	4640      	mov	r0, r8
 8006768:	f7ff fb4a 	bl	8005e00 <_free_r>
 800676c:	e7e1      	b.n	8006732 <_realloc_r+0x1e>
 800676e:	4635      	mov	r5, r6
 8006770:	e7df      	b.n	8006732 <_realloc_r+0x1e>

08006772 <_malloc_usable_size_r>:
 8006772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006776:	1f18      	subs	r0, r3, #4
 8006778:	2b00      	cmp	r3, #0
 800677a:	bfbc      	itt	lt
 800677c:	580b      	ldrlt	r3, [r1, r0]
 800677e:	18c0      	addlt	r0, r0, r3
 8006780:	4770      	bx	lr
	...

08006784 <_init>:
 8006784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006786:	bf00      	nop
 8006788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678a:	bc08      	pop	{r3}
 800678c:	469e      	mov	lr, r3
 800678e:	4770      	bx	lr

08006790 <_fini>:
 8006790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006792:	bf00      	nop
 8006794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006796:	bc08      	pop	{r3}
 8006798:	469e      	mov	lr, r3
 800679a:	4770      	bx	lr
